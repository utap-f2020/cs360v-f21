
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 60 23 04 80 	movabs $0x8004236038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 60 23 04 80 	movabs $0x8004236000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 67 23 04 80 	movabs $0x8004236760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 1d 83 21 04 80 	movabs $0x800421831d,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 00 72 04 80 	movabs $0x8004720010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 70 d5 4d 04 80 	movabs $0x80044dd570,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf 70 d5 4d 04 80 	movabs $0x80044dd570,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 9a 11 20 04 80 	movabs $0x800420119a,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf 40 ec 21 04 80 	movabs $0x800421ec40,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 00 72 04 80 	movabs $0x8004720010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 b2 69 21 04 80 	movabs $0x80042169b2,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 d5 6d 04 80 	movabs $0x80046dd5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 31 26 20 04 80 	movabs $0x8004202631,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 61 7f 20 04 80 	movabs $0x8004207f61,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 ef 9d 20 04 80 	movabs $0x8004209def,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 3d 79 21 04 80 	movabs $0x800421793d,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 9b 7d 21 04 80 	movabs $0x8004217d9b,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 77 99 20 04 80 	movabs $0x8004209977,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 b8 97 21 04 80 	movabs $0x80042197b8,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 7c 97 21 04 80 	movabs $0x800421977c,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 fc 01 20 04 80 	movabs $0x80042001fc,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf 48 03 2c 04 80 	movabs $0x80042c0348,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ce:	48 bf 30 88 4a 04 80 	movabs $0x80044a8830,%rdi
  80042001d5:	00 00 00 
  80042001d8:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001df:	00 00 00 
  80042001e2:	ff d0                	callq  *%rax
  80042001e4:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax

00000080042001fc <boot_aps>:
  80042001fc:	55                   	push   %rbp
  80042001fd:	48 89 e5             	mov    %rsp,%rbp
  8004200200:	48 83 ec 30          	sub    $0x30,%rsp
  8004200204:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  800420020b:	00 
  800420020c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200210:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200214:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200217:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420021a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004200221:	00 00 00 
  8004200224:	48 8b 00             	mov    (%rax),%rax
  8004200227:	48 39 c2             	cmp    %rax,%rdx
  800420022a:	72 32                	jb     800420025e <boot_aps+0x62>
  800420022c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200230:	48 89 c1             	mov    %rax,%rcx
  8004200233:	48 ba 60 ec 21 04 80 	movabs $0x800421ec60,%rdx
  800420023a:	00 00 00 
  800420023d:	be 01 01 00 00       	mov    $0x101,%esi
  8004200242:	48 bf 83 ec 21 04 80 	movabs $0x800421ec83,%rdi
  8004200249:	00 00 00 
  800420024c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200251:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200258:	00 00 00 
  800420025b:	41 ff d0             	callq  *%r8
  800420025e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200265:	00 00 00 
  8004200268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420026c:	48 01 d0             	add    %rdx,%rax
  800420026f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200273:	48 ba 66 74 21 04 80 	movabs $0x8004217466,%rdx
  800420027a:	00 00 00 
  800420027d:	48 b8 80 73 21 04 80 	movabs $0x8004217380,%rax
  8004200284:	00 00 00 
  8004200287:	48 29 c2             	sub    %rax,%rdx
  800420028a:	48 89 d0             	mov    %rdx,%rax
  800420028d:	48 89 c2             	mov    %rax,%rdx
  8004200290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200294:	48 be 80 73 21 04 80 	movabs $0x8004217380,%rsi
  800420029b:	00 00 00 
  800420029e:	48 89 c7             	mov    %rax,%rdi
  80042002a1:	48 b8 1d 10 21 04 80 	movabs $0x800421101d,%rax
  80042002a8:	00 00 00 
  80042002ab:	ff d0                	callq  *%rax
  80042002ad:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042002b4:	00 00 00 
  80042002b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002bb:	e9 0e 01 00 00       	jmpq   80042003ce <boot_aps+0x1d2>
  80042002c0:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042002c7:	00 00 00 
  80042002ca:	ff d0                	callq  *%rax
  80042002cc:	48 98                	cltq   
  80042002ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042002d2:	48 89 c2             	mov    %rax,%rdx
  80042002d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002d9:	48 01 c2             	add    %rax,%rdx
  80042002dc:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042002e3:	00 00 00 
  80042002e6:	48 01 d0             	add    %rdx,%rax
  80042002e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002ed:	75 05                	jne    80042002f4 <boot_aps+0xf8>
  80042002ef:	e9 d2 00 00 00       	jmpq   80042003c6 <boot_aps+0x1ca>
  80042002f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042002f8:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042002ff:	00 00 00 
  8004200302:	48 29 c2             	sub    %rax,%rdx
  8004200305:	48 89 d0             	mov    %rdx,%rax
  8004200308:	48 c1 f8 03          	sar    $0x3,%rax
  800420030c:	48 89 c2             	mov    %rax,%rdx
  800420030f:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200316:	f0 f0 f0 
  8004200319:	48 0f af c2          	imul   %rdx,%rax
  800420031d:	48 83 c0 01          	add    $0x1,%rax
  8004200321:	48 c1 e0 10          	shl    $0x10,%rax
  8004200325:	48 89 c2             	mov    %rax,%rdx
  8004200328:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  800420032f:	00 00 00 
  8004200332:	48 01 c2             	add    %rax,%rdx
  8004200335:	48 b8 e0 d5 6d 04 80 	movabs $0x80046dd5e0,%rax
  800420033c:	00 00 00 
  800420033f:	48 89 10             	mov    %rdx,(%rax)
  8004200342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420034a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200351:	00 00 00 
  8004200354:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200358:	77 32                	ja     800420038c <boot_aps+0x190>
  800420035a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420035e:	48 89 c1             	mov    %rax,%rcx
  8004200361:	48 ba 98 ec 21 04 80 	movabs $0x800421ec98,%rdx
  8004200368:	00 00 00 
  800420036b:	be 0b 01 00 00       	mov    $0x10b,%esi
  8004200370:	48 bf 83 ec 21 04 80 	movabs $0x800421ec83,%rdi
  8004200377:	00 00 00 
  800420037a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420037f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200386:	00 00 00 
  8004200389:	41 ff d0             	callq  *%r8
  800420038c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004200393:	ff ff ff 
  8004200396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420039a:	48 01 d0             	add    %rdx,%rax
  800420039d:	89 c2                	mov    %eax,%edx
  800420039f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003a3:	0f b6 00             	movzbl (%rax),%eax
  80042003a6:	0f b6 c0             	movzbl %al,%eax
  80042003a9:	89 d6                	mov    %edx,%esi
  80042003ab:	89 c7                	mov    %eax,%edi
  80042003ad:	48 b8 02 80 21 04 80 	movabs $0x8004218002,%rax
  80042003b4:	00 00 00 
  80042003b7:	ff d0                	callq  *%rax
  80042003b9:	90                   	nop
  80042003ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003be:	8b 40 04             	mov    0x4(%rax),%eax
  80042003c1:	83 f8 01             	cmp    $0x1,%eax
  80042003c4:	75 f4                	jne    80042003ba <boot_aps+0x1be>
  80042003c6:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003cd:	00 
  80042003ce:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  80042003d5:	00 00 00 
  80042003d8:	8b 00                	mov    (%rax),%eax
  80042003da:	48 98                	cltq   
  80042003dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042003e0:	48 89 c2             	mov    %rax,%rdx
  80042003e3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003e7:	48 01 c2             	add    %rax,%rdx
  80042003ea:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042003f1:	00 00 00 
  80042003f4:	48 01 d0             	add    %rdx,%rax
  80042003f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042003fb:	0f 87 bf fe ff ff    	ja     80042002c0 <boot_aps+0xc4>
  8004200401:	c9                   	leaveq 
  8004200402:	c3                   	retq   

0000008004200403 <mp_main>:
  8004200403:	55                   	push   %rbp
  8004200404:	48 89 e5             	mov    %rsp,%rbp
  8004200407:	48 83 ec 10          	sub    $0x10,%rsp
  800420040b:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  8004200412:	00 00 00 
  8004200415:	48 8b 00             	mov    (%rax),%rax
  8004200418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200420:	0f 22 d8             	mov    %rax,%cr3
  8004200423:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420042a:	00 00 00 
  800420042d:	ff d0                	callq  *%rax
  800420042f:	89 c6                	mov    %eax,%esi
  8004200431:	48 bf bc ec 21 04 80 	movabs $0x800421ecbc,%rdi
  8004200438:	00 00 00 
  800420043b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200440:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200447:	00 00 00 
  800420044a:	ff d2                	callq  *%rdx
  800420044c:	48 b8 9b 7d 21 04 80 	movabs $0x8004217d9b,%rax
  8004200453:	00 00 00 
  8004200456:	ff d0                	callq  *%rax
  8004200458:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 98                	cltq   
  800420047e:	48 c1 e0 03          	shl    $0x3,%rax
  8004200482:	48 89 c2             	mov    %rax,%rdx
  8004200485:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200489:	48 01 d0             	add    %rdx,%rax
  800420048c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004200493:	00 00 00 
  8004200496:	48 01 d0             	add    %rdx,%rax
  8004200499:	48 83 c0 04          	add    $0x4,%rax
  800420049d:	be 01 00 00 00       	mov    $0x1,%esi
  80042004a2:	48 89 c7             	mov    %rax,%rdi
  80042004a5:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004ac:	00 00 00 
  80042004af:	ff d0                	callq  *%rax
  80042004b1:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax

00000080042004c9 <_panic>:
  80042004c9:	55                   	push   %rbp
  80042004ca:	48 89 e5             	mov    %rsp,%rbp
  80042004cd:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004d4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004db:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004e8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004ef:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042004f6:	84 c0                	test   %al,%al
  80042004f8:	74 20                	je     800420051a <_panic+0x51>
  80042004fa:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042004fe:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200502:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200506:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420050a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420050e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200512:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200516:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420051a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200521:	48 b8 d8 d5 6d 04 80 	movabs $0x80046dd5d8,%rax
  8004200528:	00 00 00 
  800420052b:	48 8b 00             	mov    (%rax),%rax
  800420052e:	48 85 c0             	test   %rax,%rax
  8004200531:	74 05                	je     8004200538 <_panic+0x6f>
  8004200533:	e9 b5 00 00 00       	jmpq   80042005ed <_panic+0x124>
  8004200538:	48 b8 d8 d5 6d 04 80 	movabs $0x80046dd5d8,%rax
  800420053f:	00 00 00 
  8004200542:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200549:	48 89 10             	mov    %rdx,(%rax)
  800420054c:	fa                   	cli    
  800420054d:	fc                   	cld    
  800420054e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200555:	00 00 00 
  8004200558:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420055f:	00 00 00 
  8004200562:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420056d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200574:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420057b:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  800420058d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004200594:	89 c6                	mov    %eax,%esi
  8004200596:	48 bf d8 ec 21 04 80 	movabs $0x800421ecd8,%rdi
  800420059d:	00 00 00 
  80042005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005a5:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  80042005ac:	00 00 00 
  80042005af:	41 ff d0             	callq  *%r8
  80042005b2:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005c0:	48 89 d6             	mov    %rdx,%rsi
  80042005c3:	48 89 c7             	mov    %rax,%rdi
  80042005c6:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042005cd:	00 00 00 
  80042005d0:	ff d0                	callq  *%rax
  80042005d2:	48 bf fa ec 21 04 80 	movabs $0x800421ecfa,%rdi
  80042005d9:	00 00 00 
  80042005dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005e1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042005e8:	00 00 00 
  80042005eb:	ff d2                	callq  *%rdx
  80042005ed:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005f2:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  80042005f9:	00 00 00 
  80042005fc:	ff d0                	callq  *%rax
  80042005fe:	eb ed                	jmp    80042005ed <_panic+0x124>

0000008004200600 <_warn>:
  8004200600:	55                   	push   %rbp
  8004200601:	48 89 e5             	mov    %rsp,%rbp
  8004200604:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420060b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200612:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200618:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420061f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200626:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420062d:	84 c0                	test   %al,%al
  800420062f:	74 20                	je     8004200651 <_warn+0x51>
  8004200631:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200635:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200639:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420063d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200641:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200645:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200649:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420064d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200651:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200658:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420065f:	00 00 00 
  8004200662:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200669:	00 00 00 
  800420066c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200670:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200677:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420067e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200685:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800420068b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004200692:	48 89 c6             	mov    %rax,%rsi
  8004200695:	48 bf fc ec 21 04 80 	movabs $0x800421ecfc,%rdi
  800420069c:	00 00 00 
  800420069f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006a4:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042006ab:	00 00 00 
  80042006ae:	ff d1                	callq  *%rcx
  80042006b0:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006be:	48 89 d6             	mov    %rdx,%rsi
  80042006c1:	48 89 c7             	mov    %rax,%rdi
  80042006c4:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042006cb:	00 00 00 
  80042006ce:	ff d0                	callq  *%rax
  80042006d0:	48 bf fa ec 21 04 80 	movabs $0x800421ecfa,%rdi
  80042006d7:	00 00 00 
  80042006da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006df:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042006e6:	00 00 00 
  80042006e9:	ff d2                	callq  *%rdx
  80042006eb:	c9                   	leaveq 
  80042006ec:	c3                   	retq   

00000080042006ed <delay>:
  80042006ed:	55                   	push   %rbp
  80042006ee:	48 89 e5             	mov    %rsp,%rbp
  80042006f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042006f5:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042006ff:	89 c2                	mov    %eax,%edx
  8004200701:	ec                   	in     (%dx),%al
  8004200702:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200705:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  800420070c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420070f:	89 c2                	mov    %eax,%edx
  8004200711:	ec                   	in     (%dx),%al
  8004200712:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200715:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  800420071c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420071f:	89 c2                	mov    %eax,%edx
  8004200721:	ec                   	in     (%dx),%al
  8004200722:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200725:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  800420072c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420072f:	89 c2                	mov    %eax,%edx
  8004200731:	ec                   	in     (%dx),%al
  8004200732:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200735:	c9                   	leaveq 
  8004200736:	c3                   	retq   

0000008004200737 <serial_proc_data>:
  8004200737:	55                   	push   %rbp
  8004200738:	48 89 e5             	mov    %rsp,%rbp
  800420073b:	48 83 ec 10          	sub    $0x10,%rsp
  800420073f:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200746:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200749:	89 c2                	mov    %eax,%edx
  800420074b:	ec                   	in     (%dx),%al
  800420074c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420074f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200753:	0f b6 c0             	movzbl %al,%eax
  8004200756:	83 e0 01             	and    $0x1,%eax
  8004200759:	85 c0                	test   %eax,%eax
  800420075b:	75 07                	jne    8004200764 <serial_proc_data+0x2d>
  800420075d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200762:	eb 17                	jmp    800420077b <serial_proc_data+0x44>
  8004200764:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420076b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420076e:	89 c2                	mov    %eax,%edx
  8004200770:	ec                   	in     (%dx),%al
  8004200771:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200774:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200778:	0f b6 c0             	movzbl %al,%eax
  800420077b:	c9                   	leaveq 
  800420077c:	c3                   	retq   

000000800420077d <serial_intr>:
  800420077d:	55                   	push   %rbp
  800420077e:	48 89 e5             	mov    %rsp,%rbp
  8004200781:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  8004200788:	00 00 00 
  800420078b:	0f b6 00             	movzbl (%rax),%eax
  800420078e:	84 c0                	test   %al,%al
  8004200790:	74 16                	je     80042007a8 <serial_intr+0x2b>
  8004200792:	48 bf 37 07 20 04 80 	movabs $0x8004200737,%rdi
  8004200799:	00 00 00 
  800420079c:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  80042007a3:	00 00 00 
  80042007a6:	ff d0                	callq  *%rax
  80042007a8:	5d                   	pop    %rbp
  80042007a9:	c3                   	retq   

00000080042007aa <serial_putc>:
  80042007aa:	55                   	push   %rbp
  80042007ab:	48 89 e5             	mov    %rsp,%rbp
  80042007ae:	48 83 ec 28          	sub    $0x28,%rsp
  80042007b2:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007bc:	eb 10                	jmp    80042007ce <serial_putc+0x24>
  80042007be:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  80042007c5:	00 00 00 
  80042007c8:	ff d0                	callq  *%rax
  80042007ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007ce:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007d8:	89 c2                	mov    %eax,%edx
  80042007da:	ec                   	in     (%dx),%al
  80042007db:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007de:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007e2:	0f b6 c0             	movzbl %al,%eax
  80042007e5:	83 e0 20             	and    $0x20,%eax
  80042007e8:	85 c0                	test   %eax,%eax
  80042007ea:	75 09                	jne    80042007f5 <serial_putc+0x4b>
  80042007ec:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007f3:	7e c9                	jle    80042007be <serial_putc+0x14>
  80042007f5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042007f8:	0f b6 c0             	movzbl %al,%eax
  80042007fb:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  8004200802:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200805:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200809:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420080c:	ee                   	out    %al,(%dx)
  800420080d:	c9                   	leaveq 
  800420080e:	c3                   	retq   

000000800420080f <serial_init>:
  800420080f:	55                   	push   %rbp
  8004200810:	48 89 e5             	mov    %rsp,%rbp
  8004200813:	48 83 ec 50          	sub    $0x50,%rsp
  8004200817:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420081e:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  8004200822:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200826:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200829:	ee                   	out    %al,(%dx)
  800420082a:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  8004200831:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200835:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200839:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420083c:	ee                   	out    %al,(%dx)
  800420083d:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200844:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200848:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420084c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420084f:	ee                   	out    %al,(%dx)
  8004200850:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200857:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  800420085b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420085f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200862:	ee                   	out    %al,(%dx)
  8004200863:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  800420086a:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420086e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200872:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200875:	ee                   	out    %al,(%dx)
  8004200876:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  800420087d:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  8004200881:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200885:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200888:	ee                   	out    %al,(%dx)
  8004200889:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  8004200890:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  8004200894:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200898:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420089b:	ee                   	out    %al,(%dx)
  800420089c:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008a6:	89 c2                	mov    %eax,%edx
  80042008a8:	ec                   	in     (%dx),%al
  80042008a9:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008ac:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008b0:	3c ff                	cmp    $0xff,%al
  80042008b2:	0f 95 c2             	setne  %dl
  80042008b5:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  80042008bc:	00 00 00 
  80042008bf:	88 10                	mov    %dl,(%rax)
  80042008c1:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008cb:	89 c2                	mov    %eax,%edx
  80042008cd:	ec                   	in     (%dx),%al
  80042008ce:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008d1:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008d8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008db:	89 c2                	mov    %eax,%edx
  80042008dd:	ec                   	in     (%dx),%al
  80042008de:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008e1:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  80042008e8:	00 00 00 
  80042008eb:	0f b6 00             	movzbl (%rax),%eax
  80042008ee:	84 c0                	test   %al,%al
  80042008f0:	74 23                	je     8004200915 <serial_init+0x106>
  80042008f2:	48 b8 72 66 23 04 80 	movabs $0x8004236672,%rax
  80042008f9:	00 00 00 
  80042008fc:	0f b7 00             	movzwl (%rax),%eax
  80042008ff:	0f b7 c0             	movzwl %ax,%eax
  8004200902:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200907:	89 c7                	mov    %eax,%edi
  8004200909:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004200910:	00 00 00 
  8004200913:	ff d0                	callq  *%rax
  8004200915:	c9                   	leaveq 
  8004200916:	c3                   	retq   

0000008004200917 <lpt_putc>:
  8004200917:	55                   	push   %rbp
  8004200918:	48 89 e5             	mov    %rsp,%rbp
  800420091b:	48 83 ec 38          	sub    $0x38,%rsp
  800420091f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200922:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200929:	eb 10                	jmp    800420093b <lpt_putc+0x24>
  800420092b:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  8004200932:	00 00 00 
  8004200935:	ff d0                	callq  *%rax
  8004200937:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420093b:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200942:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200945:	89 c2                	mov    %eax,%edx
  8004200947:	ec                   	in     (%dx),%al
  8004200948:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  800420094b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420094f:	84 c0                	test   %al,%al
  8004200951:	78 09                	js     800420095c <lpt_putc+0x45>
  8004200953:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420095a:	7e cf                	jle    800420092b <lpt_putc+0x14>
  800420095c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420095f:	0f b6 c0             	movzbl %al,%eax
  8004200962:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200969:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420096c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200970:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200973:	ee                   	out    %al,(%dx)
  8004200974:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  800420097b:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420097f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200983:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200986:	ee                   	out    %al,(%dx)
  8004200987:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420098e:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200992:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200996:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200999:	ee                   	out    %al,(%dx)
  800420099a:	c9                   	leaveq 
  800420099b:	c3                   	retq   

000000800420099c <cga_init>:
  800420099c:	55                   	push   %rbp
  800420099d:	48 89 e5             	mov    %rsp,%rbp
  80042009a0:	48 83 ec 30          	sub    $0x30,%rsp
  80042009a4:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009ab:	00 00 00 
  80042009ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009b6:	0f b7 00             	movzwl (%rax),%eax
  80042009b9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c1:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009ca:	0f b7 00             	movzwl (%rax),%eax
  80042009cd:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009d1:	74 20                	je     80042009f3 <cga_init+0x57>
  80042009d3:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009da:	00 00 00 
  80042009dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009e1:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  80042009e8:	00 00 00 
  80042009eb:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009f1:	eb 1b                	jmp    8004200a0e <cga_init+0x72>
  80042009f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009f7:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042009fb:	66 89 10             	mov    %dx,(%rax)
  80042009fe:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a05:	00 00 00 
  8004200a08:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a0e:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a15:	00 00 00 
  8004200a18:	8b 00                	mov    (%rax),%eax
  8004200a1a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a1d:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a21:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a28:	ee                   	out    %al,(%dx)
  8004200a29:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a30:	00 00 00 
  8004200a33:	8b 00                	mov    (%rax),%eax
  8004200a35:	83 c0 01             	add    $0x1,%eax
  8004200a38:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a3e:	89 c2                	mov    %eax,%edx
  8004200a40:	ec                   	in     (%dx),%al
  8004200a41:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a44:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a48:	0f b6 c0             	movzbl %al,%eax
  8004200a4b:	c1 e0 08             	shl    $0x8,%eax
  8004200a4e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a51:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a58:	00 00 00 
  8004200a5b:	8b 00                	mov    (%rax),%eax
  8004200a5d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a60:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a64:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a68:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a6b:	ee                   	out    %al,(%dx)
  8004200a6c:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a73:	00 00 00 
  8004200a76:	8b 00                	mov    (%rax),%eax
  8004200a78:	83 c0 01             	add    $0x1,%eax
  8004200a7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a7e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a81:	89 c2                	mov    %eax,%edx
  8004200a83:	ec                   	in     (%dx),%al
  8004200a84:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a87:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a8b:	0f b6 c0             	movzbl %al,%eax
  8004200a8e:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a91:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200a98:	00 00 00 
  8004200a9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200a9f:	48 89 10             	mov    %rdx,(%rax)
  8004200aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200aa5:	89 c2                	mov    %eax,%edx
  8004200aa7:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200aae:	00 00 00 
  8004200ab1:	66 89 10             	mov    %dx,(%rax)
  8004200ab4:	c9                   	leaveq 
  8004200ab5:	c3                   	retq   

0000008004200ab6 <cga_putc>:
  8004200ab6:	55                   	push   %rbp
  8004200ab7:	48 89 e5             	mov    %rsp,%rbp
  8004200aba:	48 83 ec 40          	sub    $0x40,%rsp
  8004200abe:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200ac1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ac4:	b0 00                	mov    $0x0,%al
  8004200ac6:	85 c0                	test   %eax,%eax
  8004200ac8:	75 07                	jne    8004200ad1 <cga_putc+0x1b>
  8004200aca:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200ad1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad4:	0f b6 c0             	movzbl %al,%eax
  8004200ad7:	83 f8 09             	cmp    $0x9,%eax
  8004200ada:	0f 84 f6 00 00 00    	je     8004200bd6 <cga_putc+0x120>
  8004200ae0:	83 f8 09             	cmp    $0x9,%eax
  8004200ae3:	7f 0a                	jg     8004200aef <cga_putc+0x39>
  8004200ae5:	83 f8 08             	cmp    $0x8,%eax
  8004200ae8:	74 18                	je     8004200b02 <cga_putc+0x4c>
  8004200aea:	e9 3e 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200aef:	83 f8 0a             	cmp    $0xa,%eax
  8004200af2:	74 75                	je     8004200b69 <cga_putc+0xb3>
  8004200af4:	83 f8 0d             	cmp    $0xd,%eax
  8004200af7:	0f 84 89 00 00 00    	je     8004200b86 <cga_putc+0xd0>
  8004200afd:	e9 2b 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200b02:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b09:	00 00 00 
  8004200b0c:	0f b7 00             	movzwl (%rax),%eax
  8004200b0f:	66 85 c0             	test   %ax,%ax
  8004200b12:	74 50                	je     8004200b64 <cga_putc+0xae>
  8004200b14:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b1b:	00 00 00 
  8004200b1e:	0f b7 00             	movzwl (%rax),%eax
  8004200b21:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b24:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b2b:	00 00 00 
  8004200b2e:	66 89 10             	mov    %dx,(%rax)
  8004200b31:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200b38:	00 00 00 
  8004200b3b:	48 8b 10             	mov    (%rax),%rdx
  8004200b3e:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b45:	00 00 00 
  8004200b48:	0f b7 00             	movzwl (%rax),%eax
  8004200b4b:	0f b7 c0             	movzwl %ax,%eax
  8004200b4e:	48 01 c0             	add    %rax,%rax
  8004200b51:	48 01 c2             	add    %rax,%rdx
  8004200b54:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b57:	b0 00                	mov    $0x0,%al
  8004200b59:	83 c8 20             	or     $0x20,%eax
  8004200b5c:	66 89 02             	mov    %ax,(%rdx)
  8004200b5f:	e9 04 01 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b64:	e9 ff 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b69:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b70:	00 00 00 
  8004200b73:	0f b7 00             	movzwl (%rax),%eax
  8004200b76:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b79:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b80:	00 00 00 
  8004200b83:	66 89 10             	mov    %dx,(%rax)
  8004200b86:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b8d:	00 00 00 
  8004200b90:	0f b7 30             	movzwl (%rax),%esi
  8004200b93:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b9a:	00 00 00 
  8004200b9d:	0f b7 08             	movzwl (%rax),%ecx
  8004200ba0:	0f b7 c1             	movzwl %cx,%eax
  8004200ba3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200ba9:	c1 e8 10             	shr    $0x10,%eax
  8004200bac:	89 c2                	mov    %eax,%edx
  8004200bae:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bb2:	89 d0                	mov    %edx,%eax
  8004200bb4:	c1 e0 02             	shl    $0x2,%eax
  8004200bb7:	01 d0                	add    %edx,%eax
  8004200bb9:	c1 e0 04             	shl    $0x4,%eax
  8004200bbc:	29 c1                	sub    %eax,%ecx
  8004200bbe:	89 ca                	mov    %ecx,%edx
  8004200bc0:	29 d6                	sub    %edx,%esi
  8004200bc2:	89 f2                	mov    %esi,%edx
  8004200bc4:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200bcb:	00 00 00 
  8004200bce:	66 89 10             	mov    %dx,(%rax)
  8004200bd1:	e9 92 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200bd6:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bdb:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200be2:	00 00 00 
  8004200be5:	ff d0                	callq  *%rax
  8004200be7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bec:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200bf3:	00 00 00 
  8004200bf6:	ff d0                	callq  *%rax
  8004200bf8:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bfd:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c04:	00 00 00 
  8004200c07:	ff d0                	callq  *%rax
  8004200c09:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c0e:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c15:	00 00 00 
  8004200c18:	ff d0                	callq  *%rax
  8004200c1a:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1f:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c26:	00 00 00 
  8004200c29:	ff d0                	callq  *%rax
  8004200c2b:	eb 3b                	jmp    8004200c68 <cga_putc+0x1b2>
  8004200c2d:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200c34:	00 00 00 
  8004200c37:	48 8b 30             	mov    (%rax),%rsi
  8004200c3a:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200c41:	00 00 00 
  8004200c44:	0f b7 00             	movzwl (%rax),%eax
  8004200c47:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c4a:	48 ba 10 e0 4d 04 80 	movabs $0x80044de010,%rdx
  8004200c51:	00 00 00 
  8004200c54:	66 89 0a             	mov    %cx,(%rdx)
  8004200c57:	0f b7 c0             	movzwl %ax,%eax
  8004200c5a:	48 01 c0             	add    %rax,%rax
  8004200c5d:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c64:	66 89 02             	mov    %ax,(%rdx)
  8004200c67:	90                   	nop
  8004200c68:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200c6f:	00 00 00 
  8004200c72:	0f b7 00             	movzwl (%rax),%eax
  8004200c75:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c79:	0f 86 89 00 00 00    	jbe    8004200d08 <cga_putc+0x252>
  8004200c7f:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200c86:	00 00 00 
  8004200c89:	48 8b 00             	mov    (%rax),%rax
  8004200c8c:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c93:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200c9a:	00 00 00 
  8004200c9d:	48 8b 00             	mov    (%rax),%rax
  8004200ca0:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200ca5:	48 89 ce             	mov    %rcx,%rsi
  8004200ca8:	48 89 c7             	mov    %rax,%rdi
  8004200cab:	48 b8 1d 10 21 04 80 	movabs $0x800421101d,%rax
  8004200cb2:	00 00 00 
  8004200cb5:	ff d0                	callq  *%rax
  8004200cb7:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cbe:	eb 22                	jmp    8004200ce2 <cga_putc+0x22c>
  8004200cc0:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200cc7:	00 00 00 
  8004200cca:	48 8b 00             	mov    (%rax),%rax
  8004200ccd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cd0:	48 63 d2             	movslq %edx,%rdx
  8004200cd3:	48 01 d2             	add    %rdx,%rdx
  8004200cd6:	48 01 d0             	add    %rdx,%rax
  8004200cd9:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cde:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ce2:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200ce9:	7e d5                	jle    8004200cc0 <cga_putc+0x20a>
  8004200ceb:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200cf2:	00 00 00 
  8004200cf5:	0f b7 00             	movzwl (%rax),%eax
  8004200cf8:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200cfb:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200d02:	00 00 00 
  8004200d05:	66 89 10             	mov    %dx,(%rax)
  8004200d08:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200d0f:	00 00 00 
  8004200d12:	8b 00                	mov    (%rax),%eax
  8004200d14:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d17:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d1b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d1f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d22:	ee                   	out    %al,(%dx)
  8004200d23:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200d2a:	00 00 00 
  8004200d2d:	0f b7 00             	movzwl (%rax),%eax
  8004200d30:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d34:	0f b6 c0             	movzbl %al,%eax
  8004200d37:	48 ba 04 e0 4d 04 80 	movabs $0x80044de004,%rdx
  8004200d3e:	00 00 00 
  8004200d41:	8b 12                	mov    (%rdx),%edx
  8004200d43:	83 c2 01             	add    $0x1,%edx
  8004200d46:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d49:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d4c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d50:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d53:	ee                   	out    %al,(%dx)
  8004200d54:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200d5b:	00 00 00 
  8004200d5e:	8b 00                	mov    (%rax),%eax
  8004200d60:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d63:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d67:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d6e:	ee                   	out    %al,(%dx)
  8004200d6f:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200d76:	00 00 00 
  8004200d79:	0f b7 00             	movzwl (%rax),%eax
  8004200d7c:	0f b6 c0             	movzbl %al,%eax
  8004200d7f:	48 ba 04 e0 4d 04 80 	movabs $0x80044de004,%rdx
  8004200d86:	00 00 00 
  8004200d89:	8b 12                	mov    (%rdx),%edx
  8004200d8b:	83 c2 01             	add    $0x1,%edx
  8004200d8e:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d91:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200d94:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200d98:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200d9b:	ee                   	out    %al,(%dx)
  8004200d9c:	c9                   	leaveq 
  8004200d9d:	c3                   	retq   

0000008004200d9e <kbd_proc_data>:
  8004200d9e:	55                   	push   %rbp
  8004200d9f:	48 89 e5             	mov    %rsp,%rbp
  8004200da2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200da6:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200db0:	89 c2                	mov    %eax,%edx
  8004200db2:	ec                   	in     (%dx),%al
  8004200db3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200db6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dba:	0f b6 c0             	movzbl %al,%eax
  8004200dbd:	83 e0 01             	and    $0x1,%eax
  8004200dc0:	85 c0                	test   %eax,%eax
  8004200dc2:	75 0a                	jne    8004200dce <kbd_proc_data+0x30>
  8004200dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dc9:	e9 fc 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200dce:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dd5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200dd8:	89 c2                	mov    %eax,%edx
  8004200dda:	ec                   	in     (%dx),%al
  8004200ddb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dde:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200de2:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200de5:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200de9:	75 27                	jne    8004200e12 <kbd_proc_data+0x74>
  8004200deb:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200df2:	00 00 00 
  8004200df5:	8b 00                	mov    (%rax),%eax
  8004200df7:	83 c8 40             	or     $0x40,%eax
  8004200dfa:	89 c2                	mov    %eax,%edx
  8004200dfc:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e03:	00 00 00 
  8004200e06:	89 10                	mov    %edx,(%rax)
  8004200e08:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e0d:	e9 b8 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e12:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e16:	84 c0                	test   %al,%al
  8004200e18:	79 65                	jns    8004200e7f <kbd_proc_data+0xe1>
  8004200e1a:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e21:	00 00 00 
  8004200e24:	8b 00                	mov    (%rax),%eax
  8004200e26:	83 e0 40             	and    $0x40,%eax
  8004200e29:	85 c0                	test   %eax,%eax
  8004200e2b:	75 09                	jne    8004200e36 <kbd_proc_data+0x98>
  8004200e2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e31:	83 e0 7f             	and    $0x7f,%eax
  8004200e34:	eb 04                	jmp    8004200e3a <kbd_proc_data+0x9c>
  8004200e36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e3d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e41:	48 ba 60 60 23 04 80 	movabs $0x8004236060,%rdx
  8004200e48:	00 00 00 
  8004200e4b:	48 98                	cltq   
  8004200e4d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e51:	83 c8 40             	or     $0x40,%eax
  8004200e54:	0f b6 c0             	movzbl %al,%eax
  8004200e57:	f7 d0                	not    %eax
  8004200e59:	89 c2                	mov    %eax,%edx
  8004200e5b:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e62:	00 00 00 
  8004200e65:	8b 00                	mov    (%rax),%eax
  8004200e67:	21 c2                	and    %eax,%edx
  8004200e69:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e70:	00 00 00 
  8004200e73:	89 10                	mov    %edx,(%rax)
  8004200e75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e7a:	e9 4b 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e7f:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e86:	00 00 00 
  8004200e89:	8b 00                	mov    (%rax),%eax
  8004200e8b:	83 e0 40             	and    $0x40,%eax
  8004200e8e:	85 c0                	test   %eax,%eax
  8004200e90:	74 21                	je     8004200eb3 <kbd_proc_data+0x115>
  8004200e92:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200e96:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e9d:	00 00 00 
  8004200ea0:	8b 00                	mov    (%rax),%eax
  8004200ea2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200ea5:	89 c2                	mov    %eax,%edx
  8004200ea7:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200eae:	00 00 00 
  8004200eb1:	89 10                	mov    %edx,(%rax)
  8004200eb3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200eb7:	48 ba 60 60 23 04 80 	movabs $0x8004236060,%rdx
  8004200ebe:	00 00 00 
  8004200ec1:	48 98                	cltq   
  8004200ec3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ec7:	0f b6 d0             	movzbl %al,%edx
  8004200eca:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200ed1:	00 00 00 
  8004200ed4:	8b 00                	mov    (%rax),%eax
  8004200ed6:	09 c2                	or     %eax,%edx
  8004200ed8:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200edf:	00 00 00 
  8004200ee2:	89 10                	mov    %edx,(%rax)
  8004200ee4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ee8:	48 ba 60 61 23 04 80 	movabs $0x8004236160,%rdx
  8004200eef:	00 00 00 
  8004200ef2:	48 98                	cltq   
  8004200ef4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ef8:	0f b6 d0             	movzbl %al,%edx
  8004200efb:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f02:	00 00 00 
  8004200f05:	8b 00                	mov    (%rax),%eax
  8004200f07:	31 c2                	xor    %eax,%edx
  8004200f09:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f10:	00 00 00 
  8004200f13:	89 10                	mov    %edx,(%rax)
  8004200f15:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	8b 00                	mov    (%rax),%eax
  8004200f21:	83 e0 03             	and    $0x3,%eax
  8004200f24:	89 c2                	mov    %eax,%edx
  8004200f26:	48 b8 60 65 23 04 80 	movabs $0x8004236560,%rax
  8004200f2d:	00 00 00 
  8004200f30:	89 d2                	mov    %edx,%edx
  8004200f32:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f3a:	48 01 d0             	add    %rdx,%rax
  8004200f3d:	0f b6 00             	movzbl (%rax),%eax
  8004200f40:	0f b6 c0             	movzbl %al,%eax
  8004200f43:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f46:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f4d:	00 00 00 
  8004200f50:	8b 00                	mov    (%rax),%eax
  8004200f52:	83 e0 08             	and    $0x8,%eax
  8004200f55:	85 c0                	test   %eax,%eax
  8004200f57:	74 22                	je     8004200f7b <kbd_proc_data+0x1dd>
  8004200f59:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f5d:	7e 0c                	jle    8004200f6b <kbd_proc_data+0x1cd>
  8004200f5f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f63:	7f 06                	jg     8004200f6b <kbd_proc_data+0x1cd>
  8004200f65:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f69:	eb 10                	jmp    8004200f7b <kbd_proc_data+0x1dd>
  8004200f6b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f6f:	7e 0a                	jle    8004200f7b <kbd_proc_data+0x1dd>
  8004200f71:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f75:	7f 04                	jg     8004200f7b <kbd_proc_data+0x1dd>
  8004200f77:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f7b:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f82:	00 00 00 
  8004200f85:	8b 00                	mov    (%rax),%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	83 e0 06             	and    $0x6,%eax
  8004200f8c:	85 c0                	test   %eax,%eax
  8004200f8e:	75 37                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f90:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200f97:	75 2e                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f99:	48 bf 16 ed 21 04 80 	movabs $0x800421ed16,%rdi
  8004200fa0:	00 00 00 
  8004200fa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fa8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200faf:	00 00 00 
  8004200fb2:	ff d2                	callq  *%rdx
  8004200fb4:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fbb:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fbf:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fc3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fc6:	ee                   	out    %al,(%dx)
  8004200fc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fca:	c9                   	leaveq 
  8004200fcb:	c3                   	retq   

0000008004200fcc <kbd_intr>:
  8004200fcc:	55                   	push   %rbp
  8004200fcd:	48 89 e5             	mov    %rsp,%rbp
  8004200fd0:	48 bf 9e 0d 20 04 80 	movabs $0x8004200d9e,%rdi
  8004200fd7:	00 00 00 
  8004200fda:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  8004200fe1:	00 00 00 
  8004200fe4:	ff d0                	callq  *%rax
  8004200fe6:	5d                   	pop    %rbp
  8004200fe7:	c3                   	retq   

0000008004200fe8 <kbd_init>:
  8004200fe8:	55                   	push   %rbp
  8004200fe9:	48 89 e5             	mov    %rsp,%rbp
  8004200fec:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  8004200ff3:	00 00 00 
  8004200ff6:	ff d0                	callq  *%rax
  8004200ff8:	48 b8 72 66 23 04 80 	movabs $0x8004236672,%rax
  8004200fff:	00 00 00 
  8004201002:	0f b7 00             	movzwl (%rax),%eax
  8004201005:	0f b7 c0             	movzwl %ax,%eax
  8004201008:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420100d:	89 c7                	mov    %eax,%edi
  800420100f:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004201016:	00 00 00 
  8004201019:	ff d0                	callq  *%rax
  800420101b:	5d                   	pop    %rbp
  800420101c:	c3                   	retq   

000000800420101d <cons_intr>:
  800420101d:	55                   	push   %rbp
  800420101e:	48 89 e5             	mov    %rsp,%rbp
  8004201021:	48 83 ec 20          	sub    $0x20,%rsp
  8004201025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201029:	eb 6a                	jmp    8004201095 <cons_intr+0x78>
  800420102b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420102f:	75 02                	jne    8004201033 <cons_intr+0x16>
  8004201031:	eb 62                	jmp    8004201095 <cons_intr+0x78>
  8004201033:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  800420103a:	00 00 00 
  800420103d:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201043:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201046:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  800420104d:	00 00 00 
  8004201050:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201056:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201059:	89 d1                	mov    %edx,%ecx
  800420105b:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  8004201062:	00 00 00 
  8004201065:	89 c0                	mov    %eax,%eax
  8004201067:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420106a:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  8004201071:	00 00 00 
  8004201074:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420107a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420107f:	75 14                	jne    8004201095 <cons_intr+0x78>
  8004201081:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  8004201088:	00 00 00 
  800420108b:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004201092:	00 00 00 
  8004201095:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201099:	ff d0                	callq  *%rax
  800420109b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420109e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010a2:	75 87                	jne    800420102b <cons_intr+0xe>
  80042010a4:	c9                   	leaveq 
  80042010a5:	c3                   	retq   

00000080042010a6 <cons_getc>:
  80042010a6:	55                   	push   %rbp
  80042010a7:	48 89 e5             	mov    %rsp,%rbp
  80042010aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ae:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  80042010b5:	00 00 00 
  80042010b8:	ff d0                	callq  *%rax
  80042010ba:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  80042010cd:	00 00 00 
  80042010d0:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010d6:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  80042010dd:	00 00 00 
  80042010e0:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010e6:	39 c2                	cmp    %eax,%edx
  80042010e8:	74 69                	je     8004201153 <cons_getc+0xad>
  80042010ea:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  80042010f1:	00 00 00 
  80042010f4:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  80042010fa:	8d 48 01             	lea    0x1(%rax),%ecx
  80042010fd:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  8004201104:	00 00 00 
  8004201107:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420110d:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  8004201114:	00 00 00 
  8004201117:	89 c0                	mov    %eax,%eax
  8004201119:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420111d:	0f b6 c0             	movzbl %al,%eax
  8004201120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201123:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  800420112a:	00 00 00 
  800420112d:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201133:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201138:	75 14                	jne    800420114e <cons_getc+0xa8>
  800420113a:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  8004201141:	00 00 00 
  8004201144:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  800420114b:	00 00 00 
  800420114e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201151:	eb 05                	jmp    8004201158 <cons_getc+0xb2>
  8004201153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201158:	c9                   	leaveq 
  8004201159:	c3                   	retq   

000000800420115a <cons_putc>:
  800420115a:	55                   	push   %rbp
  800420115b:	48 89 e5             	mov    %rsp,%rbp
  800420115e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201162:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201165:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201168:	89 c7                	mov    %eax,%edi
  800420116a:	48 b8 aa 07 20 04 80 	movabs $0x80042007aa,%rax
  8004201171:	00 00 00 
  8004201174:	ff d0                	callq  *%rax
  8004201176:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201179:	89 c7                	mov    %eax,%edi
  800420117b:	48 b8 17 09 20 04 80 	movabs $0x8004200917,%rax
  8004201182:	00 00 00 
  8004201185:	ff d0                	callq  *%rax
  8004201187:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420118a:	89 c7                	mov    %eax,%edi
  800420118c:	48 b8 b6 0a 20 04 80 	movabs $0x8004200ab6,%rax
  8004201193:	00 00 00 
  8004201196:	ff d0                	callq  *%rax
  8004201198:	c9                   	leaveq 
  8004201199:	c3                   	retq   

000000800420119a <cons_init>:
  800420119a:	55                   	push   %rbp
  800420119b:	48 89 e5             	mov    %rsp,%rbp
  800420119e:	48 b8 9c 09 20 04 80 	movabs $0x800420099c,%rax
  80042011a5:	00 00 00 
  80042011a8:	ff d0                	callq  *%rax
  80042011aa:	48 b8 e8 0f 20 04 80 	movabs $0x8004200fe8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 0f 08 20 04 80 	movabs $0x800420080f,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  80042011c9:	00 00 00 
  80042011cc:	0f b6 00             	movzbl (%rax),%eax
  80042011cf:	83 f0 01             	xor    $0x1,%eax
  80042011d2:	84 c0                	test   %al,%al
  80042011d4:	74 1b                	je     80042011f1 <cons_init+0x57>
  80042011d6:	48 bf 22 ed 21 04 80 	movabs $0x800421ed22,%rdi
  80042011dd:	00 00 00 
  80042011e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042011ec:	00 00 00 
  80042011ef:	ff d2                	callq  *%rdx
  80042011f1:	5d                   	pop    %rbp
  80042011f2:	c3                   	retq   

00000080042011f3 <cputchar>:
  80042011f3:	55                   	push   %rbp
  80042011f4:	48 89 e5             	mov    %rsp,%rbp
  80042011f7:	48 83 ec 10          	sub    $0x10,%rsp
  80042011fb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042011fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201201:	89 c7                	mov    %eax,%edi
  8004201203:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  800420120a:	00 00 00 
  800420120d:	ff d0                	callq  *%rax
  800420120f:	c9                   	leaveq 
  8004201210:	c3                   	retq   

0000008004201211 <getchar>:
  8004201211:	55                   	push   %rbp
  8004201212:	48 89 e5             	mov    %rsp,%rbp
  8004201215:	48 83 ec 10          	sub    $0x10,%rsp
  8004201219:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201228:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420122c:	74 eb                	je     8004201219 <getchar+0x8>
  800420122e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201231:	c9                   	leaveq 
  8004201232:	c3                   	retq   

0000008004201233 <iscons>:
  8004201233:	55                   	push   %rbp
  8004201234:	48 89 e5             	mov    %rsp,%rbp
  8004201237:	48 83 ec 04          	sub    $0x4,%rsp
  800420123b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420123e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201243:	c9                   	leaveq 
  8004201244:	c3                   	retq   

0000008004201245 <mon_help>:
  8004201245:	55                   	push   %rbp
  8004201246:	48 89 e5             	mov    %rsp,%rbp
  8004201249:	48 83 ec 30          	sub    $0x30,%rsp
  800420124d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201250:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201254:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420125f:	eb 6c                	jmp    80042012cd <mon_help+0x88>
  8004201261:	48 b9 80 65 23 04 80 	movabs $0x8004236580,%rcx
  8004201268:	00 00 00 
  800420126b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420126e:	48 63 d0             	movslq %eax,%rdx
  8004201271:	48 89 d0             	mov    %rdx,%rax
  8004201274:	48 01 c0             	add    %rax,%rax
  8004201277:	48 01 d0             	add    %rdx,%rax
  800420127a:	48 c1 e0 03          	shl    $0x3,%rax
  800420127e:	48 01 c8             	add    %rcx,%rax
  8004201281:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201285:	48 be 80 65 23 04 80 	movabs $0x8004236580,%rsi
  800420128c:	00 00 00 
  800420128f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201292:	48 63 d0             	movslq %eax,%rdx
  8004201295:	48 89 d0             	mov    %rdx,%rax
  8004201298:	48 01 c0             	add    %rax,%rax
  800420129b:	48 01 d0             	add    %rdx,%rax
  800420129e:	48 c1 e0 03          	shl    $0x3,%rax
  80042012a2:	48 01 f0             	add    %rsi,%rax
  80042012a5:	48 8b 00             	mov    (%rax),%rax
  80042012a8:	48 89 ca             	mov    %rcx,%rdx
  80042012ab:	48 89 c6             	mov    %rax,%rsi
  80042012ae:	48 bf d6 ed 21 04 80 	movabs $0x800421edd6,%rdi
  80042012b5:	00 00 00 
  80042012b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012bd:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042012c4:	00 00 00 
  80042012c7:	ff d1                	callq  *%rcx
  80042012c9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d0:	83 f8 03             	cmp    $0x3,%eax
  80042012d3:	76 8c                	jbe    8004201261 <mon_help+0x1c>
  80042012d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012da:	c9                   	leaveq 
  80042012db:	c3                   	retq   

00000080042012dc <mon_kerninfo>:
  80042012dc:	55                   	push   %rbp
  80042012dd:	48 89 e5             	mov    %rsp,%rbp
  80042012e0:	48 83 ec 30          	sub    $0x30,%rsp
  80042012e4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012ef:	48 bf df ed 21 04 80 	movabs $0x800421eddf,%rdi
  80042012f6:	00 00 00 
  80042012f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012fe:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201305:	00 00 00 
  8004201308:	ff d2                	callq  *%rdx
  800420130a:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201311:	00 00 00 
  8004201314:	48 bf f8 ed 21 04 80 	movabs $0x800421edf8,%rdi
  800420131b:	00 00 00 
  800420131e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201323:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420132a:	00 00 00 
  800420132d:	ff d2                	callq  *%rdx
  800420132f:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201336:	00 00 00 
  8004201339:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201340:	00 00 00 
  8004201343:	48 bf 20 ee 21 04 80 	movabs $0x800421ee20,%rdi
  800420134a:	00 00 00 
  800420134d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201352:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201359:	00 00 00 
  800420135c:	ff d1                	callq  *%rcx
  800420135e:	48 ba 3c ec 21 00 00 	movabs $0x21ec3c,%rdx
  8004201365:	00 00 00 
  8004201368:	48 be 3c ec 21 04 80 	movabs $0x800421ec3c,%rsi
  800420136f:	00 00 00 
  8004201372:	48 bf 48 ee 21 04 80 	movabs $0x800421ee48,%rdi
  8004201379:	00 00 00 
  800420137c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201381:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201388:	00 00 00 
  800420138b:	ff d1                	callq  *%rcx
  800420138d:	48 ba 70 d5 4d 00 00 	movabs $0x4dd570,%rdx
  8004201394:	00 00 00 
  8004201397:	48 be 70 d5 4d 04 80 	movabs $0x80044dd570,%rsi
  800420139e:	00 00 00 
  80042013a1:	48 bf 70 ee 21 04 80 	movabs $0x800421ee70,%rdi
  80042013a8:	00 00 00 
  80042013ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013b0:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013b7:	00 00 00 
  80042013ba:	ff d1                	callq  *%rcx
  80042013bc:	48 ba 10 00 72 00 00 	movabs $0x720010,%rdx
  80042013c3:	00 00 00 
  80042013c6:	48 be 10 00 72 04 80 	movabs $0x8004720010,%rsi
  80042013cd:	00 00 00 
  80042013d0:	48 bf 98 ee 21 04 80 	movabs $0x800421ee98,%rdi
  80042013d7:	00 00 00 
  80042013da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013df:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013e6:	00 00 00 
  80042013e9:	ff d1                	callq  *%rcx
  80042013eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013f2:	00 
  80042013f3:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  80042013fa:	00 00 00 
  80042013fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201401:	48 29 c2             	sub    %rax,%rdx
  8004201404:	48 b8 10 00 72 04 80 	movabs $0x8004720010,%rax
  800420140b:	00 00 00 
  800420140e:	48 83 e8 01          	sub    $0x1,%rax
  8004201412:	48 01 d0             	add    %rdx,%rax
  8004201415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420141d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201422:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201426:	48 89 d0             	mov    %rdx,%rax
  8004201429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420142d:	48 29 c2             	sub    %rax,%rdx
  8004201430:	48 89 d0             	mov    %rdx,%rax
  8004201433:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800420143a:	48 85 c0             	test   %rax,%rax
  800420143d:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201441:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201445:	48 89 c6             	mov    %rax,%rsi
  8004201448:	48 bf c0 ee 21 04 80 	movabs $0x800421eec0,%rdi
  800420144f:	00 00 00 
  8004201452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201457:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420145e:	00 00 00 
  8004201461:	ff d2                	callq  *%rdx
  8004201463:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201468:	c9                   	leaveq 
  8004201469:	c3                   	retq   

000000800420146a <mon_backtrace>:
  800420146a:	55                   	push   %rbp
  800420146b:	48 89 e5             	mov    %rsp,%rbp
  800420146e:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201475:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  800420147b:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  8004201482:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201489:	48 89 e8             	mov    %rbp,%rax
  800420148c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  8004201490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201494:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201498:	48 89 e0             	mov    %rsp,%rax
  800420149b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420149f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014a7:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ae:	00 
  80042014af:	74 21                	je     80042014d2 <mon_backtrace+0x68>
  80042014b1:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014b8:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014c0:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c7:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014d9 <mon_backtrace+0x6f>
  80042014d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014dd:	48 bf ea ee 21 04 80 	movabs $0x800421eeea,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042014f3:	00 00 00 
  80042014f6:	ff d2                	callq  *%rdx
  80042014f8:	e9 17 03 00 00       	jmpq   8004201814 <mon_backtrace+0x3aa>
  80042014fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201505:	48 89 c6             	mov    %rax,%rsi
  8004201508:	48 bf fc ee 21 04 80 	movabs $0x800421eefc,%rdi
  800420150f:	00 00 00 
  8004201512:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201517:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420151e:	00 00 00 
  8004201521:	ff d1                	callq  *%rcx
  8004201523:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  800420152a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420152e:	48 89 d6             	mov    %rdx,%rsi
  8004201531:	48 89 c7             	mov    %rax,%rdi
  8004201534:	48 b8 fe fb 20 04 80 	movabs $0x800420fbfe,%rax
  800420153b:	00 00 00 
  800420153e:	ff d0                	callq  *%rax
  8004201540:	85 c0                	test   %eax,%eax
  8004201542:	0f 88 9a 02 00 00    	js     80042017e2 <mon_backtrace+0x378>
  8004201548:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420154f:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201555:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201559:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  8004201560:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201564:	48 89 d7             	mov    %rdx,%rdi
  8004201567:	48 29 c7             	sub    %rax,%rdi
  800420156a:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  8004201571:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201577:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  800420157d:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201584:	49 89 f9             	mov    %rdi,%r9
  8004201587:	49 89 f0             	mov    %rsi,%r8
  800420158a:	48 89 c6             	mov    %rax,%rsi
  800420158d:	48 bf 18 ef 21 04 80 	movabs $0x800421ef18,%rdi
  8004201594:	00 00 00 
  8004201597:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042015a3:	00 00 00 
  80042015a6:	41 ff d2             	callq  *%r10
  80042015a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ad:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015b1:	66 83 f8 06          	cmp    $0x6,%ax
  80042015b5:	75 15                	jne    80042015cc <mon_backtrace+0x162>
  80042015b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015bb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015c3:	48 01 d0             	add    %rdx,%rax
  80042015c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ca:	eb 28                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015d4:	66 83 f8 07          	cmp    $0x7,%ax
  80042015d8:	75 15                	jne    80042015ef <mon_backtrace+0x185>
  80042015da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015de:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015e6:	48 01 d0             	add    %rdx,%rax
  80042015e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ed:	eb 05                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015ef:	e9 ee 01 00 00       	jmpq   80042017e2 <mon_backtrace+0x378>
  80042015f4:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  80042015fa:	89 c6                	mov    %eax,%esi
  80042015fc:	48 bf 33 ef 21 04 80 	movabs $0x800421ef33,%rdi
  8004201603:	00 00 00 
  8004201606:	b8 00 00 00 00       	mov    $0x0,%eax
  800420160b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201612:	00 00 00 
  8004201615:	ff d2                	callq  *%rdx
  8004201617:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420161e:	e9 f2 00 00 00       	jmpq   8004201715 <mon_backtrace+0x2ab>
  8004201623:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201626:	48 98                	cltq   
  8004201628:	48 83 c0 0a          	add    $0xa,%rax
  800420162c:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  8004201633:	ff 
  8004201634:	48 85 c0             	test   %rax,%rax
  8004201637:	75 35                	jne    800420166e <mon_backtrace+0x204>
  8004201639:	48 b9 3e ef 21 04 80 	movabs $0x800421ef3e,%rcx
  8004201640:	00 00 00 
  8004201643:	48 ba 54 ef 21 04 80 	movabs $0x800421ef54,%rdx
  800420164a:	00 00 00 
  800420164d:	be 78 00 00 00       	mov    $0x78,%esi
  8004201652:	48 bf 69 ef 21 04 80 	movabs $0x800421ef69,%rdi
  8004201659:	00 00 00 
  800420165c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201661:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201668:	00 00 00 
  800420166b:	41 ff d0             	callq  *%r8
  800420166e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201671:	48 98                	cltq   
  8004201673:	48 83 c0 0a          	add    $0xa,%rax
  8004201677:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420167e:	ff 
  800420167f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201683:	48 01 d0             	add    %rdx,%rax
  8004201686:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420168a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420168d:	48 98                	cltq   
  800420168f:	48 83 c0 08          	add    $0x8,%rax
  8004201693:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  800420169a:	83 f8 02             	cmp    $0x2,%eax
  800420169d:	74 31                	je     80042016d0 <mon_backtrace+0x266>
  800420169f:	83 f8 02             	cmp    $0x2,%eax
  80042016a2:	7f 07                	jg     80042016ab <mon_backtrace+0x241>
  80042016a4:	83 f8 01             	cmp    $0x1,%eax
  80042016a7:	74 37                	je     80042016e0 <mon_backtrace+0x276>
  80042016a9:	eb 44                	jmp    80042016ef <mon_backtrace+0x285>
  80042016ab:	83 f8 04             	cmp    $0x4,%eax
  80042016ae:	74 12                	je     80042016c2 <mon_backtrace+0x258>
  80042016b0:	83 f8 08             	cmp    $0x8,%eax
  80042016b3:	75 3a                	jne    80042016ef <mon_backtrace+0x285>
  80042016b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b9:	48 8b 00             	mov    (%rax),%rax
  80042016bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016c0:	eb 2d                	jmp    80042016ef <mon_backtrace+0x285>
  80042016c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c6:	8b 00                	mov    (%rax),%eax
  80042016c8:	89 c0                	mov    %eax,%eax
  80042016ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ce:	eb 1f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d4:	0f b7 00             	movzwl (%rax),%eax
  80042016d7:	0f b7 c0             	movzwl %ax,%eax
  80042016da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016de:	eb 0f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e4:	0f b6 00             	movzbl (%rax),%eax
  80042016e7:	0f b6 c0             	movzbl %al,%eax
  80042016ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ee:	90                   	nop
  80042016ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016f3:	48 89 c6             	mov    %rax,%rsi
  80042016f6:	48 bf 7b ef 21 04 80 	movabs $0x800421ef7b,%rdi
  80042016fd:	00 00 00 
  8004201700:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201705:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420170c:	00 00 00 
  800420170f:	ff d2                	callq  *%rdx
  8004201711:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201715:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  800420171b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420171e:	0f 8f ff fe ff ff    	jg     8004201623 <mon_backtrace+0x1b9>
  8004201724:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  800420172b:	0f b7 c0             	movzwl %ax,%eax
  800420172e:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201733:	74 48                	je     800420177d <mon_backtrace+0x313>
  8004201735:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  800420173a:	75 17                	jne    8004201753 <mon_backtrace+0x2e9>
  800420173c:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  8004201743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201747:	48 01 d0             	add    %rdx,%rax
  800420174a:	48 8b 00             	mov    (%rax),%rax
  800420174d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201751:	eb 2b                	jmp    800420177e <mon_backtrace+0x314>
  8004201753:	48 ba 82 ef 21 04 80 	movabs $0x800421ef82,%rdx
  800420175a:	00 00 00 
  800420175d:	be 92 00 00 00       	mov    $0x92,%esi
  8004201762:	48 bf 69 ef 21 04 80 	movabs $0x800421ef69,%rdi
  8004201769:	00 00 00 
  800420176c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201771:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201778:	00 00 00 
  800420177b:	ff d1                	callq  *%rcx
  800420177d:	90                   	nop
  800420177e:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201785:	0f b7 c0             	movzwl %ax,%eax
  8004201788:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420178d:	74 48                	je     80042017d7 <mon_backtrace+0x36d>
  800420178f:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201794:	75 17                	jne    80042017ad <mon_backtrace+0x343>
  8004201796:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  800420179d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017a1:	48 01 d0             	add    %rdx,%rax
  80042017a4:	48 8b 00             	mov    (%rax),%rax
  80042017a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ab:	eb 2b                	jmp    80042017d8 <mon_backtrace+0x36e>
  80042017ad:	48 ba 82 ef 21 04 80 	movabs $0x800421ef82,%rdx
  80042017b4:	00 00 00 
  80042017b7:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017bc:	48 bf 69 ef 21 04 80 	movabs $0x800421ef69,%rdi
  80042017c3:	00 00 00 
  80042017c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017cb:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042017d2:	00 00 00 
  80042017d5:	ff d1                	callq  *%rcx
  80042017d7:	90                   	nop
  80042017d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017e0:	eb 17                	jmp    80042017f9 <mon_backtrace+0x38f>
  80042017e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 00             	mov    (%rax),%rax
  80042017f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042017f9:	48 bf 93 ef 21 04 80 	movabs $0x800421ef93,%rdi
  8004201800:	00 00 00 
  8004201803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201808:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420180f:	00 00 00 
  8004201812:	ff d2                	callq  *%rdx
  8004201814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201819:	0f 85 de fc ff ff    	jne    80042014fd <mon_backtrace+0x93>
  800420181f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201824:	c9                   	leaveq 
  8004201825:	c3                   	retq   

0000008004201826 <mon_exit>:
  8004201826:	55                   	push   %rbp
  8004201827:	48 89 e5             	mov    %rsp,%rbp
  800420182a:	48 83 ec 18          	sub    $0x18,%rsp
  800420182e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201831:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201835:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201839:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420183e:	c9                   	leaveq 
  800420183f:	c3                   	retq   

0000008004201840 <runcmd>:
  8004201840:	55                   	push   %rbp
  8004201841:	48 89 e5             	mov    %rsp,%rbp
  8004201844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420184b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004201852:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201860:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201863:	48 98                	cltq   
  8004201865:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  800420186c:	ff 00 00 00 00 
  8004201871:	eb 15                	jmp    8004201888 <runcmd+0x48>
  8004201873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420187a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420187e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201885:	c6 00 00             	movb   $0x0,(%rax)
  8004201888:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420188f:	0f b6 00             	movzbl (%rax),%eax
  8004201892:	84 c0                	test   %al,%al
  8004201894:	74 2a                	je     80042018c0 <runcmd+0x80>
  8004201896:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189d:	0f b6 00             	movzbl (%rax),%eax
  80042018a0:	0f be c0             	movsbl %al,%eax
  80042018a3:	89 c6                	mov    %eax,%esi
  80042018a5:	48 bf 95 ef 21 04 80 	movabs $0x800421ef95,%rdi
  80042018ac:	00 00 00 
  80042018af:	48 b8 1f 0f 21 04 80 	movabs $0x8004210f1f,%rax
  80042018b6:	00 00 00 
  80042018b9:	ff d0                	callq  *%rax
  80042018bb:	48 85 c0             	test   %rax,%rax
  80042018be:	75 b3                	jne    8004201873 <runcmd+0x33>
  80042018c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018c7:	0f b6 00             	movzbl (%rax),%eax
  80042018ca:	84 c0                	test   %al,%al
  80042018cc:	75 21                	jne    80042018ef <runcmd+0xaf>
  80042018ce:	90                   	nop
  80042018cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018d2:	48 98                	cltq   
  80042018d4:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018db:	ff 00 00 00 00 
  80042018e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018e4:	0f 85 a1 00 00 00    	jne    800420198b <runcmd+0x14b>
  80042018ea:	e9 92 00 00 00       	jmpq   8004201981 <runcmd+0x141>
  80042018ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018f3:	75 2a                	jne    800420191f <runcmd+0xdf>
  80042018f5:	be 10 00 00 00       	mov    $0x10,%esi
  80042018fa:	48 bf 9a ef 21 04 80 	movabs $0x800421ef9a,%rdi
  8004201901:	00 00 00 
  8004201904:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201909:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201910:	00 00 00 
  8004201913:	ff d2                	callq  *%rdx
  8004201915:	b8 00 00 00 00       	mov    $0x0,%eax
  800420191a:	e9 30 01 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420191f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201922:	8d 50 01             	lea    0x1(%rax),%edx
  8004201925:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201928:	48 98                	cltq   
  800420192a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201931:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201938:	ff 
  8004201939:	eb 08                	jmp    8004201943 <runcmd+0x103>
  800420193b:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201942:	01 
  8004201943:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420194a:	0f b6 00             	movzbl (%rax),%eax
  800420194d:	84 c0                	test   %al,%al
  800420194f:	74 2a                	je     800420197b <runcmd+0x13b>
  8004201951:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201958:	0f b6 00             	movzbl (%rax),%eax
  800420195b:	0f be c0             	movsbl %al,%eax
  800420195e:	89 c6                	mov    %eax,%esi
  8004201960:	48 bf 95 ef 21 04 80 	movabs $0x800421ef95,%rdi
  8004201967:	00 00 00 
  800420196a:	48 b8 1f 0f 21 04 80 	movabs $0x8004210f1f,%rax
  8004201971:	00 00 00 
  8004201974:	ff d0                	callq  *%rax
  8004201976:	48 85 c0             	test   %rax,%rax
  8004201979:	74 c0                	je     800420193b <runcmd+0xfb>
  800420197b:	90                   	nop
  800420197c:	e9 07 ff ff ff       	jmpq   8004201888 <runcmd+0x48>
  8004201981:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201986:	e9 c4 00 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420198b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201992:	e9 82 00 00 00       	jmpq   8004201a19 <runcmd+0x1d9>
  8004201997:	48 b9 80 65 23 04 80 	movabs $0x8004236580,%rcx
  800420199e:	00 00 00 
  80042019a1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019a4:	48 63 d0             	movslq %eax,%rdx
  80042019a7:	48 89 d0             	mov    %rdx,%rax
  80042019aa:	48 01 c0             	add    %rax,%rax
  80042019ad:	48 01 d0             	add    %rdx,%rax
  80042019b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019b4:	48 01 c8             	add    %rcx,%rax
  80042019b7:	48 8b 10             	mov    (%rax),%rdx
  80042019ba:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019c1:	48 89 d6             	mov    %rdx,%rsi
  80042019c4:	48 89 c7             	mov    %rax,%rdi
  80042019c7:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  80042019ce:	00 00 00 
  80042019d1:	ff d0                	callq  *%rax
  80042019d3:	85 c0                	test   %eax,%eax
  80042019d5:	75 3e                	jne    8004201a15 <runcmd+0x1d5>
  80042019d7:	48 b9 80 65 23 04 80 	movabs $0x8004236580,%rcx
  80042019de:	00 00 00 
  80042019e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019e4:	48 63 d0             	movslq %eax,%rdx
  80042019e7:	48 89 d0             	mov    %rdx,%rax
  80042019ea:	48 01 c0             	add    %rax,%rax
  80042019ed:	48 01 d0             	add    %rdx,%rax
  80042019f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019f4:	48 01 c8             	add    %rcx,%rax
  80042019f7:	48 83 c0 10          	add    $0x10,%rax
  80042019fb:	48 8b 00             	mov    (%rax),%rax
  80042019fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a05:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a0c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a0f:	89 cf                	mov    %ecx,%edi
  8004201a11:	ff d0                	callq  *%rax
  8004201a13:	eb 3a                	jmp    8004201a4f <runcmd+0x20f>
  8004201a15:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a1c:	83 f8 03             	cmp    $0x3,%eax
  8004201a1f:	0f 86 72 ff ff ff    	jbe    8004201997 <runcmd+0x157>
  8004201a25:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a2c:	48 89 c6             	mov    %rax,%rsi
  8004201a2f:	48 bf b7 ef 21 04 80 	movabs $0x800421efb7,%rdi
  8004201a36:	00 00 00 
  8004201a39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a3e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a45:	00 00 00 
  8004201a48:	ff d2                	callq  *%rdx
  8004201a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4f:	c9                   	leaveq 
  8004201a50:	c3                   	retq   

0000008004201a51 <monitor>:
  8004201a51:	55                   	push   %rbp
  8004201a52:	48 89 e5             	mov    %rsp,%rbp
  8004201a55:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a5d:	48 bf d0 ef 21 04 80 	movabs $0x800421efd0,%rdi
  8004201a64:	00 00 00 
  8004201a67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a73:	00 00 00 
  8004201a76:	ff d2                	callq  *%rdx
  8004201a78:	48 bf f8 ef 21 04 80 	movabs $0x800421eff8,%rdi
  8004201a7f:	00 00 00 
  8004201a82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a8e:	00 00 00 
  8004201a91:	ff d2                	callq  *%rdx
  8004201a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201a98:	74 13                	je     8004201aad <monitor+0x5c>
  8004201a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201a9e:	48 89 c7             	mov    %rax,%rdi
  8004201aa1:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  8004201aa8:	00 00 00 
  8004201aab:	ff d0                	callq  *%rax
  8004201aad:	48 bf 1d f0 21 04 80 	movabs $0x800421f01d,%rdi
  8004201ab4:	00 00 00 
  8004201ab7:	48 b8 38 0b 21 04 80 	movabs $0x8004210b38,%rax
  8004201abe:	00 00 00 
  8004201ac1:	ff d0                	callq  *%rax
  8004201ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ac7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201acc:	74 20                	je     8004201aee <monitor+0x9d>
  8004201ace:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ad6:	48 89 d6             	mov    %rdx,%rsi
  8004201ad9:	48 89 c7             	mov    %rax,%rdi
  8004201adc:	48 b8 40 18 20 04 80 	movabs $0x8004201840,%rax
  8004201ae3:	00 00 00 
  8004201ae6:	ff d0                	callq  *%rax
  8004201ae8:	85 c0                	test   %eax,%eax
  8004201aea:	79 02                	jns    8004201aee <monitor+0x9d>
  8004201aec:	eb 02                	jmp    8004201af0 <monitor+0x9f>
  8004201aee:	eb bd                	jmp    8004201aad <monitor+0x5c>
  8004201af0:	c9                   	leaveq 
  8004201af1:	c3                   	retq   

0000008004201af2 <page2ppn>:
  8004201af2:	55                   	push   %rbp
  8004201af3:	48 89 e5             	mov    %rsp,%rbp
  8004201af6:	48 83 ec 08          	sub    $0x8,%rsp
  8004201afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201afe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b02:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004201b09:	00 00 00 
  8004201b0c:	48 8b 00             	mov    (%rax),%rax
  8004201b0f:	48 29 c2             	sub    %rax,%rdx
  8004201b12:	48 89 d0             	mov    %rdx,%rax
  8004201b15:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b19:	c9                   	leaveq 
  8004201b1a:	c3                   	retq   

0000008004201b1b <page2pa>:
  8004201b1b:	55                   	push   %rbp
  8004201b1c:	48 89 e5             	mov    %rsp,%rbp
  8004201b1f:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b2b:	48 89 c7             	mov    %rax,%rdi
  8004201b2e:	48 b8 f2 1a 20 04 80 	movabs $0x8004201af2,%rax
  8004201b35:	00 00 00 
  8004201b38:	ff d0                	callq  *%rax
  8004201b3a:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b3e:	c9                   	leaveq 
  8004201b3f:	c3                   	retq   

0000008004201b40 <pa2page>:
  8004201b40:	55                   	push   %rbp
  8004201b41:	48 89 e5             	mov    %rsp,%rbp
  8004201b44:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b54:	48 89 c2             	mov    %rax,%rdx
  8004201b57:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004201b5e:	00 00 00 
  8004201b61:	48 8b 00             	mov    (%rax),%rax
  8004201b64:	48 39 c2             	cmp    %rax,%rdx
  8004201b67:	72 2a                	jb     8004201b93 <pa2page+0x53>
  8004201b69:	48 ba 28 f0 21 04 80 	movabs $0x800421f028,%rdx
  8004201b70:	00 00 00 
  8004201b73:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b78:	48 bf 47 f0 21 04 80 	movabs $0x800421f047,%rdi
  8004201b7f:	00 00 00 
  8004201b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b87:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201b8e:	00 00 00 
  8004201b91:	ff d1                	callq  *%rcx
  8004201b93:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	48 8b 00             	mov    (%rax),%rax
  8004201ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ba4:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201ba8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bac:	48 01 d0             	add    %rdx,%rax
  8004201baf:	c9                   	leaveq 
  8004201bb0:	c3                   	retq   

0000008004201bb1 <page2kva>:
  8004201bb1:	55                   	push   %rbp
  8004201bb2:	48 89 e5             	mov    %rsp,%rbp
  8004201bb5:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bc1:	48 89 c7             	mov    %rax,%rdi
  8004201bc4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004201bcb:	00 00 00 
  8004201bce:	ff d0                	callq  *%rax
  8004201bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bd8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bdc:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201bdf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201be2:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004201be9:	00 00 00 
  8004201bec:	48 8b 00             	mov    (%rax),%rax
  8004201bef:	48 39 c2             	cmp    %rax,%rdx
  8004201bf2:	72 32                	jb     8004201c26 <page2kva+0x75>
  8004201bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bf8:	48 89 c1             	mov    %rax,%rcx
  8004201bfb:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004201c02:	00 00 00 
  8004201c05:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c0a:	48 bf 47 f0 21 04 80 	movabs $0x800421f047,%rdi
  8004201c11:	00 00 00 
  8004201c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c19:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201c20:	00 00 00 
  8004201c23:	41 ff d0             	callq  *%r8
  8004201c26:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c2d:	00 00 00 
  8004201c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c34:	48 01 d0             	add    %rdx,%rax
  8004201c37:	c9                   	leaveq 
  8004201c38:	c3                   	retq   

0000008004201c39 <restrictive_type>:
  8004201c39:	55                   	push   %rbp
  8004201c3a:	48 89 e5             	mov    %rsp,%rbp
  8004201c3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c47:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c4b:	74 06                	je     8004201c53 <restrictive_type+0x1a>
  8004201c4d:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c51:	75 07                	jne    8004201c5a <restrictive_type+0x21>
  8004201c53:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c58:	eb 3e                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c5a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c5e:	74 06                	je     8004201c66 <restrictive_type+0x2d>
  8004201c60:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c64:	75 07                	jne    8004201c6d <restrictive_type+0x34>
  8004201c66:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c6b:	eb 2b                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c71:	74 06                	je     8004201c79 <restrictive_type+0x40>
  8004201c73:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c77:	75 07                	jne    8004201c80 <restrictive_type+0x47>
  8004201c79:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c7e:	eb 18                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c80:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c84:	74 06                	je     8004201c8c <restrictive_type+0x53>
  8004201c86:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c8a:	75 07                	jne    8004201c93 <restrictive_type+0x5a>
  8004201c8c:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c91:	eb 05                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c93:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201c98:	c9                   	leaveq 
  8004201c99:	c3                   	retq   

0000008004201c9a <nvram_read>:
  8004201c9a:	55                   	push   %rbp
  8004201c9b:	48 89 e5             	mov    %rsp,%rbp
  8004201c9e:	53                   	push   %rbx
  8004201c9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004201ca3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201ca6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ca9:	89 c7                	mov    %eax,%edi
  8004201cab:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cb2:	00 00 00 
  8004201cb5:	ff d0                	callq  *%rax
  8004201cb7:	89 c3                	mov    %eax,%ebx
  8004201cb9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cbc:	83 c0 01             	add    $0x1,%eax
  8004201cbf:	89 c7                	mov    %eax,%edi
  8004201cc1:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cc8:	00 00 00 
  8004201ccb:	ff d0                	callq  *%rax
  8004201ccd:	c1 e0 08             	shl    $0x8,%eax
  8004201cd0:	09 d8                	or     %ebx,%eax
  8004201cd2:	48 83 c4 18          	add    $0x18,%rsp
  8004201cd6:	5b                   	pop    %rbx
  8004201cd7:	5d                   	pop    %rbp
  8004201cd8:	c3                   	retq   

0000008004201cd9 <multiboot_read>:
  8004201cd9:	55                   	push   %rbp
  8004201cda:	48 89 e5             	mov    %rsp,%rbp
  8004201cdd:	41 54                	push   %r12
  8004201cdf:	53                   	push   %rbx
  8004201ce0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201ce7:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cee:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201cf5:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201cfc:	48 89 e0             	mov    %rsp,%rax
  8004201cff:	49 89 c4             	mov    %rax,%r12
  8004201d02:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d09:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d0c:	89 c0                	mov    %eax,%eax
  8004201d0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d19:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d1c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d21:	f7 e2                	mul    %edx
  8004201d23:	89 d0                	mov    %edx,%eax
  8004201d25:	c1 e8 04             	shr    $0x4,%eax
  8004201d28:	89 c0                	mov    %eax,%eax
  8004201d2a:	48 89 c2             	mov    %rax,%rdx
  8004201d2d:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d31:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d35:	49 89 c0             	mov    %rax,%r8
  8004201d38:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d3e:	48 89 c1             	mov    %rax,%rcx
  8004201d41:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d46:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d4a:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d4e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d53:	48 83 e8 01          	sub    $0x1,%rax
  8004201d57:	48 01 d0             	add    %rdx,%rax
  8004201d5a:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d5f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d64:	48 f7 f3             	div    %rbx
  8004201d67:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d6b:	48 29 c4             	sub    %rax,%rsp
  8004201d6e:	48 89 e0             	mov    %rsp,%rax
  8004201d71:	48 83 c0 07          	add    $0x7,%rax
  8004201d75:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d79:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d81:	48 bf 7b f0 21 04 80 	movabs $0x800421f07b,%rdi
  8004201d88:	00 00 00 
  8004201d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d90:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201d97:	00 00 00 
  8004201d9a:	ff d2                	callq  *%rdx
  8004201d9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201da3:	e9 6c 01 00 00       	jmpq   8004201f14 <multiboot_read+0x23b>
  8004201da8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201dab:	48 63 d0             	movslq %eax,%rdx
  8004201dae:	48 89 d0             	mov    %rdx,%rax
  8004201db1:	48 01 c0             	add    %rax,%rax
  8004201db4:	48 01 d0             	add    %rdx,%rax
  8004201db7:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dbb:	48 89 c2             	mov    %rax,%rdx
  8004201dbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dc2:	48 01 d0             	add    %rdx,%rax
  8004201dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004201dd0:	89 c0                	mov    %eax,%eax
  8004201dd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201dd6:	48 89 c2             	mov    %rax,%rdx
  8004201dd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ddd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201de0:	89 c0                	mov    %eax,%eax
  8004201de2:	48 01 d0             	add    %rdx,%rax
  8004201de5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201de9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ded:	8b 40 10             	mov    0x10(%rax),%eax
  8004201df0:	89 c0                	mov    %eax,%eax
  8004201df2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201df6:	48 89 c2             	mov    %rax,%rdx
  8004201df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dfd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e00:	89 c0                	mov    %eax,%eax
  8004201e02:	48 01 d0             	add    %rdx,%rax
  8004201e05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e0d:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e14:	8b 00                	mov    (%rax),%eax
  8004201e16:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e1a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e1e:	41 89 f0             	mov    %esi,%r8d
  8004201e21:	89 c6                	mov    %eax,%esi
  8004201e23:	48 bf 90 f0 21 04 80 	movabs $0x800421f090,%rdi
  8004201e2a:	00 00 00 
  8004201e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e32:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004201e39:	00 00 00 
  8004201e3c:	41 ff d1             	callq  *%r9
  8004201e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e43:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e46:	83 f8 05             	cmp    $0x5,%eax
  8004201e49:	77 0b                	ja     8004201e56 <multiboot_read+0x17d>
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	85 c0                	test   %eax,%eax
  8004201e54:	75 0b                	jne    8004201e61 <multiboot_read+0x188>
  8004201e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5a:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e68:	e9 85 00 00 00       	jmpq   8004201ef2 <multiboot_read+0x219>
  8004201e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e74:	48 63 d2             	movslq %edx,%rdx
  8004201e77:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e7b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e83:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e86:	89 c0                	mov    %eax,%eax
  8004201e88:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e8c:	48 89 c2             	mov    %rax,%rdx
  8004201e8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e93:	8b 40 04             	mov    0x4(%rax),%eax
  8004201e96:	89 c0                	mov    %eax,%eax
  8004201e98:	48 01 d0             	add    %rdx,%rax
  8004201e9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201e9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201ea3:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201ea7:	76 45                	jbe    8004201eee <multiboot_read+0x215>
  8004201ea9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eac:	83 c0 01             	add    $0x1,%eax
  8004201eaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201eb2:	eb 30                	jmp    8004201ee4 <multiboot_read+0x20b>
  8004201eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201eb8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ebb:	48 63 d2             	movslq %edx,%rdx
  8004201ebe:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ec2:	48 01 c2             	add    %rax,%rdx
  8004201ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ecc:	48 63 c9             	movslq %ecx,%rcx
  8004201ecf:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201ed3:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ed7:	48 01 c8             	add    %rcx,%rax
  8004201eda:	48 8b 00             	mov    (%rax),%rax
  8004201edd:	48 89 02             	mov    %rax,(%rdx)
  8004201ee0:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ee4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ee7:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201eea:	75 c8                	jne    8004201eb4 <multiboot_read+0x1db>
  8004201eec:	eb 10                	jmp    8004201efe <multiboot_read+0x225>
  8004201eee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201ef2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201ef5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201ef8:	0f 8c 6f ff ff ff    	jl     8004201e6d <multiboot_read+0x194>
  8004201efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f02:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f05:	48 63 d2             	movslq %edx,%rdx
  8004201f08:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f0c:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f10:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f14:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f17:	48 63 c8             	movslq %eax,%rcx
  8004201f1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f21:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f24:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f29:	f7 e2                	mul    %edx
  8004201f2b:	89 d0                	mov    %edx,%eax
  8004201f2d:	c1 e8 04             	shr    $0x4,%eax
  8004201f30:	89 c0                	mov    %eax,%eax
  8004201f32:	48 39 c1             	cmp    %rax,%rcx
  8004201f35:	0f 82 6d fe ff ff    	jb     8004201da8 <multiboot_read+0xcf>
  8004201f3b:	48 bf c7 f0 21 04 80 	movabs $0x800421f0c7,%rdi
  8004201f42:	00 00 00 
  8004201f45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f4a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201f51:	00 00 00 
  8004201f54:	ff d2                	callq  *%rdx
  8004201f56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f5d:	e9 93 01 00 00       	jmpq   80042020f5 <multiboot_read+0x41c>
  8004201f62:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f65:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f6c:	48 63 d2             	movslq %edx,%rdx
  8004201f6f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f73:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f7b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f7e:	48 63 d2             	movslq %edx,%rdx
  8004201f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f8d:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f90:	89 c0                	mov    %eax,%eax
  8004201f92:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f96:	48 89 c2             	mov    %rax,%rdx
  8004201f99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f9d:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fa0:	89 c0                	mov    %eax,%eax
  8004201fa2:	48 01 d0             	add    %rdx,%rax
  8004201fa5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fa9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fad:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fb0:	89 c0                	mov    %eax,%eax
  8004201fb2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fb6:	48 89 c2             	mov    %rax,%rdx
  8004201fb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fbd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fc0:	89 c0                	mov    %eax,%eax
  8004201fc2:	48 01 d0             	add    %rdx,%rax
  8004201fc5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fcd:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fd0:	89 c0                	mov    %eax,%eax
  8004201fd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd6:	48 89 c2             	mov    %rax,%rdx
  8004201fd9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fdd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fe0:	89 c0                	mov    %eax,%eax
  8004201fe2:	48 01 d0             	add    %rdx,%rax
  8004201fe5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201fec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ff0:	8b 40 10             	mov    0x10(%rax),%eax
  8004201ff3:	89 c0                	mov    %eax,%eax
  8004201ff5:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff9:	48 89 c2             	mov    %rax,%rdx
  8004201ffc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202000:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202003:	89 c0                	mov    %eax,%eax
  8004202005:	48 01 d0             	add    %rdx,%rax
  8004202008:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420200f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202016:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420201a:	48 01 d0             	add    %rdx,%rax
  800420201d:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202021:	75 7c                	jne    800420209f <multiboot_read+0x3c6>
  8004202023:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202027:	8b 50 14             	mov    0x14(%rax),%edx
  800420202a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420202e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202031:	39 c2                	cmp    %eax,%edx
  8004202033:	75 6a                	jne    800420209f <multiboot_read+0x3c6>
  8004202035:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420203c:	89 c2                	mov    %eax,%edx
  800420203e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202045:	01 c2                	add    %eax,%edx
  8004202047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420204b:	89 50 0c             	mov    %edx,0xc(%rax)
  800420204e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202055:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420205c:	48 01 d0             	add    %rdx,%rax
  800420205f:	48 c1 e8 20          	shr    $0x20,%rax
  8004202063:	89 c2                	mov    %eax,%edx
  8004202065:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202069:	89 50 10             	mov    %edx,0x10(%rax)
  800420206c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202070:	8b 50 04             	mov    0x4(%rax),%edx
  8004202073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202077:	89 50 04             	mov    %edx,0x4(%rax)
  800420207a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207e:	8b 50 08             	mov    0x8(%rax),%edx
  8004202081:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202085:	89 50 08             	mov    %edx,0x8(%rax)
  8004202088:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420208b:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420208e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202092:	48 63 d2             	movslq %edx,%rdx
  8004202095:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  800420209c:	00 
  800420209d:	eb 52                	jmp    80042020f1 <multiboot_read+0x418>
  800420209f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020a6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020aa:	48 01 d0             	add    %rdx,%rax
  80042020ad:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020b1:	76 3e                	jbe    80042020f1 <multiboot_read+0x418>
  80042020b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020b7:	8b 50 14             	mov    0x14(%rax),%edx
  80042020ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020be:	8b 40 14             	mov    0x14(%rax),%eax
  80042020c1:	89 d6                	mov    %edx,%esi
  80042020c3:	89 c7                	mov    %eax,%edi
  80042020c5:	48 b8 39 1c 20 04 80 	movabs $0x8004201c39,%rax
  80042020cc:	00 00 00 
  80042020cf:	ff d0                	callq  *%rax
  80042020d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020db:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020e1:	89 50 14             	mov    %edx,0x14(%rax)
  80042020e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ee:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042020f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020f8:	48 63 c8             	movslq %eax,%rcx
  80042020fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202102:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202105:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420210a:	f7 e2                	mul    %edx
  800420210c:	89 d0                	mov    %edx,%eax
  800420210e:	c1 e8 04             	shr    $0x4,%eax
  8004202111:	89 c0                	mov    %eax,%eax
  8004202113:	48 39 c1             	cmp    %rax,%rcx
  8004202116:	0f 82 46 fe ff ff    	jb     8004201f62 <multiboot_read+0x289>
  800420211c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004202123:	e9 dc 00 00 00       	jmpq   8004202204 <multiboot_read+0x52b>
  8004202128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420212c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420212f:	48 63 d2             	movslq %edx,%rdx
  8004202132:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202136:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  800420213d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202144:	00 
  8004202145:	0f 84 b5 00 00 00    	je     8004202200 <multiboot_read+0x527>
  800420214b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202152:	8b 40 14             	mov    0x14(%rax),%eax
  8004202155:	83 f8 01             	cmp    $0x1,%eax
  8004202158:	74 13                	je     800420216d <multiboot_read+0x494>
  800420215a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202161:	8b 40 14             	mov    0x14(%rax),%eax
  8004202164:	83 f8 03             	cmp    $0x3,%eax
  8004202167:	0f 85 93 00 00 00    	jne    8004202200 <multiboot_read+0x527>
  800420216d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202174:	8b 40 04             	mov    0x4(%rax),%eax
  8004202177:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  800420217c:	77 49                	ja     80042021c7 <multiboot_read+0x4ee>
  800420217e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202185:	8b 40 08             	mov    0x8(%rax),%eax
  8004202188:	85 c0                	test   %eax,%eax
  800420218a:	75 3b                	jne    80042021c7 <multiboot_read+0x4ee>
  800420218c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202193:	48 8b 10             	mov    (%rax),%rdx
  8004202196:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420219d:	8b 40 10             	mov    0x10(%rax),%eax
  80042021a0:	89 c0                	mov    %eax,%eax
  80042021a2:	48 c1 e0 20          	shl    $0x20,%rax
  80042021a6:	48 89 c1             	mov    %rax,%rcx
  80042021a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021b0:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021b3:	89 c0                	mov    %eax,%eax
  80042021b5:	48 01 c8             	add    %rcx,%rax
  80042021b8:	48 01 c2             	add    %rax,%rdx
  80042021bb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021c2:	48 89 10             	mov    %rdx,(%rax)
  80042021c5:	eb 39                	jmp    8004202200 <multiboot_read+0x527>
  80042021c7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021ce:	48 8b 10             	mov    (%rax),%rdx
  80042021d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042021db:	89 c0                	mov    %eax,%eax
  80042021dd:	48 c1 e0 20          	shl    $0x20,%rax
  80042021e1:	48 89 c1             	mov    %rax,%rcx
  80042021e4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021eb:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021ee:	89 c0                	mov    %eax,%eax
  80042021f0:	48 01 c8             	add    %rcx,%rax
  80042021f3:	48 01 c2             	add    %rax,%rdx
  80042021f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021fd:	48 89 10             	mov    %rdx,(%rax)
  8004202200:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202204:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202207:	48 63 c8             	movslq %eax,%rcx
  800420220a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202211:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202214:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202219:	f7 e2                	mul    %edx
  800420221b:	89 d0                	mov    %edx,%eax
  800420221d:	c1 e8 04             	shr    $0x4,%eax
  8004202220:	89 c0                	mov    %eax,%eax
  8004202222:	48 39 c1             	cmp    %rax,%rcx
  8004202225:	0f 82 fd fe ff ff    	jb     8004202128 <multiboot_read+0x44f>
  800420222b:	4c 89 e4             	mov    %r12,%rsp
  800420222e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004202232:	5b                   	pop    %rbx
  8004202233:	41 5c                	pop    %r12
  8004202235:	5d                   	pop    %rbp
  8004202236:	c3                   	retq   

0000008004202237 <i386_detect_memory>:
  8004202237:	55                   	push   %rbp
  8004202238:	48 89 e5             	mov    %rsp,%rbp
  800420223b:	48 83 ec 50          	sub    $0x50,%rsp
  800420223f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202246:	00 
  8004202247:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420224e:	00 
  800420224f:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202256:	00 00 00 
  8004202259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202261:	48 8b 00             	mov    (%rax),%rax
  8004202264:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202268:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420226d:	74 2d                	je     800420229c <i386_detect_memory+0x65>
  800420226f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202273:	8b 00                	mov    (%rax),%eax
  8004202275:	83 e0 40             	and    $0x40,%eax
  8004202278:	85 c0                	test   %eax,%eax
  800420227a:	74 20                	je     800420229c <i386_detect_memory+0x65>
  800420227c:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004202280:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202288:	48 89 ce             	mov    %rcx,%rsi
  800420228b:	48 89 c7             	mov    %rax,%rdi
  800420228e:	48 b8 d9 1c 20 04 80 	movabs $0x8004201cd9,%rax
  8004202295:	00 00 00 
  8004202298:	ff d0                	callq  *%rax
  800420229a:	eb 34                	jmp    80042022d0 <i386_detect_memory+0x99>
  800420229c:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022a1:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022a8:	00 00 00 
  80042022ab:	ff d0                	callq  *%rax
  80042022ad:	c1 e0 0a             	shl    $0xa,%eax
  80042022b0:	48 98                	cltq   
  80042022b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022b6:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022bb:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022c2:	00 00 00 
  80042022c5:	ff d0                	callq  *%rax
  80042022c7:	c1 e0 0a             	shl    $0xa,%eax
  80042022ca:	48 98                	cltq   
  80042022cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022d4:	48 85 c0             	test   %rax,%rax
  80042022d7:	75 35                	jne    800420230e <i386_detect_memory+0xd7>
  80042022d9:	48 b9 c9 f0 21 04 80 	movabs $0x800421f0c9,%rcx
  80042022e0:	00 00 00 
  80042022e3:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042022ea:	00 00 00 
  80042022ed:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022f2:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042022f9:	00 00 00 
  80042022fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202301:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202308:	00 00 00 
  800420230b:	41 ff d0             	callq  *%r8
  800420230e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202312:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202316:	48 89 c2             	mov    %rax,%rdx
  8004202319:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  8004202320:	00 00 00 
  8004202323:	48 89 10             	mov    %rdx,(%rax)
  8004202326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420232a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420232e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202332:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202337:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  800420233e:	00 00 00 
  8004202341:	ff d0                	callq  *%rax
  8004202343:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202348:	75 2c                	jne    8004202376 <i386_detect_memory+0x13f>
  800420234a:	bf 34 00 00 00       	mov    $0x34,%edi
  800420234f:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  8004202356:	00 00 00 
  8004202359:	ff d0                	callq  *%rax
  800420235b:	c1 e0 10             	shl    $0x10,%eax
  800420235e:	48 98                	cltq   
  8004202360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202368:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420236e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202376:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420237b:	74 1a                	je     8004202397 <i386_detect_memory+0x160>
  800420237d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202381:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202388:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420238f:	00 00 00 
  8004202392:	48 89 10             	mov    %rdx,(%rax)
  8004202395:	eb 1a                	jmp    80042023b1 <i386_detect_memory+0x17a>
  8004202397:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  800420239e:	00 00 00 
  80042023a1:	48 8b 10             	mov    (%rax),%rdx
  80042023a4:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042023ab:	00 00 00 
  80042023ae:	48 89 10             	mov    %rdx,(%rax)
  80042023b1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042023b8:	00 00 00 
  80042023bb:	48 8b 30             	mov    (%rax),%rsi
  80042023be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023c2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023c6:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ca:	48 89 c1             	mov    %rax,%rcx
  80042023cd:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  80042023d4:	00 00 00 
  80042023d7:	48 8b 00             	mov    (%rax),%rax
  80042023da:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023de:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023e2:	48 89 c2             	mov    %rax,%rdx
  80042023e5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042023ec:	00 00 00 
  80042023ef:	48 8b 00             	mov    (%rax),%rax
  80042023f2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023f6:	48 c1 e8 14          	shr    $0x14,%rax
  80042023fa:	49 89 f0             	mov    %rsi,%r8
  80042023fd:	48 89 c6             	mov    %rax,%rsi
  8004202400:	48 bf f8 f0 21 04 80 	movabs $0x800421f0f8,%rdi
  8004202407:	00 00 00 
  800420240a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420240f:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202416:	00 00 00 
  8004202419:	41 ff d1             	callq  *%r9
  800420241c:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202423:	00 
  8004202424:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  800420242b:	07 
  800420242c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202430:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202434:	48 c1 e8 14          	shr    $0x14,%rax
  8004202438:	48 89 c1             	mov    %rax,%rcx
  800420243b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420243f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202443:	48 c1 e8 14          	shr    $0x14,%rax
  8004202447:	48 89 c6             	mov    %rax,%rsi
  800420244a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420244e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202452:	49 89 c8             	mov    %rcx,%r8
  8004202455:	48 89 d1             	mov    %rdx,%rcx
  8004202458:	48 89 f2             	mov    %rsi,%rdx
  800420245b:	48 89 c6             	mov    %rax,%rsi
  800420245e:	48 bf 48 f1 21 04 80 	movabs $0x800421f148,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202474:	00 00 00 
  8004202477:	41 ff d1             	callq  *%r9
  800420247a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420247e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004202482:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420248b:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202492:	00 00 00 
  8004202495:	48 8b 00             	mov    (%rax),%rax
  8004202498:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420249c:	76 3a                	jbe    80042024d8 <i386_detect_memory+0x2a1>
  800420249e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024a2:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024a9:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042024b0:	00 00 00 
  80042024b3:	48 89 10             	mov    %rdx,(%rax)
  80042024b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ba:	48 89 c6             	mov    %rax,%rsi
  80042024bd:	48 bf b0 f1 21 04 80 	movabs $0x800421f1b0,%rdi
  80042024c4:	00 00 00 
  80042024c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024cc:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042024d3:	00 00 00 
  80042024d6:	ff d2                	callq  *%rdx
  80042024d8:	c9                   	leaveq 
  80042024d9:	c3                   	retq   

00000080042024da <boot_alloc>:
  80042024da:	55                   	push   %rbp
  80042024db:	48 89 e5             	mov    %rsp,%rbp
  80042024de:	48 83 ec 40          	sub    $0x40,%rsp
  80042024e2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024e5:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  80042024ec:	00 00 00 
  80042024ef:	48 8b 00             	mov    (%rax),%rax
  80042024f2:	48 85 c0             	test   %rax,%rax
  80042024f5:	75 4e                	jne    8004202545 <boot_alloc+0x6b>
  80042024f7:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  80042024fe:	00 
  80042024ff:	48 b8 d0 d5 6d 04 80 	movabs $0x80046dd5d0,%rax
  8004202506:	00 00 00 
  8004202509:	48 8b 10             	mov    (%rax),%rdx
  800420250c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202510:	48 01 d0             	add    %rdx,%rax
  8004202513:	48 83 e8 01          	sub    $0x1,%rax
  8004202517:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420251b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420251f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202524:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202528:	48 89 d0             	mov    %rdx,%rax
  800420252b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420252f:	48 29 c2             	sub    %rax,%rdx
  8004202532:	48 89 d0             	mov    %rdx,%rax
  8004202535:	48 89 c2             	mov    %rax,%rdx
  8004202538:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  800420253f:	00 00 00 
  8004202542:	48 89 10             	mov    %rdx,(%rax)
  8004202545:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202548:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  800420254f:	00 00 00 
  8004202552:	48 8b 00             	mov    (%rax),%rax
  8004202555:	48 01 c2             	add    %rax,%rdx
  8004202558:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  800420255f:	00 00 00 
  8004202562:	48 8b 00             	mov    (%rax),%rax
  8004202565:	48 39 c2             	cmp    %rax,%rdx
  8004202568:	72 2f                	jb     8004202599 <boot_alloc+0xbf>
  800420256a:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  8004202571:	00 00 00 
  8004202574:	48 8b 10             	mov    (%rax),%rdx
  8004202577:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420257a:	48 01 c2             	add    %rax,%rdx
  800420257d:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202584:	00 00 00 
  8004202587:	48 8b 00             	mov    (%rax),%rax
  800420258a:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202590:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202594:	48 39 c2             	cmp    %rax,%rdx
  8004202597:	76 2a                	jbe    80042025c3 <boot_alloc+0xe9>
  8004202599:	48 ba e0 f1 21 04 80 	movabs $0x800421f1e0,%rdx
  80042025a0:	00 00 00 
  80042025a3:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025a8:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042025af:	00 00 00 
  80042025b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042025be:	00 00 00 
  80042025c1:	ff d1                	callq  *%rcx
  80042025c3:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  80042025ca:	00 00 00 
  80042025cd:	48 8b 00             	mov    (%rax),%rax
  80042025d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025d4:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025db:	00 
  80042025dc:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  80042025e3:	00 00 00 
  80042025e6:	48 8b 10             	mov    (%rax),%rdx
  80042025e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025ec:	48 01 d0             	add    %rdx,%rax
  80042025ef:	48 89 c2             	mov    %rax,%rdx
  80042025f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042025f6:	48 01 d0             	add    %rdx,%rax
  80042025f9:	48 83 e8 01          	sub    $0x1,%rax
  80042025fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202605:	ba 00 00 00 00       	mov    $0x0,%edx
  800420260a:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420260e:	48 89 d0             	mov    %rdx,%rax
  8004202611:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202615:	48 29 c2             	sub    %rax,%rdx
  8004202618:	48 89 d0             	mov    %rdx,%rax
  800420261b:	48 89 c2             	mov    %rax,%rdx
  800420261e:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  8004202625:	00 00 00 
  8004202628:	48 89 10             	mov    %rdx,(%rax)
  800420262b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420262f:	c9                   	leaveq 
  8004202630:	c3                   	retq   

0000008004202631 <x64_vm_init>:
  8004202631:	55                   	push   %rbp
  8004202632:	48 89 e5             	mov    %rsp,%rbp
  8004202635:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202639:	48 b8 37 22 20 04 80 	movabs $0x8004202237,%rax
  8004202640:	00 00 00 
  8004202643:	ff d0                	callq  *%rax
  8004202645:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420264a:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202651:	00 00 00 
  8004202654:	ff d0                	callq  *%rax
  8004202656:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202663:	be 00 00 00 00       	mov    $0x0,%esi
  8004202668:	48 89 c7             	mov    %rax,%rdi
  800420266b:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004202672:	00 00 00 
  8004202675:	ff d0                	callq  *%rax
  8004202677:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420267e:	00 00 00 
  8004202681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202685:	48 89 10             	mov    %rdx,(%rax)
  8004202688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420268c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202690:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202697:	00 00 00 
  800420269a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420269e:	77 32                	ja     80042026d2 <x64_vm_init+0xa1>
  80042026a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026a4:	48 89 c1             	mov    %rax,%rcx
  80042026a7:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  80042026ae:	00 00 00 
  80042026b1:	be 18 01 00 00       	mov    $0x118,%esi
  80042026b6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042026bd:	00 00 00 
  80042026c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042026cc:	00 00 00 
  80042026cf:	41 ff d0             	callq  *%r8
  80042026d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026d9:	ff ff ff 
  80042026dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026e0:	48 01 c2             	add    %rax,%rdx
  80042026e3:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  80042026ea:	00 00 00 
  80042026ed:	48 89 10             	mov    %rdx,(%rax)
  80042026f0:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042026f7:	00 00 00 
  80042026fa:	48 8b 00             	mov    (%rax),%rax
  80042026fd:	48 c1 e0 04          	shl    $0x4,%rax
  8004202701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202709:	89 c7                	mov    %eax,%edi
  800420270b:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202712:	00 00 00 
  8004202715:	ff d0                	callq  *%rax
  8004202717:	48 ba 00 d6 6d 04 80 	movabs $0x80046dd600,%rdx
  800420271e:	00 00 00 
  8004202721:	48 89 02             	mov    %rax,(%rdx)
  8004202724:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800420272b:	00 00 00 
  800420272e:	48 8b 00             	mov    (%rax),%rax
  8004202731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202735:	be 00 00 00 00       	mov    $0x0,%esi
  800420273a:	48 89 c7             	mov    %rax,%rdi
  800420273d:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004202744:	00 00 00 
  8004202747:	ff d0                	callq  *%rax
  8004202749:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420274e:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202755:	00 00 00 
  8004202758:	ff d0                	callq  *%rax
  800420275a:	48 ba 58 e2 4d 04 80 	movabs $0x80044de258,%rdx
  8004202761:	00 00 00 
  8004202764:	48 89 02             	mov    %rax,(%rdx)
  8004202767:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420276e:	00 00 00 
  8004202771:	48 8b 00             	mov    (%rax),%rax
  8004202774:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202779:	be 00 00 00 00       	mov    $0x0,%esi
  800420277e:	48 89 c7             	mov    %rax,%rdi
  8004202781:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004202788:	00 00 00 
  800420278b:	ff d0                	callq  *%rax
  800420278d:	48 b8 eb 2b 20 04 80 	movabs $0x8004202beb,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042027a0:	00 00 00 
  80042027a3:	48 8b 00             	mov    (%rax),%rax
  80042027a6:	48 c1 e0 04          	shl    $0x4,%rax
  80042027aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ae:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042027b5:	00 00 00 
  80042027b8:	48 8b 00             	mov    (%rax),%rax
  80042027bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027bf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027c6:	00 00 00 
  80042027c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027cd:	77 32                	ja     8004202801 <x64_vm_init+0x1d0>
  80042027cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027d3:	48 89 c1             	mov    %rax,%rcx
  80042027d6:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  80042027dd:	00 00 00 
  80042027e0:	be 43 01 00 00       	mov    $0x143,%esi
  80042027e5:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042027ec:	00 00 00 
  80042027ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042027fb:	00 00 00 
  80042027fe:	41 ff d0             	callq  *%r8
  8004202801:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202808:	ff ff ff 
  800420280b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420280f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202813:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420281a:	00 00 00 
  800420281d:	48 8b 00             	mov    (%rax),%rax
  8004202820:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202824:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420282a:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202831:	00 00 00 
  8004202834:	48 89 c7             	mov    %rax,%rdi
  8004202837:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420283e:	00 00 00 
  8004202841:	ff d0                	callq  *%rax
  8004202843:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420284a:	00 
  800420284b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420284f:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202855:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420285d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202862:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202866:	48 89 d0             	mov    %rdx,%rax
  8004202869:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420286d:	48 29 c2             	sub    %rax,%rdx
  8004202870:	48 89 d0             	mov    %rdx,%rax
  8004202873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202877:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420287e:	00 00 00 
  8004202881:	48 8b 00             	mov    (%rax),%rax
  8004202884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202888:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420288f:	00 00 00 
  8004202892:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004202896:	77 32                	ja     80042028ca <x64_vm_init+0x299>
  8004202898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420289c:	48 89 c1             	mov    %rax,%rcx
  800420289f:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  80042028a6:	00 00 00 
  80042028a9:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ae:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042028b5:	00 00 00 
  80042028b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042028c4:	00 00 00 
  80042028c7:	41 ff d0             	callq  *%r8
  80042028ca:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028d1:	ff ff ff 
  80042028d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028d8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028dc:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042028e3:	00 00 00 
  80042028e6:	48 8b 00             	mov    (%rax),%rax
  80042028e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028ed:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028f3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042028fa:	00 00 00 
  80042028fd:	48 89 c7             	mov    %rax,%rdi
  8004202900:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202907:	00 00 00 
  800420290a:	ff d0                	callq  *%rax
  800420290c:	48 b8 00 60 22 04 80 	movabs $0x8004226000,%rax
  8004202913:	00 00 00 
  8004202916:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420291a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202921:	00 00 00 
  8004202924:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202928:	77 32                	ja     800420295c <x64_vm_init+0x32b>
  800420292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420292e:	48 89 c1             	mov    %rax,%rcx
  8004202931:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  8004202938:	00 00 00 
  800420293b:	be 62 01 00 00       	mov    $0x162,%esi
  8004202940:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202947:	00 00 00 
  800420294a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420294f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202956:	00 00 00 
  8004202959:	41 ff d0             	callq  *%r8
  800420295c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202963:	ff ff ff 
  8004202966:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420296a:	48 01 c2             	add    %rax,%rdx
  800420296d:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004202974:	00 00 00 
  8004202977:	48 8b 00             	mov    (%rax),%rax
  800420297a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202980:	48 89 d1             	mov    %rdx,%rcx
  8004202983:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202988:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420298f:	00 00 00 
  8004202992:	48 89 c7             	mov    %rax,%rdi
  8004202995:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420299c:	00 00 00 
  800420299f:	ff d0                	callq  *%rax
  80042029a1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042029a8:	00 00 00 
  80042029ab:	48 8b 00             	mov    (%rax),%rax
  80042029ae:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029b2:	48 89 c2             	mov    %rax,%rdx
  80042029b5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042029bc:	00 00 00 
  80042029bf:	48 8b 00             	mov    (%rax),%rax
  80042029c2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029c8:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029cd:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029d4:	00 00 00 
  80042029d7:	48 89 c7             	mov    %rax,%rdi
  80042029da:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  80042029e1:	00 00 00 
  80042029e4:	ff d0                	callq  *%rax
  80042029e6:	48 b8 00 2b 20 04 80 	movabs $0x8004202b00,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042029f6:	48 83 c0 08          	add    $0x8,%rax
  80042029fa:	48 8b 00             	mov    (%rax),%rax
  80042029fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a0b:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a0f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a12:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a15:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202a1c:	00 00 00 
  8004202a1f:	48 8b 00             	mov    (%rax),%rax
  8004202a22:	48 39 c2             	cmp    %rax,%rdx
  8004202a25:	72 32                	jb     8004202a59 <x64_vm_init+0x428>
  8004202a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a2b:	48 89 c1             	mov    %rax,%rcx
  8004202a2e:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004202a35:	00 00 00 
  8004202a38:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a3d:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202a44:	00 00 00 
  8004202a47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a4c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202a53:	00 00 00 
  8004202a56:	41 ff d0             	callq  *%r8
  8004202a59:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a60:	00 00 00 
  8004202a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a67:	48 01 d0             	add    %rdx,%rax
  8004202a6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a72:	48 8b 00             	mov    (%rax),%rax
  8004202a75:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a7b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a83:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a87:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a8a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a8d:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202a94:	00 00 00 
  8004202a97:	48 8b 00             	mov    (%rax),%rax
  8004202a9a:	48 39 c2             	cmp    %rax,%rdx
  8004202a9d:	72 32                	jb     8004202ad1 <x64_vm_init+0x4a0>
  8004202a9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aa3:	48 89 c1             	mov    %rax,%rcx
  8004202aa6:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004202aad:	00 00 00 
  8004202ab0:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ab5:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202abc:	00 00 00 
  8004202abf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202acb:	00 00 00 
  8004202ace:	41 ff d0             	callq  *%r8
  8004202ad1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ad8:	00 00 00 
  8004202adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202adf:	48 01 d0             	add    %rdx,%rax
  8004202ae2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202ae6:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202af7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202afb:	0f 22 d8             	mov    %rax,%cr3
  8004202afe:	c9                   	leaveq 
  8004202aff:	c3                   	retq   

0000008004202b00 <mem_init_mp>:
  8004202b00:	55                   	push   %rbp
  8004202b01:	48 89 e5             	mov    %rsp,%rbp
  8004202b04:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b0f:	e9 cb 00 00 00       	jmpq   8004202bdf <mem_init_mp+0xdf>
  8004202b14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b17:	89 d0                	mov    %edx,%eax
  8004202b19:	01 c0                	add    %eax,%eax
  8004202b1b:	01 d0                	add    %edx,%eax
  8004202b1d:	c1 e0 0f             	shl    $0xf,%eax
  8004202b20:	48 98                	cltq   
  8004202b22:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b29:	00 00 00 
  8004202b2c:	48 29 c2             	sub    %rax,%rdx
  8004202b2f:	48 89 d0             	mov    %rdx,%rax
  8004202b32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b39:	48 98                	cltq   
  8004202b3b:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b3f:	48 89 c2             	mov    %rax,%rdx
  8004202b42:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004202b49:	00 00 00 
  8004202b4c:	48 01 d0             	add    %rdx,%rax
  8004202b4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b53:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b5a:	00 00 00 
  8004202b5d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b61:	77 32                	ja     8004202b95 <mem_init_mp+0x95>
  8004202b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b67:	48 89 c1             	mov    %rax,%rcx
  8004202b6a:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  8004202b71:	00 00 00 
  8004202b74:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b79:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202b80:	00 00 00 
  8004202b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b88:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202b8f:	00 00 00 
  8004202b92:	41 ff d0             	callq  *%r8
  8004202b95:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202b9c:	ff ff ff 
  8004202b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ba3:	48 01 c2             	add    %rax,%rdx
  8004202ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202baa:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bb1:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004202bb8:	00 00 00 
  8004202bbb:	48 8b 00             	mov    (%rax),%rax
  8004202bbe:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bc4:	48 89 d1             	mov    %rdx,%rcx
  8004202bc7:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bcc:	48 89 c7             	mov    %rax,%rdi
  8004202bcf:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202bd6:	00 00 00 
  8004202bd9:	ff d0                	callq  *%rax
  8004202bdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202bdf:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202be3:	0f 8e 2b ff ff ff    	jle    8004202b14 <mem_init_mp+0x14>
  8004202be9:	c9                   	leaveq 
  8004202bea:	c3                   	retq   

0000008004202beb <page_init>:
  8004202beb:	55                   	push   %rbp
  8004202bec:	48 89 e5             	mov    %rsp,%rbp
  8004202bef:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bf3:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202bf8:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202bff:	00 00 00 
  8004202c02:	ff d0                	callq  *%rax
  8004202c04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c0f:	00 
  8004202c10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c17:	00 
  8004202c18:	e9 65 02 00 00       	jmpq   8004202e82 <page_init+0x297>
  8004202c1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c29:	74 1a                	je     8004202c45 <page_init+0x5a>
  8004202c2b:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c3c:	73 07                	jae    8004202c45 <page_init+0x5a>
  8004202c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c45:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c4a:	75 07                	jne    8004202c53 <page_init+0x68>
  8004202c4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c5b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c62:	00 00 00 
  8004202c65:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c69:	77 32                	ja     8004202c9d <page_init+0xb2>
  8004202c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c6f:	48 89 c1             	mov    %rax,%rcx
  8004202c72:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  8004202c79:	00 00 00 
  8004202c7c:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c81:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202c88:	00 00 00 
  8004202c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202c97:	00 00 00 
  8004202c9a:	41 ff d0             	callq  *%r8
  8004202c9d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ca4:	ff ff ff 
  8004202ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cab:	48 01 d0             	add    %rdx,%rax
  8004202cae:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cb6:	77 07                	ja     8004202cbf <page_init+0xd4>
  8004202cb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cc3:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cc9:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202ccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cd1:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202cd8:	00 00 00 
  8004202cdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ce3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ce7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202ced:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202cf4:	00 00 00 
  8004202cf7:	48 8b 00             	mov    (%rax),%rax
  8004202cfa:	48 39 c2             	cmp    %rax,%rdx
  8004202cfd:	72 32                	jb     8004202d31 <page_init+0x146>
  8004202cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d03:	48 89 c1             	mov    %rax,%rcx
  8004202d06:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004202d0d:	00 00 00 
  8004202d10:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d15:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202d1c:	00 00 00 
  8004202d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202d2b:	00 00 00 
  8004202d2e:	41 ff d0             	callq  *%r8
  8004202d31:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d38:	00 00 00 
  8004202d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d3f:	48 01 d0             	add    %rdx,%rax
  8004202d42:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d46:	0f 87 84 00 00 00    	ja     8004202dd0 <page_init+0x1e5>
  8004202d4c:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d53:	00 00 00 
  8004202d56:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d64:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d68:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d6b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d6e:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202d75:	00 00 00 
  8004202d78:	48 8b 00             	mov    (%rax),%rax
  8004202d7b:	48 39 c2             	cmp    %rax,%rdx
  8004202d7e:	72 32                	jb     8004202db2 <page_init+0x1c7>
  8004202d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d84:	48 89 c1             	mov    %rax,%rcx
  8004202d87:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004202d8e:	00 00 00 
  8004202d91:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d96:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202d9d:	00 00 00 
  8004202da0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202da5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202dac:	00 00 00 
  8004202daf:	41 ff d0             	callq  *%r8
  8004202db2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202db9:	00 00 00 
  8004202dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dc0:	48 01 d0             	add    %rdx,%rax
  8004202dc3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dc7:	76 07                	jbe    8004202dd0 <page_init+0x1e5>
  8004202dc9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dd0:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202dd7:	00 00 00 
  8004202dda:	48 8b 00             	mov    (%rax),%rax
  8004202ddd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202de1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202de5:	48 01 c2             	add    %rax,%rdx
  8004202de8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202deb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202def:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202df6:	00 00 00 
  8004202df9:	48 8b 00             	mov    (%rax),%rax
  8004202dfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e00:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e12:	75 69                	jne    8004202e7d <page_init+0x292>
  8004202e14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e19:	74 21                	je     8004202e3c <page_init+0x251>
  8004202e1b:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202e22:	00 00 00 
  8004202e25:	48 8b 00             	mov    (%rax),%rax
  8004202e28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e2c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e30:	48 01 c2             	add    %rax,%rdx
  8004202e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e37:	48 89 10             	mov    %rdx,(%rax)
  8004202e3a:	eb 25                	jmp    8004202e61 <page_init+0x276>
  8004202e3c:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202e43:	00 00 00 
  8004202e46:	48 8b 00             	mov    (%rax),%rax
  8004202e49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e51:	48 01 c2             	add    %rax,%rdx
  8004202e54:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202e5b:	00 00 00 
  8004202e5e:	48 89 10             	mov    %rdx,(%rax)
  8004202e61:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202e68:	00 00 00 
  8004202e6b:	48 8b 00             	mov    (%rax),%rax
  8004202e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e72:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e76:	48 01 d0             	add    %rdx,%rax
  8004202e79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e7d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e82:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202e89:	00 00 00 
  8004202e8c:	48 8b 00             	mov    (%rax),%rax
  8004202e8f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e93:	0f 82 84 fd ff ff    	jb     8004202c1d <page_init+0x32>
  8004202e99:	c9                   	leaveq 
  8004202e9a:	c3                   	retq   

0000008004202e9b <page_alloc>:
  8004202e9b:	55                   	push   %rbp
  8004202e9c:	48 89 e5             	mov    %rsp,%rbp
  8004202e9f:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ea3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202ea6:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202ead:	00 00 00 
  8004202eb0:	48 8b 00             	mov    (%rax),%rax
  8004202eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202eb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ebc:	74 5e                	je     8004202f1c <page_alloc+0x81>
  8004202ebe:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202ec5:	00 00 00 
  8004202ec8:	48 8b 00             	mov    (%rax),%rax
  8004202ecb:	48 8b 10             	mov    (%rax),%rdx
  8004202ece:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202ed5:	00 00 00 
  8004202ed8:	48 89 10             	mov    %rdx,(%rax)
  8004202edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202edf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ee6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ee9:	83 e0 01             	and    $0x1,%eax
  8004202eec:	85 c0                	test   %eax,%eax
  8004202eee:	74 2c                	je     8004202f1c <page_alloc+0x81>
  8004202ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ef4:	48 89 c7             	mov    %rax,%rdi
  8004202ef7:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004202efe:	00 00 00 
  8004202f01:	ff d0                	callq  *%rax
  8004202f03:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f08:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f0d:	48 89 c7             	mov    %rax,%rdi
  8004202f10:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004202f17:	00 00 00 
  8004202f1a:	ff d0                	callq  *%rax
  8004202f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f20:	c9                   	leaveq 
  8004202f21:	c3                   	retq   

0000008004202f22 <page_initpp>:
  8004202f22:	55                   	push   %rbp
  8004202f23:	48 89 e5             	mov    %rsp,%rbp
  8004202f26:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f32:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f37:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f3c:	48 89 c7             	mov    %rax,%rdi
  8004202f3f:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004202f46:	00 00 00 
  8004202f49:	ff d0                	callq  *%rax
  8004202f4b:	c9                   	leaveq 
  8004202f4c:	c3                   	retq   

0000008004202f4d <page_free>:
  8004202f4d:	55                   	push   %rbp
  8004202f4e:	48 89 e5             	mov    %rsp,%rbp
  8004202f51:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f61:	66 85 c0             	test   %ax,%ax
  8004202f64:	75 0c                	jne    8004202f72 <page_free+0x25>
  8004202f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 85 c0             	test   %rax,%rax
  8004202f70:	74 2c                	je     8004202f9e <page_free+0x51>
  8004202f72:	48 ba 30 f2 21 04 80 	movabs $0x800421f230,%rdx
  8004202f79:	00 00 00 
  8004202f7c:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f81:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004202f88:	00 00 00 
  8004202f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f90:	48 b9 00 06 20 04 80 	movabs $0x8004200600,%rcx
  8004202f97:	00 00 00 
  8004202f9a:	ff d1                	callq  *%rcx
  8004202f9c:	eb 2f                	jmp    8004202fcd <page_free+0x80>
  8004202f9e:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202fa5:	00 00 00 
  8004202fa8:	48 8b 10             	mov    (%rax),%rdx
  8004202fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202faf:	48 89 10             	mov    %rdx,(%rax)
  8004202fb2:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202fb9:	00 00 00 
  8004202fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fc0:	48 89 10             	mov    %rdx,(%rax)
  8004202fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fc7:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fcd:	c9                   	leaveq 
  8004202fce:	c3                   	retq   

0000008004202fcf <page_decref>:
  8004202fcf:	55                   	push   %rbp
  8004202fd0:	48 89 e5             	mov    %rsp,%rbp
  8004202fd3:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fdf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fe3:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202ff6:	66 85 c0             	test   %ax,%ax
  8004202ff9:	75 13                	jne    800420300e <page_decref+0x3f>
  8004202ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fff:	48 89 c7             	mov    %rax,%rdi
  8004203002:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004203009:	00 00 00 
  800420300c:	ff d0                	callq  *%rax
  800420300e:	c9                   	leaveq 
  800420300f:	c3                   	retq   

0000008004203010 <pml4e_walk>:
  8004203010:	55                   	push   %rbp
  8004203011:	48 89 e5             	mov    %rsp,%rbp
  8004203014:	53                   	push   %rbx
  8004203015:	48 83 ec 68          	sub    $0x68,%rsp
  8004203019:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420301d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203021:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203024:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203029:	0f 84 4e 02 00 00    	je     800420327d <pml4e_walk+0x26d>
  800420302f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203033:	48 c1 e8 27          	shr    $0x27,%rax
  8004203037:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420303c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203043:	00 
  8004203044:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203048:	48 01 d0             	add    %rdx,%rax
  800420304b:	48 8b 00             	mov    (%rax),%rax
  800420304e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203056:	83 e0 01             	and    $0x1,%eax
  8004203059:	48 85 c0             	test   %rax,%rax
  800420305c:	0f 85 7f 01 00 00    	jne    80042031e1 <pml4e_walk+0x1d1>
  8004203062:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203066:	0f 84 75 01 00 00    	je     80042031e1 <pml4e_walk+0x1d1>
  800420306c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203073:	00 
  8004203074:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203079:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203080:	00 00 00 
  8004203083:	ff d0                	callq  *%rax
  8004203085:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203089:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420308e:	0f 84 43 01 00 00    	je     80042031d7 <pml4e_walk+0x1c7>
  8004203094:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203098:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420309c:	8d 50 01             	lea    0x1(%rax),%edx
  800420309f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ab:	48 c1 e8 27          	shr    $0x27,%rax
  80042030af:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030bb:	00 
  80042030bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030c0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030c8:	48 89 c7             	mov    %rax,%rdi
  80042030cb:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042030d2:	00 00 00 
  80042030d5:	ff d0                	callq  *%rax
  80042030d7:	48 83 c8 07          	or     $0x7,%rax
  80042030db:	48 89 03             	mov    %rax,(%rbx)
  80042030de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030e2:	48 c1 e8 27          	shr    $0x27,%rax
  80042030e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030f2:	00 
  80042030f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030f7:	48 01 d0             	add    %rdx,%rax
  80042030fa:	48 8b 00             	mov    (%rax),%rax
  80042030fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203103:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420310b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420310f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203112:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203115:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420311c:	00 00 00 
  800420311f:	48 8b 00             	mov    (%rax),%rax
  8004203122:	48 39 c2             	cmp    %rax,%rdx
  8004203125:	72 32                	jb     8004203159 <pml4e_walk+0x149>
  8004203127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420312b:	48 89 c1             	mov    %rax,%rcx
  800420312e:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004203135:	00 00 00 
  8004203138:	be 79 02 00 00       	mov    $0x279,%esi
  800420313d:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203144:	00 00 00 
  8004203147:	b8 00 00 00 00       	mov    $0x0,%eax
  800420314c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203153:	00 00 00 
  8004203156:	41 ff d0             	callq  *%r8
  8004203159:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203160:	00 00 00 
  8004203163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203167:	48 01 d0             	add    %rdx,%rax
  800420316a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420316d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203171:	48 89 ce             	mov    %rcx,%rsi
  8004203174:	48 89 c7             	mov    %rax,%rdi
  8004203177:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  800420317e:	00 00 00 
  8004203181:	ff d0                	callq  *%rax
  8004203183:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203187:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420318c:	74 09                	je     8004203197 <pml4e_walk+0x187>
  800420318e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203192:	e9 eb 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  8004203197:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420319b:	48 c1 e8 27          	shr    $0x27,%rax
  800420319f:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031ab:	00 
  80042031ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031b0:	48 01 d0             	add    %rdx,%rax
  80042031b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031be:	48 89 c7             	mov    %rax,%rdi
  80042031c1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042031c8:	00 00 00 
  80042031cb:	ff d0                	callq  *%rax
  80042031cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031d2:	e9 ab 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031dc:	e9 a1 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031e5:	83 e0 01             	and    $0x1,%eax
  80042031e8:	48 85 c0             	test   %rax,%rax
  80042031eb:	0f 84 8c 00 00 00    	je     800420327d <pml4e_walk+0x26d>
  80042031f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042031fb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042031ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203203:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203207:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420320a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420320d:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203214:	00 00 00 
  8004203217:	48 8b 00             	mov    (%rax),%rax
  800420321a:	48 39 c2             	cmp    %rax,%rdx
  800420321d:	72 32                	jb     8004203251 <pml4e_walk+0x241>
  800420321f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203223:	48 89 c1             	mov    %rax,%rcx
  8004203226:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  800420322d:	00 00 00 
  8004203230:	be 83 02 00 00       	mov    $0x283,%esi
  8004203235:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420323c:	00 00 00 
  800420323f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203244:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420324b:	00 00 00 
  800420324e:	41 ff d0             	callq  *%r8
  8004203251:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203258:	00 00 00 
  800420325b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420325f:	48 01 d0             	add    %rdx,%rax
  8004203262:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203265:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203269:	48 89 ce             	mov    %rcx,%rsi
  800420326c:	48 89 c7             	mov    %rax,%rdi
  800420326f:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  8004203276:	00 00 00 
  8004203279:	ff d0                	callq  *%rax
  800420327b:	eb 05                	jmp    8004203282 <pml4e_walk+0x272>
  800420327d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203282:	48 83 c4 68          	add    $0x68,%rsp
  8004203286:	5b                   	pop    %rbx
  8004203287:	5d                   	pop    %rbp
  8004203288:	c3                   	retq   

0000008004203289 <pdpe_walk>:
  8004203289:	55                   	push   %rbp
  800420328a:	48 89 e5             	mov    %rsp,%rbp
  800420328d:	53                   	push   %rbx
  800420328e:	48 83 ec 68          	sub    $0x68,%rsp
  8004203292:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203296:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420329a:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800420329d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032a2:	0f 84 4e 02 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  80042032a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032ac:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032b0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032bc:	00 
  80042032bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032c1:	48 01 d0             	add    %rdx,%rax
  80042032c4:	48 8b 00             	mov    (%rax),%rax
  80042032c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032cf:	83 e0 01             	and    $0x1,%eax
  80042032d2:	48 85 c0             	test   %rax,%rax
  80042032d5:	0f 85 7f 01 00 00    	jne    800420345a <pdpe_walk+0x1d1>
  80042032db:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032df:	0f 84 75 01 00 00    	je     800420345a <pdpe_walk+0x1d1>
  80042032e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032ec:	00 
  80042032ed:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032f2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042032f9:	00 00 00 
  80042032fc:	ff d0                	callq  *%rax
  80042032fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203302:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203307:	0f 84 43 01 00 00    	je     8004203450 <pdpe_walk+0x1c7>
  800420330d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203311:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203315:	8d 50 01             	lea    0x1(%rax),%edx
  8004203318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203320:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203324:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203328:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420332d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203334:	00 
  8004203335:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420333d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203341:	48 89 c7             	mov    %rax,%rdi
  8004203344:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420334b:	00 00 00 
  800420334e:	ff d0                	callq  *%rax
  8004203350:	48 83 c8 07          	or     $0x7,%rax
  8004203354:	48 89 03             	mov    %rax,(%rbx)
  8004203357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420335b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420335f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203364:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420336b:	00 
  800420336c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203370:	48 01 d0             	add    %rdx,%rax
  8004203373:	48 8b 00             	mov    (%rax),%rax
  8004203376:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420337c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203384:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203388:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420338b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420338e:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203395:	00 00 00 
  8004203398:	48 8b 00             	mov    (%rax),%rax
  800420339b:	48 39 c2             	cmp    %rax,%rdx
  800420339e:	72 32                	jb     80042033d2 <pdpe_walk+0x149>
  80042033a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033a4:	48 89 c1             	mov    %rax,%rcx
  80042033a7:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042033ae:	00 00 00 
  80042033b1:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033b6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042033bd:	00 00 00 
  80042033c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042033cc:	00 00 00 
  80042033cf:	41 ff d0             	callq  *%r8
  80042033d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033d9:	00 00 00 
  80042033dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033e0:	48 01 d0             	add    %rdx,%rax
  80042033e3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033e6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ea:	48 89 ce             	mov    %rcx,%rsi
  80042033ed:	48 89 c7             	mov    %rax,%rdi
  80042033f0:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042033f7:	00 00 00 
  80042033fa:	ff d0                	callq  *%rax
  80042033fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203400:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203405:	74 09                	je     8004203410 <pdpe_walk+0x187>
  8004203407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420340b:	e9 eb 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203410:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203414:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203418:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420341d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203424:	00 
  8004203425:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203429:	48 01 d0             	add    %rdx,%rax
  800420342c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203437:	48 89 c7             	mov    %rax,%rdi
  800420343a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203441:	00 00 00 
  8004203444:	ff d0                	callq  *%rax
  8004203446:	b8 00 00 00 00       	mov    $0x0,%eax
  800420344b:	e9 ab 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203450:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203455:	e9 a1 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  800420345a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420345e:	83 e0 01             	and    $0x1,%eax
  8004203461:	48 85 c0             	test   %rax,%rax
  8004203464:	0f 84 8c 00 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  800420346a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203474:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420347c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203480:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203483:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203486:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420348d:	00 00 00 
  8004203490:	48 8b 00             	mov    (%rax),%rax
  8004203493:	48 39 c2             	cmp    %rax,%rdx
  8004203496:	72 32                	jb     80042034ca <pdpe_walk+0x241>
  8004203498:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420349c:	48 89 c1             	mov    %rax,%rcx
  800420349f:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042034a6:	00 00 00 
  80042034a9:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ae:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042034b5:	00 00 00 
  80042034b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042034c4:	00 00 00 
  80042034c7:	41 ff d0             	callq  *%r8
  80042034ca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034d1:	00 00 00 
  80042034d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034d8:	48 01 d0             	add    %rdx,%rax
  80042034db:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034de:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034e2:	48 89 ce             	mov    %rcx,%rsi
  80042034e5:	48 89 c7             	mov    %rax,%rdi
  80042034e8:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042034ef:	00 00 00 
  80042034f2:	ff d0                	callq  *%rax
  80042034f4:	eb 05                	jmp    80042034fb <pdpe_walk+0x272>
  80042034f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034fb:	48 83 c4 68          	add    $0x68,%rsp
  80042034ff:	5b                   	pop    %rbx
  8004203500:	5d                   	pop    %rbp
  8004203501:	c3                   	retq   

0000008004203502 <pgdir_walk>:
  8004203502:	55                   	push   %rbp
  8004203503:	48 89 e5             	mov    %rsp,%rbp
  8004203506:	53                   	push   %rbx
  8004203507:	48 83 ec 58          	sub    $0x58,%rsp
  800420350b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420350f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203513:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203516:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420351b:	0f 84 fd 01 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203521:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203525:	48 c1 e8 15          	shr    $0x15,%rax
  8004203529:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420352e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203535:	00 
  8004203536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420353a:	48 01 d0             	add    %rdx,%rax
  800420353d:	48 8b 00             	mov    (%rax),%rax
  8004203540:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203548:	83 e0 01             	and    $0x1,%eax
  800420354b:	48 85 c0             	test   %rax,%rax
  800420354e:	0f 85 2f 01 00 00    	jne    8004203683 <pgdir_walk+0x181>
  8004203554:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203558:	0f 84 25 01 00 00    	je     8004203683 <pgdir_walk+0x181>
  800420355e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203565:	00 
  8004203566:	bf 01 00 00 00       	mov    $0x1,%edi
  800420356b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203572:	00 00 00 
  8004203575:	ff d0                	callq  *%rax
  8004203577:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420357b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203580:	0f 84 f3 00 00 00    	je     8004203679 <pgdir_walk+0x177>
  8004203586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420358a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420358e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203595:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203599:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420359d:	48 c1 e8 15          	shr    $0x15,%rax
  80042035a1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035ad:	00 
  80042035ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035b2:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035ba:	48 89 c7             	mov    %rax,%rdi
  80042035bd:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042035c4:	00 00 00 
  80042035c7:	ff d0                	callq  *%rax
  80042035c9:	48 83 c8 07          	or     $0x7,%rax
  80042035cd:	48 89 03             	mov    %rax,(%rbx)
  80042035d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035d8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035e4:	00 
  80042035e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ed:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035f2:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  80042035f9:	00 
  80042035fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035fe:	48 01 c8             	add    %rcx,%rax
  8004203601:	48 8b 00             	mov    (%rax),%rax
  8004203604:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420360a:	48 01 d0             	add    %rdx,%rax
  800420360d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203615:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203619:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420361c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420361f:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203626:	00 00 00 
  8004203629:	48 8b 00             	mov    (%rax),%rax
  800420362c:	48 39 c2             	cmp    %rax,%rdx
  800420362f:	72 32                	jb     8004203663 <pgdir_walk+0x161>
  8004203631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203635:	48 89 c1             	mov    %rax,%rcx
  8004203638:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  800420363f:	00 00 00 
  8004203642:	be be 02 00 00       	mov    $0x2be,%esi
  8004203647:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420364e:	00 00 00 
  8004203651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203656:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420365d:	00 00 00 
  8004203660:	41 ff d0             	callq  *%r8
  8004203663:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420366a:	00 00 00 
  800420366d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203671:	48 01 d0             	add    %rdx,%rax
  8004203674:	e9 aa 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203679:	b8 00 00 00 00       	mov    $0x0,%eax
  800420367e:	e9 a0 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203687:	83 e0 01             	and    $0x1,%eax
  800420368a:	48 85 c0             	test   %rax,%rax
  800420368d:	0f 84 8b 00 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203693:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203697:	48 c1 e8 0c          	shr    $0xc,%rax
  800420369b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036a7:	00 
  80042036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036b2:	48 01 d0             	add    %rdx,%rax
  80042036b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036c4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036c7:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042036ce:	00 00 00 
  80042036d1:	48 8b 00             	mov    (%rax),%rax
  80042036d4:	48 39 c2             	cmp    %rax,%rdx
  80042036d7:	72 32                	jb     800420370b <pgdir_walk+0x209>
  80042036d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036dd:	48 89 c1             	mov    %rax,%rcx
  80042036e0:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042036e7:	00 00 00 
  80042036ea:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036ef:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042036f6:	00 00 00 
  80042036f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203705:	00 00 00 
  8004203708:	41 ff d0             	callq  *%r8
  800420370b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203712:	00 00 00 
  8004203715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203719:	48 01 d0             	add    %rdx,%rax
  800420371c:	eb 05                	jmp    8004203723 <pgdir_walk+0x221>
  800420371e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203723:	48 83 c4 58          	add    $0x58,%rsp
  8004203727:	5b                   	pop    %rbx
  8004203728:	5d                   	pop    %rbp
  8004203729:	c3                   	retq   

000000800420372a <boot_map_region>:
  800420372a:	55                   	push   %rbp
  800420372b:	48 89 e5             	mov    %rsp,%rbp
  800420372e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203732:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203736:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420373a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420373e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203742:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420374d:	00 
  800420374e:	e9 aa 02 00 00       	jmpq   80042039fd <boot_map_region+0x2d3>
  8004203753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203757:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420375b:	48 01 d0             	add    %rdx,%rax
  800420375e:	48 89 c1             	mov    %rax,%rcx
  8004203761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203765:	ba 01 00 00 00       	mov    $0x1,%edx
  800420376a:	48 89 ce             	mov    %rcx,%rsi
  800420376d:	48 89 c7             	mov    %rax,%rdi
  8004203770:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203777:	00 00 00 
  800420377a:	ff d0                	callq  *%rax
  800420377c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203784:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203788:	48 01 d0             	add    %rdx,%rax
  800420378b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420378f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004203794:	74 23                	je     80042037b9 <boot_map_region+0x8f>
  8004203796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420379a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037a0:	48 89 c2             	mov    %rax,%rdx
  80042037a3:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037a6:	48 98                	cltq   
  80042037a8:	48 09 d0             	or     %rdx,%rax
  80042037ab:	48 83 c8 01          	or     $0x1,%rax
  80042037af:	48 89 c2             	mov    %rax,%rdx
  80042037b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037b6:	48 89 10             	mov    %rdx,(%rax)
  80042037b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037c1:	48 01 d0             	add    %rdx,%rax
  80042037c4:	48 c1 e8 27          	shr    $0x27,%rax
  80042037c8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037d4:	00 
  80042037d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037e0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037e4:	48 01 ca             	add    %rcx,%rdx
  80042037e7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037eb:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037f1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042037f8:	00 
  80042037f9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042037fd:	48 01 ca             	add    %rcx,%rdx
  8004203800:	48 8b 0a             	mov    (%rdx),%rcx
  8004203803:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203806:	48 63 d2             	movslq %edx,%rdx
  8004203809:	48 09 ca             	or     %rcx,%rdx
  800420380c:	48 83 ca 01          	or     $0x1,%rdx
  8004203810:	48 89 10             	mov    %rdx,(%rax)
  8004203813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203817:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420381b:	48 01 d0             	add    %rdx,%rax
  800420381e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203822:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203827:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420382e:	00 
  800420382f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203833:	48 01 d0             	add    %rdx,%rax
  8004203836:	48 8b 00             	mov    (%rax),%rax
  8004203839:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420383f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203847:	48 c1 e8 0c          	shr    $0xc,%rax
  800420384b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420384e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203851:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203858:	00 00 00 
  800420385b:	48 8b 00             	mov    (%rax),%rax
  800420385e:	48 39 c2             	cmp    %rax,%rdx
  8004203861:	72 32                	jb     8004203895 <boot_map_region+0x16b>
  8004203863:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203867:	48 89 c1             	mov    %rax,%rcx
  800420386a:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004203871:	00 00 00 
  8004203874:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203879:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203880:	00 00 00 
  8004203883:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203888:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420388f:	00 00 00 
  8004203892:	41 ff d0             	callq  *%r8
  8004203895:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420389c:	00 00 00 
  800420389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a3:	48 01 d0             	add    %rdx,%rax
  80042038a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038b2:	48 01 d0             	add    %rdx,%rax
  80042038b5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038be:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038c5:	00 
  80042038c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038ca:	48 01 d0             	add    %rdx,%rax
  80042038cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038d1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038d5:	48 01 ca             	add    %rcx,%rdx
  80042038d8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038dc:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038e2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038e9:	00 
  80042038ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038ee:	48 01 ca             	add    %rcx,%rdx
  80042038f1:	48 8b 0a             	mov    (%rdx),%rcx
  80042038f4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042038f7:	48 63 d2             	movslq %edx,%rdx
  80042038fa:	48 09 ca             	or     %rcx,%rdx
  80042038fd:	48 83 ca 01          	or     $0x1,%rdx
  8004203901:	48 89 10             	mov    %rdx,(%rax)
  8004203904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420390c:	48 01 d0             	add    %rdx,%rax
  800420390f:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203913:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420391f:	00 
  8004203920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203924:	48 01 d0             	add    %rdx,%rax
  8004203927:	48 8b 00             	mov    (%rax),%rax
  800420392a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203930:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203938:	48 c1 e8 0c          	shr    $0xc,%rax
  800420393c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420393f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203942:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203949:	00 00 00 
  800420394c:	48 8b 00             	mov    (%rax),%rax
  800420394f:	48 39 c2             	cmp    %rax,%rdx
  8004203952:	72 32                	jb     8004203986 <boot_map_region+0x25c>
  8004203954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203958:	48 89 c1             	mov    %rax,%rcx
  800420395b:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004203962:	00 00 00 
  8004203965:	be e8 02 00 00       	mov    $0x2e8,%esi
  800420396a:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203971:	00 00 00 
  8004203974:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203979:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203980:	00 00 00 
  8004203983:	41 ff d0             	callq  *%r8
  8004203986:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420398d:	00 00 00 
  8004203990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203994:	48 01 d0             	add    %rdx,%rax
  8004203997:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420399f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039a3:	48 01 d0             	add    %rdx,%rax
  80042039a6:	48 c1 e8 15          	shr    $0x15,%rax
  80042039aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039b6:	00 
  80042039b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039bb:	48 01 d0             	add    %rdx,%rax
  80042039be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039c2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039c6:	48 01 ca             	add    %rcx,%rdx
  80042039c9:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039cd:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039d3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039da:	00 
  80042039db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039df:	48 01 ca             	add    %rcx,%rdx
  80042039e2:	48 8b 0a             	mov    (%rdx),%rcx
  80042039e5:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039e8:	48 63 d2             	movslq %edx,%rdx
  80042039eb:	48 09 ca             	or     %rcx,%rdx
  80042039ee:	48 83 ca 01          	or     $0x1,%rdx
  80042039f2:	48 89 10             	mov    %rdx,(%rax)
  80042039f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042039fc:	00 
  80042039fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a01:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a05:	0f 82 48 fd ff ff    	jb     8004203753 <boot_map_region+0x29>
  8004203a0b:	c9                   	leaveq 
  8004203a0c:	c3                   	retq   

0000008004203a0d <page_insert>:
  8004203a0d:	55                   	push   %rbp
  8004203a0e:	48 89 e5             	mov    %rsp,%rbp
  8004203a11:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a19:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a1d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a21:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a29:	0f 84 47 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a2f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a34:	0f 84 3c 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a42:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a47:	48 89 ce             	mov    %rcx,%rsi
  8004203a4a:	48 89 c7             	mov    %rax,%rdi
  8004203a4d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203a54:	00 00 00 
  8004203a57:	ff d0                	callq  *%rax
  8004203a59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a62:	0f 84 07 03 00 00    	je     8004203d6f <page_insert+0x362>
  8004203a68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a6c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a70:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a7c:	00 
  8004203a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a81:	48 01 d0             	add    %rdx,%rax
  8004203a84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a88:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a8c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a92:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a99:	00 
  8004203a9a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203a9e:	48 01 ca             	add    %rcx,%rdx
  8004203aa1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203aa4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203aa7:	80 e6 f1             	and    $0xf1,%dh
  8004203aaa:	48 63 d2             	movslq %edx,%rdx
  8004203aad:	48 09 ca             	or     %rcx,%rdx
  8004203ab0:	48 89 10             	mov    %rdx,(%rax)
  8004203ab3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ab7:	48 c1 e8 27          	shr    $0x27,%rax
  8004203abb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ac0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ac7:	00 
  8004203ac8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203acc:	48 01 d0             	add    %rdx,%rax
  8004203acf:	48 8b 00             	mov    (%rax),%rax
  8004203ad2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ad8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ae0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203ae4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203ae7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203aea:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203af1:	00 00 00 
  8004203af4:	48 8b 00             	mov    (%rax),%rax
  8004203af7:	48 39 c2             	cmp    %rax,%rdx
  8004203afa:	72 32                	jb     8004203b2e <page_insert+0x121>
  8004203afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b00:	48 89 c1             	mov    %rax,%rcx
  8004203b03:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004203b0a:	00 00 00 
  8004203b0d:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b12:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203b19:	00 00 00 
  8004203b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203b28:	00 00 00 
  8004203b2b:	41 ff d0             	callq  *%r8
  8004203b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b35:	00 00 00 
  8004203b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b3c:	48 01 d0             	add    %rdx,%rax
  8004203b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b57:	00 
  8004203b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b5c:	48 01 d0             	add    %rdx,%rax
  8004203b5f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b63:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b67:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b6d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b74:	00 
  8004203b75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b79:	48 01 ca             	add    %rcx,%rdx
  8004203b7c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b7f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b82:	80 e6 f1             	and    $0xf1,%dh
  8004203b85:	48 63 d2             	movslq %edx,%rdx
  8004203b88:	48 09 ca             	or     %rcx,%rdx
  8004203b8b:	48 89 10             	mov    %rdx,(%rax)
  8004203b8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b92:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b96:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ba2:	00 
  8004203ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ba7:	48 01 d0             	add    %rdx,%rax
  8004203baa:	48 8b 00             	mov    (%rax),%rax
  8004203bad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bbb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bbf:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bc2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bc5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203bcc:	00 00 00 
  8004203bcf:	48 8b 00             	mov    (%rax),%rax
  8004203bd2:	48 39 c2             	cmp    %rax,%rdx
  8004203bd5:	72 32                	jb     8004203c09 <page_insert+0x1fc>
  8004203bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bdb:	48 89 c1             	mov    %rax,%rcx
  8004203bde:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004203be5:	00 00 00 
  8004203be8:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bed:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203bf4:	00 00 00 
  8004203bf7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bfc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203c03:	00 00 00 
  8004203c06:	41 ff d0             	callq  *%r8
  8004203c09:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c10:	00 00 00 
  8004203c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c17:	48 01 d0             	add    %rdx,%rax
  8004203c1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c22:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c26:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c32:	00 
  8004203c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c37:	48 01 d0             	add    %rdx,%rax
  8004203c3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c3e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c42:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c48:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c4f:	00 
  8004203c50:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c54:	48 01 ca             	add    %rcx,%rdx
  8004203c57:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c5a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c5d:	80 e6 f1             	and    $0xf1,%dh
  8004203c60:	48 63 d2             	movslq %edx,%rdx
  8004203c63:	48 09 ca             	or     %rcx,%rdx
  8004203c66:	48 89 10             	mov    %rdx,(%rax)
  8004203c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c6d:	48 8b 00             	mov    (%rax),%rax
  8004203c70:	83 e0 01             	and    $0x1,%eax
  8004203c73:	48 85 c0             	test   %rax,%rax
  8004203c76:	74 70                	je     8004203ce8 <page_insert+0x2db>
  8004203c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c7c:	48 89 c7             	mov    %rax,%rdi
  8004203c7f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203c86:	00 00 00 
  8004203c89:	ff d0                	callq  *%rax
  8004203c8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c8f:	48 8b 12             	mov    (%rdx),%rdx
  8004203c92:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203c99:	48 39 d0             	cmp    %rdx,%rax
  8004203c9c:	75 4a                	jne    8004203ce8 <page_insert+0x2db>
  8004203c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ca2:	48 8b 00             	mov    (%rax),%rax
  8004203ca5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cab:	48 89 c2             	mov    %rax,%rdx
  8004203cae:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cb1:	48 98                	cltq   
  8004203cb3:	48 09 d0             	or     %rdx,%rax
  8004203cb6:	48 83 c8 01          	or     $0x1,%rax
  8004203cba:	48 89 c2             	mov    %rax,%rdx
  8004203cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cc1:	48 89 10             	mov    %rdx,(%rax)
  8004203cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ccc:	48 89 d6             	mov    %rdx,%rsi
  8004203ccf:	48 89 c7             	mov    %rax,%rdi
  8004203cd2:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203cd9:	00 00 00 
  8004203cdc:	ff d0                	callq  *%rax
  8004203cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ce3:	e9 93 00 00 00       	jmpq   8004203d7b <page_insert+0x36e>
  8004203ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cec:	48 8b 00             	mov    (%rax),%rax
  8004203cef:	83 e0 01             	and    $0x1,%eax
  8004203cf2:	48 85 c0             	test   %rax,%rax
  8004203cf5:	74 1a                	je     8004203d11 <page_insert+0x304>
  8004203cf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cff:	48 89 d6             	mov    %rdx,%rsi
  8004203d02:	48 89 c7             	mov    %rax,%rdi
  8004203d05:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004203d0c:	00 00 00 
  8004203d0f:	ff d0                	callq  *%rax
  8004203d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d19:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d20:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d28:	48 89 c7             	mov    %rax,%rdi
  8004203d2b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203d32:	00 00 00 
  8004203d35:	ff d0                	callq  *%rax
  8004203d37:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d3a:	48 63 d2             	movslq %edx,%rdx
  8004203d3d:	48 09 d0             	or     %rdx,%rax
  8004203d40:	48 83 c8 01          	or     $0x1,%rax
  8004203d44:	48 89 c2             	mov    %rax,%rdx
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 10             	mov    %rdx,(%rax)
  8004203d4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d56:	48 89 d6             	mov    %rdx,%rsi
  8004203d59:	48 89 c7             	mov    %rax,%rdi
  8004203d5c:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203d63:	00 00 00 
  8004203d66:	ff d0                	callq  *%rax
  8004203d68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d6d:	eb 0c                	jmp    8004203d7b <page_insert+0x36e>
  8004203d6f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d74:	eb 05                	jmp    8004203d7b <page_insert+0x36e>
  8004203d76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d7b:	c9                   	leaveq 
  8004203d7c:	c3                   	retq   

0000008004203d7d <page_lookup>:
  8004203d7d:	55                   	push   %rbp
  8004203d7e:	48 89 e5             	mov    %rsp,%rbp
  8004203d81:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d8d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203d96:	74 69                	je     8004203e01 <page_lookup+0x84>
  8004203d98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203da0:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203da5:	48 89 ce             	mov    %rcx,%rsi
  8004203da8:	48 89 c7             	mov    %rax,%rdi
  8004203dab:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203db2:	00 00 00 
  8004203db5:	ff d0                	callq  *%rax
  8004203db7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dc0:	74 3f                	je     8004203e01 <page_lookup+0x84>
  8004203dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dc6:	48 8b 00             	mov    (%rax),%rax
  8004203dc9:	83 e0 01             	and    $0x1,%eax
  8004203dcc:	48 85 c0             	test   %rax,%rax
  8004203dcf:	74 30                	je     8004203e01 <page_lookup+0x84>
  8004203dd1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203dd6:	74 0b                	je     8004203de3 <page_lookup+0x66>
  8004203dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203ddc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203de0:	48 89 10             	mov    %rdx,(%rax)
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c7             	mov    %rax,%rdi
  8004203df3:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004203dfa:	00 00 00 
  8004203dfd:	ff d0                	callq  *%rax
  8004203dff:	eb 05                	jmp    8004203e06 <page_lookup+0x89>
  8004203e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e06:	c9                   	leaveq 
  8004203e07:	c3                   	retq   

0000008004203e08 <page_remove>:
  8004203e08:	55                   	push   %rbp
  8004203e09:	48 89 e5             	mov    %rsp,%rbp
  8004203e0c:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e18:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e24:	48 89 ce             	mov    %rcx,%rsi
  8004203e27:	48 89 c7             	mov    %rax,%rdi
  8004203e2a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004203e31:	00 00 00 
  8004203e34:	ff d0                	callq  *%rax
  8004203e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e3f:	74 38                	je     8004203e79 <page_remove+0x71>
  8004203e41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e49:	48 89 d6             	mov    %rdx,%rsi
  8004203e4c:	48 89 c7             	mov    %rax,%rdi
  8004203e4f:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203e56:	00 00 00 
  8004203e59:	ff d0                	callq  *%rax
  8004203e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e5f:	48 89 c7             	mov    %rax,%rdi
  8004203e62:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203e69:	00 00 00 
  8004203e6c:	ff d0                	callq  *%rax
  8004203e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e79:	c9                   	leaveq 
  8004203e7a:	c3                   	retq   

0000008004203e7b <tlb_invalidate>:
  8004203e7b:	55                   	push   %rbp
  8004203e7c:	48 89 e5             	mov    %rsp,%rbp
  8004203e7f:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e90:	75 35                	jne    8004203ec7 <tlb_invalidate+0x4c>
  8004203e92:	48 b9 57 f2 21 04 80 	movabs $0x800421f257,%rcx
  8004203e99:	00 00 00 
  8004203e9c:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004203ea3:	00 00 00 
  8004203ea6:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eab:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203eb2:	00 00 00 
  8004203eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203ec1:	00 00 00 
  8004203ec4:	41 ff d0             	callq  *%r8
  8004203ec7:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004203ece:	00 00 00 
  8004203ed1:	ff d0                	callq  *%rax
  8004203ed3:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004203eda:	00 00 00 
  8004203edd:	48 98                	cltq   
  8004203edf:	48 c1 e0 03          	shl    $0x3,%rax
  8004203ee3:	48 89 c1             	mov    %rax,%rcx
  8004203ee6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203eea:	48 01 c8             	add    %rcx,%rax
  8004203eed:	48 01 d0             	add    %rdx,%rax
  8004203ef0:	48 83 c0 08          	add    $0x8,%rax
  8004203ef4:	48 8b 00             	mov    (%rax),%rax
  8004203ef7:	48 85 c0             	test   %rax,%rax
  8004203efa:	74 3d                	je     8004203f39 <tlb_invalidate+0xbe>
  8004203efc:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004203f03:	00 00 00 
  8004203f06:	ff d0                	callq  *%rax
  8004203f08:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004203f0f:	00 00 00 
  8004203f12:	48 98                	cltq   
  8004203f14:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f18:	48 89 c1             	mov    %rax,%rcx
  8004203f1b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f1f:	48 01 c8             	add    %rcx,%rax
  8004203f22:	48 01 d0             	add    %rdx,%rax
  8004203f25:	48 83 c0 08          	add    $0x8,%rax
  8004203f29:	48 8b 00             	mov    (%rax),%rax
  8004203f2c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f33:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f37:	75 0f                	jne    8004203f48 <tlb_invalidate+0xcd>
  8004203f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f45:	0f 01 38             	invlpg (%rax)
  8004203f48:	c9                   	leaveq 
  8004203f49:	c3                   	retq   

0000008004203f4a <mmio_map_region>:
  8004203f4a:	55                   	push   %rbp
  8004203f4b:	48 89 e5             	mov    %rsp,%rbp
  8004203f4e:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f5a:	48 b8 e0 65 23 04 80 	movabs $0x80042365e0,%rax
  8004203f61:	00 00 00 
  8004203f64:	48 8b 00             	mov    (%rax),%rax
  8004203f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f6b:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f72:	00 
  8004203f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f7b:	48 01 d0             	add    %rdx,%rax
  8004203f7e:	48 83 e8 01          	sub    $0x1,%rax
  8004203f82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f8f:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f93:	48 89 d0             	mov    %rdx,%rax
  8004203f96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203f9a:	48 29 c2             	sub    %rax,%rdx
  8004203f9d:	48 89 d0             	mov    %rdx,%rax
  8004203fa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fa4:	48 b8 e0 65 23 04 80 	movabs $0x80042365e0,%rax
  8004203fab:	00 00 00 
  8004203fae:	48 8b 10             	mov    (%rax),%rdx
  8004203fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fb5:	48 01 c2             	add    %rax,%rdx
  8004203fb8:	48 b8 e0 65 23 04 80 	movabs $0x80042365e0,%rax
  8004203fbf:	00 00 00 
  8004203fc2:	48 89 10             	mov    %rdx,(%rax)
  8004203fc5:	48 b8 e0 65 23 04 80 	movabs $0x80042365e0,%rax
  8004203fcc:	00 00 00 
  8004203fcf:	48 8b 10             	mov    (%rax),%rdx
  8004203fd2:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fd9:	00 00 00 
  8004203fdc:	48 39 c2             	cmp    %rax,%rdx
  8004203fdf:	76 2a                	jbe    800420400b <mmio_map_region+0xc1>
  8004203fe1:	48 ba 68 f2 21 04 80 	movabs $0x800421f268,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ff0:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004204006:	00 00 00 
  8004204009:	ff d1                	callq  *%rcx
  800420400b:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004204012:	00 00 00 
  8004204015:	48 8b 00             	mov    (%rax),%rax
  8004204018:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420401c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204020:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204024:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420402a:	48 89 c7             	mov    %rax,%rdi
  800420402d:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004204034:	00 00 00 
  8004204037:	ff d0                	callq  *%rax
  8004204039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420403d:	c9                   	leaveq 
  800420403e:	c3                   	retq   

000000800420403f <user_mem_check>:
  800420403f:	55                   	push   %rbp
  8004204040:	48 89 e5             	mov    %rsp,%rbp
  8004204043:	48 83 ec 40          	sub    $0x40,%rsp
  8004204047:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420404b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420404f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204053:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204056:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420405a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420405e:	48 01 d0             	add    %rdx,%rax
  8004204061:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204069:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004204070:	00 00 00 
  8004204073:	48 39 c2             	cmp    %rax,%rdx
  8004204076:	77 0a                	ja     8004204082 <user_mem_check+0x43>
  8004204078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420407c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204080:	76 1b                	jbe    800420409d <user_mem_check+0x5e>
  8004204082:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204086:	48 b8 40 e2 4d 04 80 	movabs $0x80044de240,%rax
  800420408d:	00 00 00 
  8004204090:	48 89 10             	mov    %rdx,(%rax)
  8004204093:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204098:	e9 c0 00 00 00       	jmpq   800420415d <user_mem_check+0x11e>
  800420409d:	e9 a8 00 00 00       	jmpq   800420414a <user_mem_check+0x10b>
  80042040a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040a6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040b1:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040b6:	48 89 ce             	mov    %rcx,%rsi
  80042040b9:	48 89 c7             	mov    %rax,%rdi
  80042040bc:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042040c3:	00 00 00 
  80042040c6:	ff d0                	callq  *%rax
  80042040c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040d1:	74 1f                	je     80042040f2 <user_mem_check+0xb3>
  80042040d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040d7:	48 8b 10             	mov    (%rax),%rdx
  80042040da:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040dd:	83 c8 01             	or     $0x1,%eax
  80042040e0:	48 98                	cltq   
  80042040e2:	48 21 c2             	and    %rax,%rdx
  80042040e5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e8:	83 c8 01             	or     $0x1,%eax
  80042040eb:	48 98                	cltq   
  80042040ed:	48 39 c2             	cmp    %rax,%rdx
  80042040f0:	74 18                	je     800420410a <user_mem_check+0xcb>
  80042040f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040f6:	48 b8 40 e2 4d 04 80 	movabs $0x80044de240,%rax
  80042040fd:	00 00 00 
  8004204100:	48 89 10             	mov    %rdx,(%rax)
  8004204103:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204108:	eb 53                	jmp    800420415d <user_mem_check+0x11e>
  800420410a:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204111:	00 
  8004204112:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204116:	48 83 c0 01          	add    $0x1,%rax
  800420411a:	48 89 c2             	mov    %rax,%rdx
  800420411d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204121:	48 01 d0             	add    %rdx,%rax
  8004204124:	48 83 e8 01          	sub    $0x1,%rax
  8004204128:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420412c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204130:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204135:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204139:	48 89 d0             	mov    %rdx,%rax
  800420413c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204140:	48 29 c2             	sub    %rax,%rdx
  8004204143:	48 89 d0             	mov    %rdx,%rax
  8004204146:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420414a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420414e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204152:	0f 82 4a ff ff ff    	jb     80042040a2 <user_mem_check+0x63>
  8004204158:	b8 00 00 00 00       	mov    $0x0,%eax
  800420415d:	c9                   	leaveq 
  800420415e:	c3                   	retq   

000000800420415f <user_mem_assert>:
  800420415f:	55                   	push   %rbp
  8004204160:	48 89 e5             	mov    %rsp,%rbp
  8004204163:	48 83 ec 20          	sub    $0x20,%rsp
  8004204167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420416b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420416f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004204173:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204179:	83 c8 04             	or     $0x4,%eax
  800420417c:	89 c1                	mov    %eax,%ecx
  800420417e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204182:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420418a:	48 89 c7             	mov    %rax,%rdi
  800420418d:	48 b8 3f 40 20 04 80 	movabs $0x800420403f,%rax
  8004204194:	00 00 00 
  8004204197:	ff d0                	callq  *%rax
  8004204199:	85 c0                	test   %eax,%eax
  800420419b:	79 47                	jns    80042041e4 <user_mem_assert+0x85>
  800420419d:	48 b8 40 e2 4d 04 80 	movabs $0x80044de240,%rax
  80042041a4:	00 00 00 
  80042041a7:	48 8b 10             	mov    (%rax),%rdx
  80042041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ae:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041b4:	89 c6                	mov    %eax,%esi
  80042041b6:	48 bf 88 f2 21 04 80 	movabs $0x800421f288,%rdi
  80042041bd:	00 00 00 
  80042041c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041c5:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042041cc:	00 00 00 
  80042041cf:	ff d1                	callq  *%rcx
  80042041d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041d5:	48 89 c7             	mov    %rax,%rdi
  80042041d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  80042041df:	00 00 00 
  80042041e2:	ff d0                	callq  *%rax
  80042041e4:	c9                   	leaveq 
  80042041e5:	c3                   	retq   

00000080042041e6 <check_page_free_list>:
  80042041e6:	55                   	push   %rbp
  80042041e7:	48 89 e5             	mov    %rsp,%rbp
  80042041ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042041ee:	89 f8                	mov    %edi,%eax
  80042041f0:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041f3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042041f7:	74 07                	je     8004204200 <check_page_free_list+0x1a>
  80042041f9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042041fe:	eb 05                	jmp    8004204205 <check_page_free_list+0x1f>
  8004204200:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204205:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204208:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420420f:	00 
  8004204210:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204217:	00 
  8004204218:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420421f:	00 00 00 
  8004204222:	48 8b 00             	mov    (%rax),%rax
  8004204225:	48 85 c0             	test   %rax,%rax
  8004204228:	75 2a                	jne    8004204254 <check_page_free_list+0x6e>
  800420422a:	48 ba c0 f2 21 04 80 	movabs $0x800421f2c0,%rdx
  8004204231:	00 00 00 
  8004204234:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204239:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204240:	00 00 00 
  8004204243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204248:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420424f:	00 00 00 
  8004204252:	ff d1                	callq  *%rcx
  8004204254:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204258:	0f 84 a9 00 00 00    	je     8004204307 <check_page_free_list+0x121>
  800420425e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004204262:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204266:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  800420426a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420426e:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204275:	00 00 00 
  8004204278:	48 8b 00             	mov    (%rax),%rax
  800420427b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420427f:	eb 58                	jmp    80042042d9 <check_page_free_list+0xf3>
  8004204281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204285:	48 89 c7             	mov    %rax,%rdi
  8004204288:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420428f:	00 00 00 
  8004204292:	ff d0                	callq  *%rax
  8004204294:	48 c1 e8 15          	shr    $0x15,%rax
  8004204298:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420429d:	48 89 c2             	mov    %rax,%rdx
  80042042a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042a3:	48 39 c2             	cmp    %rax,%rdx
  80042042a6:	0f 93 c0             	setae  %al
  80042042a9:	0f b6 c0             	movzbl %al,%eax
  80042042ac:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042af:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042b2:	48 98                	cltq   
  80042042b4:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042bd:	48 89 10             	mov    %rdx,(%rax)
  80042042c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042c7:	48 98                	cltq   
  80042042c9:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042d2:	48 8b 00             	mov    (%rax),%rax
  80042042d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042de:	75 a1                	jne    8004204281 <check_page_free_list+0x9b>
  80042042e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042e4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042f3:	48 89 10             	mov    %rdx,(%rax)
  80042042f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042042fa:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204301:	00 00 00 
  8004204304:	48 89 10             	mov    %rdx,(%rax)
  8004204307:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420430e:	00 00 00 
  8004204311:	48 8b 00             	mov    (%rax),%rax
  8004204314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204318:	eb 5e                	jmp    8004204378 <check_page_free_list+0x192>
  800420431a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431e:	48 89 c7             	mov    %rax,%rdi
  8004204321:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204328:	00 00 00 
  800420432b:	ff d0                	callq  *%rax
  800420432d:	48 c1 e8 15          	shr    $0x15,%rax
  8004204331:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204336:	48 89 c2             	mov    %rax,%rdx
  8004204339:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420433c:	48 39 c2             	cmp    %rax,%rdx
  800420433f:	73 2c                	jae    800420436d <check_page_free_list+0x187>
  8004204341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204345:	48 89 c7             	mov    %rax,%rdi
  8004204348:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  800420434f:	00 00 00 
  8004204352:	ff d0                	callq  *%rax
  8004204354:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204359:	be 97 00 00 00       	mov    $0x97,%esi
  800420435e:	48 89 c7             	mov    %rax,%rdi
  8004204361:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004204368:	00 00 00 
  800420436b:	ff d0                	callq  *%rax
  800420436d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204371:	48 8b 00             	mov    (%rax),%rax
  8004204374:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204378:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420437d:	75 9b                	jne    800420431a <check_page_free_list+0x134>
  800420437f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204384:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  800420438b:	00 00 00 
  800420438e:	ff d0                	callq  *%rax
  8004204390:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204394:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420439b:	00 00 00 
  800420439e:	48 8b 00             	mov    (%rax),%rax
  80042043a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043a5:	e9 20 03 00 00       	jmpq   80042046ca <check_page_free_list+0x4e4>
  80042043aa:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042043b1:	00 00 00 
  80042043b4:	48 8b 00             	mov    (%rax),%rax
  80042043b7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043bb:	73 35                	jae    80042043f2 <check_page_free_list+0x20c>
  80042043bd:	48 b9 e4 f2 21 04 80 	movabs $0x800421f2e4,%rcx
  80042043c4:	00 00 00 
  80042043c7:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042043ce:	00 00 00 
  80042043d1:	be 17 04 00 00       	mov    $0x417,%esi
  80042043d6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042043dd:	00 00 00 
  80042043e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042043ec:	00 00 00 
  80042043ef:	41 ff d0             	callq  *%r8
  80042043f2:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042043f9:	00 00 00 
  80042043fc:	48 8b 10             	mov    (%rax),%rdx
  80042043ff:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004204406:	00 00 00 
  8004204409:	48 8b 00             	mov    (%rax),%rax
  800420440c:	48 c1 e0 04          	shl    $0x4,%rax
  8004204410:	48 01 d0             	add    %rdx,%rax
  8004204413:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204417:	77 35                	ja     800420444e <check_page_free_list+0x268>
  8004204419:	48 b9 f0 f2 21 04 80 	movabs $0x800421f2f0,%rcx
  8004204420:	00 00 00 
  8004204423:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420442a:	00 00 00 
  800420442d:	be 18 04 00 00       	mov    $0x418,%esi
  8004204432:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204439:	00 00 00 
  800420443c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204441:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204448:	00 00 00 
  800420444b:	41 ff d0             	callq  *%r8
  800420444e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204452:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004204459:	00 00 00 
  800420445c:	48 8b 00             	mov    (%rax),%rax
  800420445f:	48 29 c2             	sub    %rax,%rdx
  8004204462:	48 89 d0             	mov    %rdx,%rax
  8004204465:	83 e0 0f             	and    $0xf,%eax
  8004204468:	48 85 c0             	test   %rax,%rax
  800420446b:	74 35                	je     80042044a2 <check_page_free_list+0x2bc>
  800420446d:	48 b9 08 f3 21 04 80 	movabs $0x800421f308,%rcx
  8004204474:	00 00 00 
  8004204477:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420447e:	00 00 00 
  8004204481:	be 19 04 00 00       	mov    $0x419,%esi
  8004204486:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420448d:	00 00 00 
  8004204490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204495:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420449c:	00 00 00 
  800420449f:	41 ff d0             	callq  *%r8
  80042044a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a6:	48 89 c7             	mov    %rax,%rdi
  80042044a9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044b0:	00 00 00 
  80042044b3:	ff d0                	callq  *%rax
  80042044b5:	48 85 c0             	test   %rax,%rax
  80042044b8:	75 35                	jne    80042044ef <check_page_free_list+0x309>
  80042044ba:	48 b9 3a f3 21 04 80 	movabs $0x800421f33a,%rcx
  80042044c1:	00 00 00 
  80042044c4:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042044cb:	00 00 00 
  80042044ce:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044d3:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042044da:	00 00 00 
  80042044dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042044e9:	00 00 00 
  80042044ec:	41 ff d0             	callq  *%r8
  80042044ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044f3:	48 89 c7             	mov    %rax,%rdi
  80042044f6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044fd:	00 00 00 
  8004204500:	ff d0                	callq  *%rax
  8004204502:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204508:	75 35                	jne    800420453f <check_page_free_list+0x359>
  800420450a:	48 b9 4b f3 21 04 80 	movabs $0x800421f34b,%rcx
  8004204511:	00 00 00 
  8004204514:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420451b:	00 00 00 
  800420451e:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204523:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420452a:	00 00 00 
  800420452d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204532:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204539:	00 00 00 
  800420453c:	41 ff d0             	callq  *%r8
  800420453f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204543:	48 89 c7             	mov    %rax,%rdi
  8004204546:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420454d:	00 00 00 
  8004204550:	ff d0                	callq  *%rax
  8004204552:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204558:	75 35                	jne    800420458f <check_page_free_list+0x3a9>
  800420455a:	48 b9 68 f3 21 04 80 	movabs $0x800421f368,%rcx
  8004204561:	00 00 00 
  8004204564:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420456b:	00 00 00 
  800420456e:	be 1e 04 00 00       	mov    $0x41e,%esi
  8004204573:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420457a:	00 00 00 
  800420457d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204582:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204589:	00 00 00 
  800420458c:	41 ff d0             	callq  *%r8
  800420458f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204593:	48 89 c7             	mov    %rax,%rdi
  8004204596:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420459d:	00 00 00 
  80042045a0:	ff d0                	callq  *%rax
  80042045a2:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045a8:	75 35                	jne    80042045df <check_page_free_list+0x3f9>
  80042045aa:	48 b9 8b f3 21 04 80 	movabs $0x800421f38b,%rcx
  80042045b1:	00 00 00 
  80042045b4:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042045bb:	00 00 00 
  80042045be:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045c3:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042045ca:	00 00 00 
  80042045cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042045d9:	00 00 00 
  80042045dc:	41 ff d0             	callq  *%r8
  80042045df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045e3:	48 89 c7             	mov    %rax,%rdi
  80042045e6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042045ed:	00 00 00 
  80042045f0:	ff d0                	callq  *%rax
  80042045f2:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042045f8:	76 4e                	jbe    8004204648 <check_page_free_list+0x462>
  80042045fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045fe:	48 89 c7             	mov    %rax,%rdi
  8004204601:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204608:	00 00 00 
  800420460b:	ff d0                	callq  *%rax
  800420460d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204611:	73 35                	jae    8004204648 <check_page_free_list+0x462>
  8004204613:	48 b9 a8 f3 21 04 80 	movabs $0x800421f3a8,%rcx
  800420461a:	00 00 00 
  800420461d:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204624:	00 00 00 
  8004204627:	be 20 04 00 00       	mov    $0x420,%esi
  800420462c:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204633:	00 00 00 
  8004204636:	b8 00 00 00 00       	mov    $0x0,%eax
  800420463b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204642:	00 00 00 
  8004204645:	41 ff d0             	callq  *%r8
  8004204648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420464c:	48 89 c7             	mov    %rax,%rdi
  800420464f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204656:	00 00 00 
  8004204659:	ff d0                	callq  *%rax
  800420465b:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  8004204661:	75 35                	jne    8004204698 <check_page_free_list+0x4b2>
  8004204663:	48 b9 ed f3 21 04 80 	movabs $0x800421f3ed,%rcx
  800420466a:	00 00 00 
  800420466d:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204674:	00 00 00 
  8004204677:	be 23 04 00 00       	mov    $0x423,%esi
  800420467c:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204683:	00 00 00 
  8004204686:	b8 00 00 00 00       	mov    $0x0,%eax
  800420468b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204692:	00 00 00 
  8004204695:	41 ff d0             	callq  *%r8
  8004204698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420469c:	48 89 c7             	mov    %rax,%rdi
  800420469f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042046a6:	00 00 00 
  80042046a9:	ff d0                	callq  *%rax
  80042046ab:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046b1:	77 07                	ja     80042046ba <check_page_free_list+0x4d4>
  80042046b3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046b8:	eb 05                	jmp    80042046bf <check_page_free_list+0x4d9>
  80042046ba:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046c3:	48 8b 00             	mov    (%rax),%rax
  80042046c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046ca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046cf:	0f 85 d5 fc ff ff    	jne    80042043aa <check_page_free_list+0x1c4>
  80042046d5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046da:	75 35                	jne    8004204711 <check_page_free_list+0x52b>
  80042046dc:	48 b9 0a f4 21 04 80 	movabs $0x800421f40a,%rcx
  80042046e3:	00 00 00 
  80042046e6:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042046ed:	00 00 00 
  80042046f0:	be 2c 04 00 00       	mov    $0x42c,%esi
  80042046f5:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042046fc:	00 00 00 
  80042046ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204704:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420470b:	00 00 00 
  800420470e:	41 ff d0             	callq  *%r8
  8004204711:	c9                   	leaveq 
  8004204712:	c3                   	retq   

0000008004204713 <check_page_alloc>:
  8004204713:	55                   	push   %rbp
  8004204714:	48 89 e5             	mov    %rsp,%rbp
  8004204717:	48 83 ec 40          	sub    $0x40,%rsp
  800420471b:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204722:	00 00 00 
  8004204725:	48 8b 00             	mov    (%rax),%rax
  8004204728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420472c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204733:	eb 37                	jmp    800420476c <check_page_alloc+0x59>
  8004204735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204739:	48 89 c7             	mov    %rax,%rdi
  800420473c:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204743:	00 00 00 
  8004204746:	ff d0                	callq  *%rax
  8004204748:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420474d:	be 97 00 00 00       	mov    $0x97,%esi
  8004204752:	48 89 c7             	mov    %rax,%rdi
  8004204755:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800420475c:	00 00 00 
  800420475f:	ff d0                	callq  *%rax
  8004204761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420476c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204771:	75 c2                	jne    8004204735 <check_page_alloc+0x22>
  8004204773:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420477a:	00 00 00 
  800420477d:	48 8b 00             	mov    (%rax),%rax
  8004204780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420478b:	e9 ec 01 00 00       	jmpq   800420497c <check_page_alloc+0x269>
  8004204790:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004204797:	00 00 00 
  800420479a:	48 8b 00             	mov    (%rax),%rax
  800420479d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047a1:	73 35                	jae    80042047d8 <check_page_alloc+0xc5>
  80042047a3:	48 b9 1b f4 21 04 80 	movabs $0x800421f41b,%rcx
  80042047aa:	00 00 00 
  80042047ad:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042047b4:	00 00 00 
  80042047b7:	be 46 04 00 00       	mov    $0x446,%esi
  80042047bc:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042047c3:	00 00 00 
  80042047c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047cb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042047d2:	00 00 00 
  80042047d5:	41 ff d0             	callq  *%r8
  80042047d8:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042047df:	00 00 00 
  80042047e2:	48 8b 10             	mov    (%rax),%rdx
  80042047e5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042047ec:	00 00 00 
  80042047ef:	48 8b 00             	mov    (%rax),%rax
  80042047f2:	48 c1 e0 04          	shl    $0x4,%rax
  80042047f6:	48 01 d0             	add    %rdx,%rax
  80042047f9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042047fd:	77 35                	ja     8004204834 <check_page_alloc+0x121>
  80042047ff:	48 b9 28 f4 21 04 80 	movabs $0x800421f428,%rcx
  8004204806:	00 00 00 
  8004204809:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204810:	00 00 00 
  8004204813:	be 47 04 00 00       	mov    $0x447,%esi
  8004204818:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420481f:	00 00 00 
  8004204822:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204827:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420482e:	00 00 00 
  8004204831:	41 ff d0             	callq  *%r8
  8004204834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204838:	48 89 c7             	mov    %rax,%rdi
  800420483b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204842:	00 00 00 
  8004204845:	ff d0                	callq  *%rax
  8004204847:	48 85 c0             	test   %rax,%rax
  800420484a:	75 35                	jne    8004204881 <check_page_alloc+0x16e>
  800420484c:	48 b9 3d f4 21 04 80 	movabs $0x800421f43d,%rcx
  8004204853:	00 00 00 
  8004204856:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420485d:	00 00 00 
  8004204860:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204865:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420486c:	00 00 00 
  800420486f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204874:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420487b:	00 00 00 
  800420487e:	41 ff d0             	callq  *%r8
  8004204881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204885:	48 89 c7             	mov    %rax,%rdi
  8004204888:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420488f:	00 00 00 
  8004204892:	ff d0                	callq  *%rax
  8004204894:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420489a:	75 35                	jne    80042048d1 <check_page_alloc+0x1be>
  800420489c:	48 b9 4f f4 21 04 80 	movabs $0x800421f44f,%rcx
  80042048a3:	00 00 00 
  80042048a6:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042048ad:	00 00 00 
  80042048b0:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048b5:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042048bc:	00 00 00 
  80042048bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042048cb:	00 00 00 
  80042048ce:	41 ff d0             	callq  *%r8
  80042048d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048d5:	48 89 c7             	mov    %rax,%rdi
  80042048d8:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042048df:	00 00 00 
  80042048e2:	ff d0                	callq  *%rax
  80042048e4:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048ea:	75 35                	jne    8004204921 <check_page_alloc+0x20e>
  80042048ec:	48 b9 70 f4 21 04 80 	movabs $0x800421f470,%rcx
  80042048f3:	00 00 00 
  80042048f6:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042048fd:	00 00 00 
  8004204900:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204905:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420490c:	00 00 00 
  800420490f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204914:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420491b:	00 00 00 
  800420491e:	41 ff d0             	callq  *%r8
  8004204921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204925:	48 89 c7             	mov    %rax,%rdi
  8004204928:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420492f:	00 00 00 
  8004204932:	ff d0                	callq  *%rax
  8004204934:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420493a:	75 35                	jne    8004204971 <check_page_alloc+0x25e>
  800420493c:	48 b9 94 f4 21 04 80 	movabs $0x800421f494,%rcx
  8004204943:	00 00 00 
  8004204946:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420494d:	00 00 00 
  8004204950:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204955:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420495c:	00 00 00 
  800420495f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420496b:	00 00 00 
  800420496e:	41 ff d0             	callq  *%r8
  8004204971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204975:	48 8b 00             	mov    (%rax),%rax
  8004204978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420497c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204981:	0f 85 09 fe ff ff    	jne    8004204790 <check_page_alloc+0x7d>
  8004204987:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420498e:	00 
  800420498f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204993:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204997:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420499b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420499f:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049a4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049ab:	00 00 00 
  80042049ae:	ff d0                	callq  *%rax
  80042049b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049b9:	75 35                	jne    80042049f0 <check_page_alloc+0x2dd>
  80042049bb:	48 b9 af f4 21 04 80 	movabs $0x800421f4af,%rcx
  80042049c2:	00 00 00 
  80042049c5:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042049cc:	00 00 00 
  80042049cf:	be 51 04 00 00       	mov    $0x451,%esi
  80042049d4:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042049db:	00 00 00 
  80042049de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042049ea:	00 00 00 
  80042049ed:	41 ff d0             	callq  *%r8
  80042049f0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049fc:	00 00 00 
  80042049ff:	ff d0                	callq  *%rax
  8004204a01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a05:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a0a:	75 35                	jne    8004204a41 <check_page_alloc+0x32e>
  8004204a0c:	48 b9 c5 f4 21 04 80 	movabs $0x800421f4c5,%rcx
  8004204a13:	00 00 00 
  8004204a16:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204a1d:	00 00 00 
  8004204a20:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a25:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204a2c:	00 00 00 
  8004204a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a34:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a3b:	00 00 00 
  8004204a3e:	41 ff d0             	callq  *%r8
  8004204a41:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a46:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204a4d:	00 00 00 
  8004204a50:	ff d0                	callq  *%rax
  8004204a52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a56:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a5b:	75 35                	jne    8004204a92 <check_page_alloc+0x37f>
  8004204a5d:	48 b9 db f4 21 04 80 	movabs $0x800421f4db,%rcx
  8004204a64:	00 00 00 
  8004204a67:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204a6e:	00 00 00 
  8004204a71:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a76:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204a7d:	00 00 00 
  8004204a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a8c:	00 00 00 
  8004204a8f:	41 ff d0             	callq  *%r8
  8004204a92:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204a97:	75 35                	jne    8004204ace <check_page_alloc+0x3bb>
  8004204a99:	48 b9 f1 f4 21 04 80 	movabs $0x800421f4f1,%rcx
  8004204aa0:	00 00 00 
  8004204aa3:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204aaa:	00 00 00 
  8004204aad:	be 54 04 00 00       	mov    $0x454,%esi
  8004204ab2:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204ab9:	00 00 00 
  8004204abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ac8:	00 00 00 
  8004204acb:	41 ff d0             	callq  *%r8
  8004204ace:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204ad3:	74 0a                	je     8004204adf <check_page_alloc+0x3cc>
  8004204ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ad9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204add:	75 35                	jne    8004204b14 <check_page_alloc+0x401>
  8004204adf:	48 b9 f5 f4 21 04 80 	movabs $0x800421f4f5,%rcx
  8004204ae6:	00 00 00 
  8004204ae9:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204af0:	00 00 00 
  8004204af3:	be 55 04 00 00       	mov    $0x455,%esi
  8004204af8:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204aff:	00 00 00 
  8004204b02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b0e:	00 00 00 
  8004204b11:	41 ff d0             	callq  *%r8
  8004204b14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b19:	74 14                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b1f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b23:	74 0a                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b2d:	75 35                	jne    8004204b64 <check_page_alloc+0x451>
  8004204b2f:	48 b9 08 f5 21 04 80 	movabs $0x800421f508,%rcx
  8004204b36:	00 00 00 
  8004204b39:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204b40:	00 00 00 
  8004204b43:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b48:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204b4f:	00 00 00 
  8004204b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b5e:	00 00 00 
  8004204b61:	41 ff d0             	callq  *%r8
  8004204b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b68:	48 89 c7             	mov    %rax,%rdi
  8004204b6b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204b72:	00 00 00 
  8004204b75:	ff d0                	callq  *%rax
  8004204b77:	48 ba f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rdx
  8004204b7e:	00 00 00 
  8004204b81:	48 8b 12             	mov    (%rdx),%rdx
  8004204b84:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b88:	48 39 d0             	cmp    %rdx,%rax
  8004204b8b:	72 35                	jb     8004204bc2 <check_page_alloc+0x4af>
  8004204b8d:	48 b9 28 f5 21 04 80 	movabs $0x800421f528,%rcx
  8004204b94:	00 00 00 
  8004204b97:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204b9e:	00 00 00 
  8004204ba1:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ba6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204bad:	00 00 00 
  8004204bb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204bbc:	00 00 00 
  8004204bbf:	41 ff d0             	callq  *%r8
  8004204bc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bc6:	48 89 c7             	mov    %rax,%rdi
  8004204bc9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204bd0:	00 00 00 
  8004204bd3:	ff d0                	callq  *%rax
  8004204bd5:	48 ba f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rdx
  8004204bdc:	00 00 00 
  8004204bdf:	48 8b 12             	mov    (%rdx),%rdx
  8004204be2:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204be6:	48 39 d0             	cmp    %rdx,%rax
  8004204be9:	72 35                	jb     8004204c20 <check_page_alloc+0x50d>
  8004204beb:	48 b9 45 f5 21 04 80 	movabs $0x800421f545,%rcx
  8004204bf2:	00 00 00 
  8004204bf5:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204bfc:	00 00 00 
  8004204bff:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c04:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204c0b:	00 00 00 
  8004204c0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c1a:	00 00 00 
  8004204c1d:	41 ff d0             	callq  *%r8
  8004204c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c24:	48 89 c7             	mov    %rax,%rdi
  8004204c27:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204c2e:	00 00 00 
  8004204c31:	ff d0                	callq  *%rax
  8004204c33:	48 ba f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rdx
  8004204c3a:	00 00 00 
  8004204c3d:	48 8b 12             	mov    (%rdx),%rdx
  8004204c40:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c44:	48 39 d0             	cmp    %rdx,%rax
  8004204c47:	72 35                	jb     8004204c7e <check_page_alloc+0x56b>
  8004204c49:	48 b9 62 f5 21 04 80 	movabs $0x800421f562,%rcx
  8004204c50:	00 00 00 
  8004204c53:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204c5a:	00 00 00 
  8004204c5d:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c62:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204c69:	00 00 00 
  8004204c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c78:	00 00 00 
  8004204c7b:	41 ff d0             	callq  *%r8
  8004204c7e:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204c85:	00 00 00 
  8004204c88:	48 8b 00             	mov    (%rax),%rax
  8004204c8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c8f:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204c96:	00 00 00 
  8004204c99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204ca0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ca5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204cac:	00 00 00 
  8004204caf:	ff d0                	callq  *%rax
  8004204cb1:	48 85 c0             	test   %rax,%rax
  8004204cb4:	74 35                	je     8004204ceb <check_page_alloc+0x5d8>
  8004204cb6:	48 b9 7f f5 21 04 80 	movabs $0x800421f57f,%rcx
  8004204cbd:	00 00 00 
  8004204cc0:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204cc7:	00 00 00 
  8004204cca:	be 60 04 00 00       	mov    $0x460,%esi
  8004204ccf:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204cd6:	00 00 00 
  8004204cd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cde:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ce5:	00 00 00 
  8004204ce8:	41 ff d0             	callq  *%r8
  8004204ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cef:	48 89 c7             	mov    %rax,%rdi
  8004204cf2:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204cf9:	00 00 00 
  8004204cfc:	ff d0                	callq  *%rax
  8004204cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d02:	48 89 c7             	mov    %rax,%rdi
  8004204d05:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d0c:	00 00 00 
  8004204d0f:	ff d0                	callq  *%rax
  8004204d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d15:	48 89 c7             	mov    %rax,%rdi
  8004204d18:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d1f:	00 00 00 
  8004204d22:	ff d0                	callq  *%rax
  8004204d24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d2b:	00 
  8004204d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d3c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d41:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d48:	00 00 00 
  8004204d4b:	ff d0                	callq  *%rax
  8004204d4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d51:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d56:	75 35                	jne    8004204d8d <check_page_alloc+0x67a>
  8004204d58:	48 b9 af f4 21 04 80 	movabs $0x800421f4af,%rcx
  8004204d5f:	00 00 00 
  8004204d62:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204d69:	00 00 00 
  8004204d6c:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d71:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204d78:	00 00 00 
  8004204d7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204d87:	00 00 00 
  8004204d8a:	41 ff d0             	callq  *%r8
  8004204d8d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d92:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d99:	00 00 00 
  8004204d9c:	ff d0                	callq  *%rax
  8004204d9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204da2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204da7:	75 35                	jne    8004204dde <check_page_alloc+0x6cb>
  8004204da9:	48 b9 c5 f4 21 04 80 	movabs $0x800421f4c5,%rcx
  8004204db0:	00 00 00 
  8004204db3:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204dba:	00 00 00 
  8004204dbd:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dc2:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204dc9:	00 00 00 
  8004204dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dd1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204dd8:	00 00 00 
  8004204ddb:	41 ff d0             	callq  *%r8
  8004204dde:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204de3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204dea:	00 00 00 
  8004204ded:	ff d0                	callq  *%rax
  8004204def:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204df3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204df8:	75 35                	jne    8004204e2f <check_page_alloc+0x71c>
  8004204dfa:	48 b9 db f4 21 04 80 	movabs $0x800421f4db,%rcx
  8004204e01:	00 00 00 
  8004204e04:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204e0b:	00 00 00 
  8004204e0e:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e13:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204e1a:	00 00 00 
  8004204e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e29:	00 00 00 
  8004204e2c:	41 ff d0             	callq  *%r8
  8004204e2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e34:	75 35                	jne    8004204e6b <check_page_alloc+0x758>
  8004204e36:	48 b9 f1 f4 21 04 80 	movabs $0x800421f4f1,%rcx
  8004204e3d:	00 00 00 
  8004204e40:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204e47:	00 00 00 
  8004204e4a:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e4f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204e56:	00 00 00 
  8004204e59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e65:	00 00 00 
  8004204e68:	41 ff d0             	callq  *%r8
  8004204e6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e70:	74 0a                	je     8004204e7c <check_page_alloc+0x769>
  8004204e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e76:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e7a:	75 35                	jne    8004204eb1 <check_page_alloc+0x79e>
  8004204e7c:	48 b9 f5 f4 21 04 80 	movabs $0x800421f4f5,%rcx
  8004204e83:	00 00 00 
  8004204e86:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204e8d:	00 00 00 
  8004204e90:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204e95:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204e9c:	00 00 00 
  8004204e9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ea4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204eab:	00 00 00 
  8004204eae:	41 ff d0             	callq  *%r8
  8004204eb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204eb6:	74 14                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ec0:	74 0a                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204eca:	75 35                	jne    8004204f01 <check_page_alloc+0x7ee>
  8004204ecc:	48 b9 08 f5 21 04 80 	movabs $0x800421f508,%rcx
  8004204ed3:	00 00 00 
  8004204ed6:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204edd:	00 00 00 
  8004204ee0:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ee5:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204eec:	00 00 00 
  8004204eef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ef4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204efb:	00 00 00 
  8004204efe:	41 ff d0             	callq  *%r8
  8004204f01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f06:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f0d:	00 00 00 
  8004204f10:	ff d0                	callq  *%rax
  8004204f12:	48 85 c0             	test   %rax,%rax
  8004204f15:	74 35                	je     8004204f4c <check_page_alloc+0x839>
  8004204f17:	48 b9 7f f5 21 04 80 	movabs $0x800421f57f,%rcx
  8004204f1e:	00 00 00 
  8004204f21:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204f28:	00 00 00 
  8004204f2b:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f30:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204f37:	00 00 00 
  8004204f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204f46:	00 00 00 
  8004204f49:	41 ff d0             	callq  *%r8
  8004204f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f50:	48 89 c7             	mov    %rax,%rdi
  8004204f53:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204f5a:	00 00 00 
  8004204f5d:	ff d0                	callq  *%rax
  8004204f5f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f64:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f69:	48 89 c7             	mov    %rax,%rdi
  8004204f6c:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004204f73:	00 00 00 
  8004204f76:	ff d0                	callq  *%rax
  8004204f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f7c:	48 89 c7             	mov    %rax,%rdi
  8004204f7f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204f86:	00 00 00 
  8004204f89:	ff d0                	callq  *%rax
  8004204f8b:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f90:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f97:	00 00 00 
  8004204f9a:	ff d0                	callq  *%rax
  8004204f9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fa0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fa5:	75 35                	jne    8004204fdc <check_page_alloc+0x8c9>
  8004204fa7:	48 b9 8e f5 21 04 80 	movabs $0x800421f58e,%rcx
  8004204fae:	00 00 00 
  8004204fb1:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204fb8:	00 00 00 
  8004204fbb:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fc0:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004204fc7:	00 00 00 
  8004204fca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204fd6:	00 00 00 
  8004204fd9:	41 ff d0             	callq  *%r8
  8004204fdc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fe1:	74 0a                	je     8004204fed <check_page_alloc+0x8da>
  8004204fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204fe7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204feb:	74 35                	je     8004205022 <check_page_alloc+0x90f>
  8004204fed:	48 b9 ac f5 21 04 80 	movabs $0x800421f5ac,%rcx
  8004204ff4:	00 00 00 
  8004204ff7:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004204ffe:	00 00 00 
  8004205001:	be 73 04 00 00       	mov    $0x473,%esi
  8004205006:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420500d:	00 00 00 
  8004205010:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205015:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420501c:	00 00 00 
  800420501f:	41 ff d0             	callq  *%r8
  8004205022:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205026:	48 89 c7             	mov    %rax,%rdi
  8004205029:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004205030:	00 00 00 
  8004205033:	ff d0                	callq  *%rax
  8004205035:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205040:	eb 4d                	jmp    800420508f <check_page_alloc+0x97c>
  8004205042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205045:	48 63 d0             	movslq %eax,%rdx
  8004205048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420504c:	48 01 d0             	add    %rdx,%rax
  800420504f:	0f b6 00             	movzbl (%rax),%eax
  8004205052:	84 c0                	test   %al,%al
  8004205054:	74 35                	je     800420508b <check_page_alloc+0x978>
  8004205056:	48 b9 bc f5 21 04 80 	movabs $0x800421f5bc,%rcx
  800420505d:	00 00 00 
  8004205060:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205067:	00 00 00 
  800420506a:	be 76 04 00 00       	mov    $0x476,%esi
  800420506f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205076:	00 00 00 
  8004205079:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205085:	00 00 00 
  8004205088:	41 ff d0             	callq  *%r8
  800420508b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420508f:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205096:	7e aa                	jle    8004205042 <check_page_alloc+0x92f>
  8004205098:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420509f:	00 00 00 
  80042050a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050a6:	48 89 10             	mov    %rdx,(%rax)
  80042050a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050ad:	48 89 c7             	mov    %rax,%rdi
  80042050b0:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050b7:	00 00 00 
  80042050ba:	ff d0                	callq  *%rax
  80042050bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050c0:	48 89 c7             	mov    %rax,%rdi
  80042050c3:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050ca:	00 00 00 
  80042050cd:	ff d0                	callq  *%rax
  80042050cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050d3:	48 89 c7             	mov    %rax,%rdi
  80042050d6:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050dd:	00 00 00 
  80042050e0:	ff d0                	callq  *%rax
  80042050e2:	48 bf c8 f5 21 04 80 	movabs $0x800421f5c8,%rdi
  80042050e9:	00 00 00 
  80042050ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050f1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042050f8:	00 00 00 
  80042050fb:	ff d2                	callq  *%rdx
  80042050fd:	c9                   	leaveq 
  80042050fe:	c3                   	retq   

00000080042050ff <check_boot_pml4e>:
  80042050ff:	55                   	push   %rbp
  8004205100:	48 89 e5             	mov    %rsp,%rbp
  8004205103:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420510a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205111:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004205118:	00 00 00 
  800420511b:	48 8b 00             	mov    (%rax),%rax
  800420511e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205122:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205129:	00 
  800420512a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205131:	00 00 00 
  8004205134:	48 8b 00             	mov    (%rax),%rax
  8004205137:	48 c1 e0 04          	shl    $0x4,%rax
  800420513b:	48 89 c2             	mov    %rax,%rdx
  800420513e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205142:	48 01 d0             	add    %rdx,%rax
  8004205145:	48 83 e8 01          	sub    $0x1,%rax
  8004205149:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420514d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205151:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205156:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420515a:	48 89 d0             	mov    %rdx,%rax
  800420515d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205161:	48 29 c2             	sub    %rax,%rdx
  8004205164:	48 89 d0             	mov    %rdx,%rax
  8004205167:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420516b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205172:	00 
  8004205173:	e9 d4 00 00 00       	jmpq   800420524c <check_boot_pml4e+0x14d>
  8004205178:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420517f:	00 00 00 
  8004205182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205186:	48 01 c2             	add    %rax,%rdx
  8004205189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420518d:	48 89 d6             	mov    %rdx,%rsi
  8004205190:	48 89 c7             	mov    %rax,%rdi
  8004205193:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420519a:	00 00 00 
  800420519d:	ff d0                	callq  *%rax
  800420519f:	48 ba 00 d6 6d 04 80 	movabs $0x80046dd600,%rdx
  80042051a6:	00 00 00 
  80042051a9:	48 8b 12             	mov    (%rdx),%rdx
  80042051ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051b0:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051b7:	00 00 00 
  80042051ba:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051be:	77 32                	ja     80042051f2 <check_boot_pml4e+0xf3>
  80042051c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051c4:	48 89 c1             	mov    %rax,%rcx
  80042051c7:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  80042051ce:	00 00 00 
  80042051d1:	be 96 04 00 00       	mov    $0x496,%esi
  80042051d6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042051dd:	00 00 00 
  80042051e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042051ec:	00 00 00 
  80042051ef:	41 ff d0             	callq  *%r8
  80042051f2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042051f9:	ff ff ff 
  80042051fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205200:	48 01 d1             	add    %rdx,%rcx
  8004205203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205207:	48 01 ca             	add    %rcx,%rdx
  800420520a:	48 39 d0             	cmp    %rdx,%rax
  800420520d:	74 35                	je     8004205244 <check_boot_pml4e+0x145>
  800420520f:	48 b9 e8 f5 21 04 80 	movabs $0x800421f5e8,%rcx
  8004205216:	00 00 00 
  8004205219:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205220:	00 00 00 
  8004205223:	be 96 04 00 00       	mov    $0x496,%esi
  8004205228:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420522f:	00 00 00 
  8004205232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205237:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420523e:	00 00 00 
  8004205241:	41 ff d0             	callq  *%r8
  8004205244:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420524b:	00 
  800420524c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205250:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205254:	0f 82 1e ff ff ff    	jb     8004205178 <check_boot_pml4e+0x79>
  800420525a:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  8004205261:	00 
  8004205262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205266:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420526c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205270:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205274:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205279:	48 f7 75 c8          	divq   -0x38(%rbp)
  800420527d:	48 89 d0             	mov    %rdx,%rax
  8004205280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205284:	48 29 c2             	sub    %rax,%rdx
  8004205287:	48 89 d0             	mov    %rdx,%rax
  800420528a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420528e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205295:	00 
  8004205296:	e9 d4 00 00 00       	jmpq   800420536f <check_boot_pml4e+0x270>
  800420529b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052a2:	00 00 00 
  80042052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052a9:	48 01 c2             	add    %rax,%rdx
  80042052ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b0:	48 89 d6             	mov    %rdx,%rsi
  80042052b3:	48 89 c7             	mov    %rax,%rdi
  80042052b6:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042052bd:	00 00 00 
  80042052c0:	ff d0                	callq  *%rax
  80042052c2:	48 ba 58 e2 4d 04 80 	movabs $0x80044de258,%rdx
  80042052c9:	00 00 00 
  80042052cc:	48 8b 12             	mov    (%rdx),%rdx
  80042052cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052d3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052da:	00 00 00 
  80042052dd:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052e1:	77 32                	ja     8004205315 <check_boot_pml4e+0x216>
  80042052e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052e7:	48 89 c1             	mov    %rax,%rcx
  80042052ea:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  80042052f1:	00 00 00 
  80042052f4:	be 9d 04 00 00       	mov    $0x49d,%esi
  80042052f9:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205300:	00 00 00 
  8004205303:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205308:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420530f:	00 00 00 
  8004205312:	41 ff d0             	callq  *%r8
  8004205315:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420531c:	ff ff ff 
  800420531f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205323:	48 01 d1             	add    %rdx,%rcx
  8004205326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420532a:	48 01 ca             	add    %rcx,%rdx
  800420532d:	48 39 d0             	cmp    %rdx,%rax
  8004205330:	74 35                	je     8004205367 <check_boot_pml4e+0x268>
  8004205332:	48 b9 20 f6 21 04 80 	movabs $0x800421f620,%rcx
  8004205339:	00 00 00 
  800420533c:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205343:	00 00 00 
  8004205346:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420534b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205352:	00 00 00 
  8004205355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420535a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205361:	00 00 00 
  8004205364:	41 ff d0             	callq  *%r8
  8004205367:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420536e:	00 
  800420536f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205373:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205377:	0f 82 1e ff ff ff    	jb     800420529b <check_boot_pml4e+0x19c>
  800420537d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205384:	00 
  8004205385:	eb 6a                	jmp    80042053f1 <check_boot_pml4e+0x2f2>
  8004205387:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420538e:	00 00 00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 01 c2             	add    %rax,%rdx
  8004205398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420539c:	48 89 d6             	mov    %rdx,%rsi
  800420539f:	48 89 c7             	mov    %rax,%rdi
  80042053a2:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042053a9:	00 00 00 
  80042053ac:	ff d0                	callq  *%rax
  80042053ae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053b2:	74 35                	je     80042053e9 <check_boot_pml4e+0x2ea>
  80042053b4:	48 b9 58 f6 21 04 80 	movabs $0x800421f658,%rcx
  80042053bb:	00 00 00 
  80042053be:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042053c5:	00 00 00 
  80042053c8:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053cd:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042053d4:	00 00 00 
  80042053d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042053e3:	00 00 00 
  80042053e6:	41 ff d0             	callq  *%r8
  80042053e9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053f0:	00 
  80042053f1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042053f8:	00 00 00 
  80042053fb:	48 8b 00             	mov    (%rax),%rax
  80042053fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205402:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205406:	0f 87 7b ff ff ff    	ja     8004205387 <check_boot_pml4e+0x288>
  800420540c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205413:	00 
  8004205414:	e9 a1 01 00 00       	jmpq   80042055ba <check_boot_pml4e+0x4bb>
  8004205419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420541d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205421:	48 89 d0             	mov    %rdx,%rax
  8004205424:	48 01 c0             	add    %rax,%rax
  8004205427:	48 01 d0             	add    %rdx,%rax
  800420542a:	48 c1 e0 0f          	shl    $0xf,%rax
  800420542e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205435:	00 00 00 
  8004205438:	48 29 c2             	sub    %rax,%rdx
  800420543b:	48 89 d0             	mov    %rdx,%rax
  800420543e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205442:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205449:	00 
  800420544a:	e9 e0 00 00 00       	jmpq   800420552f <check_boot_pml4e+0x430>
  800420544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205453:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205457:	48 01 d0             	add    %rdx,%rax
  800420545a:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  8004205461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205465:	48 89 d6             	mov    %rdx,%rsi
  8004205468:	48 89 c7             	mov    %rax,%rdi
  800420546b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205472:	00 00 00 
  8004205475:	ff d0                	callq  *%rax
  8004205477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420547b:	48 89 d1             	mov    %rdx,%rcx
  800420547e:	48 c1 e1 10          	shl    $0x10,%rcx
  8004205482:	48 ba 00 00 6e 04 80 	movabs $0x80046e0000,%rdx
  8004205489:	00 00 00 
  800420548c:	48 01 ca             	add    %rcx,%rdx
  800420548f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004205493:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420549a:	00 00 00 
  800420549d:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054a1:	77 32                	ja     80042054d5 <check_boot_pml4e+0x3d6>
  80042054a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054a7:	48 89 c1             	mov    %rax,%rcx
  80042054aa:	48 ba 08 f2 21 04 80 	movabs $0x800421f208,%rdx
  80042054b1:	00 00 00 
  80042054b4:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054b9:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042054c0:	00 00 00 
  80042054c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054c8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042054cf:	00 00 00 
  80042054d2:	41 ff d0             	callq  *%r8
  80042054d5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054dc:	ff ff ff 
  80042054df:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054e3:	48 01 d1             	add    %rdx,%rcx
  80042054e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054ea:	48 01 ca             	add    %rcx,%rdx
  80042054ed:	48 39 d0             	cmp    %rdx,%rax
  80042054f0:	74 35                	je     8004205527 <check_boot_pml4e+0x428>
  80042054f2:	48 b9 80 f6 21 04 80 	movabs $0x800421f680,%rcx
  80042054f9:	00 00 00 
  80042054fc:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205503:	00 00 00 
  8004205506:	be ab 04 00 00       	mov    $0x4ab,%esi
  800420550b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205512:	00 00 00 
  8004205515:	b8 00 00 00 00       	mov    $0x0,%eax
  800420551a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205521:	00 00 00 
  8004205524:	41 ff d0             	callq  *%r8
  8004205527:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420552e:	00 
  800420552f:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205536:	00 
  8004205537:	0f 86 12 ff ff ff    	jbe    800420544f <check_boot_pml4e+0x350>
  800420553d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205544:	00 
  8004205545:	eb 64                	jmp    80042055ab <check_boot_pml4e+0x4ac>
  8004205547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420554b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420554f:	48 01 c2             	add    %rax,%rdx
  8004205552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205556:	48 89 d6             	mov    %rdx,%rsi
  8004205559:	48 89 c7             	mov    %rax,%rdi
  800420555c:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205563:	00 00 00 
  8004205566:	ff d0                	callq  *%rax
  8004205568:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  800420556c:	74 35                	je     80042055a3 <check_boot_pml4e+0x4a4>
  800420556e:	48 b9 c8 f6 21 04 80 	movabs $0x800421f6c8,%rcx
  8004205575:	00 00 00 
  8004205578:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420557f:	00 00 00 
  8004205582:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205587:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420558e:	00 00 00 
  8004205591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205596:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420559d:	00 00 00 
  80042055a0:	41 ff d0             	callq  *%r8
  80042055a3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055aa:	00 
  80042055ab:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055b2:	00 
  80042055b3:	76 92                	jbe    8004205547 <check_boot_pml4e+0x448>
  80042055b5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055ba:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055bf:	0f 86 54 fe ff ff    	jbe    8004205419 <check_boot_pml4e+0x31a>
  80042055c5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042055cc:	00 00 00 
  80042055cf:	48 8b 00             	mov    (%rax),%rax
  80042055d2:	48 83 c0 08          	add    $0x8,%rax
  80042055d6:	48 8b 00             	mov    (%rax),%rax
  80042055d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055eb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055ee:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055f1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042055f8:	00 00 00 
  80042055fb:	48 8b 00             	mov    (%rax),%rax
  80042055fe:	48 39 c2             	cmp    %rax,%rdx
  8004205601:	72 32                	jb     8004205635 <check_boot_pml4e+0x536>
  8004205603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205607:	48 89 c1             	mov    %rax,%rcx
  800420560a:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004205611:	00 00 00 
  8004205614:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205619:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205620:	00 00 00 
  8004205623:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205628:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420562f:	00 00 00 
  8004205632:	41 ff d0             	callq  *%r8
  8004205635:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420563c:	00 00 00 
  800420563f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205643:	48 01 d0             	add    %rdx,%rax
  8004205646:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420564a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420564e:	48 8b 00             	mov    (%rax),%rax
  8004205651:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205657:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800420565b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420565f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205663:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205666:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205669:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205670:	00 00 00 
  8004205673:	48 8b 00             	mov    (%rax),%rax
  8004205676:	48 39 c2             	cmp    %rax,%rdx
  8004205679:	72 32                	jb     80042056ad <check_boot_pml4e+0x5ae>
  800420567b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420567f:	48 89 c1             	mov    %rax,%rcx
  8004205682:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004205689:	00 00 00 
  800420568c:	be b8 04 00 00       	mov    $0x4b8,%esi
  8004205691:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205698:	00 00 00 
  800420569b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042056a7:	00 00 00 
  80042056aa:	41 ff d0             	callq  *%r8
  80042056ad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056b4:	00 00 00 
  80042056b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056bb:	48 01 d0             	add    %rdx,%rax
  80042056be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056cc:	00 
  80042056cd:	e9 50 01 00 00       	jmpq   8004205822 <check_boot_pml4e+0x723>
  80042056d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056d6:	48 83 f8 04          	cmp    $0x4,%rax
  80042056da:	72 67                	jb     8004205743 <check_boot_pml4e+0x644>
  80042056dc:	48 83 f8 05          	cmp    $0x5,%rax
  80042056e0:	76 06                	jbe    80042056e8 <check_boot_pml4e+0x5e9>
  80042056e2:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056e6:	75 5b                	jne    8004205743 <check_boot_pml4e+0x644>
  80042056e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056ec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056f3:	00 
  80042056f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056fb:	48 01 d0             	add    %rdx,%rax
  80042056fe:	48 8b 00             	mov    (%rax),%rax
  8004205701:	83 e0 01             	and    $0x1,%eax
  8004205704:	48 85 c0             	test   %rax,%rax
  8004205707:	75 35                	jne    800420573e <check_boot_pml4e+0x63f>
  8004205709:	48 b9 eb f6 21 04 80 	movabs $0x800421f6eb,%rcx
  8004205710:	00 00 00 
  8004205713:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420571a:	00 00 00 
  800420571d:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205722:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205729:	00 00 00 
  800420572c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205731:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205738:	00 00 00 
  800420573b:	41 ff d0             	callq  *%r8
  800420573e:	e9 da 00 00 00       	jmpq   800420581d <check_boot_pml4e+0x71e>
  8004205743:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205748:	0f 86 ce 00 00 00    	jbe    800420581c <check_boot_pml4e+0x71d>
  800420574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205752:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205759:	00 
  800420575a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205761:	48 01 d0             	add    %rdx,%rax
  8004205764:	48 8b 00             	mov    (%rax),%rax
  8004205767:	83 e0 01             	and    $0x1,%eax
  800420576a:	48 85 c0             	test   %rax,%rax
  800420576d:	74 5a                	je     80042057c9 <check_boot_pml4e+0x6ca>
  800420576f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205773:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420577a:	00 
  800420577b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205782:	48 01 d0             	add    %rdx,%rax
  8004205785:	48 8b 00             	mov    (%rax),%rax
  8004205788:	83 e0 02             	and    $0x2,%eax
  800420578b:	48 85 c0             	test   %rax,%rax
  800420578e:	0f 85 88 00 00 00    	jne    800420581c <check_boot_pml4e+0x71d>
  8004205794:	48 b9 fc f6 21 04 80 	movabs $0x800421f6fc,%rcx
  800420579b:	00 00 00 
  800420579e:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042057a5:	00 00 00 
  80042057a8:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057ad:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042057b4:	00 00 00 
  80042057b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042057c3:	00 00 00 
  80042057c6:	41 ff d0             	callq  *%r8
  80042057c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057d4:	00 
  80042057d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057dc:	48 01 d0             	add    %rdx,%rax
  80042057df:	48 8b 00             	mov    (%rax),%rax
  80042057e2:	48 85 c0             	test   %rax,%rax
  80042057e5:	74 35                	je     800420581c <check_boot_pml4e+0x71d>
  80042057e7:	48 b9 0d f7 21 04 80 	movabs $0x800421f70d,%rcx
  80042057ee:	00 00 00 
  80042057f1:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042057f8:	00 00 00 
  80042057fb:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205800:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205807:	00 00 00 
  800420580a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420580f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205816:	00 00 00 
  8004205819:	41 ff d0             	callq  *%r8
  800420581c:	90                   	nop
  800420581d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205822:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205829:	00 
  800420582a:	0f 86 a2 fe ff ff    	jbe    80042056d2 <check_boot_pml4e+0x5d3>
  8004205830:	48 bf 20 f7 21 04 80 	movabs $0x800421f720,%rdi
  8004205837:	00 00 00 
  800420583a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420583f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004205846:	00 00 00 
  8004205849:	ff d2                	callq  *%rdx
  800420584b:	c9                   	leaveq 
  800420584c:	c3                   	retq   

000000800420584d <check_va2pa>:
  800420584d:	55                   	push   %rbp
  800420584e:	48 89 e5             	mov    %rsp,%rbp
  8004205851:	48 83 ec 60          	sub    $0x60,%rsp
  8004205855:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205859:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420585d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205861:	48 c1 e8 27          	shr    $0x27,%rax
  8004205865:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420586a:	48 c1 e0 03          	shl    $0x3,%rax
  800420586e:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  8004205872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205876:	48 8b 00             	mov    (%rax),%rax
  8004205879:	83 e0 01             	and    $0x1,%eax
  800420587c:	48 85 c0             	test   %rax,%rax
  800420587f:	75 0c                	jne    800420588d <check_va2pa+0x40>
  8004205881:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205888:	e9 38 02 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  800420588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205891:	48 8b 00             	mov    (%rax),%rax
  8004205894:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420589a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420589e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058a2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058ac:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042058b3:	00 00 00 
  80042058b6:	48 8b 00             	mov    (%rax),%rax
  80042058b9:	48 39 c2             	cmp    %rax,%rdx
  80042058bc:	72 32                	jb     80042058f0 <check_va2pa+0xa3>
  80042058be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c2:	48 89 c1             	mov    %rax,%rcx
  80042058c5:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042058cc:	00 00 00 
  80042058cf:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058d4:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042058db:	00 00 00 
  80042058de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042058ea:	00 00 00 
  80042058ed:	41 ff d0             	callq  *%r8
  80042058f0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042058f7:	00 00 00 
  80042058fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058fe:	48 01 d0             	add    %rdx,%rax
  8004205901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205905:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205909:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420590d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420591e:	48 01 d0             	add    %rdx,%rax
  8004205921:	48 8b 00             	mov    (%rax),%rax
  8004205924:	83 e0 01             	and    $0x1,%eax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	75 0c                	jne    8004205938 <check_va2pa+0xeb>
  800420592c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205933:	e9 8d 01 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  8004205938:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420593c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205940:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205945:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420594c:	00 
  800420594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205951:	48 01 d0             	add    %rdx,%rax
  8004205954:	48 8b 00             	mov    (%rax),%rax
  8004205957:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420595d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205965:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205969:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420596c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420596f:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205976:	00 00 00 
  8004205979:	48 8b 00             	mov    (%rax),%rax
  800420597c:	48 39 c2             	cmp    %rax,%rdx
  800420597f:	72 32                	jb     80042059b3 <check_va2pa+0x166>
  8004205981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205985:	48 89 c1             	mov    %rax,%rcx
  8004205988:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  800420598f:	00 00 00 
  8004205992:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205997:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420599e:	00 00 00 
  80042059a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059a6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042059ad:	00 00 00 
  80042059b0:	41 ff d0             	callq  *%r8
  80042059b3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059ba:	00 00 00 
  80042059bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059c1:	48 01 d0             	add    %rdx,%rax
  80042059c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059cc:	48 c1 e8 15          	shr    $0x15,%rax
  80042059d0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042059d9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059e1:	48 8b 00             	mov    (%rax),%rax
  80042059e4:	83 e0 01             	and    $0x1,%eax
  80042059e7:	48 85 c0             	test   %rax,%rax
  80042059ea:	75 0c                	jne    80042059f8 <check_va2pa+0x1ab>
  80042059ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f3:	e9 cd 00 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  80042059f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059fc:	48 8b 00             	mov    (%rax),%rax
  80042059ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a0d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a11:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a14:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a17:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	48 39 c2             	cmp    %rax,%rdx
  8004205a27:	72 32                	jb     8004205a5b <check_va2pa+0x20e>
  8004205a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a2d:	48 89 c1             	mov    %rax,%rcx
  8004205a30:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004205a37:	00 00 00 
  8004205a3a:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a3f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205a46:	00 00 00 
  8004205a49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205a55:	00 00 00 
  8004205a58:	41 ff d0             	callq  *%r8
  8004205a5b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a62:	00 00 00 
  8004205a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a69:	48 01 d0             	add    %rdx,%rax
  8004205a6c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a74:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a78:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a84:	00 
  8004205a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a89:	48 01 d0             	add    %rdx,%rax
  8004205a8c:	48 8b 00             	mov    (%rax),%rax
  8004205a8f:	83 e0 01             	and    $0x1,%eax
  8004205a92:	48 85 c0             	test   %rax,%rax
  8004205a95:	75 09                	jne    8004205aa0 <check_va2pa+0x253>
  8004205a97:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a9e:	eb 25                	jmp    8004205ac5 <check_va2pa+0x278>
  8004205aa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aa4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aa8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205aad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ab4:	00 
  8004205ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ab9:	48 01 d0             	add    %rdx,%rax
  8004205abc:	48 8b 00             	mov    (%rax),%rax
  8004205abf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ac5:	c9                   	leaveq 
  8004205ac6:	c3                   	retq   

0000008004205ac7 <page_check>:
  8004205ac7:	55                   	push   %rbp
  8004205ac8:	48 89 e5             	mov    %rsp,%rbp
  8004205acb:	53                   	push   %rbx
  8004205acc:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205ad3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ada:	00 
  8004205adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205afb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b08:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b0f:	00 00 00 
  8004205b12:	ff d0                	callq  *%rax
  8004205b14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b18:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b1d:	75 35                	jne    8004205b54 <page_check+0x8d>
  8004205b1f:	48 b9 3f f7 21 04 80 	movabs $0x800421f73f,%rcx
  8004205b26:	00 00 00 
  8004205b29:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205b30:	00 00 00 
  8004205b33:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b38:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205b3f:	00 00 00 
  8004205b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b4e:	00 00 00 
  8004205b51:	41 ff d0             	callq  *%r8
  8004205b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b59:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b60:	00 00 00 
  8004205b63:	ff d0                	callq  *%rax
  8004205b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b69:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b6e:	75 35                	jne    8004205ba5 <page_check+0xde>
  8004205b70:	48 b9 53 f7 21 04 80 	movabs $0x800421f753,%rcx
  8004205b77:	00 00 00 
  8004205b7a:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205b81:	00 00 00 
  8004205b84:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b89:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205b90:	00 00 00 
  8004205b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b9f:	00 00 00 
  8004205ba2:	41 ff d0             	callq  *%r8
  8004205ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205baa:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205bb1:	00 00 00 
  8004205bb4:	ff d0                	callq  *%rax
  8004205bb6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bbf:	75 35                	jne    8004205bf6 <page_check+0x12f>
  8004205bc1:	48 b9 67 f7 21 04 80 	movabs $0x800421f767,%rcx
  8004205bc8:	00 00 00 
  8004205bcb:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205bd2:	00 00 00 
  8004205bd5:	be 04 05 00 00       	mov    $0x504,%esi
  8004205bda:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205be1:	00 00 00 
  8004205be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205bf0:	00 00 00 
  8004205bf3:	41 ff d0             	callq  *%r8
  8004205bf6:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bfb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c02:	00 00 00 
  8004205c05:	ff d0                	callq  *%rax
  8004205c07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c10:	75 35                	jne    8004205c47 <page_check+0x180>
  8004205c12:	48 b9 7b f7 21 04 80 	movabs $0x800421f77b,%rcx
  8004205c19:	00 00 00 
  8004205c1c:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205c23:	00 00 00 
  8004205c26:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c2b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205c32:	00 00 00 
  8004205c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c41:	00 00 00 
  8004205c44:	41 ff d0             	callq  *%r8
  8004205c47:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c53:	00 00 00 
  8004205c56:	ff d0                	callq  *%rax
  8004205c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c61:	75 35                	jne    8004205c98 <page_check+0x1d1>
  8004205c63:	48 b9 8f f7 21 04 80 	movabs $0x800421f78f,%rcx
  8004205c6a:	00 00 00 
  8004205c6d:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205c74:	00 00 00 
  8004205c77:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c7c:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205c83:	00 00 00 
  8004205c86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c92:	00 00 00 
  8004205c95:	41 ff d0             	callq  *%r8
  8004205c98:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9d:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205ca4:	00 00 00 
  8004205ca7:	ff d0                	callq  *%rax
  8004205ca9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cb2:	75 35                	jne    8004205ce9 <page_check+0x222>
  8004205cb4:	48 b9 a3 f7 21 04 80 	movabs $0x800421f7a3,%rcx
  8004205cbb:	00 00 00 
  8004205cbe:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205cc5:	00 00 00 
  8004205cc8:	be 07 05 00 00       	mov    $0x507,%esi
  8004205ccd:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205cd4:	00 00 00 
  8004205cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ce3:	00 00 00 
  8004205ce6:	41 ff d0             	callq  *%r8
  8004205ce9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cee:	75 35                	jne    8004205d25 <page_check+0x25e>
  8004205cf0:	48 b9 f1 f4 21 04 80 	movabs $0x800421f4f1,%rcx
  8004205cf7:	00 00 00 
  8004205cfa:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205d01:	00 00 00 
  8004205d04:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d09:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205d10:	00 00 00 
  8004205d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d1f:	00 00 00 
  8004205d22:	41 ff d0             	callq  *%r8
  8004205d25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d2a:	74 0a                	je     8004205d36 <page_check+0x26f>
  8004205d2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d30:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d34:	75 35                	jne    8004205d6b <page_check+0x2a4>
  8004205d36:	48 b9 f5 f4 21 04 80 	movabs $0x800421f4f5,%rcx
  8004205d3d:	00 00 00 
  8004205d40:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205d47:	00 00 00 
  8004205d4a:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d4f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205d56:	00 00 00 
  8004205d59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d65:	00 00 00 
  8004205d68:	41 ff d0             	callq  *%r8
  8004205d6b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d70:	74 14                	je     8004205d86 <page_check+0x2bf>
  8004205d72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d76:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d7a:	74 0a                	je     8004205d86 <page_check+0x2bf>
  8004205d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d80:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d84:	75 35                	jne    8004205dbb <page_check+0x2f4>
  8004205d86:	48 b9 08 f5 21 04 80 	movabs $0x800421f508,%rcx
  8004205d8d:	00 00 00 
  8004205d90:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205d97:	00 00 00 
  8004205d9a:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205d9f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205da6:	00 00 00 
  8004205da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205db5:	00 00 00 
  8004205db8:	41 ff d0             	callq  *%r8
  8004205dbb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dc0:	74 1e                	je     8004205de0 <page_check+0x319>
  8004205dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dc6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dca:	74 14                	je     8004205de0 <page_check+0x319>
  8004205dcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205dd4:	74 0a                	je     8004205de0 <page_check+0x319>
  8004205dd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dda:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dde:	75 35                	jne    8004205e15 <page_check+0x34e>
  8004205de0:	48 b9 b8 f7 21 04 80 	movabs $0x800421f7b8,%rcx
  8004205de7:	00 00 00 
  8004205dea:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205df1:	00 00 00 
  8004205df4:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205df9:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205e00:	00 00 00 
  8004205e03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e0f:	00 00 00 
  8004205e12:	41 ff d0             	callq  *%r8
  8004205e15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e1a:	74 28                	je     8004205e44 <page_check+0x37d>
  8004205e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e24:	74 1e                	je     8004205e44 <page_check+0x37d>
  8004205e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e2e:	74 14                	je     8004205e44 <page_check+0x37d>
  8004205e30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e34:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e38:	74 0a                	je     8004205e44 <page_check+0x37d>
  8004205e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e3e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e42:	75 35                	jne    8004205e79 <page_check+0x3b2>
  8004205e44:	48 b9 e8 f7 21 04 80 	movabs $0x800421f7e8,%rcx
  8004205e4b:	00 00 00 
  8004205e4e:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205e55:	00 00 00 
  8004205e58:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e5d:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205e64:	00 00 00 
  8004205e67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e73:	00 00 00 
  8004205e76:	41 ff d0             	callq  *%r8
  8004205e79:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e7e:	74 32                	je     8004205eb2 <page_check+0x3eb>
  8004205e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e88:	74 28                	je     8004205eb2 <page_check+0x3eb>
  8004205e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e8e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e92:	74 1e                	je     8004205eb2 <page_check+0x3eb>
  8004205e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e98:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e9c:	74 14                	je     8004205eb2 <page_check+0x3eb>
  8004205e9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea2:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ea6:	74 0a                	je     8004205eb2 <page_check+0x3eb>
  8004205ea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eac:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205eb0:	75 35                	jne    8004205ee7 <page_check+0x420>
  8004205eb2:	48 b9 28 f8 21 04 80 	movabs $0x800421f828,%rcx
  8004205eb9:	00 00 00 
  8004205ebc:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205ec3:	00 00 00 
  8004205ec6:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ecb:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205ed2:	00 00 00 
  8004205ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205eda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ee1:	00 00 00 
  8004205ee4:	41 ff d0             	callq  *%r8
  8004205ee7:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004205eee:	00 00 00 
  8004205ef1:	48 8b 00             	mov    (%rax),%rax
  8004205ef4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205ef8:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004205eff:	00 00 00 
  8004205f02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205f15:	00 00 00 
  8004205f18:	ff d0                	callq  *%rax
  8004205f1a:	48 85 c0             	test   %rax,%rax
  8004205f1d:	74 35                	je     8004205f54 <page_check+0x48d>
  8004205f1f:	48 b9 7f f5 21 04 80 	movabs $0x800421f57f,%rcx
  8004205f26:	00 00 00 
  8004205f29:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205f30:	00 00 00 
  8004205f33:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f38:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205f3f:	00 00 00 
  8004205f42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205f4e:	00 00 00 
  8004205f51:	41 ff d0             	callq  *%r8
  8004205f54:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004205f5b:	00 00 00 
  8004205f5e:	48 8b 00             	mov    (%rax),%rax
  8004205f61:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f68:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f6d:	48 89 c7             	mov    %rax,%rdi
  8004205f70:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004205f77:	00 00 00 
  8004205f7a:	ff d0                	callq  *%rax
  8004205f7c:	48 85 c0             	test   %rax,%rax
  8004205f7f:	74 35                	je     8004205fb6 <page_check+0x4ef>
  8004205f81:	48 b9 78 f8 21 04 80 	movabs $0x800421f878,%rcx
  8004205f88:	00 00 00 
  8004205f8b:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205f92:	00 00 00 
  8004205f95:	be 18 05 00 00       	mov    $0x518,%esi
  8004205f9a:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004205fa1:	00 00 00 
  8004205fa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fa9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205fb0:	00 00 00 
  8004205fb3:	41 ff d0             	callq  *%r8
  8004205fb6:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004205fbd:	00 00 00 
  8004205fc0:	48 8b 00             	mov    (%rax),%rax
  8004205fc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fcc:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fd1:	48 89 c7             	mov    %rax,%rdi
  8004205fd4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004205fdb:	00 00 00 
  8004205fde:	ff d0                	callq  *%rax
  8004205fe0:	85 c0                	test   %eax,%eax
  8004205fe2:	78 35                	js     8004206019 <page_check+0x552>
  8004205fe4:	48 b9 b0 f8 21 04 80 	movabs $0x800421f8b0,%rcx
  8004205feb:	00 00 00 
  8004205fee:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004205ff5:	00 00 00 
  8004205ff8:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004205ffd:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206004:	00 00 00 
  8004206007:	b8 00 00 00 00       	mov    $0x0,%eax
  800420600c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206013:	00 00 00 
  8004206016:	41 ff d0             	callq  *%r8
  8004206019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420601d:	48 89 c7             	mov    %rax,%rdi
  8004206020:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004206027:	00 00 00 
  800420602a:	ff d0                	callq  *%rax
  800420602c:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420603d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206042:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206047:	48 89 c7             	mov    %rax,%rdi
  800420604a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206051:	00 00 00 
  8004206054:	ff d0                	callq  *%rax
  8004206056:	85 c0                	test   %eax,%eax
  8004206058:	78 35                	js     800420608f <page_check+0x5c8>
  800420605a:	48 b9 b0 f8 21 04 80 	movabs $0x800421f8b0,%rcx
  8004206061:	00 00 00 
  8004206064:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420606b:	00 00 00 
  800420606e:	be 1f 05 00 00       	mov    $0x51f,%esi
  8004206073:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420607a:	00 00 00 
  800420607d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206082:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206089:	00 00 00 
  800420608c:	41 ff d0             	callq  *%r8
  800420608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206093:	48 89 c7             	mov    %rax,%rdi
  8004206096:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420609d:	00 00 00 
  80042060a0:	ff d0                	callq  *%rax
  80042060a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060a6:	48 89 c7             	mov    %rax,%rdi
  80042060a9:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042060b0:	00 00 00 
  80042060b3:	ff d0                	callq  *%rax
  80042060b5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042060bc:	00 00 00 
  80042060bf:	48 8b 00             	mov    (%rax),%rax
  80042060c2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060cb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060d0:	48 89 c7             	mov    %rax,%rdi
  80042060d3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042060da:	00 00 00 
  80042060dd:	ff d0                	callq  *%rax
  80042060df:	85 c0                	test   %eax,%eax
  80042060e1:	74 35                	je     8004206118 <page_check+0x651>
  80042060e3:	48 b9 e0 f8 21 04 80 	movabs $0x800421f8e0,%rcx
  80042060ea:	00 00 00 
  80042060ed:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042060f4:	00 00 00 
  80042060f7:	be 25 05 00 00       	mov    $0x525,%esi
  80042060fc:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206103:	00 00 00 
  8004206106:	b8 00 00 00 00       	mov    $0x0,%eax
  800420610b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206112:	00 00 00 
  8004206115:	41 ff d0             	callq  *%r8
  8004206118:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420611f:	00 00 00 
  8004206122:	48 8b 00             	mov    (%rax),%rax
  8004206125:	48 8b 00             	mov    (%rax),%rax
  8004206128:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420612e:	48 89 c3             	mov    %rax,%rbx
  8004206131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206135:	48 89 c7             	mov    %rax,%rdi
  8004206138:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420613f:	00 00 00 
  8004206142:	ff d0                	callq  *%rax
  8004206144:	48 39 c3             	cmp    %rax,%rbx
  8004206147:	0f 84 97 00 00 00    	je     80042061e4 <page_check+0x71d>
  800420614d:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206154:	00 00 00 
  8004206157:	48 8b 00             	mov    (%rax),%rax
  800420615a:	48 8b 00             	mov    (%rax),%rax
  800420615d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206163:	48 89 c3             	mov    %rax,%rbx
  8004206166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420616a:	48 89 c7             	mov    %rax,%rdi
  800420616d:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206174:	00 00 00 
  8004206177:	ff d0                	callq  *%rax
  8004206179:	48 39 c3             	cmp    %rax,%rbx
  800420617c:	74 66                	je     80042061e4 <page_check+0x71d>
  800420617e:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206185:	00 00 00 
  8004206188:	48 8b 00             	mov    (%rax),%rax
  800420618b:	48 8b 00             	mov    (%rax),%rax
  800420618e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206194:	48 89 c3             	mov    %rax,%rbx
  8004206197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420619b:	48 89 c7             	mov    %rax,%rdi
  800420619e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042061a5:	00 00 00 
  80042061a8:	ff d0                	callq  *%rax
  80042061aa:	48 39 c3             	cmp    %rax,%rbx
  80042061ad:	74 35                	je     80042061e4 <page_check+0x71d>
  80042061af:	48 b9 10 f9 21 04 80 	movabs $0x800421f910,%rcx
  80042061b6:	00 00 00 
  80042061b9:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042061c0:	00 00 00 
  80042061c3:	be 26 05 00 00       	mov    $0x526,%esi
  80042061c8:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042061cf:	00 00 00 
  80042061d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061d7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042061de:	00 00 00 
  80042061e1:	41 ff d0             	callq  *%r8
  80042061e4:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042061eb:	00 00 00 
  80042061ee:	48 8b 00             	mov    (%rax),%rax
  80042061f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042061f6:	48 89 c7             	mov    %rax,%rdi
  80042061f9:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206200:	00 00 00 
  8004206203:	ff d0                	callq  *%rax
  8004206205:	48 89 c3             	mov    %rax,%rbx
  8004206208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420620c:	48 89 c7             	mov    %rax,%rdi
  800420620f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206216:	00 00 00 
  8004206219:	ff d0                	callq  *%rax
  800420621b:	48 39 c3             	cmp    %rax,%rbx
  800420621e:	74 35                	je     8004206255 <page_check+0x78e>
  8004206220:	48 b9 98 f9 21 04 80 	movabs $0x800421f998,%rcx
  8004206227:	00 00 00 
  800420622a:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206231:	00 00 00 
  8004206234:	be 27 05 00 00       	mov    $0x527,%esi
  8004206239:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206240:	00 00 00 
  8004206243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206248:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420624f:	00 00 00 
  8004206252:	41 ff d0             	callq  *%r8
  8004206255:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206259:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420625d:	66 83 f8 01          	cmp    $0x1,%ax
  8004206261:	74 35                	je     8004206298 <page_check+0x7d1>
  8004206263:	48 b9 c5 f9 21 04 80 	movabs $0x800421f9c5,%rcx
  800420626a:	00 00 00 
  800420626d:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206274:	00 00 00 
  8004206277:	be 28 05 00 00       	mov    $0x528,%esi
  800420627c:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206283:	00 00 00 
  8004206286:	b8 00 00 00 00       	mov    $0x0,%eax
  800420628b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206292:	00 00 00 
  8004206295:	41 ff d0             	callq  *%r8
  8004206298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420629c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062a0:	66 83 f8 01          	cmp    $0x1,%ax
  80042062a4:	74 35                	je     80042062db <page_check+0x814>
  80042062a6:	48 b9 d6 f9 21 04 80 	movabs $0x800421f9d6,%rcx
  80042062ad:	00 00 00 
  80042062b0:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042062b7:	00 00 00 
  80042062ba:	be 29 05 00 00       	mov    $0x529,%esi
  80042062bf:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042062c6:	00 00 00 
  80042062c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062ce:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042062d5:	00 00 00 
  80042062d8:	41 ff d0             	callq  *%r8
  80042062db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062df:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062e3:	66 83 f8 01          	cmp    $0x1,%ax
  80042062e7:	74 35                	je     800420631e <page_check+0x857>
  80042062e9:	48 b9 e7 f9 21 04 80 	movabs $0x800421f9e7,%rcx
  80042062f0:	00 00 00 
  80042062f3:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042062fa:	00 00 00 
  80042062fd:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206302:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206309:	00 00 00 
  800420630c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206311:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206318:	00 00 00 
  800420631b:	41 ff d0             	callq  *%r8
  800420631e:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206325:	00 00 00 
  8004206328:	48 8b 00             	mov    (%rax),%rax
  800420632b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420632f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206334:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206339:	48 89 c7             	mov    %rax,%rdi
  800420633c:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206343:	00 00 00 
  8004206346:	ff d0                	callq  *%rax
  8004206348:	85 c0                	test   %eax,%eax
  800420634a:	74 35                	je     8004206381 <page_check+0x8ba>
  800420634c:	48 b9 f8 f9 21 04 80 	movabs $0x800421f9f8,%rcx
  8004206353:	00 00 00 
  8004206356:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420635d:	00 00 00 
  8004206360:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206365:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420636c:	00 00 00 
  800420636f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206374:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420637b:	00 00 00 
  800420637e:	41 ff d0             	callq  *%r8
  8004206381:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206388:	00 00 00 
  800420638b:	48 8b 00             	mov    (%rax),%rax
  800420638e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206393:	48 89 c7             	mov    %rax,%rdi
  8004206396:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420639d:	00 00 00 
  80042063a0:	ff d0                	callq  *%rax
  80042063a2:	48 89 c3             	mov    %rax,%rbx
  80042063a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063a9:	48 89 c7             	mov    %rax,%rdi
  80042063ac:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042063b3:	00 00 00 
  80042063b6:	ff d0                	callq  *%rax
  80042063b8:	48 39 c3             	cmp    %rax,%rbx
  80042063bb:	74 35                	je     80042063f2 <page_check+0x92b>
  80042063bd:	48 b9 30 fa 21 04 80 	movabs $0x800421fa30,%rcx
  80042063c4:	00 00 00 
  80042063c7:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042063ce:	00 00 00 
  80042063d1:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063d6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042063dd:	00 00 00 
  80042063e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042063ec:	00 00 00 
  80042063ef:	41 ff d0             	callq  *%r8
  80042063f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063fa:	66 83 f8 02          	cmp    $0x2,%ax
  80042063fe:	74 35                	je     8004206435 <page_check+0x96e>
  8004206400:	48 b9 60 fa 21 04 80 	movabs $0x800421fa60,%rcx
  8004206407:	00 00 00 
  800420640a:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206411:	00 00 00 
  8004206414:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206419:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206420:	00 00 00 
  8004206423:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206428:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420642f:	00 00 00 
  8004206432:	41 ff d0             	callq  *%r8
  8004206435:	bf 00 00 00 00       	mov    $0x0,%edi
  800420643a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004206441:	00 00 00 
  8004206444:	ff d0                	callq  *%rax
  8004206446:	48 85 c0             	test   %rax,%rax
  8004206449:	74 35                	je     8004206480 <page_check+0x9b9>
  800420644b:	48 b9 7f f5 21 04 80 	movabs $0x800421f57f,%rcx
  8004206452:	00 00 00 
  8004206455:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420645c:	00 00 00 
  800420645f:	be 31 05 00 00       	mov    $0x531,%esi
  8004206464:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420646b:	00 00 00 
  800420646e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206473:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420647a:	00 00 00 
  800420647d:	41 ff d0             	callq  *%r8
  8004206480:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206487:	00 00 00 
  800420648a:	48 8b 00             	mov    (%rax),%rax
  800420648d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206491:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206496:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420649b:	48 89 c7             	mov    %rax,%rdi
  800420649e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042064a5:	00 00 00 
  80042064a8:	ff d0                	callq  *%rax
  80042064aa:	85 c0                	test   %eax,%eax
  80042064ac:	74 35                	je     80042064e3 <page_check+0xa1c>
  80042064ae:	48 b9 f8 f9 21 04 80 	movabs $0x800421f9f8,%rcx
  80042064b5:	00 00 00 
  80042064b8:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042064bf:	00 00 00 
  80042064c2:	be 34 05 00 00       	mov    $0x534,%esi
  80042064c7:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042064ce:	00 00 00 
  80042064d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042064dd:	00 00 00 
  80042064e0:	41 ff d0             	callq  *%r8
  80042064e3:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042064ea:	00 00 00 
  80042064ed:	48 8b 00             	mov    (%rax),%rax
  80042064f0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064f5:	48 89 c7             	mov    %rax,%rdi
  80042064f8:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042064ff:	00 00 00 
  8004206502:	ff d0                	callq  *%rax
  8004206504:	48 89 c3             	mov    %rax,%rbx
  8004206507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420650b:	48 89 c7             	mov    %rax,%rdi
  800420650e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206515:	00 00 00 
  8004206518:	ff d0                	callq  *%rax
  800420651a:	48 39 c3             	cmp    %rax,%rbx
  800420651d:	74 35                	je     8004206554 <page_check+0xa8d>
  800420651f:	48 b9 30 fa 21 04 80 	movabs $0x800421fa30,%rcx
  8004206526:	00 00 00 
  8004206529:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206530:	00 00 00 
  8004206533:	be 35 05 00 00       	mov    $0x535,%esi
  8004206538:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420653f:	00 00 00 
  8004206542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420654e:	00 00 00 
  8004206551:	41 ff d0             	callq  *%r8
  8004206554:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206558:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420655c:	66 83 f8 02          	cmp    $0x2,%ax
  8004206560:	74 35                	je     8004206597 <page_check+0xad0>
  8004206562:	48 b9 60 fa 21 04 80 	movabs $0x800421fa60,%rcx
  8004206569:	00 00 00 
  800420656c:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206573:	00 00 00 
  8004206576:	be 36 05 00 00       	mov    $0x536,%esi
  800420657b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206582:	00 00 00 
  8004206585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420658a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206591:	00 00 00 
  8004206594:	41 ff d0             	callq  *%r8
  8004206597:	bf 00 00 00 00       	mov    $0x0,%edi
  800420659c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042065a3:	00 00 00 
  80042065a6:	ff d0                	callq  *%rax
  80042065a8:	48 85 c0             	test   %rax,%rax
  80042065ab:	74 35                	je     80042065e2 <page_check+0xb1b>
  80042065ad:	48 b9 7f f5 21 04 80 	movabs $0x800421f57f,%rcx
  80042065b4:	00 00 00 
  80042065b7:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042065be:	00 00 00 
  80042065c1:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065c6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042065cd:	00 00 00 
  80042065d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065d5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042065dc:	00 00 00 
  80042065df:	41 ff d0             	callq  *%r8
  80042065e2:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042065e9:	00 00 00 
  80042065ec:	48 8b 00             	mov    (%rax),%rax
  80042065ef:	48 8b 00             	mov    (%rax),%rax
  80042065f2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042065f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042065fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206600:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206604:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206607:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420660a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004206611:	00 00 00 
  8004206614:	48 8b 00             	mov    (%rax),%rax
  8004206617:	48 39 c2             	cmp    %rax,%rdx
  800420661a:	72 32                	jb     800420664e <page_check+0xb87>
  800420661c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206620:	48 89 c1             	mov    %rax,%rcx
  8004206623:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  800420662a:	00 00 00 
  800420662d:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206632:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206639:	00 00 00 
  800420663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206641:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206648:	00 00 00 
  800420664b:	41 ff d0             	callq  *%r8
  800420664e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206655:	00 00 00 
  8004206658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420665c:	48 01 d0             	add    %rdx,%rax
  800420665f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004206663:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206667:	48 8b 00             	mov    (%rax),%rax
  800420666a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206674:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420667c:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420667f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004206682:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004206689:	00 00 00 
  800420668c:	48 8b 00             	mov    (%rax),%rax
  800420668f:	48 39 c2             	cmp    %rax,%rdx
  8004206692:	72 32                	jb     80042066c6 <page_check+0xbff>
  8004206694:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206698:	48 89 c1             	mov    %rax,%rcx
  800420669b:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042066a2:	00 00 00 
  80042066a5:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066aa:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042066b1:	00 00 00 
  80042066b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042066c0:	00 00 00 
  80042066c3:	41 ff d0             	callq  *%r8
  80042066c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066cd:	00 00 00 
  80042066d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066d4:	48 01 d0             	add    %rdx,%rax
  80042066d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066df:	48 8b 00             	mov    (%rax),%rax
  80042066e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042066f6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042066fa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206700:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206706:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420670d:	00 00 00 
  8004206710:	48 8b 00             	mov    (%rax),%rax
  8004206713:	48 39 c2             	cmp    %rax,%rdx
  8004206716:	72 35                	jb     800420674d <page_check+0xc86>
  8004206718:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420671f:	48 89 c1             	mov    %rax,%rcx
  8004206722:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004206729:	00 00 00 
  800420672c:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206731:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206738:	00 00 00 
  800420673b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206740:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206747:	00 00 00 
  800420674a:	41 ff d0             	callq  *%r8
  800420674d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206754:	00 00 00 
  8004206757:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420675e:	48 01 d0             	add    %rdx,%rax
  8004206761:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206768:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420676f:	00 00 00 
  8004206772:	48 8b 00             	mov    (%rax),%rax
  8004206775:	ba 00 00 00 00       	mov    $0x0,%edx
  800420677a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420677f:	48 89 c7             	mov    %rax,%rdi
  8004206782:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206789:	00 00 00 
  800420678c:	ff d0                	callq  *%rax
  800420678e:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  8004206795:	48 83 c2 08          	add    $0x8,%rdx
  8004206799:	48 39 d0             	cmp    %rdx,%rax
  800420679c:	74 35                	je     80042067d3 <page_check+0xd0c>
  800420679e:	48 b9 78 fa 21 04 80 	movabs $0x800421fa78,%rcx
  80042067a5:	00 00 00 
  80042067a8:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042067af:	00 00 00 
  80042067b2:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067b7:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042067be:	00 00 00 
  80042067c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042067cd:	00 00 00 
  80042067d0:	41 ff d0             	callq  *%r8
  80042067d3:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042067da:	00 00 00 
  80042067dd:	48 8b 00             	mov    (%rax),%rax
  80042067e0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067e4:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067e9:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067ee:	48 89 c7             	mov    %rax,%rdi
  80042067f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042067f8:	00 00 00 
  80042067fb:	ff d0                	callq  *%rax
  80042067fd:	85 c0                	test   %eax,%eax
  80042067ff:	74 35                	je     8004206836 <page_check+0xd6f>
  8004206801:	48 b9 b8 fa 21 04 80 	movabs $0x800421fab8,%rcx
  8004206808:	00 00 00 
  800420680b:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206812:	00 00 00 
  8004206815:	be 42 05 00 00       	mov    $0x542,%esi
  800420681a:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206821:	00 00 00 
  8004206824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206829:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206830:	00 00 00 
  8004206833:	41 ff d0             	callq  *%r8
  8004206836:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420683d:	00 00 00 
  8004206840:	48 8b 00             	mov    (%rax),%rax
  8004206843:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206848:	48 89 c7             	mov    %rax,%rdi
  800420684b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206852:	00 00 00 
  8004206855:	ff d0                	callq  *%rax
  8004206857:	48 89 c3             	mov    %rax,%rbx
  800420685a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420685e:	48 89 c7             	mov    %rax,%rdi
  8004206861:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206868:	00 00 00 
  800420686b:	ff d0                	callq  *%rax
  800420686d:	48 39 c3             	cmp    %rax,%rbx
  8004206870:	74 35                	je     80042068a7 <page_check+0xde0>
  8004206872:	48 b9 30 fa 21 04 80 	movabs $0x800421fa30,%rcx
  8004206879:	00 00 00 
  800420687c:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206883:	00 00 00 
  8004206886:	be 43 05 00 00       	mov    $0x543,%esi
  800420688b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206892:	00 00 00 
  8004206895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420689a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068a1:	00 00 00 
  80042068a4:	41 ff d0             	callq  *%r8
  80042068a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068af:	66 83 f8 02          	cmp    $0x2,%ax
  80042068b3:	74 35                	je     80042068ea <page_check+0xe23>
  80042068b5:	48 b9 60 fa 21 04 80 	movabs $0x800421fa60,%rcx
  80042068bc:	00 00 00 
  80042068bf:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042068c6:	00 00 00 
  80042068c9:	be 44 05 00 00       	mov    $0x544,%esi
  80042068ce:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042068d5:	00 00 00 
  80042068d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068e4:	00 00 00 
  80042068e7:	41 ff d0             	callq  *%r8
  80042068ea:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042068f1:	00 00 00 
  80042068f4:	48 8b 00             	mov    (%rax),%rax
  80042068f7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206901:	48 89 c7             	mov    %rax,%rdi
  8004206904:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  800420690b:	00 00 00 
  800420690e:	ff d0                	callq  *%rax
  8004206910:	48 8b 00             	mov    (%rax),%rax
  8004206913:	83 e0 04             	and    $0x4,%eax
  8004206916:	48 85 c0             	test   %rax,%rax
  8004206919:	75 35                	jne    8004206950 <page_check+0xe89>
  800420691b:	48 b9 f8 fa 21 04 80 	movabs $0x800421faf8,%rcx
  8004206922:	00 00 00 
  8004206925:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420692c:	00 00 00 
  800420692f:	be 45 05 00 00       	mov    $0x545,%esi
  8004206934:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420693b:	00 00 00 
  800420693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206943:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420694a:	00 00 00 
  800420694d:	41 ff d0             	callq  *%r8
  8004206950:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206957:	00 00 00 
  800420695a:	48 8b 00             	mov    (%rax),%rax
  800420695d:	48 8b 00             	mov    (%rax),%rax
  8004206960:	83 e0 04             	and    $0x4,%eax
  8004206963:	48 85 c0             	test   %rax,%rax
  8004206966:	75 35                	jne    800420699d <page_check+0xed6>
  8004206968:	48 b9 2b fb 21 04 80 	movabs $0x800421fb2b,%rcx
  800420696f:	00 00 00 
  8004206972:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206979:	00 00 00 
  800420697c:	be 46 05 00 00       	mov    $0x546,%esi
  8004206981:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206988:	00 00 00 
  800420698b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206990:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206997:	00 00 00 
  800420699a:	41 ff d0             	callq  *%r8
  800420699d:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042069a4:	00 00 00 
  80042069a7:	48 8b 00             	mov    (%rax),%rax
  80042069aa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069b3:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069b8:	48 89 c7             	mov    %rax,%rdi
  80042069bb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042069c2:	00 00 00 
  80042069c5:	ff d0                	callq  *%rax
  80042069c7:	85 c0                	test   %eax,%eax
  80042069c9:	78 35                	js     8004206a00 <page_check+0xf39>
  80042069cb:	48 b9 48 fb 21 04 80 	movabs $0x800421fb48,%rcx
  80042069d2:	00 00 00 
  80042069d5:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042069dc:	00 00 00 
  80042069df:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069e4:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042069eb:	00 00 00 
  80042069ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042069fa:	00 00 00 
  80042069fd:	41 ff d0             	callq  *%r8
  8004206a00:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206a07:	00 00 00 
  8004206a0a:	48 8b 00             	mov    (%rax),%rax
  8004206a0d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a11:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a16:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a1b:	48 89 c7             	mov    %rax,%rdi
  8004206a1e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206a25:	00 00 00 
  8004206a28:	ff d0                	callq  *%rax
  8004206a2a:	85 c0                	test   %eax,%eax
  8004206a2c:	74 35                	je     8004206a63 <page_check+0xf9c>
  8004206a2e:	48 b9 80 fb 21 04 80 	movabs $0x800421fb80,%rcx
  8004206a35:	00 00 00 
  8004206a38:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206a3f:	00 00 00 
  8004206a42:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a47:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206a4e:	00 00 00 
  8004206a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206a5d:	00 00 00 
  8004206a60:	41 ff d0             	callq  *%r8
  8004206a63:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	48 8b 00             	mov    (%rax),%rax
  8004206a70:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a75:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a7a:	48 89 c7             	mov    %rax,%rdi
  8004206a7d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206a84:	00 00 00 
  8004206a87:	ff d0                	callq  *%rax
  8004206a89:	48 8b 00             	mov    (%rax),%rax
  8004206a8c:	83 e0 04             	and    $0x4,%eax
  8004206a8f:	48 85 c0             	test   %rax,%rax
  8004206a92:	74 35                	je     8004206ac9 <page_check+0x1002>
  8004206a94:	48 b9 b8 fb 21 04 80 	movabs $0x800421fbb8,%rcx
  8004206a9b:	00 00 00 
  8004206a9e:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206aa5:	00 00 00 
  8004206aa8:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206aad:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206ab4:	00 00 00 
  8004206ab7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206abc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ac3:	00 00 00 
  8004206ac6:	41 ff d0             	callq  *%r8
  8004206ac9:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206ad0:	00 00 00 
  8004206ad3:	48 8b 00             	mov    (%rax),%rax
  8004206ad6:	be 00 00 00 00       	mov    $0x0,%esi
  8004206adb:	48 89 c7             	mov    %rax,%rdi
  8004206ade:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ae5:	00 00 00 
  8004206ae8:	ff d0                	callq  *%rax
  8004206aea:	48 89 c3             	mov    %rax,%rbx
  8004206aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206af1:	48 89 c7             	mov    %rax,%rdi
  8004206af4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206afb:	00 00 00 
  8004206afe:	ff d0                	callq  *%rax
  8004206b00:	48 39 c3             	cmp    %rax,%rbx
  8004206b03:	74 35                	je     8004206b3a <page_check+0x1073>
  8004206b05:	48 b9 f0 fb 21 04 80 	movabs $0x800421fbf0,%rcx
  8004206b0c:	00 00 00 
  8004206b0f:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206b16:	00 00 00 
  8004206b19:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b1e:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206b25:	00 00 00 
  8004206b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206b34:	00 00 00 
  8004206b37:	41 ff d0             	callq  *%r8
  8004206b3a:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206b41:	00 00 00 
  8004206b44:	48 8b 00             	mov    (%rax),%rax
  8004206b47:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b4c:	48 89 c7             	mov    %rax,%rdi
  8004206b4f:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206b56:	00 00 00 
  8004206b59:	ff d0                	callq  *%rax
  8004206b5b:	48 89 c3             	mov    %rax,%rbx
  8004206b5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b62:	48 89 c7             	mov    %rax,%rdi
  8004206b65:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206b6c:	00 00 00 
  8004206b6f:	ff d0                	callq  *%rax
  8004206b71:	48 39 c3             	cmp    %rax,%rbx
  8004206b74:	74 35                	je     8004206bab <page_check+0x10e4>
  8004206b76:	48 b9 20 fc 21 04 80 	movabs $0x800421fc20,%rcx
  8004206b7d:	00 00 00 
  8004206b80:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206b87:	00 00 00 
  8004206b8a:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b8f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206b96:	00 00 00 
  8004206b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ba5:	00 00 00 
  8004206ba8:	41 ff d0             	callq  *%r8
  8004206bab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206baf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bb3:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bb7:	74 35                	je     8004206bee <page_check+0x1127>
  8004206bb9:	48 b9 50 fc 21 04 80 	movabs $0x800421fc50,%rcx
  8004206bc0:	00 00 00 
  8004206bc3:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206bca:	00 00 00 
  8004206bcd:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bd2:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206bd9:	00 00 00 
  8004206bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206be8:	00 00 00 
  8004206beb:	41 ff d0             	callq  *%r8
  8004206bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bf2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bf6:	66 83 f8 01          	cmp    $0x1,%ax
  8004206bfa:	74 35                	je     8004206c31 <page_check+0x116a>
  8004206bfc:	48 b9 61 fc 21 04 80 	movabs $0x800421fc61,%rcx
  8004206c03:	00 00 00 
  8004206c06:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206c0d:	00 00 00 
  8004206c10:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c15:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206c1c:	00 00 00 
  8004206c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206c2b:	00 00 00 
  8004206c2e:	41 ff d0             	callq  *%r8
  8004206c31:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206c38:	00 00 00 
  8004206c3b:	48 8b 00             	mov    (%rax),%rax
  8004206c3e:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c43:	48 89 c7             	mov    %rax,%rdi
  8004206c46:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206c4d:	00 00 00 
  8004206c50:	ff d0                	callq  *%rax
  8004206c52:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206c59:	00 00 00 
  8004206c5c:	48 8b 00             	mov    (%rax),%rax
  8004206c5f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c64:	48 89 c7             	mov    %rax,%rdi
  8004206c67:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206c6e:	00 00 00 
  8004206c71:	ff d0                	callq  *%rax
  8004206c73:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c77:	74 35                	je     8004206cae <page_check+0x11e7>
  8004206c79:	48 b9 78 fc 21 04 80 	movabs $0x800421fc78,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c92:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x1258>
  8004206cea:	48 b9 20 fc 21 04 80 	movabs $0x800421fc20,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d03:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x129b>
  8004206d2d:	48 b9 c5 f9 21 04 80 	movabs $0x800421f9c5,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d46:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x12de>
  8004206d70:	48 b9 61 fc 21 04 80 	movabs $0x800421fc61,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d89:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206db6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dc0:	48 89 c7             	mov    %rax,%rdi
  8004206dc3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206dca:	00 00 00 
  8004206dcd:	ff d0                	callq  *%rax
  8004206dcf:	85 c0                	test   %eax,%eax
  8004206dd1:	74 35                	je     8004206e08 <page_check+0x1341>
  8004206dd3:	48 b9 80 fb 21 04 80 	movabs $0x800421fb80,%rcx
  8004206dda:	00 00 00 
  8004206ddd:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206de4:	00 00 00 
  8004206de7:	be 61 05 00 00       	mov    $0x561,%esi
  8004206dec:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206df3:	00 00 00 
  8004206df6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206dfb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e02:	00 00 00 
  8004206e05:	41 ff d0             	callq  *%r8
  8004206e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e0c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e10:	66 85 c0             	test   %ax,%ax
  8004206e13:	75 35                	jne    8004206e4a <page_check+0x1383>
  8004206e15:	48 b9 9b fc 21 04 80 	movabs $0x800421fc9b,%rcx
  8004206e1c:	00 00 00 
  8004206e1f:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206e26:	00 00 00 
  8004206e29:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e2e:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206e35:	00 00 00 
  8004206e38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e44:	00 00 00 
  8004206e47:	41 ff d0             	callq  *%r8
  8004206e4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4e:	48 8b 00             	mov    (%rax),%rax
  8004206e51:	48 85 c0             	test   %rax,%rax
  8004206e54:	74 35                	je     8004206e8b <page_check+0x13c4>
  8004206e56:	48 b9 a7 fc 21 04 80 	movabs $0x800421fca7,%rcx
  8004206e5d:	00 00 00 
  8004206e60:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206e67:	00 00 00 
  8004206e6a:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e6f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206e76:	00 00 00 
  8004206e79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e7e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e85:	00 00 00 
  8004206e88:	41 ff d0             	callq  *%r8
  8004206e8b:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206e92:	00 00 00 
  8004206e95:	48 8b 00             	mov    (%rax),%rax
  8004206e98:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e9d:	48 89 c7             	mov    %rax,%rdi
  8004206ea0:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206ea7:	00 00 00 
  8004206eaa:	ff d0                	callq  *%rax
  8004206eac:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	48 8b 00             	mov    (%rax),%rax
  8004206eb9:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ebe:	48 89 c7             	mov    %rax,%rdi
  8004206ec1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ec8:	00 00 00 
  8004206ecb:	ff d0                	callq  *%rax
  8004206ecd:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206ed1:	74 35                	je     8004206f08 <page_check+0x1441>
  8004206ed3:	48 b9 78 fc 21 04 80 	movabs $0x800421fc78,%rcx
  8004206eda:	00 00 00 
  8004206edd:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206ee4:	00 00 00 
  8004206ee7:	be 67 05 00 00       	mov    $0x567,%esi
  8004206eec:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206ef3:	00 00 00 
  8004206ef6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206efb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f02:	00 00 00 
  8004206f05:	41 ff d0             	callq  *%r8
  8004206f08:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206f0f:	00 00 00 
  8004206f12:	48 8b 00             	mov    (%rax),%rax
  8004206f15:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f1a:	48 89 c7             	mov    %rax,%rdi
  8004206f1d:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206f24:	00 00 00 
  8004206f27:	ff d0                	callq  *%rax
  8004206f29:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f2d:	74 35                	je     8004206f64 <page_check+0x149d>
  8004206f2f:	48 b9 c0 fc 21 04 80 	movabs $0x800421fcc0,%rcx
  8004206f36:	00 00 00 
  8004206f39:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206f40:	00 00 00 
  8004206f43:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f48:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206f4f:	00 00 00 
  8004206f52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f5e:	00 00 00 
  8004206f61:	41 ff d0             	callq  *%r8
  8004206f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f6c:	66 85 c0             	test   %ax,%ax
  8004206f6f:	74 35                	je     8004206fa6 <page_check+0x14df>
  8004206f71:	48 b9 e6 fc 21 04 80 	movabs $0x800421fce6,%rcx
  8004206f78:	00 00 00 
  8004206f7b:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206f82:	00 00 00 
  8004206f85:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f8a:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206f91:	00 00 00 
  8004206f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f99:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fa0:	00 00 00 
  8004206fa3:	41 ff d0             	callq  *%r8
  8004206fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206faa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fae:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fb2:	74 35                	je     8004206fe9 <page_check+0x1522>
  8004206fb4:	48 b9 61 fc 21 04 80 	movabs $0x800421fc61,%rcx
  8004206fbb:	00 00 00 
  8004206fbe:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004206fc5:	00 00 00 
  8004206fc8:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fcd:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004206fd4:	00 00 00 
  8004206fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fe3:	00 00 00 
  8004206fe6:	41 ff d0             	callq  *%r8
  8004206fe9:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206ff0:	00 00 00 
  8004206ff3:	48 8b 00             	mov    (%rax),%rax
  8004206ff6:	48 8b 00             	mov    (%rax),%rax
  8004206ff9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206fff:	48 89 c7             	mov    %rax,%rdi
  8004207002:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004207009:	00 00 00 
  800420700c:	ff d0                	callq  *%rax
  800420700e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207015:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420701c:	00 00 00 
  800420701f:	48 8b 00             	mov    (%rax),%rax
  8004207022:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207029:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420702d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207031:	66 83 f8 01          	cmp    $0x1,%ax
  8004207035:	74 35                	je     800420706c <page_check+0x15a5>
  8004207037:	48 b9 61 fc 21 04 80 	movabs $0x800421fc61,%rcx
  800420703e:	00 00 00 
  8004207041:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207048:	00 00 00 
  800420704b:	be 80 05 00 00       	mov    $0x580,%esi
  8004207050:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207057:	00 00 00 
  800420705a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420705f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207066:	00 00 00 
  8004207069:	41 ff d0             	callq  *%r8
  800420706c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207073:	48 89 c7             	mov    %rax,%rdi
  8004207076:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420707d:	00 00 00 
  8004207080:	ff d0                	callq  *%rax
  8004207082:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207089:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420708d:	74 13                	je     80042070a2 <page_check+0x15db>
  800420708f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207093:	48 89 c7             	mov    %rax,%rdi
  8004207096:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420709d:	00 00 00 
  80042070a0:	ff d0                	callq  *%rax
  80042070a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070a9:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070ad:	74 13                	je     80042070c2 <page_check+0x15fb>
  80042070af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070b3:	48 89 c7             	mov    %rax,%rdi
  80042070b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070bd:	00 00 00 
  80042070c0:	ff d0                	callq  *%rax
  80042070c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070c9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070cd:	74 13                	je     80042070e2 <page_check+0x161b>
  80042070cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070d3:	48 89 c7             	mov    %rax,%rdi
  80042070d6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070dd:	00 00 00 
  80042070e0:	ff d0                	callq  *%rax
  80042070e2:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070e9:	00 40 06 00 
  80042070ed:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042070f4:	00 00 00 
  80042070f7:	48 8b 00             	mov    (%rax),%rax
  80042070fa:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207101:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207106:	48 89 ce             	mov    %rcx,%rsi
  8004207109:	48 89 c7             	mov    %rax,%rdi
  800420710c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207113:	00 00 00 
  8004207116:	ff d0                	callq  *%rax
  8004207118:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420711f:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207126:	00 00 00 
  8004207129:	48 8b 00             	mov    (%rax),%rax
  800420712c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207133:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207137:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  800420713d:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207141:	48 01 d0             	add    %rdx,%rax
  8004207144:	48 8b 00             	mov    (%rax),%rax
  8004207147:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420714d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207154:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420715b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420715f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207165:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  800420716b:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207172:	00 00 00 
  8004207175:	48 8b 00             	mov    (%rax),%rax
  8004207178:	48 39 c2             	cmp    %rax,%rdx
  800420717b:	72 35                	jb     80042071b2 <page_check+0x16eb>
  800420717d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207184:	48 89 c1             	mov    %rax,%rcx
  8004207187:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  800420718e:	00 00 00 
  8004207191:	be 88 05 00 00       	mov    $0x588,%esi
  8004207196:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420719d:	00 00 00 
  80042071a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042071ac:	00 00 00 
  80042071af:	41 ff d0             	callq  *%r8
  80042071b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071b9:	00 00 00 
  80042071bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071c3:	48 01 d0             	add    %rdx,%rax
  80042071c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071ca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071d1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071d5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071e1:	00 
  80042071e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071e6:	48 01 d0             	add    %rdx,%rax
  80042071e9:	48 8b 00             	mov    (%rax),%rax
  80042071ec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042071f9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207200:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207204:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420720a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207210:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207217:	00 00 00 
  800420721a:	48 8b 00             	mov    (%rax),%rax
  800420721d:	48 39 c2             	cmp    %rax,%rdx
  8004207220:	72 35                	jb     8004207257 <page_check+0x1790>
  8004207222:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207229:	48 89 c1             	mov    %rax,%rcx
  800420722c:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004207233:	00 00 00 
  8004207236:	be 89 05 00 00       	mov    $0x589,%esi
  800420723b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207242:	00 00 00 
  8004207245:	b8 00 00 00 00       	mov    $0x0,%eax
  800420724a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207251:	00 00 00 
  8004207254:	41 ff d0             	callq  *%r8
  8004207257:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420725e:	00 00 00 
  8004207261:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207268:	48 01 d0             	add    %rdx,%rax
  800420726b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420726f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207276:	48 c1 e8 15          	shr    $0x15,%rax
  800420727a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 8b 00             	mov    (%rax),%rax
  8004207291:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207297:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420729e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072a5:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072af:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072b5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042072bc:	00 00 00 
  80042072bf:	48 8b 00             	mov    (%rax),%rax
  80042072c2:	48 39 c2             	cmp    %rax,%rdx
  80042072c5:	72 35                	jb     80042072fc <page_check+0x1835>
  80042072c7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072ce:	48 89 c1             	mov    %rax,%rcx
  80042072d1:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042072d8:	00 00 00 
  80042072db:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072e0:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042072e7:	00 00 00 
  80042072ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042072f6:	00 00 00 
  80042072f9:	41 ff d0             	callq  *%r8
  80042072fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207303:	00 00 00 
  8004207306:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420730d:	48 01 d0             	add    %rdx,%rax
  8004207310:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207317:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420731e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207322:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207327:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420732e:	00 
  800420732f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207336:	48 01 c2             	add    %rax,%rdx
  8004207339:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207340:	48 39 c2             	cmp    %rax,%rdx
  8004207343:	74 35                	je     800420737a <page_check+0x18b3>
  8004207345:	48 b9 f7 fc 21 04 80 	movabs $0x800421fcf7,%rcx
  800420734c:	00 00 00 
  800420734f:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207356:	00 00 00 
  8004207359:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420735e:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207365:	00 00 00 
  8004207368:	b8 00 00 00 00       	mov    $0x0,%eax
  800420736d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207374:	00 00 00 
  8004207377:	41 ff d0             	callq  *%r8
  800420737a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420737e:	48 89 c7             	mov    %rax,%rdi
  8004207381:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004207388:	00 00 00 
  800420738b:	ff d0                	callq  *%rax
  800420738d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207392:	be ff 00 00 00       	mov    $0xff,%esi
  8004207397:	48 89 c7             	mov    %rax,%rdi
  800420739a:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  80042073a1:	00 00 00 
  80042073a4:	ff d0                	callq  *%rax
  80042073a6:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042073ad:	00 00 00 
  80042073b0:	48 8b 00             	mov    (%rax),%rax
  80042073b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042073bd:	48 89 c7             	mov    %rax,%rdi
  80042073c0:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042073c7:	00 00 00 
  80042073ca:	ff d0                	callq  *%rax
  80042073cc:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042073d3:	00 00 00 
  80042073d6:	48 8b 00             	mov    (%rax),%rax
  80042073d9:	48 8b 00             	mov    (%rax),%rax
  80042073dc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073e9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073f4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  80042073fa:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207400:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207407:	00 00 00 
  800420740a:	48 8b 00             	mov    (%rax),%rax
  800420740d:	48 39 c2             	cmp    %rax,%rdx
  8004207410:	72 35                	jb     8004207447 <page_check+0x1980>
  8004207412:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207419:	48 89 c1             	mov    %rax,%rcx
  800420741c:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004207423:	00 00 00 
  8004207426:	be 90 05 00 00       	mov    $0x590,%esi
  800420742b:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207432:	00 00 00 
  8004207435:	b8 00 00 00 00       	mov    $0x0,%eax
  800420743a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207441:	00 00 00 
  8004207444:	41 ff d0             	callq  *%r8
  8004207447:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420744e:	00 00 00 
  8004207451:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207458:	48 01 d0             	add    %rdx,%rax
  800420745b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420745f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004207463:	48 8b 00             	mov    (%rax),%rax
  8004207466:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420746c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004207473:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420747a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420747e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207484:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800420748a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207491:	00 00 00 
  8004207494:	48 8b 00             	mov    (%rax),%rax
  8004207497:	48 39 c2             	cmp    %rax,%rdx
  800420749a:	72 35                	jb     80042074d1 <page_check+0x1a0a>
  800420749c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074a3:	48 89 c1             	mov    %rax,%rcx
  80042074a6:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  80042074ad:	00 00 00 
  80042074b0:	be 91 05 00 00       	mov    $0x591,%esi
  80042074b5:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042074bc:	00 00 00 
  80042074bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042074cb:	00 00 00 
  80042074ce:	41 ff d0             	callq  *%r8
  80042074d1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074d8:	00 00 00 
  80042074db:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074e2:	48 01 d0             	add    %rdx,%rax
  80042074e5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074ed:	48 8b 00             	mov    (%rax),%rax
  80042074f0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042074f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042074fd:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207504:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207508:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420750e:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207514:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420751b:	00 00 00 
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 39 c2             	cmp    %rax,%rdx
  8004207524:	72 35                	jb     800420755b <page_check+0x1a94>
  8004207526:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420752d:	48 89 c1             	mov    %rax,%rcx
  8004207530:	48 ba 58 f0 21 04 80 	movabs $0x800421f058,%rdx
  8004207537:	00 00 00 
  800420753a:	be 92 05 00 00       	mov    $0x592,%esi
  800420753f:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207546:	00 00 00 
  8004207549:	b8 00 00 00 00       	mov    $0x0,%eax
  800420754e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207555:	00 00 00 
  8004207558:	41 ff d0             	callq  *%r8
  800420755b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207562:	00 00 00 
  8004207565:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420756c:	48 01 d0             	add    %rdx,%rax
  800420756f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420757d:	eb 58                	jmp    80042075d7 <page_check+0x1b10>
  800420757f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207586:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207589:	48 63 d2             	movslq %edx,%rdx
  800420758c:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207590:	48 01 d0             	add    %rdx,%rax
  8004207593:	48 8b 00             	mov    (%rax),%rax
  8004207596:	83 e0 01             	and    $0x1,%eax
  8004207599:	48 85 c0             	test   %rax,%rax
  800420759c:	74 35                	je     80042075d3 <page_check+0x1b0c>
  800420759e:	48 b9 0f fd 21 04 80 	movabs $0x800421fd0f,%rcx
  80042075a5:	00 00 00 
  80042075a8:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042075af:	00 00 00 
  80042075b2:	be 94 05 00 00       	mov    $0x594,%esi
  80042075b7:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042075be:	00 00 00 
  80042075c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042075cd:	00 00 00 
  80042075d0:	41 ff d0             	callq  *%r8
  80042075d3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075d7:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075de:	7e 9f                	jle    800420757f <page_check+0x1ab8>
  80042075e0:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042075e7:	00 00 00 
  80042075ea:	48 8b 00             	mov    (%rax),%rax
  80042075ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042075f4:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  80042075fb:	00 00 00 
  80042075fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207602:	48 89 10             	mov    %rdx,(%rax)
  8004207605:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207609:	48 89 c7             	mov    %rax,%rdi
  800420760c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207613:	00 00 00 
  8004207616:	ff d0                	callq  *%rax
  8004207618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420761c:	48 89 c7             	mov    %rax,%rdi
  800420761f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207626:	00 00 00 
  8004207629:	ff d0                	callq  *%rax
  800420762b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420762f:	48 89 c7             	mov    %rax,%rdi
  8004207632:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207639:	00 00 00 
  800420763c:	ff d0                	callq  *%rax
  800420763e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207642:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207646:	66 85 c0             	test   %ax,%ax
  8004207649:	74 35                	je     8004207680 <page_check+0x1bb9>
  800420764b:	48 b9 26 fd 21 04 80 	movabs $0x800421fd26,%rcx
  8004207652:	00 00 00 
  8004207655:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420765c:	00 00 00 
  800420765f:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207664:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420766b:	00 00 00 
  800420766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207673:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420767a:	00 00 00 
  800420767d:	41 ff d0             	callq  *%r8
  8004207680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207684:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207688:	66 85 c0             	test   %ax,%ax
  800420768b:	74 35                	je     80042076c2 <page_check+0x1bfb>
  800420768d:	48 b9 e6 fc 21 04 80 	movabs $0x800421fce6,%rcx
  8004207694:	00 00 00 
  8004207697:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420769e:	00 00 00 
  80042076a1:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076a6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042076ad:	00 00 00 
  80042076b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076bc:	00 00 00 
  80042076bf:	41 ff d0             	callq  *%r8
  80042076c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076c6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076ca:	66 85 c0             	test   %ax,%ax
  80042076cd:	74 35                	je     8004207704 <page_check+0x1c3d>
  80042076cf:	48 b9 37 fd 21 04 80 	movabs $0x800421fd37,%rcx
  80042076d6:	00 00 00 
  80042076d9:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042076e0:	00 00 00 
  80042076e3:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076e8:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042076ef:	00 00 00 
  80042076f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076f7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076fe:	00 00 00 
  8004207701:	41 ff d0             	callq  *%r8
  8004207704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207708:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420770c:	66 85 c0             	test   %ax,%ax
  800420770f:	74 35                	je     8004207746 <page_check+0x1c7f>
  8004207711:	48 b9 48 fd 21 04 80 	movabs $0x800421fd48,%rcx
  8004207718:	00 00 00 
  800420771b:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207722:	00 00 00 
  8004207725:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420772a:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207731:	00 00 00 
  8004207734:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207739:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207740:	00 00 00 
  8004207743:	41 ff d0             	callq  *%r8
  8004207746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420774a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420774e:	66 85 c0             	test   %ax,%ax
  8004207751:	74 35                	je     8004207788 <page_check+0x1cc1>
  8004207753:	48 b9 59 fd 21 04 80 	movabs $0x800421fd59,%rcx
  800420775a:	00 00 00 
  800420775d:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207764:	00 00 00 
  8004207767:	be a4 05 00 00       	mov    $0x5a4,%esi
  800420776c:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207773:	00 00 00 
  8004207776:	b8 00 00 00 00       	mov    $0x0,%eax
  800420777b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207782:	00 00 00 
  8004207785:	41 ff d0             	callq  *%r8
  8004207788:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420778c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207790:	66 85 c0             	test   %ax,%ax
  8004207793:	74 35                	je     80042077ca <page_check+0x1d03>
  8004207795:	48 b9 6a fd 21 04 80 	movabs $0x800421fd6a,%rcx
  800420779c:	00 00 00 
  800420779f:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042077a6:	00 00 00 
  80042077a9:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ae:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042077b5:	00 00 00 
  80042077b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042077c4:	00 00 00 
  80042077c7:	41 ff d0             	callq  *%r8
  80042077ca:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077cf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077d4:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077db:	00 00 00 
  80042077de:	ff d0                	callq  *%rax
  80042077e0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077e7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077ec:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077f1:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077f8:	00 00 00 
  80042077fb:	ff d0                	callq  *%rax
  80042077fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207804:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420780b:	00 00 00 
  800420780e:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207815:	76 1d                	jbe    8004207834 <page_check+0x1d6d>
  8004207817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420781e:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207825:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420782c:	00 00 00 
  800420782f:	48 39 c2             	cmp    %rax,%rdx
  8004207832:	76 35                	jbe    8004207869 <page_check+0x1da2>
  8004207834:	48 b9 80 fd 21 04 80 	movabs $0x800421fd80,%rcx
  800420783b:	00 00 00 
  800420783e:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207845:	00 00 00 
  8004207848:	be ac 05 00 00       	mov    $0x5ac,%esi
  800420784d:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207854:	00 00 00 
  8004207857:	b8 00 00 00 00       	mov    $0x0,%eax
  800420785c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207863:	00 00 00 
  8004207866:	41 ff d0             	callq  *%r8
  8004207869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207870:	00 00 00 
  8004207873:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  800420787a:	76 1d                	jbe    8004207899 <page_check+0x1dd2>
  800420787c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207883:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420788a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207891:	00 00 00 
  8004207894:	48 39 c2             	cmp    %rax,%rdx
  8004207897:	76 35                	jbe    80042078ce <page_check+0x1e07>
  8004207899:	48 b9 a8 fd 21 04 80 	movabs $0x800421fda8,%rcx
  80042078a0:	00 00 00 
  80042078a3:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042078aa:	00 00 00 
  80042078ad:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078b2:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042078b9:	00 00 00 
  80042078bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042078c8:	00 00 00 
  80042078cb:	41 ff d0             	callq  *%r8
  80042078ce:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078d5:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078da:	48 85 c0             	test   %rax,%rax
  80042078dd:	75 11                	jne    80042078f0 <page_check+0x1e29>
  80042078df:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078e6:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078eb:	48 85 c0             	test   %rax,%rax
  80042078ee:	74 35                	je     8004207925 <page_check+0x1e5e>
  80042078f0:	48 b9 d0 fd 21 04 80 	movabs $0x800421fdd0,%rcx
  80042078f7:	00 00 00 
  80042078fa:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207901:	00 00 00 
  8004207904:	be af 05 00 00       	mov    $0x5af,%esi
  8004207909:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207910:	00 00 00 
  8004207913:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207918:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420791f:	00 00 00 
  8004207922:	41 ff d0             	callq  *%r8
  8004207925:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420792c:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207932:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207939:	76 35                	jbe    8004207970 <page_check+0x1ea9>
  800420793b:	48 b9 f7 fd 21 04 80 	movabs $0x800421fdf7,%rcx
  8004207942:	00 00 00 
  8004207945:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  800420794c:	00 00 00 
  800420794f:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207954:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  800420795b:	00 00 00 
  800420795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207963:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420796a:	00 00 00 
  800420796d:	41 ff d0             	callq  *%r8
  8004207970:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207977:	00 00 00 
  800420797a:	48 8b 00             	mov    (%rax),%rax
  800420797d:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207984:	48 89 d6             	mov    %rdx,%rsi
  8004207987:	48 89 c7             	mov    %rax,%rdi
  800420798a:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207991:	00 00 00 
  8004207994:	ff d0                	callq  *%rax
  8004207996:	48 85 c0             	test   %rax,%rax
  8004207999:	74 35                	je     80042079d0 <page_check+0x1f09>
  800420799b:	48 b9 10 fe 21 04 80 	movabs $0x800421fe10,%rcx
  80042079a2:	00 00 00 
  80042079a5:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  80042079ac:	00 00 00 
  80042079af:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079b4:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  80042079bb:	00 00 00 
  80042079be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079c3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042079ca:	00 00 00 
  80042079cd:	41 ff d0             	callq  *%r8
  80042079d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079d7:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079de:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042079e5:	00 00 00 
  80042079e8:	48 8b 00             	mov    (%rax),%rax
  80042079eb:	48 89 d6             	mov    %rdx,%rsi
  80042079ee:	48 89 c7             	mov    %rax,%rdi
  80042079f1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042079f8:	00 00 00 
  80042079fb:	ff d0                	callq  *%rax
  80042079fd:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a03:	74 35                	je     8004207a3a <page_check+0x1f73>
  8004207a05:	48 b9 38 fe 21 04 80 	movabs $0x800421fe38,%rcx
  8004207a0c:	00 00 00 
  8004207a0f:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207a16:	00 00 00 
  8004207a19:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a1e:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207a25:	00 00 00 
  8004207a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a34:	00 00 00 
  8004207a37:	41 ff d0             	callq  *%r8
  8004207a3a:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207a41:	00 00 00 
  8004207a44:	48 8b 00             	mov    (%rax),%rax
  8004207a47:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a4e:	48 89 d6             	mov    %rdx,%rsi
  8004207a51:	48 89 c7             	mov    %rax,%rdi
  8004207a54:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207a5b:	00 00 00 
  8004207a5e:	ff d0                	callq  *%rax
  8004207a60:	48 85 c0             	test   %rax,%rax
  8004207a63:	74 35                	je     8004207a9a <page_check+0x1fd3>
  8004207a65:	48 b9 68 fe 21 04 80 	movabs $0x800421fe68,%rcx
  8004207a6c:	00 00 00 
  8004207a6f:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207a76:	00 00 00 
  8004207a79:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a7e:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207a85:	00 00 00 
  8004207a88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a94:	00 00 00 
  8004207a97:	41 ff d0             	callq  *%r8
  8004207a9a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aa1:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207aa8:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207aaf:	00 00 00 
  8004207ab2:	48 8b 00             	mov    (%rax),%rax
  8004207ab5:	48 89 d6             	mov    %rdx,%rsi
  8004207ab8:	48 89 c7             	mov    %rax,%rdi
  8004207abb:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207ac2:	00 00 00 
  8004207ac5:	ff d0                	callq  *%rax
  8004207ac7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207acb:	74 35                	je     8004207b02 <page_check+0x203b>
  8004207acd:	48 b9 90 fe 21 04 80 	movabs $0x800421fe90,%rcx
  8004207ad4:	00 00 00 
  8004207ad7:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207ade:	00 00 00 
  8004207ae1:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207ae6:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207aed:	00 00 00 
  8004207af0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207af5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207afc:	00 00 00 
  8004207aff:	41 ff d0             	callq  *%r8
  8004207b02:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b09:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207b10:	00 00 00 
  8004207b13:	48 8b 00             	mov    (%rax),%rax
  8004207b16:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b1b:	48 89 ce             	mov    %rcx,%rsi
  8004207b1e:	48 89 c7             	mov    %rax,%rdi
  8004207b21:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b28:	00 00 00 
  8004207b2b:	ff d0                	callq  *%rax
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	83 e0 1a             	and    $0x1a,%eax
  8004207b33:	48 85 c0             	test   %rax,%rax
  8004207b36:	75 35                	jne    8004207b6d <page_check+0x20a6>
  8004207b38:	48 b9 c0 fe 21 04 80 	movabs $0x800421fec0,%rcx
  8004207b3f:	00 00 00 
  8004207b42:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207b49:	00 00 00 
  8004207b4c:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b51:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207b58:	00 00 00 
  8004207b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207b67:	00 00 00 
  8004207b6a:	41 ff d0             	callq  *%r8
  8004207b6d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b74:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207b7b:	00 00 00 
  8004207b7e:	48 8b 00             	mov    (%rax),%rax
  8004207b81:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b86:	48 89 ce             	mov    %rcx,%rsi
  8004207b89:	48 89 c7             	mov    %rax,%rdi
  8004207b8c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b93:	00 00 00 
  8004207b96:	ff d0                	callq  *%rax
  8004207b98:	48 8b 00             	mov    (%rax),%rax
  8004207b9b:	83 e0 04             	and    $0x4,%eax
  8004207b9e:	48 85 c0             	test   %rax,%rax
  8004207ba1:	74 35                	je     8004207bd8 <page_check+0x2111>
  8004207ba3:	48 b9 08 ff 21 04 80 	movabs $0x800421ff08,%rcx
  8004207baa:	00 00 00 
  8004207bad:	48 ba d1 f0 21 04 80 	movabs $0x800421f0d1,%rdx
  8004207bb4:	00 00 00 
  8004207bb7:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bbc:	48 bf e6 f0 21 04 80 	movabs $0x800421f0e6,%rdi
  8004207bc3:	00 00 00 
  8004207bc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bcb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207bd2:	00 00 00 
  8004207bd5:	41 ff d0             	callq  *%r8
  8004207bd8:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207bdf:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207be6:	00 00 00 
  8004207be9:	48 8b 00             	mov    (%rax),%rax
  8004207bec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bf1:	48 89 ce             	mov    %rcx,%rsi
  8004207bf4:	48 89 c7             	mov    %rax,%rdi
  8004207bf7:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207bfe:	00 00 00 
  8004207c01:	ff d0                	callq  *%rax
  8004207c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c0a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c11:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c17:	48 89 c1             	mov    %rax,%rcx
  8004207c1a:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207c21:	00 00 00 
  8004207c24:	48 8b 00             	mov    (%rax),%rax
  8004207c27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c2c:	48 89 ce             	mov    %rcx,%rsi
  8004207c2f:	48 89 c7             	mov    %rax,%rdi
  8004207c32:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c39:	00 00 00 
  8004207c3c:	ff d0                	callq  *%rax
  8004207c3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c45:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c4c:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207c53:	00 00 00 
  8004207c56:	48 8b 00             	mov    (%rax),%rax
  8004207c59:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c5e:	48 89 ce             	mov    %rcx,%rsi
  8004207c61:	48 89 c7             	mov    %rax,%rdi
  8004207c64:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c6b:	00 00 00 
  8004207c6e:	ff d0                	callq  *%rax
  8004207c70:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c77:	48 bf 3b ff 21 04 80 	movabs $0x800421ff3b,%rdi
  8004207c7e:	00 00 00 
  8004207c81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c86:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004207c8d:	00 00 00 
  8004207c90:	ff d2                	callq  *%rdx
  8004207c92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207c99:	5b                   	pop    %rbx
  8004207c9a:	5d                   	pop    %rbp
  8004207c9b:	c3                   	retq   

0000008004207c9c <page2ppn>:
  8004207c9c:	55                   	push   %rbp
  8004207c9d:	48 89 e5             	mov    %rsp,%rbp
  8004207ca0:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cac:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004207cb3:	00 00 00 
  8004207cb6:	48 8b 00             	mov    (%rax),%rax
  8004207cb9:	48 29 c2             	sub    %rax,%rdx
  8004207cbc:	48 89 d0             	mov    %rdx,%rax
  8004207cbf:	48 c1 f8 04          	sar    $0x4,%rax
  8004207cc3:	c9                   	leaveq 
  8004207cc4:	c3                   	retq   

0000008004207cc5 <page2pa>:
  8004207cc5:	55                   	push   %rbp
  8004207cc6:	48 89 e5             	mov    %rsp,%rbp
  8004207cc9:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cd5:	48 89 c7             	mov    %rax,%rdi
  8004207cd8:	48 b8 9c 7c 20 04 80 	movabs $0x8004207c9c,%rax
  8004207cdf:	00 00 00 
  8004207ce2:	ff d0                	callq  *%rax
  8004207ce4:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207ce8:	c9                   	leaveq 
  8004207ce9:	c3                   	retq   

0000008004207cea <pa2page>:
  8004207cea:	55                   	push   %rbp
  8004207ceb:	48 89 e5             	mov    %rsp,%rbp
  8004207cee:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207cfe:	48 89 c2             	mov    %rax,%rdx
  8004207d01:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207d08:	00 00 00 
  8004207d0b:	48 8b 00             	mov    (%rax),%rax
  8004207d0e:	48 39 c2             	cmp    %rax,%rdx
  8004207d11:	72 2a                	jb     8004207d3d <pa2page+0x53>
  8004207d13:	48 ba 58 ff 21 04 80 	movabs $0x800421ff58,%rdx
  8004207d1a:	00 00 00 
  8004207d1d:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d22:	48 bf 77 ff 21 04 80 	movabs $0x800421ff77,%rdi
  8004207d29:	00 00 00 
  8004207d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d31:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004207d38:	00 00 00 
  8004207d3b:	ff d1                	callq  *%rcx
  8004207d3d:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004207d44:	00 00 00 
  8004207d47:	48 8b 00             	mov    (%rax),%rax
  8004207d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d4e:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d52:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d56:	48 01 d0             	add    %rdx,%rax
  8004207d59:	c9                   	leaveq 
  8004207d5a:	c3                   	retq   

0000008004207d5b <page2kva>:
  8004207d5b:	55                   	push   %rbp
  8004207d5c:	48 89 e5             	mov    %rsp,%rbp
  8004207d5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d6b:	48 89 c7             	mov    %rax,%rdi
  8004207d6e:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004207d75:	00 00 00 
  8004207d78:	ff d0                	callq  *%rax
  8004207d7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d8c:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207d93:	00 00 00 
  8004207d96:	48 8b 00             	mov    (%rax),%rax
  8004207d99:	48 39 c2             	cmp    %rax,%rdx
  8004207d9c:	72 32                	jb     8004207dd0 <page2kva+0x75>
  8004207d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207da2:	48 89 c1             	mov    %rax,%rcx
  8004207da5:	48 ba 88 ff 21 04 80 	movabs $0x800421ff88,%rdx
  8004207dac:	00 00 00 
  8004207daf:	be 62 00 00 00       	mov    $0x62,%esi
  8004207db4:	48 bf 77 ff 21 04 80 	movabs $0x800421ff77,%rdi
  8004207dbb:	00 00 00 
  8004207dbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dc3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207dca:	00 00 00 
  8004207dcd:	41 ff d0             	callq  *%r8
  8004207dd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207dd7:	00 00 00 
  8004207dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dde:	48 01 d0             	add    %rdx,%rax
  8004207de1:	c9                   	leaveq 
  8004207de2:	c3                   	retq   

0000008004207de3 <unlock_kernel>:
  8004207de3:	55                   	push   %rbp
  8004207de4:	48 89 e5             	mov    %rsp,%rbp
  8004207de7:	48 bf 60 67 23 04 80 	movabs $0x8004236760,%rdi
  8004207dee:	00 00 00 
  8004207df1:	48 b8 f4 83 21 04 80 	movabs $0x80042183f4,%rax
  8004207df8:	00 00 00 
  8004207dfb:	ff d0                	callq  *%rax
  8004207dfd:	f3 90                	pause  
  8004207dff:	5d                   	pop    %rbp
  8004207e00:	c3                   	retq   

0000008004207e01 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e01:	55                   	push   %rbp
  8004207e02:	48 89 e5             	mov    %rsp,%rbp
  8004207e05:	53                   	push   %rbx
  8004207e06:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e0a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e11:	89 d0                	mov    %edx,%eax
  8004207e13:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207e16:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e1a:	75 41                	jne    8004207e5d <envid2env+0x5c>
		*env_store = curenv;
  8004207e1c:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004207e23:	00 00 00 
  8004207e26:	ff d0                	callq  *%rax
  8004207e28:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004207e2f:	00 00 00 
  8004207e32:	48 98                	cltq   
  8004207e34:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e38:	48 89 c1             	mov    %rax,%rcx
  8004207e3b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e3f:	48 01 c8             	add    %rcx,%rax
  8004207e42:	48 01 d0             	add    %rdx,%rax
  8004207e45:	48 83 c0 08          	add    $0x8,%rax
  8004207e49:	48 8b 10             	mov    (%rax),%rdx
  8004207e4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e50:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207e53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e58:	e9 fd 00 00 00       	jmpq   8004207f5a <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207e5d:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207e64:	00 00 00 
  8004207e67:	48 8b 10             	mov    (%rax),%rdx
  8004207e6a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e6d:	48 98                	cltq   
  8004207e6f:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e74:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e7b:	48 01 d0             	add    %rdx,%rax
  8004207e7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e86:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e8c:	85 c0                	test   %eax,%eax
  8004207e8e:	74 0f                	je     8004207e9f <envid2env+0x9e>
  8004207e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e94:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207e9a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207e9d:	74 15                	je     8004207eb4 <envid2env+0xb3>
		*env_store = 0;
  8004207e9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207ea3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207eaa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207eaf:	e9 a6 00 00 00       	jmpq   8004207f5a <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207eb4:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207eb8:	0f 84 8c 00 00 00    	je     8004207f4a <envid2env+0x149>
  8004207ebe:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004207ec5:	00 00 00 
  8004207ec8:	ff d0                	callq  *%rax
  8004207eca:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004207ed1:	00 00 00 
  8004207ed4:	48 98                	cltq   
  8004207ed6:	48 c1 e0 03          	shl    $0x3,%rax
  8004207eda:	48 89 c1             	mov    %rax,%rcx
  8004207edd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207ee1:	48 01 c8             	add    %rcx,%rax
  8004207ee4:	48 01 d0             	add    %rdx,%rax
  8004207ee7:	48 83 c0 08          	add    $0x8,%rax
  8004207eeb:	48 8b 00             	mov    (%rax),%rax
  8004207eee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207ef2:	74 56                	je     8004207f4a <envid2env+0x149>
  8004207ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ef8:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207efe:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004207f05:	00 00 00 
  8004207f08:	ff d0                	callq  *%rax
  8004207f0a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004207f11:	00 00 00 
  8004207f14:	48 98                	cltq   
  8004207f16:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f1a:	48 89 c1             	mov    %rax,%rcx
  8004207f1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f21:	48 01 c8             	add    %rcx,%rax
  8004207f24:	48 01 d0             	add    %rdx,%rax
  8004207f27:	48 83 c0 08          	add    $0x8,%rax
  8004207f2b:	48 8b 00             	mov    (%rax),%rax
  8004207f2e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f34:	39 c3                	cmp    %eax,%ebx
  8004207f36:	74 12                	je     8004207f4a <envid2env+0x149>
		*env_store = 0;
  8004207f38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f3c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207f43:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f48:	eb 10                	jmp    8004207f5a <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  8004207f4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f52:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  8004207f55:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f5a:	48 83 c4 28          	add    $0x28,%rsp
  8004207f5e:	5b                   	pop    %rbx
  8004207f5f:	5d                   	pop    %rbp
  8004207f60:	c3                   	retq   

0000008004207f61 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f61:	55                   	push   %rbp
  8004207f62:	48 89 e5             	mov    %rsp,%rbp
  8004207f65:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f70:	eb 6d                	jmp    8004207fdf <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f72:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207f79:	00 00 00 
  8004207f7c:	48 8b 10             	mov    (%rax),%rdx
  8004207f7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f82:	48 98                	cltq   
  8004207f84:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f8b:	48 01 d0             	add    %rdx,%rax
  8004207f8e:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207f95:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207f98:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207f9f:	00 00 00 
  8004207fa2:	48 8b 10             	mov    (%rax),%rdx
  8004207fa5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fa8:	48 98                	cltq   
  8004207faa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fb1:	48 01 c2             	add    %rax,%rdx
  8004207fb4:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207fbb:	00 00 00 
  8004207fbe:	48 8b 08             	mov    (%rax),%rcx
  8004207fc1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fc4:	48 98                	cltq   
  8004207fc6:	48 83 c0 01          	add    $0x1,%rax
  8004207fca:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fd1:	48 01 c8             	add    %rcx,%rax
  8004207fd4:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207fdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207fdf:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207fe6:	7e 8a                	jle    8004207f72 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207fe8:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207fef:	00 00 00 
  8004207ff2:	48 8b 00             	mov    (%rax),%rax
  8004207ff5:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004207ffb:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208002:	00 00 00 00 
	env_free_list = &envs[0];
  8004208006:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420800d:	00 00 00 
  8004208010:	48 8b 10             	mov    (%rax),%rdx
  8004208013:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  800420801a:	00 00 00 
  800420801d:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208020:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  8004208027:	00 00 00 
  800420802a:	ff d0                	callq  *%rax
}
  800420802c:	c9                   	leaveq 
  800420802d:	c3                   	retq   

000000800420802e <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  800420802e:	55                   	push   %rbp
  800420802f:	48 89 e5             	mov    %rsp,%rbp
  8004208032:	53                   	push   %rbx
  8004208033:	48 83 ec 10          	sub    $0x10,%rsp
  8004208037:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420803e:	00 00 00 
  8004208041:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208049:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  800420804c:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208051:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004208053:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208058:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  800420805a:	b8 10 00 00 00       	mov    $0x10,%eax
  800420805f:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  8004208061:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208066:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208068:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806d:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420806f:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208074:	89 c3                	mov    %eax,%ebx
  8004208076:	53                   	push   %rbx
  8004208077:	48 b8 84 80 20 04 80 	movabs $0x8004208084,%rax
  800420807e:	00 00 00 
  8004208081:	50                   	push   %rax
  8004208082:	48 cb                	lretq  
  8004208084:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  800420808a:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420808e:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208091:	48 83 c4 10          	add    $0x10,%rsp
  8004208095:	5b                   	pop    %rbx
  8004208096:	5d                   	pop    %rbp
  8004208097:	c3                   	retq   

0000008004208098 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004208098:	55                   	push   %rbp
  8004208099:	48 89 e5             	mov    %rsp,%rbp
  800420809c:	48 83 ec 20          	sub    $0x20,%rsp
  80042080a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042080a4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080ab:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042080ac:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080b1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042080b8:	00 00 00 
  80042080bb:	ff d0                	callq  *%rax
  80042080bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080c6:	75 0a                	jne    80042080d2 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042080c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080cd:	e9 bc 00 00 00       	jmpq   800420818e <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042080d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080d6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080da:	8d 50 01             	lea    0x1(%rax),%edx
  80042080dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e1:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042080e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e9:	48 89 c7             	mov    %rax,%rdi
  80042080ec:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042080f3:	00 00 00 
  80042080f6:	ff d0                	callq  *%rax
  80042080f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080fc:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208107:	48 89 c7             	mov    %rax,%rdi
  800420810a:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004208111:	00 00 00 
  8004208114:	ff d0                	callq  *%rax
  8004208116:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420811a:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  8004208121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208125:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420812c:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208131:	be 00 00 00 00       	mov    $0x0,%esi
  8004208136:	48 89 c7             	mov    %rax,%rdi
  8004208139:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004208140:	00 00 00 
  8004208143:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  8004208145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208149:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208150:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208154:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420815b:	00 00 00 
  800420815e:	48 8b 00             	mov    (%rax),%rax
  8004208161:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208165:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420816c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208173:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208177:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420817b:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208182:	48 83 c8 05          	or     $0x5,%rax
  8004208186:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208189:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420818e:	c9                   	leaveq 
  800420818f:	c3                   	retq   

0000008004208190 <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208190:	55                   	push   %rbp
  8004208191:	48 89 e5             	mov    %rsp,%rbp
  8004208194:	48 83 ec 50          	sub    $0x50,%rsp
  8004208198:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420819c:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  800420819f:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042081a6:	00 00 00 
  80042081a9:	48 8b 00             	mov    (%rax),%rax
  80042081ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081b0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081b5:	75 0a                	jne    80042081c1 <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042081b7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081bc:	e9 47 04 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  80042081c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081c5:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081cb:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081d0:	be 00 00 00 00       	mov    $0x0,%esi
  80042081d5:	48 89 c7             	mov    %rax,%rdi
  80042081d8:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  80042081df:	00 00 00 
  80042081e2:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  80042081e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081eb:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081ec:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042081f8:	00 00 00 
  80042081fb:	ff d0                	callq  *%rax
  80042081fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208201:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208206:	75 0a                	jne    8004208212 <env_guest_alloc+0x82>
		return -E_NO_MEM;
  8004208208:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420820d:	e9 f6 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  8004208212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208216:	ba 10 00 00 00       	mov    $0x10,%edx
  800420821b:	be 00 00 00 00       	mov    $0x0,%esi
  8004208220:	48 89 c7             	mov    %rax,%rdi
  8004208223:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800420822a:	00 00 00 
  800420822d:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  800420822f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208233:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208237:	8d 50 01             	lea    0x1(%rax),%edx
  800420823a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823e:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  8004208242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208246:	48 89 c7             	mov    %rax,%rdi
  8004208249:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208250:	00 00 00 
  8004208253:	ff d0                	callq  *%rax
  8004208255:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208259:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208260:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208264:	48 89 c7             	mov    %rax,%rdi
  8004208267:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  800420826e:	00 00 00 
  8004208271:	ff d0                	callq  *%rax
  8004208273:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208277:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  800420827e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208283:	48 ba 19 b5 21 04 80 	movabs $0x800421b519,%rdx
  800420828a:	00 00 00 
  800420828d:	ff d2                	callq  *%rdx
  800420828f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  8004208293:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004208298:	75 1d                	jne    80042082b7 <env_guest_alloc+0x127>
		page_decref(p);
  800420829a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420829e:	48 89 c7             	mov    %rax,%rdi
  80042082a1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082a8:	00 00 00 
  80042082ab:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082ad:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082b2:	e9 51 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  80042082b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082bb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082bf:	8d 50 01             	lea    0x1(%rax),%edx
  80042082c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c6:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  80042082ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082ce:	48 89 c7             	mov    %rax,%rdi
  80042082d1:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042082d8:	00 00 00 
  80042082db:	ff d0                	callq  *%rax
  80042082dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082e1:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  80042082e8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082ef:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082f0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042082f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042082fc:	00 00 00 
  80042082ff:	ff d0                	callq  *%rax
  8004208301:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208305:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420830a:	75 30                	jne    800420833c <env_guest_alloc+0x1ac>
		page_decref(p);
  800420830c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208310:	48 89 c7             	mov    %rax,%rdi
  8004208313:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420831a:	00 00 00 
  800420831d:	ff d0                	callq  *%rax
		page_decref(q);
  800420831f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208323:	48 89 c7             	mov    %rax,%rdi
  8004208326:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420832d:	00 00 00 
  8004208330:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  8004208332:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208337:	e9 cc 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  800420833c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208340:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208344:	8d 50 01             	lea    0x1(%rax),%edx
  8004208347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834b:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  800420834f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208353:	48 89 c7             	mov    %rax,%rdi
  8004208356:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420835d:	00 00 00 
  8004208360:	ff d0                	callq  *%rax
  8004208362:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208366:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  800420836d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208371:	48 89 c7             	mov    %rax,%rdi
  8004208374:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420837b:	00 00 00 
  800420837e:	ff d0                	callq  *%rax
  8004208380:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838b:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  8004208392:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004208399:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  800420839a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420839f:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042083a6:	00 00 00 
  80042083a9:	ff d0                	callq  *%rax
  80042083ab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083af:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083b4:	75 43                	jne    80042083f9 <env_guest_alloc+0x269>
		page_decref(p);
  80042083b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083ba:	48 89 c7             	mov    %rax,%rdi
  80042083bd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083c4:	00 00 00 
  80042083c7:	ff d0                	callq  *%rax
		page_decref(q);
  80042083c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083cd:	48 89 c7             	mov    %rax,%rdi
  80042083d0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083d7:	00 00 00 
  80042083da:	ff d0                	callq  *%rax
		page_decref(r);
  80042083dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083e0:	48 89 c7             	mov    %rax,%rdi
  80042083e3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083ea:	00 00 00 
  80042083ed:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083ef:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042083f4:	e9 0f 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  80042083f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083fd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208401:	8d 50 01             	lea    0x1(%rax),%edx
  8004208404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208408:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  800420840c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208410:	48 89 c7             	mov    %rax,%rdi
  8004208413:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420841a:	00 00 00 
  800420841d:	ff d0                	callq  *%rax
  800420841f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208423:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  800420842a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004208431:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  8004208432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208437:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420843e:	00 00 00 
  8004208441:	ff d0                	callq  *%rax
  8004208443:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208447:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420844c:	75 56                	jne    80042084a4 <env_guest_alloc+0x314>
		page_decref(p);
  800420844e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208452:	48 89 c7             	mov    %rax,%rdi
  8004208455:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420845c:	00 00 00 
  800420845f:	ff d0                	callq  *%rax
		page_decref(q);
  8004208461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208465:	48 89 c7             	mov    %rax,%rdi
  8004208468:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420846f:	00 00 00 
  8004208472:	ff d0                	callq  *%rax
		page_decref(r);
  8004208474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208478:	48 89 c7             	mov    %rax,%rdi
  800420847b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208482:	00 00 00 
  8004208485:	ff d0                	callq  *%rax
		page_decref(s);
  8004208487:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420848b:	48 89 c7             	mov    %rax,%rdi
  800420848e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208495:	00 00 00 
  8004208498:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420849a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420849f:	e9 64 01 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  80042084a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084ac:	8d 50 01             	lea    0x1(%rax),%edx
  80042084af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b3:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  80042084b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bb:	48 89 c7             	mov    %rax,%rdi
  80042084be:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042084c5:	00 00 00 
  80042084c8:	ff d0                	callq  *%rax
  80042084ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084ce:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042084d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084d9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084df:	05 00 10 00 00       	add    $0x1000,%eax
  80042084e4:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084e9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084f0:	7f 07                	jg     80042084f9 <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084f2:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042084f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084fd:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004208504:	00 00 00 
  8004208507:	48 8b 00             	mov    (%rax),%rax
  800420850a:	48 29 c2             	sub    %rax,%rdx
  800420850d:	48 89 d0             	mov    %rdx,%rax
  8004208510:	48 c1 f8 03          	sar    $0x3,%rax
  8004208514:	48 89 c2             	mov    %rax,%rdx
  8004208517:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420851e:	fa a4 4f 
  8004208521:	48 0f af c2          	imul   %rdx,%rax
  8004208525:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208528:	89 c2                	mov    %eax,%edx
  800420852a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420852e:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208538:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  800420853b:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  8004208541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208545:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  800420854c:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  800420854f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208553:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420855a:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  800420855d:	48 b8 50 e2 4d 04 80 	movabs $0x80044de250,%rax
  8004208564:	00 00 00 
  8004208567:	8b 00                	mov    (%rax),%eax
  8004208569:	8d 48 01             	lea    0x1(%rax),%ecx
  800420856c:	48 ba 50 e2 4d 04 80 	movabs $0x80044de250,%rdx
  8004208573:	00 00 00 
  8004208576:	89 0a                	mov    %ecx,(%rdx)
  8004208578:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420857c:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  8004208582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208586:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  800420858c:	89 c6                	mov    %eax,%esi
  800420858e:	48 bf ab ff 21 04 80 	movabs $0x800421ffab,%rdi
  8004208595:	00 00 00 
  8004208598:	b8 00 00 00 00       	mov    $0x0,%eax
  800420859d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042085a4:	00 00 00 
  80042085a7:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042085a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ad:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085b2:	be 00 00 00 00       	mov    $0x0,%esi
  80042085b7:	48 89 c7             	mov    %rax,%rdi
  80042085ba:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  80042085c1:	00 00 00 
  80042085c4:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  80042085c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ca:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085d1:	00 00 00 00 
	e->env_ipc_recving = 0;
  80042085d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d9:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042085e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e4:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085eb:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042085f2:	00 00 00 
  80042085f5:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  80042085f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042085fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208600:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  8004208603:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208608:	c9                   	leaveq 
  8004208609:	c3                   	retq   

000000800420860a <env_guest_free>:

void env_guest_free(struct Env *e) {
  800420860a:	55                   	push   %rbp
  800420860b:	48 89 e5             	mov    %rsp,%rbp
  800420860e:	53                   	push   %rbx
  800420860f:	48 83 ec 38          	sub    $0x38,%rsp
  8004208613:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  8004208617:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420861b:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  8004208622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208626:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420862d:	00 00 00 
  8004208630:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208634:	77 32                	ja     8004208668 <env_guest_free+0x5e>
  8004208636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420863a:	48 89 c1             	mov    %rax,%rcx
  800420863d:	48 ba c8 ff 21 04 80 	movabs $0x800421ffc8,%rdx
  8004208644:	00 00 00 
  8004208647:	be 40 01 00 00       	mov    $0x140,%esi
  800420864c:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208653:	00 00 00 
  8004208656:	b8 00 00 00 00       	mov    $0x0,%eax
  800420865b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208662:	00 00 00 
  8004208665:	41 ff d0             	callq  *%r8
  8004208668:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420866f:	ff ff ff 
  8004208672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208676:	48 01 d0             	add    %rdx,%rax
  8004208679:	48 89 c7             	mov    %rax,%rdi
  800420867c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208683:	00 00 00 
  8004208686:	ff d0                	callq  *%rax
  8004208688:	48 89 c7             	mov    %rax,%rdi
  800420868b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208692:	00 00 00 
  8004208695:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  8004208697:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420869b:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086ad:	00 00 00 
  80042086b0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086b4:	77 32                	ja     80042086e8 <env_guest_free+0xde>
  80042086b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086ba:	48 89 c1             	mov    %rax,%rcx
  80042086bd:	48 ba c8 ff 21 04 80 	movabs $0x800421ffc8,%rdx
  80042086c4:	00 00 00 
  80042086c7:	be 42 01 00 00       	mov    $0x142,%esi
  80042086cc:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  80042086d3:	00 00 00 
  80042086d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042086e2:	00 00 00 
  80042086e5:	41 ff d0             	callq  *%r8
  80042086e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086ef:	ff ff ff 
  80042086f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086f6:	48 01 d0             	add    %rdx,%rax
  80042086f9:	48 89 c7             	mov    %rax,%rdi
  80042086fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208703:	00 00 00 
  8004208706:	ff d0                	callq  *%rax
  8004208708:	48 89 c7             	mov    %rax,%rdi
  800420870b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208712:	00 00 00 
  8004208715:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  8004208717:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420871b:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  8004208722:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208726:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420872d:	00 00 00 
  8004208730:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208734:	77 32                	ja     8004208768 <env_guest_free+0x15e>
  8004208736:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420873a:	48 89 c1             	mov    %rax,%rcx
  800420873d:	48 ba c8 ff 21 04 80 	movabs $0x800421ffc8,%rdx
  8004208744:	00 00 00 
  8004208747:	be 44 01 00 00       	mov    $0x144,%esi
  800420874c:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208753:	00 00 00 
  8004208756:	b8 00 00 00 00       	mov    $0x0,%eax
  800420875b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208762:	00 00 00 
  8004208765:	41 ff d0             	callq  *%r8
  8004208768:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420876f:	ff ff ff 
  8004208772:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208776:	48 01 d0             	add    %rdx,%rax
  8004208779:	48 89 c7             	mov    %rax,%rdi
  800420877c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208783:	00 00 00 
  8004208786:	ff d0                	callq  *%rax
  8004208788:	48 89 c7             	mov    %rax,%rdi
  800420878b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208792:	00 00 00 
  8004208795:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  8004208797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420879b:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087ad:	00 00 00 
  80042087b0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087b4:	77 32                	ja     80042087e8 <env_guest_free+0x1de>
  80042087b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ba:	48 89 c1             	mov    %rax,%rcx
  80042087bd:	48 ba c8 ff 21 04 80 	movabs $0x800421ffc8,%rdx
  80042087c4:	00 00 00 
  80042087c7:	be 45 01 00 00       	mov    $0x145,%esi
  80042087cc:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  80042087d3:	00 00 00 
  80042087d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042087e2:	00 00 00 
  80042087e5:	41 ff d0             	callq  *%r8
  80042087e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087ef:	ff ff ff 
  80042087f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087f6:	48 01 d0             	add    %rdx,%rax
  80042087f9:	48 89 c7             	mov    %rax,%rdi
  80042087fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208803:	00 00 00 
  8004208806:	ff d0                	callq  *%rax
  8004208808:	48 89 c7             	mov    %rax,%rdi
  800420880b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208812:	00 00 00 
  8004208815:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  8004208817:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420881b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208822:	48 89 c7             	mov    %rax,%rdi
  8004208825:	48 b8 42 9f 21 04 80 	movabs $0x8004219f42,%rax
  800420882c:	00 00 00 
  800420882f:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  8004208831:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208835:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420883c:	48 89 c7             	mov    %rax,%rdi
  800420883f:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208846:	00 00 00 
  8004208849:	ff d0                	callq  *%rax
  800420884b:	48 89 c7             	mov    %rax,%rdi
  800420884e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208855:	00 00 00 
  8004208858:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  800420885a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420885e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208865:	00 00 00 00 
	e->env_cr3 = 0;
  8004208869:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886d:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208874:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208878:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420887c:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208883:	00 00 00 
	e->env_link = env_free_list;
  8004208886:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  800420888d:	00 00 00 
  8004208890:	48 8b 10             	mov    (%rax),%rdx
  8004208893:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208897:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  800420889e:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042088a5:	00 00 00 
  80042088a8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088ac:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  80042088af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088b3:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088b9:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042088c0:	00 00 00 
  80042088c3:	ff d0                	callq  *%rax
  80042088c5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042088cc:	00 00 00 
  80042088cf:	48 98                	cltq   
  80042088d1:	48 c1 e0 03          	shl    $0x3,%rax
  80042088d5:	48 89 c1             	mov    %rax,%rcx
  80042088d8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088dc:	48 01 c8             	add    %rcx,%rax
  80042088df:	48 01 d0             	add    %rdx,%rax
  80042088e2:	48 83 c0 08          	add    $0x8,%rax
  80042088e6:	48 8b 00             	mov    (%rax),%rax
  80042088e9:	48 85 c0             	test   %rax,%rax
  80042088ec:	74 38                	je     8004208926 <env_guest_free+0x31c>
  80042088ee:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042088f5:	00 00 00 
  80042088f8:	ff d0                	callq  *%rax
  80042088fa:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004208901:	00 00 00 
  8004208904:	48 98                	cltq   
  8004208906:	48 c1 e0 03          	shl    $0x3,%rax
  800420890a:	48 89 c1             	mov    %rax,%rcx
  800420890d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208911:	48 01 c8             	add    %rcx,%rax
  8004208914:	48 01 d0             	add    %rdx,%rax
  8004208917:	48 83 c0 08          	add    $0x8,%rax
  800420891b:	48 8b 00             	mov    (%rax),%rax
  800420891e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208924:	eb 05                	jmp    800420892b <env_guest_free+0x321>
  8004208926:	b8 00 00 00 00       	mov    $0x0,%eax
  800420892b:	89 da                	mov    %ebx,%edx
  800420892d:	89 c6                	mov    %eax,%esi
  800420892f:	48 bf f8 ff 21 04 80 	movabs $0x800421fff8,%rdi
  8004208936:	00 00 00 
  8004208939:	b8 00 00 00 00       	mov    $0x0,%eax
  800420893e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004208945:	00 00 00 
  8004208948:	ff d1                	callq  *%rcx
}
  800420894a:	48 83 c4 38          	add    $0x38,%rsp
  800420894e:	5b                   	pop    %rbx
  800420894f:	5d                   	pop    %rbp
  8004208950:	c3                   	retq   

0000008004208951 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208951:	55                   	push   %rbp
  8004208952:	48 89 e5             	mov    %rsp,%rbp
  8004208955:	48 83 ec 30          	sub    $0x30,%rsp
  8004208959:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420895d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208960:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  8004208967:	00 00 00 
  800420896a:	48 8b 00             	mov    (%rax),%rax
  800420896d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208971:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208976:	75 0a                	jne    8004208982 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208978:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  800420897d:	e9 5b 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208986:	48 89 c7             	mov    %rax,%rdi
  8004208989:	48 b8 98 80 20 04 80 	movabs $0x8004208098,%rax
  8004208990:	00 00 00 
  8004208993:	ff d0                	callq  *%rax
  8004208995:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208998:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420899c:	79 08                	jns    80042089a6 <env_alloc+0x55>
		return r;
  800420899e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089a1:	e9 37 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042089a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089aa:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089b0:	05 00 10 00 00       	add    $0x1000,%eax
  80042089b5:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042089bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089c1:	7f 07                	jg     80042089ca <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042089c3:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042089ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089ce:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  80042089d5:	00 00 00 
  80042089d8:	48 8b 00             	mov    (%rax),%rax
  80042089db:	48 29 c2             	sub    %rax,%rdx
  80042089de:	48 89 d0             	mov    %rdx,%rax
  80042089e1:	48 c1 f8 03          	sar    $0x3,%rax
  80042089e5:	48 89 c2             	mov    %rax,%rdx
  80042089e8:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089ef:	fa a4 4f 
  80042089f2:	48 0f af c2          	imul   %rdx,%rax
  80042089f6:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042089f9:	89 c2                	mov    %eax,%edx
  80042089fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089ff:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a09:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a0c:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208a12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a16:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a1d:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208a20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a24:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a2b:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a32:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a37:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a3c:	48 89 c7             	mov    %rax,%rdi
  8004208a3f:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004208a46:	00 00 00 
  8004208a49:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208a4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a4f:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a56:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a5c:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a66:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a6d:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a73:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a78:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a83:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a8a:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a90:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208a97:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208a9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9f:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208aa6:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aae:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208ab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ab9:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208ac0:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  8004208ac7:	00 00 00 
  8004208aca:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208acd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ad1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ad5:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208ad8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208add:	c9                   	leaveq 
  8004208ade:	c3                   	retq   

0000008004208adf <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208adf:	55                   	push   %rbp
  8004208ae0:	48 89 e5             	mov    %rsp,%rbp
  8004208ae3:	48 83 ec 40          	sub    $0x40,%rsp
  8004208ae7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208aeb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208aef:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208af7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208afb:	48 01 d0             	add    %rdx,%rax
  8004208afe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208b02:	e9 c8 00 00 00       	jmpq   8004208bcf <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208b07:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b0c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004208b13:	00 00 00 
  8004208b16:	ff d0                	callq  *%rax
  8004208b18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b1c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b21:	75 30                	jne    8004208b53 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208b23:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b28:	48 ba 18 00 22 04 80 	movabs $0x8004220018,%rdx
  8004208b2f:	00 00 00 
  8004208b32:	be b2 01 00 00       	mov    $0x1b2,%esi
  8004208b37:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208b3e:	00 00 00 
  8004208b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b46:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b4d:	00 00 00 
  8004208b50:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b57:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b5e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b62:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b66:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b6b:	48 89 c7             	mov    %rax,%rdi
  8004208b6e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004208b75:	00 00 00 
  8004208b78:	ff d0                	callq  *%rax
  8004208b7a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b81:	79 30                	jns    8004208bb3 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b83:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b86:	89 c1                	mov    %eax,%ecx
  8004208b88:	48 ba 40 00 22 04 80 	movabs $0x8004220040,%rdx
  8004208b8f:	00 00 00 
  8004208b92:	be b6 01 00 00       	mov    $0x1b6,%esi
  8004208b97:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208b9e:	00 00 00 
  8004208ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ba6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208bad:	00 00 00 
  8004208bb0:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208bb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bb7:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bbd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208bc5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bcb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bd3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208bd7:	0f 82 2a ff ff ff    	jb     8004208b07 <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208bdd:	c9                   	leaveq 
  8004208bde:	c3                   	retq   

0000008004208bdf <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208bdf:	55                   	push   %rbp
  8004208be0:	48 89 e5             	mov    %rsp,%rbp
  8004208be3:	53                   	push   %rbx
  8004208be4:	48 83 ec 78          	sub    $0x78,%rsp
  8004208be8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208bec:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208bf0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208bf4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208bf8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208bfd:	0f 84 6f 03 00 00    	je     8004208f72 <load_icode+0x393>
  8004208c03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c07:	8b 00                	mov    (%rax),%eax
  8004208c09:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c0e:	0f 85 5e 03 00 00    	jne    8004208f72 <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208c14:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c18:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c1f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c23:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c2a:	00 00 00 
  8004208c2d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c31:	77 32                	ja     8004208c65 <load_icode+0x86>
  8004208c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c37:	48 89 c1             	mov    %rax,%rcx
  8004208c3a:	48 ba c8 ff 21 04 80 	movabs $0x800421ffc8,%rdx
  8004208c41:	00 00 00 
  8004208c44:	be d8 01 00 00       	mov    $0x1d8,%esi
  8004208c49:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208c50:	00 00 00 
  8004208c53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c58:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208c5f:	00 00 00 
  8004208c62:	41 ff d0             	callq  *%r8
  8004208c65:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c6c:	ff ff ff 
  8004208c6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c73:	48 01 d0             	add    %rdx,%rax
  8004208c76:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c7e:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c85:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c8d:	48 01 d0             	add    %rdx,%rax
  8004208c90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208c94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c98:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208c9c:	0f b7 c0             	movzwl %ax,%eax
  8004208c9f:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ca3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208caa:	00 
  8004208cab:	48 29 c2             	sub    %rax,%rdx
  8004208cae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cb2:	48 01 d0             	add    %rdx,%rax
  8004208cb5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208cb9:	e9 bd 00 00 00       	jmpq   8004208d7b <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208cbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cc2:	8b 00                	mov    (%rax),%eax
  8004208cc4:	83 f8 01             	cmp    $0x1,%eax
  8004208cc7:	0f 85 a9 00 00 00    	jne    8004208d76 <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208ccd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd9:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208cdd:	48 89 c1             	mov    %rax,%rcx
  8004208ce0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208ce4:	48 89 ce             	mov    %rcx,%rsi
  8004208ce7:	48 89 c7             	mov    %rax,%rdi
  8004208cea:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208cf1:	00 00 00 
  8004208cf4:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cfa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208cfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d02:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d0a:	48 01 c1             	add    %rax,%rcx
  8004208d0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d11:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d15:	48 89 ce             	mov    %rcx,%rsi
  8004208d18:	48 89 c7             	mov    %rax,%rdi
  8004208d1b:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  8004208d22:	00 00 00 
  8004208d25:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d2b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d33:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d37:	48 39 c2             	cmp    %rax,%rdx
  8004208d3a:	73 3a                	jae    8004208d76 <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208d3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d40:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d48:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d4c:	48 29 c2             	sub    %rax,%rdx
  8004208d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d53:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5b:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d5f:	48 01 c8             	add    %rcx,%rax
  8004208d62:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d67:	48 89 c7             	mov    %rax,%rdi
  8004208d6a:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004208d71:	00 00 00 
  8004208d74:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d76:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d7f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d83:	0f 82 35 ff ff ff    	jb     8004208cbe <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d89:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d8d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d92:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208d97:	48 89 c7             	mov    %rax,%rdi
  8004208d9a:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208da1:	00 00 00 
  8004208da4:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208da6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208daa:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208db2:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208db9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dbd:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dc2:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208dc9:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208dd0:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208dd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208dd5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208dd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ddd:	48 01 d0             	add    %rdx,%rax
  8004208de0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208de4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de8:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208dec:	0f b7 c0             	movzwl %ax,%eax
  8004208def:	48 c1 e0 06          	shl    $0x6,%rax
  8004208df3:	48 89 c2             	mov    %rax,%rdx
  8004208df6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208dfa:	48 01 d0             	add    %rdx,%rax
  8004208dfd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208e01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e05:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e09:	0f b7 c0             	movzwl %ax,%eax
  8004208e0c:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e10:	48 89 c2             	mov    %rax,%rdx
  8004208e13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e17:	48 01 d0             	add    %rdx,%rax
  8004208e1a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208e1e:	e9 27 01 00 00       	jmpq   8004208f4a <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208e23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e27:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e2f:	8b 00                	mov    (%rax),%eax
  8004208e31:	89 c0                	mov    %eax,%eax
  8004208e33:	48 01 c2             	add    %rax,%rdx
  8004208e36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e3a:	48 01 d0             	add    %rdx,%rax
  8004208e3d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208e41:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e45:	48 be 68 00 22 04 80 	movabs $0x8004220068,%rsi
  8004208e4c:	00 00 00 
  8004208e4f:	48 89 c7             	mov    %rax,%rdi
  8004208e52:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004208e59:	00 00 00 
  8004208e5c:	ff d0                	callq  *%rax
  8004208e5e:	85 c0                	test   %eax,%eax
  8004208e60:	0f 84 84 00 00 00    	je     8004208eea <load_icode+0x30b>
  8004208e66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e6a:	48 be 74 00 22 04 80 	movabs $0x8004220074,%rsi
  8004208e71:	00 00 00 
  8004208e74:	48 89 c7             	mov    %rax,%rdi
  8004208e77:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004208e7e:	00 00 00 
  8004208e81:	ff d0                	callq  *%rax
  8004208e83:	85 c0                	test   %eax,%eax
  8004208e85:	74 63                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e8b:	48 be 82 00 22 04 80 	movabs $0x8004220082,%rsi
  8004208e92:	00 00 00 
  8004208e95:	48 89 c7             	mov    %rax,%rdi
  8004208e98:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004208e9f:	00 00 00 
  8004208ea2:	ff d0                	callq  *%rax
  8004208ea4:	85 c0                	test   %eax,%eax
  8004208ea6:	74 42                	je     8004208eea <load_icode+0x30b>
  8004208ea8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208eac:	48 be 8e 00 22 04 80 	movabs $0x800422008e,%rsi
  8004208eb3:	00 00 00 
  8004208eb6:	48 89 c7             	mov    %rax,%rdi
  8004208eb9:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004208ec0:	00 00 00 
  8004208ec3:	ff d0                	callq  *%rax
  8004208ec5:	85 c0                	test   %eax,%eax
  8004208ec7:	74 21                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208ec9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ecd:	48 be 98 00 22 04 80 	movabs $0x8004220098,%rsi
  8004208ed4:	00 00 00 
  8004208ed7:	48 89 c7             	mov    %rax,%rdi
  8004208eda:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004208ee1:	00 00 00 
  8004208ee4:	ff d0                	callq  *%rax
  8004208ee6:	85 c0                	test   %eax,%eax
  8004208ee8:	75 5b                	jne    8004208f45 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208eea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208eee:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ef2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208ef6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208efa:	48 89 ce             	mov    %rcx,%rsi
  8004208efd:	48 89 c7             	mov    %rax,%rdi
  8004208f00:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208f07:	00 00 00 
  8004208f0a:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208f0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f18:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f20:	48 01 c1             	add    %rax,%rcx
  8004208f23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f27:	48 89 ce             	mov    %rcx,%rsi
  8004208f2a:	48 89 c7             	mov    %rax,%rdi
  8004208f2d:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  8004208f34:	00 00 00 
  8004208f37:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f3d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f41:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208f45:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f4e:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f52:	0f 82 cb fe ff ff    	jb     8004208e23 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f58:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  8004208f5f:	00 00 00 
  8004208f62:	48 8b 00             	mov    (%rax),%rax
  8004208f65:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f69:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f6d:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f70:	eb 2a                	jmp    8004208f9c <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f72:	48 ba a3 00 22 04 80 	movabs $0x80042200a3,%rdx
  8004208f79:	00 00 00 
  8004208f7c:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208f81:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208f88:	00 00 00 
  8004208f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f90:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004208f97:	00 00 00 
  8004208f9a:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208f9c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fa0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fa4:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208fab:	48 83 c4 78          	add    $0x78,%rsp
  8004208faf:	5b                   	pop    %rbx
  8004208fb0:	5d                   	pop    %rbp
  8004208fb1:	c3                   	retq   

0000008004208fb2 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208fb2:	55                   	push   %rbp
  8004208fb3:	48 89 e5             	mov    %rsp,%rbp
  8004208fb6:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fbe:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208fc1:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fc5:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fca:	48 89 c7             	mov    %rax,%rdi
  8004208fcd:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  8004208fd4:	00 00 00 
  8004208fd7:	ff d0                	callq  *%rax
  8004208fd9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208fdc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208fe0:	79 30                	jns    8004209012 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208fe2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208fe5:	89 c1                	mov    %eax,%ecx
  8004208fe7:	48 ba b8 00 22 04 80 	movabs $0x80042200b8,%rdx
  8004208fee:	00 00 00 
  8004208ff1:	be 0d 02 00 00       	mov    $0x20d,%esi
  8004208ff6:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004208ffd:	00 00 00 
  8004209000:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209005:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420900c:	00 00 00 
  800420900f:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  8004209012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209016:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420901a:	48 89 d6             	mov    %rdx,%rsi
  800420901d:	48 89 c7             	mov    %rax,%rdi
  8004209020:	48 b8 df 8b 20 04 80 	movabs $0x8004208bdf,%rax
  8004209027:	00 00 00 
  800420902a:	ff d0                	callq  *%rax
	e->env_type = type;
  800420902c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209030:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209033:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004209039:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420903d:	75 19                	jne    8004209058 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  800420903f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209043:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209047:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420904e:	80 ce 30             	or     $0x30,%dh
  8004209051:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004209058:	c9                   	leaveq 
  8004209059:	c3                   	retq   

000000800420905a <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  800420905a:	55                   	push   %rbp
  800420905b:	48 89 e5             	mov    %rsp,%rbp
  800420905e:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209065:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420906c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209073:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209079:	83 f8 03             	cmp    $0x3,%eax
  800420907c:	75 1b                	jne    8004209099 <env_free+0x3f>
		env_guest_free(e);
  800420907e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209085:	48 89 c7             	mov    %rax,%rdi
  8004209088:	48 b8 0a 86 20 04 80 	movabs $0x800420860a,%rax
  800420908f:	00 00 00 
  8004209092:	ff d0                	callq  *%rax
		return;
  8004209094:	e9 78 04 00 00       	jmpq   8004209511 <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004209099:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042090a0:	00 00 00 
  80042090a3:	ff d0                	callq  *%rax
  80042090a5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042090ac:	00 00 00 
  80042090af:	48 98                	cltq   
  80042090b1:	48 c1 e0 03          	shl    $0x3,%rax
  80042090b5:	48 89 c1             	mov    %rax,%rcx
  80042090b8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090bc:	48 01 c8             	add    %rcx,%rax
  80042090bf:	48 01 d0             	add    %rdx,%rax
  80042090c2:	48 83 c0 08          	add    $0x8,%rax
  80042090c6:	48 8b 00             	mov    (%rax),%rax
  80042090c9:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090d0:	75 18                	jne    80042090ea <env_free+0x90>
		lcr3(boot_cr3);
  80042090d2:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  80042090d9:	00 00 00 
  80042090dc:	48 8b 00             	mov    (%rax),%rax
  80042090df:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090e3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042090e7:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042090ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090f1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042090f8:	48 8b 00             	mov    (%rax),%rax
  80042090fb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209101:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209109:	48 c1 e8 0c          	shr    $0xc,%rax
  800420910d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004209110:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209113:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420911a:	00 00 00 
  800420911d:	48 8b 00             	mov    (%rax),%rax
  8004209120:	48 39 c2             	cmp    %rax,%rdx
  8004209123:	72 32                	jb     8004209157 <env_free+0xfd>
  8004209125:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209129:	48 89 c1             	mov    %rax,%rcx
  800420912c:	48 ba 88 ff 21 04 80 	movabs $0x800421ff88,%rdx
  8004209133:	00 00 00 
  8004209136:	be 32 02 00 00       	mov    $0x232,%esi
  800420913b:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  8004209142:	00 00 00 
  8004209145:	b8 00 00 00 00       	mov    $0x0,%eax
  800420914a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209151:	00 00 00 
  8004209154:	41 ff d0             	callq  *%r8
  8004209157:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420915e:	00 00 00 
  8004209161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209165:	48 01 d0             	add    %rdx,%rax
  8004209168:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420916c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004209173:	00 
  8004209174:	e9 ab 02 00 00       	jmpq   8004209424 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004209179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420917d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209184:	00 
  8004209185:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209189:	48 01 d0             	add    %rdx,%rax
  800420918c:	48 8b 00             	mov    (%rax),%rax
  800420918f:	83 e0 01             	and    $0x1,%eax
  8004209192:	48 85 c0             	test   %rax,%rax
  8004209195:	75 05                	jne    800420919c <env_free+0x142>
			continue;
  8004209197:	e9 83 02 00 00       	jmpq   800420941f <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  800420919c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091a7:	00 
  80042091a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091ac:	48 01 d0             	add    %rdx,%rax
  80042091af:	48 8b 00             	mov    (%rax),%rax
  80042091b2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091b8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091c0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091c4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091c7:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091ca:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042091d1:	00 00 00 
  80042091d4:	48 8b 00             	mov    (%rax),%rax
  80042091d7:	48 39 c2             	cmp    %rax,%rdx
  80042091da:	72 32                	jb     800420920e <env_free+0x1b4>
  80042091dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091e0:	48 89 c1             	mov    %rax,%rcx
  80042091e3:	48 ba 88 ff 21 04 80 	movabs $0x800421ff88,%rdx
  80042091ea:	00 00 00 
  80042091ed:	be 3a 02 00 00       	mov    $0x23a,%esi
  80042091f2:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  80042091f9:	00 00 00 
  80042091fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209201:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209208:	00 00 00 
  800420920b:	41 ff d0             	callq  *%r8
  800420920e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209215:	00 00 00 
  8004209218:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420921c:	48 01 d0             	add    %rdx,%rax
  800420921f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004209223:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209228:	75 07                	jne    8004209231 <env_free+0x1d7>
  800420922a:	b8 04 00 00 00       	mov    $0x4,%eax
  800420922f:	eb 05                	jmp    8004209236 <env_free+0x1dc>
  8004209231:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209236:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209239:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004209240:	00 
  8004209241:	e9 6e 01 00 00       	jmpq   80042093b4 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004209246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420924a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209251:	00 
  8004209252:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209256:	48 01 d0             	add    %rdx,%rax
  8004209259:	48 8b 00             	mov    (%rax),%rax
  800420925c:	83 e0 01             	and    $0x1,%eax
  800420925f:	48 85 c0             	test   %rax,%rax
  8004209262:	75 05                	jne    8004209269 <env_free+0x20f>
				continue;
  8004209264:	e9 46 01 00 00       	jmpq   80042093af <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004209269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420926d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209274:	00 
  8004209275:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209279:	48 01 d0             	add    %rdx,%rax
  800420927c:	48 8b 00             	mov    (%rax),%rax
  800420927f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209285:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004209289:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420928d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004209291:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004209295:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209299:	89 45 9c             	mov    %eax,-0x64(%rbp)
  800420929c:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420929f:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042092a6:	00 00 00 
  80042092a9:	48 8b 00             	mov    (%rax),%rax
  80042092ac:	48 39 c2             	cmp    %rax,%rdx
  80042092af:	72 32                	jb     80042092e3 <env_free+0x289>
  80042092b1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092b5:	48 89 c1             	mov    %rax,%rcx
  80042092b8:	48 ba 88 ff 21 04 80 	movabs $0x800421ff88,%rdx
  80042092bf:	00 00 00 
  80042092c2:	be 44 02 00 00       	mov    $0x244,%esi
  80042092c7:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  80042092ce:	00 00 00 
  80042092d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042092dd:	00 00 00 
  80042092e0:	41 ff d0             	callq  *%r8
  80042092e3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042092ea:	00 00 00 
  80042092ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092f1:	48 01 d0             	add    %rdx,%rax
  80042092f4:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  80042092f8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042092ff:	00 
  8004209300:	eb 67                	jmp    8004209369 <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  8004209302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209306:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420930d:	00 
  800420930e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004209312:	48 01 d0             	add    %rdx,%rax
  8004209315:	48 8b 00             	mov    (%rax),%rax
  8004209318:	83 e0 01             	and    $0x1,%eax
  800420931b:	48 85 c0             	test   %rax,%rax
  800420931e:	74 44                	je     8004209364 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004209320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209324:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209328:	48 89 c2             	mov    %rax,%rdx
  800420932b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420932f:	48 c1 e0 15          	shl    $0x15,%rax
  8004209333:	48 09 c2             	or     %rax,%rdx
  8004209336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420933a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420933e:	48 09 d0             	or     %rdx,%rax
  8004209341:	48 89 c2             	mov    %rax,%rdx
  8004209344:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420934b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209352:	48 89 d6             	mov    %rdx,%rsi
  8004209355:	48 89 c7             	mov    %rax,%rdi
  8004209358:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420935f:	00 00 00 
  8004209362:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209364:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209369:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004209370:	00 
  8004209371:	76 8f                	jbe    8004209302 <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004209373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209377:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420937e:	00 
  800420937f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209383:	48 01 d0             	add    %rdx,%rax
  8004209386:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  800420938d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209391:	48 89 c7             	mov    %rax,%rdi
  8004209394:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420939b:	00 00 00 
  800420939e:	ff d0                	callq  *%rax
  80042093a0:	48 89 c7             	mov    %rax,%rdi
  80042093a3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042093aa:	00 00 00 
  80042093ad:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042093af:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093b4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093b7:	48 98                	cltq   
  80042093b9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093bd:	0f 87 83 fe ff ff    	ja     8004209246 <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042093c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ce:	00 
  80042093cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093d3:	48 01 d0             	add    %rdx,%rax
  80042093d6:	48 8b 00             	mov    (%rax),%rax
  80042093d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093df:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  80042093e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093e7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ee:	00 
  80042093ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093f3:	48 01 d0             	add    %rdx,%rax
  80042093f6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  80042093fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209401:	48 89 c7             	mov    %rax,%rdi
  8004209404:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420940b:	00 00 00 
  800420940e:	ff d0                	callq  *%rax
  8004209410:	48 89 c7             	mov    %rax,%rdi
  8004209413:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420941a:	00 00 00 
  800420941d:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420941f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209424:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209429:	0f 86 4a fd ff ff    	jbe    8004209179 <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  800420942f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209436:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420943d:	48 8b 00             	mov    (%rax),%rax
  8004209440:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209446:	48 89 c7             	mov    %rax,%rdi
  8004209449:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209450:	00 00 00 
  8004209453:	ff d0                	callq  *%rax
  8004209455:	48 89 c7             	mov    %rax,%rdi
  8004209458:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420945f:	00 00 00 
  8004209462:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209464:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420946b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209472:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004209479:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209480:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209487:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  800420948b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209492:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004209499:	00 00 00 00 
	e->env_cr3 = 0;
  800420949d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094a4:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094ab:	00 00 00 00 
	page_decref(pa2page(pa));
  80042094af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094b3:	48 89 c7             	mov    %rax,%rdi
  80042094b6:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042094bd:	00 00 00 
  80042094c0:	ff d0                	callq  *%rax
  80042094c2:	48 89 c7             	mov    %rax,%rdi
  80042094c5:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042094cc:	00 00 00 
  80042094cf:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042094d1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094d8:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094df:	00 00 00 
	e->env_link = env_free_list;
  80042094e2:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042094e9:	00 00 00 
  80042094ec:	48 8b 10             	mov    (%rax),%rdx
  80042094ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094f6:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042094fd:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  8004209504:	00 00 00 
  8004209507:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420950e:	48 89 10             	mov    %rdx,(%rax)
}
  8004209511:	c9                   	leaveq 
  8004209512:	c3                   	retq   

0000008004209513 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004209513:	55                   	push   %rbp
  8004209514:	48 89 e5             	mov    %rsp,%rbp
  8004209517:	48 83 ec 10          	sub    $0x10,%rsp
  800420951b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  800420951f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209523:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209529:	83 f8 03             	cmp    $0x3,%eax
  800420952c:	75 49                	jne    8004209577 <env_destroy+0x64>
  800420952e:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004209535:	00 00 00 
  8004209538:	ff d0                	callq  *%rax
  800420953a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004209541:	00 00 00 
  8004209544:	48 98                	cltq   
  8004209546:	48 c1 e0 03          	shl    $0x3,%rax
  800420954a:	48 89 c1             	mov    %rax,%rcx
  800420954d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209551:	48 01 c8             	add    %rcx,%rax
  8004209554:	48 01 d0             	add    %rdx,%rax
  8004209557:	48 83 c0 08          	add    $0x8,%rax
  800420955b:	48 8b 00             	mov    (%rax),%rax
  800420955e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209562:	74 13                	je     8004209577 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209568:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420956f:	00 00 00 
		return;
  8004209572:	e9 89 00 00 00       	jmpq   8004209600 <env_destroy+0xed>
	}

	env_free(e);
  8004209577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420957b:	48 89 c7             	mov    %rax,%rdi
  800420957e:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  8004209585:	00 00 00 
  8004209588:	ff d0                	callq  *%rax
	if (curenv == e) {
  800420958a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004209591:	00 00 00 
  8004209594:	ff d0                	callq  *%rax
  8004209596:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420959d:	00 00 00 
  80042095a0:	48 98                	cltq   
  80042095a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042095a6:	48 89 c1             	mov    %rax,%rcx
  80042095a9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ad:	48 01 c8             	add    %rcx,%rax
  80042095b0:	48 01 d0             	add    %rdx,%rax
  80042095b3:	48 83 c0 08          	add    $0x8,%rax
  80042095b7:	48 8b 00             	mov    (%rax),%rax
  80042095ba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095be:	75 40                	jne    8004209600 <env_destroy+0xed>
		curenv = NULL;
  80042095c0:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042095c7:	00 00 00 
  80042095ca:	ff d0                	callq  *%rax
  80042095cc:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042095d3:	00 00 00 
  80042095d6:	48 98                	cltq   
  80042095d8:	48 c1 e0 03          	shl    $0x3,%rax
  80042095dc:	48 89 c1             	mov    %rax,%rcx
  80042095df:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095e3:	48 01 c8             	add    %rcx,%rax
  80042095e6:	48 01 d0             	add    %rdx,%rax
  80042095e9:	48 83 c0 08          	add    $0x8,%rax
  80042095ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  80042095f4:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042095fb:	00 00 00 
  80042095fe:	ff d0                	callq  *%rax
	}
}
  8004209600:	c9                   	leaveq 
  8004209601:	c3                   	retq   

0000008004209602 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004209602:	55                   	push   %rbp
  8004209603:	48 89 e5             	mov    %rsp,%rbp
  8004209606:	53                   	push   %rbx
  8004209607:	48 83 ec 18          	sub    $0x18,%rsp
  800420960b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  800420960f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004209616:	00 00 00 
  8004209619:	ff d0                	callq  *%rax
  800420961b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004209622:	00 00 00 
  8004209625:	48 98                	cltq   
  8004209627:	48 c1 e0 03          	shl    $0x3,%rax
  800420962b:	48 89 c1             	mov    %rax,%rcx
  800420962e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209632:	48 01 c8             	add    %rcx,%rax
  8004209635:	48 01 d0             	add    %rdx,%rax
  8004209638:	48 83 c0 08          	add    $0x8,%rax
  800420963c:	48 8b 18             	mov    (%rax),%rbx
  800420963f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004209646:	00 00 00 
  8004209649:	ff d0                	callq  *%rax
  800420964b:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004209651:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209655:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209659:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420965e:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004209663:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209668:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  800420966d:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004209672:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209677:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  800420967c:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209681:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209686:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  800420968b:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209690:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004209695:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  800420969a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  800420969f:	48 83 c4 78          	add    $0x78,%rsp
  80042096a3:	8e 04 24             	mov    (%rsp),%es
  80042096a6:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096aa:	48 83 c4 10          	add    $0x10,%rsp
  80042096ae:	48 83 c4 10          	add    $0x10,%rsp
  80042096b2:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042096b4:	48 ba e0 00 22 04 80 	movabs $0x80042200e0,%rdx
  80042096bb:	00 00 00 
  80042096be:	be 90 02 00 00       	mov    $0x290,%esi
  80042096c3:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  80042096ca:	00 00 00 
  80042096cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096d2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042096d9:	00 00 00 
  80042096dc:	ff d1                	callq  *%rcx

00000080042096de <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  80042096de:	55                   	push   %rbp
  80042096df:	48 89 e5             	mov    %rsp,%rbp
  80042096e2:	48 83 ec 20          	sub    $0x20,%rsp
  80042096e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  80042096ea:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042096f1:	00 00 00 
  80042096f4:	ff d0                	callq  *%rax
  80042096f6:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042096fd:	00 00 00 
  8004209700:	48 98                	cltq   
  8004209702:	48 c1 e0 03          	shl    $0x3,%rax
  8004209706:	48 89 c1             	mov    %rax,%rcx
  8004209709:	48 c1 e1 04          	shl    $0x4,%rcx
  800420970d:	48 01 c8             	add    %rcx,%rax
  8004209710:	48 01 d0             	add    %rdx,%rax
  8004209713:	48 83 c0 08          	add    $0x8,%rax
  8004209717:	48 8b 00             	mov    (%rax),%rax
  800420971a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420971e:	0f 84 28 01 00 00    	je     800420984c <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  8004209724:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420972b:	00 00 00 
  800420972e:	ff d0                	callq  *%rax
  8004209730:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004209737:	00 00 00 
  800420973a:	48 98                	cltq   
  800420973c:	48 c1 e0 03          	shl    $0x3,%rax
  8004209740:	48 89 c1             	mov    %rax,%rcx
  8004209743:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209747:	48 01 c8             	add    %rcx,%rax
  800420974a:	48 01 d0             	add    %rdx,%rax
  800420974d:	48 83 c0 08          	add    $0x8,%rax
  8004209751:	48 8b 00             	mov    (%rax),%rax
  8004209754:	48 85 c0             	test   %rax,%rax
  8004209757:	74 75                	je     80042097ce <env_run+0xf0>
  8004209759:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004209760:	00 00 00 
  8004209763:	ff d0                	callq  *%rax
  8004209765:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420976c:	00 00 00 
  800420976f:	48 98                	cltq   
  8004209771:	48 c1 e0 03          	shl    $0x3,%rax
  8004209775:	48 89 c1             	mov    %rax,%rcx
  8004209778:	48 c1 e1 04          	shl    $0x4,%rcx
  800420977c:	48 01 c8             	add    %rcx,%rax
  800420977f:	48 01 d0             	add    %rdx,%rax
  8004209782:	48 83 c0 08          	add    $0x8,%rax
  8004209786:	48 8b 00             	mov    (%rax),%rax
  8004209789:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420978f:	83 f8 03             	cmp    $0x3,%eax
  8004209792:	75 3a                	jne    80042097ce <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  8004209794:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420979b:	00 00 00 
  800420979e:	ff d0                	callq  *%rax
  80042097a0:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042097a7:	00 00 00 
  80042097aa:	48 98                	cltq   
  80042097ac:	48 c1 e0 03          	shl    $0x3,%rax
  80042097b0:	48 89 c1             	mov    %rax,%rcx
  80042097b3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097b7:	48 01 c8             	add    %rcx,%rax
  80042097ba:	48 01 d0             	add    %rdx,%rax
  80042097bd:	48 83 c0 08          	add    $0x8,%rax
  80042097c1:	48 8b 00             	mov    (%rax),%rax
  80042097c4:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097cb:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042097ce:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042097d5:	00 00 00 
  80042097d8:	ff d0                	callq  *%rax
  80042097da:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042097e1:	00 00 00 
  80042097e4:	48 98                	cltq   
  80042097e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042097ea:	48 89 c1             	mov    %rax,%rcx
  80042097ed:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097f1:	48 01 c8             	add    %rcx,%rax
  80042097f4:	48 01 d0             	add    %rdx,%rax
  80042097f7:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042097fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097ff:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  8004209802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209806:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  800420980d:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  8004209810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209814:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800420981a:	8d 50 01             	lea    0x1(%rax),%edx
  800420981d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209821:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  8004209827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420982b:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209831:	83 f8 03             	cmp    $0x3,%eax
  8004209834:	74 16                	je     800420984c <env_run+0x16e>
			lcr3(e->env_cr3);
  8004209836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420983a:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209841:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209849:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  800420984c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209850:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209856:	83 f8 03             	cmp    $0x3,%eax
  8004209859:	74 35                	je     8004209890 <env_run+0x1b2>
  800420985b:	48 b9 ec 00 22 04 80 	movabs $0x80042200ec,%rcx
  8004209862:	00 00 00 
  8004209865:	48 ba 09 01 22 04 80 	movabs $0x8004220109,%rdx
  800420986c:	00 00 00 
  800420986f:	be b2 02 00 00       	mov    $0x2b2,%esi
  8004209874:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  800420987b:	00 00 00 
  800420987e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209883:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420988a:	00 00 00 
  800420988d:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209894:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420989a:	83 f8 03             	cmp    $0x3,%eax
  800420989d:	75 3d                	jne    80042098dc <env_run+0x1fe>
		vmx_vmrun(e);
  800420989f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098a3:	48 89 c7             	mov    %rax,%rdi
  80042098a6:	48 b8 2f d9 21 04 80 	movabs $0x800421d92f,%rax
  80042098ad:	00 00 00 
  80042098b0:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  80042098b2:	48 ba 1e 01 22 04 80 	movabs $0x800422011e,%rdx
  80042098b9:	00 00 00 
  80042098bc:	be b8 02 00 00       	mov    $0x2b8,%esi
  80042098c1:	48 bf ec ff 21 04 80 	movabs $0x800421ffec,%rdi
  80042098c8:	00 00 00 
  80042098cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098d0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042098d7:	00 00 00 
  80042098da:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  80042098dc:	48 b8 e3 7d 20 04 80 	movabs $0x8004207de3,%rax
  80042098e3:	00 00 00 
  80042098e6:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  80042098e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098ec:	48 89 c7             	mov    %rax,%rdi
  80042098ef:	48 b8 02 96 20 04 80 	movabs $0x8004209602,%rax
  80042098f6:	00 00 00 
  80042098f9:	ff d0                	callq  *%rax

00000080042098fb <mc146818_read>:
  80042098fb:	55                   	push   %rbp
  80042098fc:	48 89 e5             	mov    %rsp,%rbp
  80042098ff:	48 83 ec 14          	sub    $0x14,%rsp
  8004209903:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209906:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209909:	0f b6 c0             	movzbl %al,%eax
  800420990c:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209913:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209916:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420991a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420991d:	ee                   	out    %al,(%dx)
  800420991e:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209925:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209928:	89 c2                	mov    %eax,%edx
  800420992a:	ec                   	in     (%dx),%al
  800420992b:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420992e:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209932:	0f b6 c0             	movzbl %al,%eax
  8004209935:	c9                   	leaveq 
  8004209936:	c3                   	retq   

0000008004209937 <mc146818_write>:
  8004209937:	55                   	push   %rbp
  8004209938:	48 89 e5             	mov    %rsp,%rbp
  800420993b:	48 83 ec 18          	sub    $0x18,%rsp
  800420993f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209942:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209945:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209948:	0f b6 c0             	movzbl %al,%eax
  800420994b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209952:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209955:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209959:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420995c:	ee                   	out    %al,(%dx)
  800420995d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004209960:	0f b6 c0             	movzbl %al,%eax
  8004209963:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  800420996a:	88 45 f3             	mov    %al,-0xd(%rbp)
  800420996d:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209971:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209974:	ee                   	out    %al,(%dx)
  8004209975:	c9                   	leaveq 
  8004209976:	c3                   	retq   

0000008004209977 <pic_init>:
  8004209977:	55                   	push   %rbp
  8004209978:	48 89 e5             	mov    %rsp,%rbp
  800420997b:	48 83 ec 70          	sub    $0x70,%rsp
  800420997f:	48 b8 68 e2 4d 04 80 	movabs $0x80044de268,%rax
  8004209986:	00 00 00 
  8004209989:	c6 00 01             	movb   $0x1,(%rax)
  800420998c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  8004209993:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  8004209997:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420999b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420999e:	ee                   	out    %al,(%dx)
  800420999f:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099a6:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099aa:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099b1:	ee                   	out    %al,(%dx)
  80042099b2:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099b9:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099bd:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099c1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099c4:	ee                   	out    %al,(%dx)
  80042099c5:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099cc:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099d0:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099d4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099d7:	ee                   	out    %al,(%dx)
  80042099d8:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099df:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099e3:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042099e7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042099ea:	ee                   	out    %al,(%dx)
  80042099eb:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042099f2:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  80042099f6:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042099fa:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042099fd:	ee                   	out    %al,(%dx)
  80042099fe:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a05:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a09:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a0d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a10:	ee                   	out    %al,(%dx)
  8004209a11:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a18:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a1c:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a20:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a23:	ee                   	out    %al,(%dx)
  8004209a24:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a2b:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a2f:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a33:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a36:	ee                   	out    %al,(%dx)
  8004209a37:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a3e:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a42:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a46:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a49:	ee                   	out    %al,(%dx)
  8004209a4a:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a51:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a55:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a59:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a5c:	ee                   	out    %al,(%dx)
  8004209a5d:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a64:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a68:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a6c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a6f:	ee                   	out    %al,(%dx)
  8004209a70:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a77:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a7b:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a7f:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a82:	ee                   	out    %al,(%dx)
  8004209a83:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a8a:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a8e:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a92:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209a95:	ee                   	out    %al,(%dx)
  8004209a96:	48 b8 72 66 23 04 80 	movabs $0x8004236672,%rax
  8004209a9d:	00 00 00 
  8004209aa0:	0f b7 00             	movzwl (%rax),%eax
  8004209aa3:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209aa7:	74 1e                	je     8004209ac7 <pic_init+0x150>
  8004209aa9:	48 b8 72 66 23 04 80 	movabs $0x8004236672,%rax
  8004209ab0:	00 00 00 
  8004209ab3:	0f b7 00             	movzwl (%rax),%eax
  8004209ab6:	0f b7 c0             	movzwl %ax,%eax
  8004209ab9:	89 c7                	mov    %eax,%edi
  8004209abb:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004209ac2:	00 00 00 
  8004209ac5:	ff d0                	callq  *%rax
  8004209ac7:	c9                   	leaveq 
  8004209ac8:	c3                   	retq   

0000008004209ac9 <irq_setmask_8259A>:
  8004209ac9:	55                   	push   %rbp
  8004209aca:	48 89 e5             	mov    %rsp,%rbp
  8004209acd:	48 83 ec 30          	sub    $0x30,%rsp
  8004209ad1:	89 f8                	mov    %edi,%eax
  8004209ad3:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209ad7:	48 b8 72 66 23 04 80 	movabs $0x8004236672,%rax
  8004209ade:	00 00 00 
  8004209ae1:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209ae5:	66 89 10             	mov    %dx,(%rax)
  8004209ae8:	48 b8 68 e2 4d 04 80 	movabs $0x80044de268,%rax
  8004209aef:	00 00 00 
  8004209af2:	0f b6 00             	movzbl (%rax),%eax
  8004209af5:	83 f0 01             	xor    $0x1,%eax
  8004209af8:	84 c0                	test   %al,%al
  8004209afa:	74 05                	je     8004209b01 <irq_setmask_8259A+0x38>
  8004209afc:	e9 b7 00 00 00       	jmpq   8004209bb8 <irq_setmask_8259A+0xef>
  8004209b01:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b05:	0f b6 c0             	movzbl %al,%eax
  8004209b08:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b0f:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b12:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b16:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b19:	ee                   	out    %al,(%dx)
  8004209b1a:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b1e:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b22:	0f b6 c0             	movzbl %al,%eax
  8004209b25:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b2c:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b2f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b33:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b36:	ee                   	out    %al,(%dx)
  8004209b37:	48 bf 35 01 22 04 80 	movabs $0x8004220135,%rdi
  8004209b3e:	00 00 00 
  8004209b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b4d:	00 00 00 
  8004209b50:	ff d2                	callq  *%rdx
  8004209b52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b59:	eb 3c                	jmp    8004209b97 <irq_setmask_8259A+0xce>
  8004209b5b:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b5f:	f7 d0                	not    %eax
  8004209b61:	89 c2                	mov    %eax,%edx
  8004209b63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b66:	89 c1                	mov    %eax,%ecx
  8004209b68:	d3 fa                	sar    %cl,%edx
  8004209b6a:	89 d0                	mov    %edx,%eax
  8004209b6c:	83 e0 01             	and    $0x1,%eax
  8004209b6f:	85 c0                	test   %eax,%eax
  8004209b71:	74 20                	je     8004209b93 <irq_setmask_8259A+0xca>
  8004209b73:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b76:	89 c6                	mov    %eax,%esi
  8004209b78:	48 bf 49 01 22 04 80 	movabs $0x8004220149,%rdi
  8004209b7f:	00 00 00 
  8004209b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b8e:	00 00 00 
  8004209b91:	ff d2                	callq  *%rdx
  8004209b93:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209b97:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209b9b:	7e be                	jle    8004209b5b <irq_setmask_8259A+0x92>
  8004209b9d:	48 bf 4d 01 22 04 80 	movabs $0x800422014d,%rdi
  8004209ba4:	00 00 00 
  8004209ba7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bac:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209bb3:	00 00 00 
  8004209bb6:	ff d2                	callq  *%rdx
  8004209bb8:	c9                   	leaveq 
  8004209bb9:	c3                   	retq   

0000008004209bba <irq_eoi>:
  8004209bba:	55                   	push   %rbp
  8004209bbb:	48 89 e5             	mov    %rsp,%rbp
  8004209bbe:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bc2:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209bc9:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209bcd:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bd1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209bd4:	ee                   	out    %al,(%dx)
  8004209bd5:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209bdc:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209be0:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209be4:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209be7:	ee                   	out    %al,(%dx)
  8004209be8:	c9                   	leaveq 
  8004209be9:	c3                   	retq   

0000008004209bea <putch>:
  8004209bea:	55                   	push   %rbp
  8004209beb:	48 89 e5             	mov    %rsp,%rbp
  8004209bee:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bf2:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209bf5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209bf9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209bfc:	89 c7                	mov    %eax,%edi
  8004209bfe:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004209c05:	00 00 00 
  8004209c08:	ff d0                	callq  *%rax
  8004209c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c0e:	48 83 c0 04          	add    $0x4,%rax
  8004209c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c16:	c9                   	leaveq 
  8004209c17:	c3                   	retq   

0000008004209c18 <vcprintf>:
  8004209c18:	55                   	push   %rbp
  8004209c19:	48 89 e5             	mov    %rsp,%rbp
  8004209c1c:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c24:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c28:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c37:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c3a:	48 89 08             	mov    %rcx,(%rax)
  8004209c3d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c41:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c45:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c4d:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c55:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c59:	48 89 c6             	mov    %rax,%rsi
  8004209c5c:	48 bf ea 9b 20 04 80 	movabs $0x8004209bea,%rdi
  8004209c63:	00 00 00 
  8004209c66:	48 b8 a2 03 21 04 80 	movabs $0x80042103a2,%rax
  8004209c6d:	00 00 00 
  8004209c70:	ff d0                	callq  *%rax
  8004209c72:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c75:	c9                   	leaveq 
  8004209c76:	c3                   	retq   

0000008004209c77 <cprintf>:
  8004209c77:	55                   	push   %rbp
  8004209c78:	48 89 e5             	mov    %rsp,%rbp
  8004209c7b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c82:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c89:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c90:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209c97:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209c9e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209ca5:	84 c0                	test   %al,%al
  8004209ca7:	74 20                	je     8004209cc9 <cprintf+0x52>
  8004209ca9:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cad:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209cb1:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cb5:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cb9:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cbd:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209cc1:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209cc5:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209cc9:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cd0:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209cd7:	00 00 00 
  8004209cda:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209ce1:	00 00 00 
  8004209ce4:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209ce8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209cef:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209cf6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209cfd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d04:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d0b:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d0e:	48 89 08             	mov    %rcx,(%rax)
  8004209d11:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d15:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d19:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d1d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d21:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d28:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d2f:	48 89 d6             	mov    %rdx,%rsi
  8004209d32:	48 89 c7             	mov    %rax,%rdi
  8004209d35:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  8004209d3c:	00 00 00 
  8004209d3f:	ff d0                	callq  *%rax
  8004209d41:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d47:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d4d:	c9                   	leaveq 
  8004209d4e:	c3                   	retq   

0000008004209d4f <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d4f:	55                   	push   %rbp
  8004209d50:	48 89 e5             	mov    %rsp,%rbp
  8004209d53:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d5b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209d5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d65:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d69:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d6c:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d72:	c9                   	leaveq 
  8004209d73:	c3                   	retq   

0000008004209d74 <lock_kernel>:
  8004209d74:	55                   	push   %rbp
  8004209d75:	48 89 e5             	mov    %rsp,%rbp
  8004209d78:	48 bf 60 67 23 04 80 	movabs $0x8004236760,%rdi
  8004209d7f:	00 00 00 
  8004209d82:	48 b8 1d 83 21 04 80 	movabs $0x800421831d,%rax
  8004209d89:	00 00 00 
  8004209d8c:	ff d0                	callq  *%rax
  8004209d8e:	5d                   	pop    %rbp
  8004209d8f:	c3                   	retq   

0000008004209d90 <trapname>:
  8004209d90:	55                   	push   %rbp
  8004209d91:	48 89 e5             	mov    %rsp,%rbp
  8004209d94:	48 83 ec 04          	sub    $0x4,%rsp
  8004209d98:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209d9b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209d9e:	83 f8 13             	cmp    $0x13,%eax
  8004209da1:	77 16                	ja     8004209db9 <trapname+0x29>
  8004209da3:	48 b8 60 05 22 04 80 	movabs $0x8004220560,%rax
  8004209daa:	00 00 00 
  8004209dad:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209db0:	48 63 d2             	movslq %edx,%rdx
  8004209db3:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209db7:	eb 34                	jmp    8004209ded <trapname+0x5d>
  8004209db9:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dbd:	75 0c                	jne    8004209dcb <trapname+0x3b>
  8004209dbf:	48 b8 60 01 22 04 80 	movabs $0x8004220160,%rax
  8004209dc6:	00 00 00 
  8004209dc9:	eb 22                	jmp    8004209ded <trapname+0x5d>
  8004209dcb:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209dcf:	7e 12                	jle    8004209de3 <trapname+0x53>
  8004209dd1:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209dd5:	7f 0c                	jg     8004209de3 <trapname+0x53>
  8004209dd7:	48 b8 6c 01 22 04 80 	movabs $0x800422016c,%rax
  8004209dde:	00 00 00 
  8004209de1:	eb 0a                	jmp    8004209ded <trapname+0x5d>
  8004209de3:	48 b8 7f 01 22 04 80 	movabs $0x800422017f,%rax
  8004209dea:	00 00 00 
  8004209ded:	c9                   	leaveq 
  8004209dee:	c3                   	retq   

0000008004209def <trap_init>:
  8004209def:	55                   	push   %rbp
  8004209df0:	48 89 e5             	mov    %rsp,%rbp
  8004209df3:	48 83 ec 10          	sub    $0x10,%rsp
  8004209df7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209dfe:	e9 7d 01 00 00       	jmpq   8004209f80 <trap_init+0x191>
  8004209e03:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209e0a:	00 00 00 
  8004209e0d:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  8004209e14:	00 00 00 
  8004209e17:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e1a:	48 63 c9             	movslq %ecx,%rcx
  8004209e1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e21:	48 01 ca             	add    %rcx,%rdx
  8004209e24:	66 89 02             	mov    %ax,(%rdx)
  8004209e27:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e2e:	00 00 00 
  8004209e31:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e34:	48 63 d2             	movslq %edx,%rdx
  8004209e37:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e3b:	48 01 d0             	add    %rdx,%rax
  8004209e3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e44:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e4b:	00 00 00 
  8004209e4e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e51:	48 63 d2             	movslq %edx,%rdx
  8004209e54:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e58:	48 01 d0             	add    %rdx,%rax
  8004209e5b:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e5f:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e62:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e65:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e6c:	00 00 00 
  8004209e6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e72:	48 63 d2             	movslq %edx,%rdx
  8004209e75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e79:	48 01 d0             	add    %rdx,%rax
  8004209e7c:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e80:	83 e2 07             	and    $0x7,%edx
  8004209e83:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e86:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e8d:	00 00 00 
  8004209e90:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e93:	48 63 d2             	movslq %edx,%rdx
  8004209e96:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e9a:	48 01 d0             	add    %rdx,%rax
  8004209e9d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ea1:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ea4:	83 ca 0e             	or     $0xe,%edx
  8004209ea7:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eaa:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209eb1:	00 00 00 
  8004209eb4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209eb7:	48 63 d2             	movslq %edx,%rdx
  8004209eba:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209ebe:	48 01 d0             	add    %rdx,%rax
  8004209ec1:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ec5:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ec8:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ecb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209ed2:	00 00 00 
  8004209ed5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ed8:	48 63 d2             	movslq %edx,%rdx
  8004209edb:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209edf:	48 01 d0             	add    %rdx,%rax
  8004209ee2:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ee6:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ee9:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209ef3:	00 00 00 
  8004209ef6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ef9:	48 63 d2             	movslq %edx,%rdx
  8004209efc:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f00:	48 01 d0             	add    %rdx,%rax
  8004209f03:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f07:	83 ca 80             	or     $0xffffff80,%edx
  8004209f0a:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f0d:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209f14:	00 00 00 
  8004209f17:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f1b:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  8004209f22:	00 00 00 
  8004209f25:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f28:	48 63 c9             	movslq %ecx,%rcx
  8004209f2b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f2f:	48 01 ca             	add    %rcx,%rdx
  8004209f32:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f36:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209f3d:	00 00 00 
  8004209f40:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f44:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  8004209f4b:	00 00 00 
  8004209f4e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f51:	48 63 c9             	movslq %ecx,%rcx
  8004209f54:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f58:	48 01 ca             	add    %rcx,%rdx
  8004209f5b:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f5e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209f65:	00 00 00 
  8004209f68:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f6b:	48 63 d2             	movslq %edx,%rdx
  8004209f6e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f72:	48 01 d0             	add    %rdx,%rax
  8004209f75:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f7c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f80:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f83:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f88:	0f 86 75 fe ff ff    	jbe    8004209e03 <trap_init+0x14>
  8004209f8e:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  8004209f95:	00 00 00 
  8004209f98:	89 c2                	mov    %eax,%edx
  8004209f9a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	66 89 10             	mov    %dx,(%rax)
  8004209fa7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fae:	00 00 00 
  8004209fb1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fb7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fbe:	00 00 00 
  8004209fc1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fc5:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fc8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fcb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fd2:	00 00 00 
  8004209fd5:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fd9:	83 e2 07             	and    $0x7,%edx
  8004209fdc:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fdf:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fe6:	00 00 00 
  8004209fe9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fed:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ff0:	83 ca 0e             	or     $0xe,%edx
  8004209ff3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ff6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209ffd:	00 00 00 
  800420a000:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a004:	83 e2 ef             	and    $0xffffffef,%edx
  800420a007:	88 50 05             	mov    %dl,0x5(%rax)
  800420a00a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a011:	00 00 00 
  800420a014:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a018:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a01b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a01e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a025:	00 00 00 
  800420a028:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a02c:	83 ca 80             	or     $0xffffff80,%edx
  800420a02f:	88 50 05             	mov    %dl,0x5(%rax)
  800420a032:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a039:	00 00 00 
  800420a03c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a040:	89 c2                	mov    %eax,%edx
  800420a042:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a049:	00 00 00 
  800420a04c:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a050:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a057:	00 00 00 
  800420a05a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a05e:	89 c2                	mov    %eax,%edx
  800420a060:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a067:	00 00 00 
  800420a06a:	89 50 08             	mov    %edx,0x8(%rax)
  800420a06d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a074:	00 00 00 
  800420a077:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a07e:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a085:	00 00 00 
  800420a088:	89 c2                	mov    %eax,%edx
  800420a08a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a091:	00 00 00 
  800420a094:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a098:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a09f:	00 00 00 
  800420a0a2:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0a8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0af:	00 00 00 
  800420a0b2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0b9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0bc:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0c3:	00 00 00 
  800420a0c6:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0ca:	83 e2 07             	and    $0x7,%edx
  800420a0cd:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0d0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0d7:	00 00 00 
  800420a0da:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0e1:	83 ca 0e             	or     $0xe,%edx
  800420a0e4:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0e7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0ee:	00 00 00 
  800420a0f1:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0f5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0f8:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0fb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a102:	00 00 00 
  800420a105:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a109:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a10c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a10f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a116:	00 00 00 
  800420a119:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a11d:	83 ca 80             	or     $0xffffff80,%edx
  800420a120:	88 50 15             	mov    %dl,0x15(%rax)
  800420a123:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a12a:	00 00 00 
  800420a12d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a131:	89 c2                	mov    %eax,%edx
  800420a133:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a13a:	00 00 00 
  800420a13d:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a141:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a148:	00 00 00 
  800420a14b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a14f:	89 c2                	mov    %eax,%edx
  800420a151:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a158:	00 00 00 
  800420a15b:	89 50 18             	mov    %edx,0x18(%rax)
  800420a15e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a165:	00 00 00 
  800420a168:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a16f:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a176:	00 00 00 
  800420a179:	89 c2                	mov    %eax,%edx
  800420a17b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a182:	00 00 00 
  800420a185:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a189:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a190:	00 00 00 
  800420a193:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a199:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1a0:	00 00 00 
  800420a1a3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1a7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1aa:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1ad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1b4:	00 00 00 
  800420a1b7:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1bb:	83 e2 07             	and    $0x7,%edx
  800420a1be:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1c1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1c8:	00 00 00 
  800420a1cb:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1cf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1d2:	83 ca 0e             	or     $0xe,%edx
  800420a1d5:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1d8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1df:	00 00 00 
  800420a1e2:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1e6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1e9:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1ec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1f3:	00 00 00 
  800420a1f6:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1fa:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a1fd:	88 50 25             	mov    %dl,0x25(%rax)
  800420a200:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a207:	00 00 00 
  800420a20a:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a20e:	83 ca 80             	or     $0xffffff80,%edx
  800420a211:	88 50 25             	mov    %dl,0x25(%rax)
  800420a214:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a21b:	00 00 00 
  800420a21e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a222:	89 c2                	mov    %eax,%edx
  800420a224:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a22b:	00 00 00 
  800420a22e:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a232:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a239:	00 00 00 
  800420a23c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a240:	89 c2                	mov    %eax,%edx
  800420a242:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a249:	00 00 00 
  800420a24c:	89 50 28             	mov    %edx,0x28(%rax)
  800420a24f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a256:	00 00 00 
  800420a259:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a260:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a267:	00 00 00 
  800420a26a:	89 c2                	mov    %eax,%edx
  800420a26c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a273:	00 00 00 
  800420a276:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a27a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a281:	00 00 00 
  800420a284:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a28a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a291:	00 00 00 
  800420a294:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a298:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a29b:	88 50 34             	mov    %dl,0x34(%rax)
  800420a29e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2a5:	00 00 00 
  800420a2a8:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2ac:	83 e2 07             	and    $0x7,%edx
  800420a2af:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2b2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2b9:	00 00 00 
  800420a2bc:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2c0:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2c3:	83 ca 0e             	or     $0xe,%edx
  800420a2c6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2c9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2d0:	00 00 00 
  800420a2d3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2da:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2dd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2e4:	00 00 00 
  800420a2e7:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2eb:	83 ca 60             	or     $0x60,%edx
  800420a2ee:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2f1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2f8:	00 00 00 
  800420a2fb:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a302:	88 50 35             	mov    %dl,0x35(%rax)
  800420a305:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a30c:	00 00 00 
  800420a30f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a313:	89 c2                	mov    %eax,%edx
  800420a315:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a31c:	00 00 00 
  800420a31f:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a323:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a32a:	00 00 00 
  800420a32d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a331:	89 c2                	mov    %eax,%edx
  800420a333:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a33a:	00 00 00 
  800420a33d:	89 50 38             	mov    %edx,0x38(%rax)
  800420a340:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a347:	00 00 00 
  800420a34a:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a351:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a358:	00 00 00 
  800420a35b:	89 c2                	mov    %eax,%edx
  800420a35d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a364:	00 00 00 
  800420a367:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a36b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a372:	00 00 00 
  800420a375:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a37b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a382:	00 00 00 
  800420a385:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a389:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a38c:	88 50 44             	mov    %dl,0x44(%rax)
  800420a38f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a396:	00 00 00 
  800420a399:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a39d:	83 e2 07             	and    $0x7,%edx
  800420a3a0:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3a3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3aa:	00 00 00 
  800420a3ad:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3b1:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3b4:	83 ca 0e             	or     $0xe,%edx
  800420a3b7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ba:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3c1:	00 00 00 
  800420a3c4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3c8:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3cb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ce:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3d5:	00 00 00 
  800420a3d8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3dc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3df:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3e2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3e9:	00 00 00 
  800420a3ec:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3f0:	83 ca 80             	or     $0xffffff80,%edx
  800420a3f3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3f6:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a3fd:	00 00 00 
  800420a400:	48 c1 e8 10          	shr    $0x10,%rax
  800420a404:	89 c2                	mov    %eax,%edx
  800420a406:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a40d:	00 00 00 
  800420a410:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a414:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a41b:	00 00 00 
  800420a41e:	48 c1 e8 20          	shr    $0x20,%rax
  800420a422:	89 c2                	mov    %eax,%edx
  800420a424:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a42b:	00 00 00 
  800420a42e:	89 50 48             	mov    %edx,0x48(%rax)
  800420a431:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a438:	00 00 00 
  800420a43b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a442:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a449:	00 00 00 
  800420a44c:	89 c2                	mov    %eax,%edx
  800420a44e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a455:	00 00 00 
  800420a458:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a45c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a463:	00 00 00 
  800420a466:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a46c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a473:	00 00 00 
  800420a476:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a47a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a47d:	88 50 54             	mov    %dl,0x54(%rax)
  800420a480:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a487:	00 00 00 
  800420a48a:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a48e:	83 e2 07             	and    $0x7,%edx
  800420a491:	88 50 54             	mov    %dl,0x54(%rax)
  800420a494:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a49b:	00 00 00 
  800420a49e:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4a5:	83 ca 0e             	or     $0xe,%edx
  800420a4a8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4ab:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4b2:	00 00 00 
  800420a4b5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4b9:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4bc:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4bf:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4c6:	00 00 00 
  800420a4c9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4d0:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4d3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4da:	00 00 00 
  800420a4dd:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4e1:	83 ca 80             	or     $0xffffff80,%edx
  800420a4e4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4e7:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a4ee:	00 00 00 
  800420a4f1:	48 c1 e8 10          	shr    $0x10,%rax
  800420a4f5:	89 c2                	mov    %eax,%edx
  800420a4f7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4fe:	00 00 00 
  800420a501:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a505:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a50c:	00 00 00 
  800420a50f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a513:	89 c2                	mov    %eax,%edx
  800420a515:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a51c:	00 00 00 
  800420a51f:	89 50 58             	mov    %edx,0x58(%rax)
  800420a522:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a529:	00 00 00 
  800420a52c:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a533:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a53a:	00 00 00 
  800420a53d:	89 c2                	mov    %eax,%edx
  800420a53f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a546:	00 00 00 
  800420a549:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a54d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a554:	00 00 00 
  800420a557:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a55d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a564:	00 00 00 
  800420a567:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a56b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a56e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a571:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a578:	00 00 00 
  800420a57b:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a57f:	83 e2 07             	and    $0x7,%edx
  800420a582:	88 50 64             	mov    %dl,0x64(%rax)
  800420a585:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a58c:	00 00 00 
  800420a58f:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a593:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a596:	83 ca 0e             	or     $0xe,%edx
  800420a599:	88 50 65             	mov    %dl,0x65(%rax)
  800420a59c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5a3:	00 00 00 
  800420a5a6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5aa:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5ad:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5b0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5be:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5c1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5c4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5cb:	00 00 00 
  800420a5ce:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5d2:	83 ca 80             	or     $0xffffff80,%edx
  800420a5d5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5d8:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5df:	00 00 00 
  800420a5e2:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5e6:	89 c2                	mov    %eax,%edx
  800420a5e8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5ef:	00 00 00 
  800420a5f2:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a5f6:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5fd:	00 00 00 
  800420a600:	48 c1 e8 20          	shr    $0x20,%rax
  800420a604:	89 c2                	mov    %eax,%edx
  800420a606:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a60d:	00 00 00 
  800420a610:	89 50 68             	mov    %edx,0x68(%rax)
  800420a613:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a61a:	00 00 00 
  800420a61d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a624:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a62b:	00 00 00 
  800420a62e:	89 c2                	mov    %eax,%edx
  800420a630:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a637:	00 00 00 
  800420a63a:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a63e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a645:	00 00 00 
  800420a648:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a64e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a655:	00 00 00 
  800420a658:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a65c:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a65f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a662:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a669:	00 00 00 
  800420a66c:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a670:	83 e2 07             	and    $0x7,%edx
  800420a673:	88 50 74             	mov    %dl,0x74(%rax)
  800420a676:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a67d:	00 00 00 
  800420a680:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a684:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a687:	83 ca 0e             	or     $0xe,%edx
  800420a68a:	88 50 75             	mov    %dl,0x75(%rax)
  800420a68d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a694:	00 00 00 
  800420a697:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a69b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a69e:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6a1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6a8:	00 00 00 
  800420a6ab:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6af:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6b2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6b5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6bc:	00 00 00 
  800420a6bf:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6c3:	83 ca 80             	or     $0xffffff80,%edx
  800420a6c6:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6c9:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6d0:	00 00 00 
  800420a6d3:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6d7:	89 c2                	mov    %eax,%edx
  800420a6d9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6e0:	00 00 00 
  800420a6e3:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a6e7:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6ee:	00 00 00 
  800420a6f1:	48 c1 e8 20          	shr    $0x20,%rax
  800420a6f5:	89 c2                	mov    %eax,%edx
  800420a6f7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6fe:	00 00 00 
  800420a701:	89 50 78             	mov    %edx,0x78(%rax)
  800420a704:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a70b:	00 00 00 
  800420a70e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a715:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a71c:	00 00 00 
  800420a71f:	89 c2                	mov    %eax,%edx
  800420a721:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a728:	00 00 00 
  800420a72b:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a732:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a739:	00 00 00 
  800420a73c:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a743:	08 00 
  800420a745:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a74c:	00 00 00 
  800420a74f:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a756:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a759:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a75f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a766:	00 00 00 
  800420a769:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a770:	83 e2 07             	and    $0x7,%edx
  800420a773:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a779:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a780:	00 00 00 
  800420a783:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a78a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a78d:	83 ca 0e             	or     $0xe,%edx
  800420a790:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a796:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a79d:	00 00 00 
  800420a7a0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7aa:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7b0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a7b7:	00 00 00 
  800420a7ba:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7c1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7c4:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7ca:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a7d1:	00 00 00 
  800420a7d4:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7db:	83 ca 80             	or     $0xffffff80,%edx
  800420a7de:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7e4:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a7eb:	00 00 00 
  800420a7ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7f2:	89 c2                	mov    %eax,%edx
  800420a7f4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a7fb:	00 00 00 
  800420a7fe:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a805:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a80c:	00 00 00 
  800420a80f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a813:	89 c2                	mov    %eax,%edx
  800420a815:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a81c:	00 00 00 
  800420a81f:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a825:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a82c:	00 00 00 
  800420a82f:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a836:	00 00 00 
  800420a839:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a840:	00 00 00 
  800420a843:	89 c2                	mov    %eax,%edx
  800420a845:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a84c:	00 00 00 
  800420a84f:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a856:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a85d:	00 00 00 
  800420a860:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a867:	08 00 
  800420a869:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a870:	00 00 00 
  800420a873:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a87a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a87d:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a883:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a88a:	00 00 00 
  800420a88d:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a894:	83 e2 07             	and    $0x7,%edx
  800420a897:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a89d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8a4:	00 00 00 
  800420a8a7:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8b1:	83 ca 0e             	or     $0xe,%edx
  800420a8b4:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ba:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8c1:	00 00 00 
  800420a8c4:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8ce:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8d4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8db:	00 00 00 
  800420a8de:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8e8:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ee:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8f5:	00 00 00 
  800420a8f8:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a902:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a908:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a90f:	00 00 00 
  800420a912:	48 c1 e8 10          	shr    $0x10,%rax
  800420a916:	89 c2                	mov    %eax,%edx
  800420a918:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a91f:	00 00 00 
  800420a922:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a929:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a930:	00 00 00 
  800420a933:	48 c1 e8 20          	shr    $0x20,%rax
  800420a937:	89 c2                	mov    %eax,%edx
  800420a939:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a940:	00 00 00 
  800420a943:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a949:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a950:	00 00 00 
  800420a953:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a95a:	00 00 00 
  800420a95d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a964:	00 00 00 
  800420a967:	89 c2                	mov    %eax,%edx
  800420a969:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a970:	00 00 00 
  800420a973:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a97a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a981:	00 00 00 
  800420a984:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a98b:	08 00 
  800420a98d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a994:	00 00 00 
  800420a997:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a99e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9a1:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9a7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9ae:	00 00 00 
  800420a9b1:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9b8:	83 e2 07             	and    $0x7,%edx
  800420a9bb:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9c1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9c8:	00 00 00 
  800420a9cb:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9d5:	83 ca 0e             	or     $0xe,%edx
  800420a9d8:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9de:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9e5:	00 00 00 
  800420a9e8:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9f2:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9f8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9ff:	00 00 00 
  800420aa02:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa09:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa0c:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa12:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa19:	00 00 00 
  800420aa1c:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa23:	83 ca 80             	or     $0xffffff80,%edx
  800420aa26:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa2c:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa33:	00 00 00 
  800420aa36:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa3a:	89 c2                	mov    %eax,%edx
  800420aa3c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa43:	00 00 00 
  800420aa46:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa4d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa54:	00 00 00 
  800420aa57:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa5b:	89 c2                	mov    %eax,%edx
  800420aa5d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa64:	00 00 00 
  800420aa67:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa6d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa74:	00 00 00 
  800420aa77:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa7e:	00 00 00 
  800420aa81:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420aa88:	00 00 00 
  800420aa8b:	89 c2                	mov    %eax,%edx
  800420aa8d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa94:	00 00 00 
  800420aa97:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aa9e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aaa5:	00 00 00 
  800420aaa8:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aaaf:	08 00 
  800420aab1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aab8:	00 00 00 
  800420aabb:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aac2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aac5:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aacb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aad2:	00 00 00 
  800420aad5:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aadc:	83 e2 07             	and    $0x7,%edx
  800420aadf:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aae5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aaec:	00 00 00 
  800420aaef:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aaf6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aaf9:	83 ca 0e             	or     $0xe,%edx
  800420aafc:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab02:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab09:	00 00 00 
  800420ab0c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab13:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab16:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab1c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab23:	00 00 00 
  800420ab26:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab2d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab30:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab36:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab3d:	00 00 00 
  800420ab40:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab47:	83 ca 80             	or     $0xffffff80,%edx
  800420ab4a:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab50:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab57:	00 00 00 
  800420ab5a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab5e:	89 c2                	mov    %eax,%edx
  800420ab60:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab67:	00 00 00 
  800420ab6a:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab71:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab78:	00 00 00 
  800420ab7b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab7f:	89 c2                	mov    %eax,%edx
  800420ab81:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab88:	00 00 00 
  800420ab8b:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab91:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab98:	00 00 00 
  800420ab9b:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420aba2:	00 00 00 
  800420aba5:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420abac:	00 00 00 
  800420abaf:	89 c2                	mov    %eax,%edx
  800420abb1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abb8:	00 00 00 
  800420abbb:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abc2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abc9:	00 00 00 
  800420abcc:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abd3:	08 00 
  800420abd5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abdc:	00 00 00 
  800420abdf:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420abe6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abe9:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420abef:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abf6:	00 00 00 
  800420abf9:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac00:	83 e2 07             	and    $0x7,%edx
  800420ac03:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac09:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac10:	00 00 00 
  800420ac13:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac1a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac1d:	83 ca 0e             	or     $0xe,%edx
  800420ac20:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac26:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac2d:	00 00 00 
  800420ac30:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac37:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac3a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac40:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac47:	00 00 00 
  800420ac4a:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac51:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac54:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac5a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac61:	00 00 00 
  800420ac64:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac6b:	83 ca 80             	or     $0xffffff80,%edx
  800420ac6e:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac74:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac7b:	00 00 00 
  800420ac7e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac82:	89 c2                	mov    %eax,%edx
  800420ac84:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac8b:	00 00 00 
  800420ac8e:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420ac95:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac9c:	00 00 00 
  800420ac9f:	48 c1 e8 20          	shr    $0x20,%rax
  800420aca3:	89 c2                	mov    %eax,%edx
  800420aca5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420acac:	00 00 00 
  800420acaf:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acb5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420acbc:	00 00 00 
  800420acbf:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420acc6:	00 00 00 
  800420acc9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420acd0:	00 00 00 
  800420acd3:	89 c2                	mov    %eax,%edx
  800420acd5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420acdc:	00 00 00 
  800420acdf:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420ace6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aced:	00 00 00 
  800420acf0:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420acf7:	08 00 
  800420acf9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad00:	00 00 00 
  800420ad03:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad0a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad0d:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad13:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad1a:	00 00 00 
  800420ad1d:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad24:	83 e2 07             	and    $0x7,%edx
  800420ad27:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad2d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad34:	00 00 00 
  800420ad37:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad3e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad41:	83 ca 0e             	or     $0xe,%edx
  800420ad44:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad4a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad51:	00 00 00 
  800420ad54:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad5b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad5e:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad64:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad6b:	00 00 00 
  800420ad6e:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad75:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad78:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad7e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad85:	00 00 00 
  800420ad88:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad8f:	83 ca 80             	or     $0xffffff80,%edx
  800420ad92:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad98:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ad9f:	00 00 00 
  800420ada2:	48 c1 e8 10          	shr    $0x10,%rax
  800420ada6:	89 c2                	mov    %eax,%edx
  800420ada8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420adaf:	00 00 00 
  800420adb2:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420adb9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420adc0:	00 00 00 
  800420adc3:	48 c1 e8 20          	shr    $0x20,%rax
  800420adc7:	89 c2                	mov    %eax,%edx
  800420adc9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420add0:	00 00 00 
  800420add3:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420add9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ade0:	00 00 00 
  800420ade3:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420adea:	00 00 00 
  800420aded:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420adf4:	00 00 00 
  800420adf7:	89 c2                	mov    %eax,%edx
  800420adf9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae00:	00 00 00 
  800420ae03:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae0a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae11:	00 00 00 
  800420ae14:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae1b:	08 00 
  800420ae1d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae24:	00 00 00 
  800420ae27:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae2e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae31:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae37:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae3e:	00 00 00 
  800420ae41:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae48:	83 e2 07             	and    $0x7,%edx
  800420ae4b:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae51:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae58:	00 00 00 
  800420ae5b:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae62:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae65:	83 ca 0e             	or     $0xe,%edx
  800420ae68:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae6e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae75:	00 00 00 
  800420ae78:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae7f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae82:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae88:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae8f:	00 00 00 
  800420ae92:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae99:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae9c:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aea2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aea9:	00 00 00 
  800420aeac:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aeb3:	83 ca 80             	or     $0xffffff80,%edx
  800420aeb6:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aebc:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aec3:	00 00 00 
  800420aec6:	48 c1 e8 10          	shr    $0x10,%rax
  800420aeca:	89 c2                	mov    %eax,%edx
  800420aecc:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aed3:	00 00 00 
  800420aed6:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aedd:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aee4:	00 00 00 
  800420aee7:	48 c1 e8 20          	shr    $0x20,%rax
  800420aeeb:	89 c2                	mov    %eax,%edx
  800420aeed:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aef4:	00 00 00 
  800420aef7:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420aefd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af04:	00 00 00 
  800420af07:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af0e:	00 00 00 
  800420af11:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420af18:	00 00 00 
  800420af1b:	89 c2                	mov    %eax,%edx
  800420af1d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af24:	00 00 00 
  800420af27:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af2e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af35:	00 00 00 
  800420af38:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af3f:	08 00 
  800420af41:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af48:	00 00 00 
  800420af4b:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af52:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af55:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af5b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af62:	00 00 00 
  800420af65:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af6c:	83 e2 07             	and    $0x7,%edx
  800420af6f:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af75:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af7c:	00 00 00 
  800420af7f:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af86:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af89:	83 ca 0e             	or     $0xe,%edx
  800420af8c:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af92:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af99:	00 00 00 
  800420af9c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afa3:	83 e2 ef             	and    $0xffffffef,%edx
  800420afa6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afac:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420afb3:	00 00 00 
  800420afb6:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afbd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afc0:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afc6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420afcd:	00 00 00 
  800420afd0:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afd7:	83 ca 80             	or     $0xffffff80,%edx
  800420afda:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afe0:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420afe7:	00 00 00 
  800420afea:	48 c1 e8 10          	shr    $0x10,%rax
  800420afee:	89 c2                	mov    %eax,%edx
  800420aff0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aff7:	00 00 00 
  800420affa:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b001:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420b008:	00 00 00 
  800420b00b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b00f:	89 c2                	mov    %eax,%edx
  800420b011:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b018:	00 00 00 
  800420b01b:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b021:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b028:	00 00 00 
  800420b02b:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b032:	00 00 00 
  800420b035:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b03c:	00 00 00 
  800420b03f:	89 c2                	mov    %eax,%edx
  800420b041:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b048:	00 00 00 
  800420b04b:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b052:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b059:	00 00 00 
  800420b05c:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b063:	08 00 
  800420b065:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b06c:	00 00 00 
  800420b06f:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b076:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b079:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b07f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b086:	00 00 00 
  800420b089:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b090:	83 e2 07             	and    $0x7,%edx
  800420b093:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b099:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0a0:	00 00 00 
  800420b0a3:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0aa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0ad:	83 ca 0e             	or     $0xe,%edx
  800420b0b0:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0b6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0bd:	00 00 00 
  800420b0c0:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0c7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0ca:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0d0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0d7:	00 00 00 
  800420b0da:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0e1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0e4:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0ea:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0f1:	00 00 00 
  800420b0f4:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0fb:	83 ca 80             	or     $0xffffff80,%edx
  800420b0fe:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b104:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b10b:	00 00 00 
  800420b10e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b112:	89 c2                	mov    %eax,%edx
  800420b114:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b11b:	00 00 00 
  800420b11e:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b125:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b12c:	00 00 00 
  800420b12f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b133:	89 c2                	mov    %eax,%edx
  800420b135:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b13c:	00 00 00 
  800420b13f:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b145:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b14c:	00 00 00 
  800420b14f:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b156:	00 00 00 
  800420b159:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b160:	00 00 00 
  800420b163:	89 c2                	mov    %eax,%edx
  800420b165:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b16c:	00 00 00 
  800420b16f:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b176:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b17d:	00 00 00 
  800420b180:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b187:	08 00 
  800420b189:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b190:	00 00 00 
  800420b193:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b19a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b19d:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1a3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1aa:	00 00 00 
  800420b1ad:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1b4:	83 e2 07             	and    $0x7,%edx
  800420b1b7:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1bd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1c4:	00 00 00 
  800420b1c7:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1ce:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1d1:	83 ca 0e             	or     $0xe,%edx
  800420b1d4:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1da:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1e1:	00 00 00 
  800420b1e4:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1eb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1ee:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1f4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1fb:	00 00 00 
  800420b1fe:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b205:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b208:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b20e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b215:	00 00 00 
  800420b218:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b21f:	83 ca 80             	or     $0xffffff80,%edx
  800420b222:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b228:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b22f:	00 00 00 
  800420b232:	48 c1 e8 10          	shr    $0x10,%rax
  800420b236:	89 c2                	mov    %eax,%edx
  800420b238:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b23f:	00 00 00 
  800420b242:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b249:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b250:	00 00 00 
  800420b253:	48 c1 e8 20          	shr    $0x20,%rax
  800420b257:	89 c2                	mov    %eax,%edx
  800420b259:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b260:	00 00 00 
  800420b263:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b269:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b270:	00 00 00 
  800420b273:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b27a:	00 00 00 
  800420b27d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b284:	00 00 00 
  800420b287:	89 c2                	mov    %eax,%edx
  800420b289:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b290:	00 00 00 
  800420b293:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b29a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2a1:	00 00 00 
  800420b2a4:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2ab:	08 00 
  800420b2ad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2b4:	00 00 00 
  800420b2b7:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2be:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2c1:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2c7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2ce:	00 00 00 
  800420b2d1:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2d8:	83 e2 07             	and    $0x7,%edx
  800420b2db:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2e1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2e8:	00 00 00 
  800420b2eb:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2f2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b2f5:	83 ca 0e             	or     $0xe,%edx
  800420b2f8:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2fe:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b305:	00 00 00 
  800420b308:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b30f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b312:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b318:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b31f:	00 00 00 
  800420b322:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b329:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b32c:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b332:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b339:	00 00 00 
  800420b33c:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b343:	83 ca 80             	or     $0xffffff80,%edx
  800420b346:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b34c:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b353:	00 00 00 
  800420b356:	48 c1 e8 10          	shr    $0x10,%rax
  800420b35a:	89 c2                	mov    %eax,%edx
  800420b35c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b363:	00 00 00 
  800420b366:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b36d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b374:	00 00 00 
  800420b377:	48 c1 e8 20          	shr    $0x20,%rax
  800420b37b:	89 c2                	mov    %eax,%edx
  800420b37d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b384:	00 00 00 
  800420b387:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b38d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b394:	00 00 00 
  800420b397:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b39e:	00 00 00 
  800420b3a1:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b3a8:	00 00 00 
  800420b3ab:	89 c2                	mov    %eax,%edx
  800420b3ad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3b4:	00 00 00 
  800420b3b7:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3be:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3c5:	00 00 00 
  800420b3c8:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3cf:	08 00 
  800420b3d1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3d8:	00 00 00 
  800420b3db:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3e2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3e5:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3eb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3f2:	00 00 00 
  800420b3f5:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3fc:	83 e2 07             	and    $0x7,%edx
  800420b3ff:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b405:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b40c:	00 00 00 
  800420b40f:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b416:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b419:	83 ca 0e             	or     $0xe,%edx
  800420b41c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b422:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b429:	00 00 00 
  800420b42c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b433:	83 e2 ef             	and    $0xffffffef,%edx
  800420b436:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b43c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b443:	00 00 00 
  800420b446:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b44d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b450:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b456:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b45d:	00 00 00 
  800420b460:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b467:	83 ca 80             	or     $0xffffff80,%edx
  800420b46a:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b470:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b477:	00 00 00 
  800420b47a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b47e:	89 c2                	mov    %eax,%edx
  800420b480:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b487:	00 00 00 
  800420b48a:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b491:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b498:	00 00 00 
  800420b49b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b49f:	89 c2                	mov    %eax,%edx
  800420b4a1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4a8:	00 00 00 
  800420b4ab:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4b1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4b8:	00 00 00 
  800420b4bb:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4c2:	00 00 00 
  800420b4c5:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b4cc:	00 00 00 
  800420b4cf:	89 c2                	mov    %eax,%edx
  800420b4d1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4d8:	00 00 00 
  800420b4db:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4e2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4e9:	00 00 00 
  800420b4ec:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b4f3:	08 00 
  800420b4f5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4fc:	00 00 00 
  800420b4ff:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b506:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b509:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b50f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b516:	00 00 00 
  800420b519:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b520:	83 e2 07             	and    $0x7,%edx
  800420b523:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b529:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b530:	00 00 00 
  800420b533:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b53a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b53d:	83 ca 0e             	or     $0xe,%edx
  800420b540:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b546:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b54d:	00 00 00 
  800420b550:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b557:	83 e2 ef             	and    $0xffffffef,%edx
  800420b55a:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b560:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b567:	00 00 00 
  800420b56a:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b571:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b574:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b57a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b581:	00 00 00 
  800420b584:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b58b:	83 ca 80             	or     $0xffffff80,%edx
  800420b58e:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b594:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b59b:	00 00 00 
  800420b59e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5a2:	89 c2                	mov    %eax,%edx
  800420b5a4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5ab:	00 00 00 
  800420b5ae:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5b5:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b5bc:	00 00 00 
  800420b5bf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5c3:	89 c2                	mov    %eax,%edx
  800420b5c5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5cc:	00 00 00 
  800420b5cf:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5d5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5dc:	00 00 00 
  800420b5df:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b5e6:	00 00 00 
  800420b5e9:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b5f0:	00 00 00 
  800420b5f3:	89 c2                	mov    %eax,%edx
  800420b5f5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5fc:	00 00 00 
  800420b5ff:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b606:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b60d:	00 00 00 
  800420b610:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b617:	08 00 
  800420b619:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b620:	00 00 00 
  800420b623:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b62a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b62d:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b633:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b63a:	00 00 00 
  800420b63d:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b644:	83 e2 07             	and    $0x7,%edx
  800420b647:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b64d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b654:	00 00 00 
  800420b657:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b65e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b661:	83 ca 0e             	or     $0xe,%edx
  800420b664:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b66a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b671:	00 00 00 
  800420b674:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b67b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b67e:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b684:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b68b:	00 00 00 
  800420b68e:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b695:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b698:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b69e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b6a5:	00 00 00 
  800420b6a8:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6af:	83 ca 80             	or     $0xffffff80,%edx
  800420b6b2:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6b8:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b6bf:	00 00 00 
  800420b6c2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6c6:	89 c2                	mov    %eax,%edx
  800420b6c8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b6cf:	00 00 00 
  800420b6d2:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6d9:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b6e0:	00 00 00 
  800420b6e3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6e7:	89 c2                	mov    %eax,%edx
  800420b6e9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b6f0:	00 00 00 
  800420b6f3:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b6f9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b700:	00 00 00 
  800420b703:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b70a:	00 00 00 
  800420b70d:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b714:	00 00 00 
  800420b717:	89 c2                	mov    %eax,%edx
  800420b719:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b720:	00 00 00 
  800420b723:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b72a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b731:	00 00 00 
  800420b734:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b73b:	08 00 
  800420b73d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b744:	00 00 00 
  800420b747:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b74e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b751:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b757:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b75e:	00 00 00 
  800420b761:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b768:	83 e2 07             	and    $0x7,%edx
  800420b76b:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b771:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b778:	00 00 00 
  800420b77b:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b782:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b785:	83 ca 0e             	or     $0xe,%edx
  800420b788:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b78e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b795:	00 00 00 
  800420b798:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b79f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7a2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7a8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b7af:	00 00 00 
  800420b7b2:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7b9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7bc:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7c2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b7c9:	00 00 00 
  800420b7cc:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7d3:	83 ca 80             	or     $0xffffff80,%edx
  800420b7d6:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7dc:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b7e3:	00 00 00 
  800420b7e6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7ea:	89 c2                	mov    %eax,%edx
  800420b7ec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b7f3:	00 00 00 
  800420b7f6:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b7fd:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b804:	00 00 00 
  800420b807:	48 c1 e8 20          	shr    $0x20,%rax
  800420b80b:	89 c2                	mov    %eax,%edx
  800420b80d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b814:	00 00 00 
  800420b817:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b81d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b824:	00 00 00 
  800420b827:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b82e:	00 00 00 
  800420b831:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b838:	00 00 00 
  800420b83b:	89 c2                	mov    %eax,%edx
  800420b83d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b844:	00 00 00 
  800420b847:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b84e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b855:	00 00 00 
  800420b858:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b85f:	08 00 
  800420b861:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b868:	00 00 00 
  800420b86b:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b872:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b875:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b87b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b882:	00 00 00 
  800420b885:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b88c:	83 e2 07             	and    $0x7,%edx
  800420b88f:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b895:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b89c:	00 00 00 
  800420b89f:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8a9:	83 ca 0e             	or     $0xe,%edx
  800420b8ac:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8b2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b8b9:	00 00 00 
  800420b8bc:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8c6:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8cc:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b8d3:	00 00 00 
  800420b8d6:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8e0:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8e6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b8ed:	00 00 00 
  800420b8f0:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8f7:	83 ca 80             	or     $0xffffff80,%edx
  800420b8fa:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b900:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b907:	00 00 00 
  800420b90a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b90e:	89 c2                	mov    %eax,%edx
  800420b910:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b917:	00 00 00 
  800420b91a:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b921:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b928:	00 00 00 
  800420b92b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b92f:	89 c2                	mov    %eax,%edx
  800420b931:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b938:	00 00 00 
  800420b93b:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b941:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b948:	00 00 00 
  800420b94b:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b952:	00 00 00 
  800420b955:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420b95c:	00 00 00 
  800420b95f:	89 c2                	mov    %eax,%edx
  800420b961:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b968:	00 00 00 
  800420b96b:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b972:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b979:	00 00 00 
  800420b97c:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b983:	08 00 
  800420b985:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b98c:	00 00 00 
  800420b98f:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b996:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b999:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b99f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9a6:	00 00 00 
  800420b9a9:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9b0:	83 e2 07             	and    $0x7,%edx
  800420b9b3:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9b9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9c0:	00 00 00 
  800420b9c3:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9cd:	83 ca 0e             	or     $0xe,%edx
  800420b9d0:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9d6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9dd:	00 00 00 
  800420b9e0:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9ea:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9f0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9f7:	00 00 00 
  800420b9fa:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba01:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba04:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba0a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba11:	00 00 00 
  800420ba14:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba1b:	83 ca 80             	or     $0xffffff80,%edx
  800420ba1e:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba24:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420ba2b:	00 00 00 
  800420ba2e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba32:	89 c2                	mov    %eax,%edx
  800420ba34:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba3b:	00 00 00 
  800420ba3e:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba45:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420ba4c:	00 00 00 
  800420ba4f:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba53:	89 c2                	mov    %eax,%edx
  800420ba55:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba5c:	00 00 00 
  800420ba5f:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba65:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba6c:	00 00 00 
  800420ba6f:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba76:	00 00 00 
  800420ba79:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420ba80:	00 00 00 
  800420ba83:	89 c2                	mov    %eax,%edx
  800420ba85:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba8c:	00 00 00 
  800420ba8f:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420ba96:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba9d:	00 00 00 
  800420baa0:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420baa7:	08 00 
  800420baa9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bab0:	00 00 00 
  800420bab3:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420baba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420babd:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bac3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420baca:	00 00 00 
  800420bacd:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bad4:	83 e2 07             	and    $0x7,%edx
  800420bad7:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420badd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bae4:	00 00 00 
  800420bae7:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420baee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420baf1:	83 ca 0e             	or     $0xe,%edx
  800420baf4:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bafa:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb01:	00 00 00 
  800420bb04:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb0b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb0e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb14:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb1b:	00 00 00 
  800420bb1e:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb25:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb28:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb2e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb35:	00 00 00 
  800420bb38:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb3f:	83 ca 80             	or     $0xffffff80,%edx
  800420bb42:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb48:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420bb4f:	00 00 00 
  800420bb52:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb56:	89 c2                	mov    %eax,%edx
  800420bb58:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb5f:	00 00 00 
  800420bb62:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb69:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420bb70:	00 00 00 
  800420bb73:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb77:	89 c2                	mov    %eax,%edx
  800420bb79:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb80:	00 00 00 
  800420bb83:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb89:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb90:	00 00 00 
  800420bb93:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bb9a:	00 00 00 
  800420bb9d:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bba4:	00 00 00 
  800420bba7:	89 c2                	mov    %eax,%edx
  800420bba9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbb0:	00 00 00 
  800420bbb3:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbba:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbc1:	00 00 00 
  800420bbc4:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbcb:	08 00 
  800420bbcd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbd4:	00 00 00 
  800420bbd7:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbde:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbe1:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bbe7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbee:	00 00 00 
  800420bbf1:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbf8:	83 e2 07             	and    $0x7,%edx
  800420bbfb:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc01:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc08:	00 00 00 
  800420bc0b:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc15:	83 ca 0e             	or     $0xe,%edx
  800420bc18:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc1e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc25:	00 00 00 
  800420bc28:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc32:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc38:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc3f:	00 00 00 
  800420bc42:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc4c:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc52:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc59:	00 00 00 
  800420bc5c:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc63:	83 ca 80             	or     $0xffffff80,%edx
  800420bc66:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc6c:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bc73:	00 00 00 
  800420bc76:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc7a:	89 c2                	mov    %eax,%edx
  800420bc7c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc83:	00 00 00 
  800420bc86:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc8d:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bc94:	00 00 00 
  800420bc97:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc9b:	89 c2                	mov    %eax,%edx
  800420bc9d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bca4:	00 00 00 
  800420bca7:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bcb4:	00 00 00 
  800420bcb7:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcbe:	00 00 00 
  800420bcc1:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bcc8:	00 00 00 
  800420bccb:	89 c2                	mov    %eax,%edx
  800420bccd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bcd4:	00 00 00 
  800420bcd7:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcde:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bce5:	00 00 00 
  800420bce8:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bcef:	08 00 
  800420bcf1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bcf8:	00 00 00 
  800420bcfb:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd05:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd0b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd12:	00 00 00 
  800420bd15:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd1c:	83 e2 07             	and    $0x7,%edx
  800420bd1f:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd25:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd2c:	00 00 00 
  800420bd2f:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd39:	83 ca 0e             	or     $0xe,%edx
  800420bd3c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd42:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd49:	00 00 00 
  800420bd4c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd53:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd56:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd5c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd63:	00 00 00 
  800420bd66:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd70:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd76:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd7d:	00 00 00 
  800420bd80:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd87:	83 ca 80             	or     $0xffffff80,%edx
  800420bd8a:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd90:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bd97:	00 00 00 
  800420bd9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd9e:	89 c2                	mov    %eax,%edx
  800420bda0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bda7:	00 00 00 
  800420bdaa:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdb1:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bdb8:	00 00 00 
  800420bdbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdbf:	89 c2                	mov    %eax,%edx
  800420bdc1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bdc8:	00 00 00 
  800420bdcb:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bdd1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bdd8:	00 00 00 
  800420bddb:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bde2:	00 00 00 
  800420bde5:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bdec:	00 00 00 
  800420bdef:	89 c2                	mov    %eax,%edx
  800420bdf1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bdf8:	00 00 00 
  800420bdfb:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be02:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be09:	00 00 00 
  800420be0c:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be13:	08 00 
  800420be15:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be1c:	00 00 00 
  800420be1f:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be29:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be2f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be36:	00 00 00 
  800420be39:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be40:	83 e2 07             	and    $0x7,%edx
  800420be43:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be49:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be50:	00 00 00 
  800420be53:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be5d:	83 ca 0e             	or     $0xe,%edx
  800420be60:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be66:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be6d:	00 00 00 
  800420be70:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be77:	83 e2 ef             	and    $0xffffffef,%edx
  800420be7a:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be80:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be87:	00 00 00 
  800420be8a:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be91:	83 e2 9f             	and    $0xffffff9f,%edx
  800420be94:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be9a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bea1:	00 00 00 
  800420bea4:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420beab:	83 ca 80             	or     $0xffffff80,%edx
  800420beae:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420beb4:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bebb:	00 00 00 
  800420bebe:	48 c1 e8 10          	shr    $0x10,%rax
  800420bec2:	89 c2                	mov    %eax,%edx
  800420bec4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420becb:	00 00 00 
  800420bece:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bed5:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bedc:	00 00 00 
  800420bedf:	48 c1 e8 20          	shr    $0x20,%rax
  800420bee3:	89 c2                	mov    %eax,%edx
  800420bee5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420beec:	00 00 00 
  800420beef:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bef5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420befc:	00 00 00 
  800420beff:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf06:	00 00 00 
  800420bf09:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420bf10:	00 00 00 
  800420bf13:	89 c2                	mov    %eax,%edx
  800420bf15:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf26:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf2d:	00 00 00 
  800420bf30:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf37:	08 00 
  800420bf39:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf40:	00 00 00 
  800420bf43:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf4a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf4d:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf53:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf5a:	00 00 00 
  800420bf5d:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf64:	83 e2 07             	and    $0x7,%edx
  800420bf67:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf6d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf74:	00 00 00 
  800420bf77:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf7e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf81:	83 ca 0e             	or     $0xe,%edx
  800420bf84:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf8a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf91:	00 00 00 
  800420bf94:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf9b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bf9e:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfa4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bfab:	00 00 00 
  800420bfae:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfb5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfb8:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfbe:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bfc5:	00 00 00 
  800420bfc8:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfcf:	83 ca 80             	or     $0xffffff80,%edx
  800420bfd2:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfd8:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420bfdf:	00 00 00 
  800420bfe2:	48 c1 e8 10          	shr    $0x10,%rax
  800420bfe6:	89 c2                	mov    %eax,%edx
  800420bfe8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bfef:	00 00 00 
  800420bff2:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420bff9:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420c000:	00 00 00 
  800420c003:	48 c1 e8 20          	shr    $0x20,%rax
  800420c007:	89 c2                	mov    %eax,%edx
  800420c009:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c010:	00 00 00 
  800420c013:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c019:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c020:	00 00 00 
  800420c023:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c02a:	00 00 00 
  800420c02d:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c034:	00 00 00 
  800420c037:	89 c2                	mov    %eax,%edx
  800420c039:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c040:	00 00 00 
  800420c043:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c04a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c051:	00 00 00 
  800420c054:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c05b:	08 00 
  800420c05d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c064:	00 00 00 
  800420c067:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c06e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c071:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c077:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c07e:	00 00 00 
  800420c081:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c088:	83 e2 07             	and    $0x7,%edx
  800420c08b:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c091:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c098:	00 00 00 
  800420c09b:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0a5:	83 ca 0e             	or     $0xe,%edx
  800420c0a8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ae:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c0b5:	00 00 00 
  800420c0b8:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0bf:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0c2:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0c8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c0cf:	00 00 00 
  800420c0d2:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0d9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0dc:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0e2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c0e9:	00 00 00 
  800420c0ec:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0f3:	83 ca 80             	or     $0xffffff80,%edx
  800420c0f6:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0fc:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c103:	00 00 00 
  800420c106:	48 c1 e8 10          	shr    $0x10,%rax
  800420c10a:	89 c2                	mov    %eax,%edx
  800420c10c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c113:	00 00 00 
  800420c116:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c11d:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c124:	00 00 00 
  800420c127:	48 c1 e8 20          	shr    $0x20,%rax
  800420c12b:	89 c2                	mov    %eax,%edx
  800420c12d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c134:	00 00 00 
  800420c137:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c13d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c144:	00 00 00 
  800420c147:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c14e:	00 00 00 
  800420c151:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c158:	00 00 00 
  800420c15b:	89 c2                	mov    %eax,%edx
  800420c15d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c164:	00 00 00 
  800420c167:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c16e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c175:	00 00 00 
  800420c178:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c17f:	08 00 
  800420c181:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c188:	00 00 00 
  800420c18b:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c192:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c195:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c19b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1a2:	00 00 00 
  800420c1a5:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1ac:	83 e2 07             	and    $0x7,%edx
  800420c1af:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1b5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1bc:	00 00 00 
  800420c1bf:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1c6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1c9:	83 ca 0e             	or     $0xe,%edx
  800420c1cc:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1d2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1d9:	00 00 00 
  800420c1dc:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420c1e6:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1ec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1f3:	00 00 00 
  800420c1f6:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1fd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c200:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c206:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c20d:	00 00 00 
  800420c210:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c217:	83 ca 80             	or     $0xffffff80,%edx
  800420c21a:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c220:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c227:	00 00 00 
  800420c22a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c22e:	89 c2                	mov    %eax,%edx
  800420c230:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c237:	00 00 00 
  800420c23a:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c241:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c248:	00 00 00 
  800420c24b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c24f:	89 c2                	mov    %eax,%edx
  800420c251:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c258:	00 00 00 
  800420c25b:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c261:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c268:	00 00 00 
  800420c26b:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c272:	00 00 00 
  800420c275:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c27c:	00 00 00 
  800420c27f:	89 c2                	mov    %eax,%edx
  800420c281:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c288:	00 00 00 
  800420c28b:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c292:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c299:	00 00 00 
  800420c29c:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2a3:	08 00 
  800420c2a5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2ac:	00 00 00 
  800420c2af:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2b9:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2bf:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2c6:	00 00 00 
  800420c2c9:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2d0:	83 e2 07             	and    $0x7,%edx
  800420c2d3:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2d9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2e0:	00 00 00 
  800420c2e3:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c2ed:	83 ca 0e             	or     $0xe,%edx
  800420c2f0:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2f6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2fd:	00 00 00 
  800420c300:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c307:	83 e2 ef             	and    $0xffffffef,%edx
  800420c30a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c310:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c317:	00 00 00 
  800420c31a:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c321:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c324:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c32a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c331:	00 00 00 
  800420c334:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c33b:	83 ca 80             	or     $0xffffff80,%edx
  800420c33e:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c344:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c34b:	00 00 00 
  800420c34e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c352:	89 c2                	mov    %eax,%edx
  800420c354:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c35b:	00 00 00 
  800420c35e:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c365:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c36c:	00 00 00 
  800420c36f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c373:	89 c2                	mov    %eax,%edx
  800420c375:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c37c:	00 00 00 
  800420c37f:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c385:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c38c:	00 00 00 
  800420c38f:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c396:	00 00 00 
  800420c399:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c3a0:	00 00 00 
  800420c3a3:	89 c2                	mov    %eax,%edx
  800420c3a5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3ac:	00 00 00 
  800420c3af:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3b6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3bd:	00 00 00 
  800420c3c0:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3c7:	08 00 
  800420c3c9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3d0:	00 00 00 
  800420c3d3:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3da:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3dd:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3e3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3ea:	00 00 00 
  800420c3ed:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3f4:	83 e2 07             	and    $0x7,%edx
  800420c3f7:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3fd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c404:	00 00 00 
  800420c407:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c40e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c411:	83 ca 0e             	or     $0xe,%edx
  800420c414:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c41a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c421:	00 00 00 
  800420c424:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c42b:	83 e2 ef             	and    $0xffffffef,%edx
  800420c42e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c434:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c43b:	00 00 00 
  800420c43e:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c445:	83 ca 60             	or     $0x60,%edx
  800420c448:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c44e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c455:	00 00 00 
  800420c458:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c45f:	83 ca 80             	or     $0xffffff80,%edx
  800420c462:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c468:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c46f:	00 00 00 
  800420c472:	48 c1 e8 10          	shr    $0x10,%rax
  800420c476:	89 c2                	mov    %eax,%edx
  800420c478:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c47f:	00 00 00 
  800420c482:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c489:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c490:	00 00 00 
  800420c493:	48 c1 e8 20          	shr    $0x20,%rax
  800420c497:	89 c2                	mov    %eax,%edx
  800420c499:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c4a0:	00 00 00 
  800420c4a3:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4a9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c4b0:	00 00 00 
  800420c4b3:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4ba:	00 00 00 
  800420c4bd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c4c4:	00 00 00 
  800420c4c7:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4cc:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  800420c4d3:	00 00 00 
  800420c4d6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c4dd:	00 00 00 
  800420c4e0:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c4e4:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420c4eb:	00 00 00 
  800420c4ee:	ff d0                	callq  *%rax
  800420c4f0:	c9                   	leaveq 
  800420c4f1:	c3                   	retq   

000000800420c4f2 <trap_init_percpu>:
  800420c4f2:	55                   	push   %rbp
  800420c4f3:	48 89 e5             	mov    %rsp,%rbp
  800420c4f6:	53                   	push   %rbx
  800420c4f7:	48 83 ec 18          	sub    $0x18,%rsp
  800420c4fb:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c502:	00 00 00 
  800420c505:	ff d0                	callq  *%rax
  800420c507:	01 c0                	add    %eax,%eax
  800420c509:	83 c0 05             	add    $0x5,%eax
  800420c50c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c50f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c516:	00 00 00 
  800420c519:	ff d0                	callq  *%rax
  800420c51b:	89 c3                	mov    %eax,%ebx
  800420c51d:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c524:	00 00 00 
  800420c527:	ff d0                	callq  *%rax
  800420c529:	89 c2                	mov    %eax,%edx
  800420c52b:	89 d0                	mov    %edx,%eax
  800420c52d:	01 c0                	add    %eax,%eax
  800420c52f:	01 d0                	add    %edx,%eax
  800420c531:	c1 e0 0f             	shl    $0xf,%eax
  800420c534:	48 98                	cltq   
  800420c536:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c53d:	00 00 00 
  800420c540:	48 29 c2             	sub    %rax,%rdx
  800420c543:	48 89 d0             	mov    %rdx,%rax
  800420c546:	48 89 c2             	mov    %rax,%rdx
  800420c549:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  800420c550:	00 00 00 
  800420c553:	48 63 c3             	movslq %ebx,%rax
  800420c556:	48 c1 e0 03          	shl    $0x3,%rax
  800420c55a:	48 89 c6             	mov    %rax,%rsi
  800420c55d:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c561:	48 01 f0             	add    %rsi,%rax
  800420c564:	48 01 c8             	add    %rcx,%rax
  800420c567:	48 83 c0 10          	add    $0x10,%rax
  800420c56b:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c56f:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c576:	00 00 00 
  800420c579:	48 8b 00             	mov    (%rax),%rax
  800420c57c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c580:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c584:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c58b:	00 00 00 
  800420c58e:	ff d0                	callq  *%rax
  800420c590:	c1 e0 04             	shl    $0x4,%eax
  800420c593:	48 98                	cltq   
  800420c595:	48 01 d8             	add    %rbx,%rax
  800420c598:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c59d:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c5a4:	00 00 00 
  800420c5a7:	48 8b 00             	mov    (%rax),%rax
  800420c5aa:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ae:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5b2:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c5b9:	00 00 00 
  800420c5bc:	ff d0                	callq  *%rax
  800420c5be:	c1 e0 04             	shl    $0x4,%eax
  800420c5c1:	48 98                	cltq   
  800420c5c3:	48 01 d8             	add    %rbx,%rax
  800420c5c6:	48 89 c3             	mov    %rax,%rbx
  800420c5c9:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c5d0:	00 00 00 
  800420c5d3:	ff d0                	callq  *%rax
  800420c5d5:	48 98                	cltq   
  800420c5d7:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5db:	48 89 c2             	mov    %rax,%rdx
  800420c5de:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5e2:	48 01 d0             	add    %rdx,%rax
  800420c5e5:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5e9:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c5f0:	00 00 00 
  800420c5f3:	48 01 d0             	add    %rdx,%rax
  800420c5f6:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c5fa:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c601:	00 00 00 
  800420c604:	48 8b 00             	mov    (%rax),%rax
  800420c607:	48 c1 f8 10          	sar    $0x10,%rax
  800420c60b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c60f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c616:	00 00 00 
  800420c619:	ff d0                	callq  *%rax
  800420c61b:	c1 e0 04             	shl    $0x4,%eax
  800420c61e:	48 98                	cltq   
  800420c620:	48 01 d8             	add    %rbx,%rax
  800420c623:	48 89 c3             	mov    %rax,%rbx
  800420c626:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c62d:	00 00 00 
  800420c630:	ff d0                	callq  *%rax
  800420c632:	48 98                	cltq   
  800420c634:	48 c1 e0 03          	shl    $0x3,%rax
  800420c638:	48 89 c2             	mov    %rax,%rdx
  800420c63b:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c63f:	48 01 d0             	add    %rdx,%rax
  800420c642:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c646:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c64d:	00 00 00 
  800420c650:	48 01 d0             	add    %rdx,%rax
  800420c653:	48 c1 e8 10          	shr    $0x10,%rax
  800420c657:	88 43 04             	mov    %al,0x4(%rbx)
  800420c65a:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c661:	00 00 00 
  800420c664:	48 8b 00             	mov    (%rax),%rax
  800420c667:	48 c1 f8 10          	sar    $0x10,%rax
  800420c66b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c66f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c676:	00 00 00 
  800420c679:	ff d0                	callq  *%rax
  800420c67b:	c1 e0 04             	shl    $0x4,%eax
  800420c67e:	48 98                	cltq   
  800420c680:	48 01 d8             	add    %rbx,%rax
  800420c683:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c687:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c68a:	83 ca 09             	or     $0x9,%edx
  800420c68d:	88 50 05             	mov    %dl,0x5(%rax)
  800420c690:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c697:	00 00 00 
  800420c69a:	48 8b 00             	mov    (%rax),%rax
  800420c69d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6a1:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6a5:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c6ac:	00 00 00 
  800420c6af:	ff d0                	callq  *%rax
  800420c6b1:	c1 e0 04             	shl    $0x4,%eax
  800420c6b4:	48 98                	cltq   
  800420c6b6:	48 01 d8             	add    %rbx,%rax
  800420c6b9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6bd:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6c0:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6c3:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c6ca:	00 00 00 
  800420c6cd:	48 8b 00             	mov    (%rax),%rax
  800420c6d0:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6d4:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6d8:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c6df:	00 00 00 
  800420c6e2:	ff d0                	callq  *%rax
  800420c6e4:	c1 e0 04             	shl    $0x4,%eax
  800420c6e7:	48 98                	cltq   
  800420c6e9:	48 01 d8             	add    %rbx,%rax
  800420c6ec:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6f0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c6f3:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6f6:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c6fd:	00 00 00 
  800420c700:	48 8b 00             	mov    (%rax),%rax
  800420c703:	48 c1 f8 10          	sar    $0x10,%rax
  800420c707:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c70b:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c712:	00 00 00 
  800420c715:	ff d0                	callq  *%rax
  800420c717:	c1 e0 04             	shl    $0x4,%eax
  800420c71a:	48 98                	cltq   
  800420c71c:	48 01 d8             	add    %rbx,%rax
  800420c71f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c723:	83 ca 80             	or     $0xffffff80,%edx
  800420c726:	88 50 05             	mov    %dl,0x5(%rax)
  800420c729:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c730:	00 00 00 
  800420c733:	48 8b 00             	mov    (%rax),%rax
  800420c736:	48 c1 f8 10          	sar    $0x10,%rax
  800420c73a:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c73e:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c745:	00 00 00 
  800420c748:	ff d0                	callq  *%rax
  800420c74a:	c1 e0 04             	shl    $0x4,%eax
  800420c74d:	48 98                	cltq   
  800420c74f:	48 01 d8             	add    %rbx,%rax
  800420c752:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c756:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c759:	88 50 06             	mov    %dl,0x6(%rax)
  800420c75c:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c763:	00 00 00 
  800420c766:	48 8b 00             	mov    (%rax),%rax
  800420c769:	48 c1 f8 10          	sar    $0x10,%rax
  800420c76d:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c771:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c778:	00 00 00 
  800420c77b:	ff d0                	callq  *%rax
  800420c77d:	c1 e0 04             	shl    $0x4,%eax
  800420c780:	48 98                	cltq   
  800420c782:	48 01 d8             	add    %rbx,%rax
  800420c785:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c789:	83 e2 ef             	and    $0xffffffef,%edx
  800420c78c:	88 50 06             	mov    %dl,0x6(%rax)
  800420c78f:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c796:	00 00 00 
  800420c799:	48 8b 00             	mov    (%rax),%rax
  800420c79c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7a0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7a4:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c7ab:	00 00 00 
  800420c7ae:	ff d0                	callq  *%rax
  800420c7b0:	c1 e0 04             	shl    $0x4,%eax
  800420c7b3:	48 98                	cltq   
  800420c7b5:	48 01 d8             	add    %rbx,%rax
  800420c7b8:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7bc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7bf:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7c2:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c7c9:	00 00 00 
  800420c7cc:	48 8b 00             	mov    (%rax),%rax
  800420c7cf:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7d3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7d7:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c7de:	00 00 00 
  800420c7e1:	ff d0                	callq  *%rax
  800420c7e3:	c1 e0 04             	shl    $0x4,%eax
  800420c7e6:	48 98                	cltq   
  800420c7e8:	48 01 d8             	add    %rbx,%rax
  800420c7eb:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7ef:	83 e2 7f             	and    $0x7f,%edx
  800420c7f2:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7f5:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c7fc:	00 00 00 
  800420c7ff:	48 8b 00             	mov    (%rax),%rax
  800420c802:	48 c1 f8 10          	sar    $0x10,%rax
  800420c806:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c80a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c811:	00 00 00 
  800420c814:	ff d0                	callq  *%rax
  800420c816:	c1 e0 04             	shl    $0x4,%eax
  800420c819:	48 98                	cltq   
  800420c81b:	48 01 d8             	add    %rbx,%rax
  800420c81e:	48 89 c3             	mov    %rax,%rbx
  800420c821:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c828:	00 00 00 
  800420c82b:	ff d0                	callq  *%rax
  800420c82d:	48 98                	cltq   
  800420c82f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c833:	48 89 c2             	mov    %rax,%rdx
  800420c836:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c83a:	48 01 d0             	add    %rdx,%rax
  800420c83d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c841:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c848:	00 00 00 
  800420c84b:	48 01 d0             	add    %rdx,%rax
  800420c84e:	48 c1 e8 18          	shr    $0x18,%rax
  800420c852:	88 43 07             	mov    %al,0x7(%rbx)
  800420c855:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c85c:	00 00 00 
  800420c85f:	48 8b 00             	mov    (%rax),%rax
  800420c862:	48 c1 f8 10          	sar    $0x10,%rax
  800420c866:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c86a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c871:	00 00 00 
  800420c874:	ff d0                	callq  *%rax
  800420c876:	c1 e0 04             	shl    $0x4,%eax
  800420c879:	48 98                	cltq   
  800420c87b:	48 01 d8             	add    %rbx,%rax
  800420c87e:	48 89 c3             	mov    %rax,%rbx
  800420c881:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c888:	00 00 00 
  800420c88b:	ff d0                	callq  *%rax
  800420c88d:	48 98                	cltq   
  800420c88f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c893:	48 89 c2             	mov    %rax,%rdx
  800420c896:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c89a:	48 01 d0             	add    %rdx,%rax
  800420c89d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8a1:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c8a8:	00 00 00 
  800420c8ab:	48 01 d0             	add    %rdx,%rax
  800420c8ae:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8b2:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8b5:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c8bc:	00 00 00 
  800420c8bf:	48 8b 00             	mov    (%rax),%rax
  800420c8c2:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8c6:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8ca:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c8d1:	00 00 00 
  800420c8d4:	ff d0                	callq  *%rax
  800420c8d6:	c1 e0 04             	shl    $0x4,%eax
  800420c8d9:	48 98                	cltq   
  800420c8db:	48 01 d8             	add    %rbx,%rax
  800420c8de:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8e2:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c8e9:	00 00 00 
  800420c8ec:	48 8b 00             	mov    (%rax),%rax
  800420c8ef:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8f3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8f7:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c8fe:	00 00 00 
  800420c901:	ff d0                	callq  *%rax
  800420c903:	c1 e0 04             	shl    $0x4,%eax
  800420c906:	48 98                	cltq   
  800420c908:	48 01 d8             	add    %rbx,%rax
  800420c90b:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c90f:	48 b8 68 66 23 04 80 	movabs $0x8004236668,%rax
  800420c916:	00 00 00 
  800420c919:	48 8b 00             	mov    (%rax),%rax
  800420c91c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c920:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c924:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c92b:	00 00 00 
  800420c92e:	ff d0                	callq  *%rax
  800420c930:	c1 e0 04             	shl    $0x4,%eax
  800420c933:	48 98                	cltq   
  800420c935:	48 01 d8             	add    %rbx,%rax
  800420c938:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c93e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c941:	c1 e0 03             	shl    $0x3,%eax
  800420c944:	0f b7 c0             	movzwl %ax,%eax
  800420c947:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c94b:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c94f:	0f 00 d8             	ltr    %ax
  800420c952:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c959:	00 00 00 
  800420c95c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c964:	0f 01 18             	lidt   (%rax)
  800420c967:	48 83 c4 18          	add    $0x18,%rsp
  800420c96b:	5b                   	pop    %rbx
  800420c96c:	5d                   	pop    %rbp
  800420c96d:	c3                   	retq   

000000800420c96e <print_trapframe>:
  800420c96e:	55                   	push   %rbp
  800420c96f:	48 89 e5             	mov    %rsp,%rbp
  800420c972:	48 83 ec 20          	sub    $0x20,%rsp
  800420c976:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c97a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420c981:	00 00 00 
  800420c984:	ff d0                	callq  *%rax
  800420c986:	89 c2                	mov    %eax,%edx
  800420c988:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c98c:	48 89 c6             	mov    %rax,%rsi
  800420c98f:	48 bf 8e 01 22 04 80 	movabs $0x800422018e,%rdi
  800420c996:	00 00 00 
  800420c999:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c99e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420c9a5:	00 00 00 
  800420c9a8:	ff d1                	callq  *%rcx
  800420c9aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ae:	48 89 c7             	mov    %rax,%rdi
  800420c9b1:	48 b8 7f cc 20 04 80 	movabs $0x800420cc7f,%rax
  800420c9b8:	00 00 00 
  800420c9bb:	ff d0                	callq  *%rax
  800420c9bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9c1:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9c5:	0f b7 c0             	movzwl %ax,%eax
  800420c9c8:	89 c6                	mov    %eax,%esi
  800420c9ca:	48 bf ac 01 22 04 80 	movabs $0x80042201ac,%rdi
  800420c9d1:	00 00 00 
  800420c9d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9d9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420c9e0:	00 00 00 
  800420c9e3:	ff d2                	callq  *%rdx
  800420c9e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9e9:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c9f0:	0f b7 c0             	movzwl %ax,%eax
  800420c9f3:	89 c6                	mov    %eax,%esi
  800420c9f5:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  800420c9fc:	00 00 00 
  800420c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca04:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca0b:	00 00 00 
  800420ca0e:	ff d2                	callq  *%rdx
  800420ca10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca14:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca1b:	89 c7                	mov    %eax,%edi
  800420ca1d:	48 b8 90 9d 20 04 80 	movabs $0x8004209d90,%rax
  800420ca24:	00 00 00 
  800420ca27:	ff d0                	callq  *%rax
  800420ca29:	48 89 c2             	mov    %rax,%rdx
  800420ca2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca30:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca37:	48 89 c6             	mov    %rax,%rsi
  800420ca3a:	48 bf d2 01 22 04 80 	movabs $0x80042201d2,%rdi
  800420ca41:	00 00 00 
  800420ca44:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca49:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420ca50:	00 00 00 
  800420ca53:	ff d1                	callq  *%rcx
  800420ca55:	48 b8 90 f2 4d 04 80 	movabs $0x80044df290,%rax
  800420ca5c:	00 00 00 
  800420ca5f:	48 8b 00             	mov    (%rax),%rax
  800420ca62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca66:	75 3a                	jne    800420caa2 <print_trapframe+0x134>
  800420ca68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca6c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca73:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca77:	75 29                	jne    800420caa2 <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca79:	0f 20 d0             	mov    %cr2,%rax
  800420ca7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca84:	48 89 c6             	mov    %rax,%rsi
  800420ca87:	48 bf e4 01 22 04 80 	movabs $0x80042201e4,%rdi
  800420ca8e:	00 00 00 
  800420ca91:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca96:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca9d:	00 00 00 
  800420caa0:	ff d2                	callq  *%rdx
  800420caa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caa6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caad:	48 89 c6             	mov    %rax,%rsi
  800420cab0:	48 bf f3 01 22 04 80 	movabs $0x80042201f3,%rdi
  800420cab7:	00 00 00 
  800420caba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cabf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cac6:	00 00 00 
  800420cac9:	ff d2                	callq  *%rdx
  800420cacb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cacf:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cad6:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cada:	0f 85 9c 00 00 00    	jne    800420cb7c <print_trapframe+0x20e>
  800420cae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cae4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caeb:	83 e0 01             	and    $0x1,%eax
  800420caee:	48 85 c0             	test   %rax,%rax
  800420caf1:	74 0c                	je     800420caff <print_trapframe+0x191>
  800420caf3:	48 b9 01 02 22 04 80 	movabs $0x8004220201,%rcx
  800420cafa:	00 00 00 
  800420cafd:	eb 0a                	jmp    800420cb09 <print_trapframe+0x19b>
  800420caff:	48 b9 0c 02 22 04 80 	movabs $0x800422020c,%rcx
  800420cb06:	00 00 00 
  800420cb09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb0d:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb14:	83 e0 02             	and    $0x2,%eax
  800420cb17:	48 85 c0             	test   %rax,%rax
  800420cb1a:	74 0c                	je     800420cb28 <print_trapframe+0x1ba>
  800420cb1c:	48 ba 18 02 22 04 80 	movabs $0x8004220218,%rdx
  800420cb23:	00 00 00 
  800420cb26:	eb 0a                	jmp    800420cb32 <print_trapframe+0x1c4>
  800420cb28:	48 ba 1e 02 22 04 80 	movabs $0x800422021e,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb36:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb3d:	83 e0 04             	and    $0x4,%eax
  800420cb40:	48 85 c0             	test   %rax,%rax
  800420cb43:	74 0c                	je     800420cb51 <print_trapframe+0x1e3>
  800420cb45:	48 b8 23 02 22 04 80 	movabs $0x8004220223,%rax
  800420cb4c:	00 00 00 
  800420cb4f:	eb 0a                	jmp    800420cb5b <print_trapframe+0x1ed>
  800420cb51:	48 b8 28 02 22 04 80 	movabs $0x8004220228,%rax
  800420cb58:	00 00 00 
  800420cb5b:	48 89 c6             	mov    %rax,%rsi
  800420cb5e:	48 bf 2f 02 22 04 80 	movabs $0x800422022f,%rdi
  800420cb65:	00 00 00 
  800420cb68:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb6d:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420cb74:	00 00 00 
  800420cb77:	41 ff d0             	callq  *%r8
  800420cb7a:	eb 1b                	jmp    800420cb97 <print_trapframe+0x229>
  800420cb7c:	48 bf 3e 02 22 04 80 	movabs $0x800422023e,%rdi
  800420cb83:	00 00 00 
  800420cb86:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb8b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cb92:	00 00 00 
  800420cb95:	ff d2                	callq  *%rdx
  800420cb97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb9b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cba2:	48 89 c6             	mov    %rax,%rsi
  800420cba5:	48 bf 40 02 22 04 80 	movabs $0x8004220240,%rdi
  800420cbac:	00 00 00 
  800420cbaf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbb4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbbb:	00 00 00 
  800420cbbe:	ff d2                	callq  *%rdx
  800420cbc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbc4:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbcb:	0f b7 c0             	movzwl %ax,%eax
  800420cbce:	89 c6                	mov    %eax,%esi
  800420cbd0:	48 bf 4f 02 22 04 80 	movabs $0x800422024f,%rdi
  800420cbd7:	00 00 00 
  800420cbda:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbdf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbe6:	00 00 00 
  800420cbe9:	ff d2                	callq  *%rdx
  800420cbeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbef:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cbf6:	48 89 c6             	mov    %rax,%rsi
  800420cbf9:	48 bf 62 02 22 04 80 	movabs $0x8004220262,%rdi
  800420cc00:	00 00 00 
  800420cc03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc08:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc0f:	00 00 00 
  800420cc12:	ff d2                	callq  *%rdx
  800420cc14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc18:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc1f:	0f b7 c0             	movzwl %ax,%eax
  800420cc22:	83 e0 03             	and    $0x3,%eax
  800420cc25:	85 c0                	test   %eax,%eax
  800420cc27:	74 54                	je     800420cc7d <print_trapframe+0x30f>
  800420cc29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc2d:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc34:	48 89 c6             	mov    %rax,%rsi
  800420cc37:	48 bf 71 02 22 04 80 	movabs $0x8004220271,%rdi
  800420cc3e:	00 00 00 
  800420cc41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc4d:	00 00 00 
  800420cc50:	ff d2                	callq  *%rdx
  800420cc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc56:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc5d:	0f b7 c0             	movzwl %ax,%eax
  800420cc60:	89 c6                	mov    %eax,%esi
  800420cc62:	48 bf 80 02 22 04 80 	movabs $0x8004220280,%rdi
  800420cc69:	00 00 00 
  800420cc6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc71:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc78:	00 00 00 
  800420cc7b:	ff d2                	callq  *%rdx
  800420cc7d:	c9                   	leaveq 
  800420cc7e:	c3                   	retq   

000000800420cc7f <print_regs>:
  800420cc7f:	55                   	push   %rbp
  800420cc80:	48 89 e5             	mov    %rsp,%rbp
  800420cc83:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc8f:	48 8b 00             	mov    (%rax),%rax
  800420cc92:	48 89 c6             	mov    %rax,%rsi
  800420cc95:	48 bf 93 02 22 04 80 	movabs $0x8004220293,%rdi
  800420cc9c:	00 00 00 
  800420cc9f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cca4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccab:	00 00 00 
  800420ccae:	ff d2                	callq  *%rdx
  800420ccb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccb4:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccb8:	48 89 c6             	mov    %rax,%rsi
  800420ccbb:	48 bf a2 02 22 04 80 	movabs $0x80042202a2,%rdi
  800420ccc2:	00 00 00 
  800420ccc5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccca:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccd1:	00 00 00 
  800420ccd4:	ff d2                	callq  *%rdx
  800420ccd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccda:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccde:	48 89 c6             	mov    %rax,%rsi
  800420cce1:	48 bf b1 02 22 04 80 	movabs $0x80042202b1,%rdi
  800420cce8:	00 00 00 
  800420cceb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccf0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccf7:	00 00 00 
  800420ccfa:	ff d2                	callq  *%rdx
  800420ccfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd00:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd04:	48 89 c6             	mov    %rax,%rsi
  800420cd07:	48 bf c0 02 22 04 80 	movabs $0x80042202c0,%rdi
  800420cd0e:	00 00 00 
  800420cd11:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd16:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd1d:	00 00 00 
  800420cd20:	ff d2                	callq  *%rdx
  800420cd22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd26:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd2a:	48 89 c6             	mov    %rax,%rsi
  800420cd2d:	48 bf cf 02 22 04 80 	movabs $0x80042202cf,%rdi
  800420cd34:	00 00 00 
  800420cd37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd3c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd43:	00 00 00 
  800420cd46:	ff d2                	callq  *%rdx
  800420cd48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd4c:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd50:	48 89 c6             	mov    %rax,%rsi
  800420cd53:	48 bf de 02 22 04 80 	movabs $0x80042202de,%rdi
  800420cd5a:	00 00 00 
  800420cd5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd62:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd69:	00 00 00 
  800420cd6c:	ff d2                	callq  *%rdx
  800420cd6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd72:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd76:	48 89 c6             	mov    %rax,%rsi
  800420cd79:	48 bf ed 02 22 04 80 	movabs $0x80042202ed,%rdi
  800420cd80:	00 00 00 
  800420cd83:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd88:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd8f:	00 00 00 
  800420cd92:	ff d2                	callq  *%rdx
  800420cd94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd98:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cd9c:	48 89 c6             	mov    %rax,%rsi
  800420cd9f:	48 bf fb 02 22 04 80 	movabs $0x80042202fb,%rdi
  800420cda6:	00 00 00 
  800420cda9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdae:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cdb5:	00 00 00 
  800420cdb8:	ff d2                	callq  *%rdx
  800420cdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdbe:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdc2:	48 89 c6             	mov    %rax,%rsi
  800420cdc5:	48 bf 09 03 22 04 80 	movabs $0x8004220309,%rdi
  800420cdcc:	00 00 00 
  800420cdcf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdd4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cddb:	00 00 00 
  800420cdde:	ff d2                	callq  *%rdx
  800420cde0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cde4:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cde8:	48 89 c6             	mov    %rax,%rsi
  800420cdeb:	48 bf 18 03 22 04 80 	movabs $0x8004220318,%rdi
  800420cdf2:	00 00 00 
  800420cdf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdfa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce01:	00 00 00 
  800420ce04:	ff d2                	callq  *%rdx
  800420ce06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce0a:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce0e:	48 89 c6             	mov    %rax,%rsi
  800420ce11:	48 bf 27 03 22 04 80 	movabs $0x8004220327,%rdi
  800420ce18:	00 00 00 
  800420ce1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce20:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce27:	00 00 00 
  800420ce2a:	ff d2                	callq  *%rdx
  800420ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce30:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce34:	48 89 c6             	mov    %rax,%rsi
  800420ce37:	48 bf 36 03 22 04 80 	movabs $0x8004220336,%rdi
  800420ce3e:	00 00 00 
  800420ce41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce4d:	00 00 00 
  800420ce50:	ff d2                	callq  *%rdx
  800420ce52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce56:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce5a:	48 89 c6             	mov    %rax,%rsi
  800420ce5d:	48 bf 45 03 22 04 80 	movabs $0x8004220345,%rdi
  800420ce64:	00 00 00 
  800420ce67:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce73:	00 00 00 
  800420ce76:	ff d2                	callq  *%rdx
  800420ce78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce7c:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce80:	48 89 c6             	mov    %rax,%rsi
  800420ce83:	48 bf 54 03 22 04 80 	movabs $0x8004220354,%rdi
  800420ce8a:	00 00 00 
  800420ce8d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce92:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce99:	00 00 00 
  800420ce9c:	ff d2                	callq  *%rdx
  800420ce9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cea2:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cea6:	48 89 c6             	mov    %rax,%rsi
  800420cea9:	48 bf 63 03 22 04 80 	movabs $0x8004220363,%rdi
  800420ceb0:	00 00 00 
  800420ceb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ceb8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cebf:	00 00 00 
  800420cec2:	ff d2                	callq  *%rdx
  800420cec4:	c9                   	leaveq 
  800420cec5:	c3                   	retq   

000000800420cec6 <trap_dispatch>:
  800420cec6:	55                   	push   %rbp
  800420cec7:	48 89 e5             	mov    %rsp,%rbp
  800420ceca:	48 83 ec 10          	sub    $0x10,%rsp
  800420cece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ced2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ced6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cedd:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cee1:	75 18                	jne    800420cefb <trap_dispatch+0x35>
  800420cee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cee7:	48 89 c7             	mov    %rax,%rdi
  800420ceea:	48 b8 44 d4 20 04 80 	movabs $0x800420d444,%rax
  800420cef1:	00 00 00 
  800420cef4:	ff d0                	callq  *%rax
  800420cef6:	e9 ea 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cefb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceff:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf06:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf0a:	75 55                	jne    800420cf61 <trap_dispatch+0x9b>
  800420cf0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf10:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf18:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf20:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf28:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf30:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf38:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf3c:	4d 89 c1             	mov    %r8,%r9
  800420cf3f:	49 89 f8             	mov    %rdi,%r8
  800420cf42:	48 89 c7             	mov    %rax,%rdi
  800420cf45:	48 b8 60 f1 20 04 80 	movabs $0x800420f160,%rax
  800420cf4c:	00 00 00 
  800420cf4f:	ff d0                	callq  *%rax
  800420cf51:	48 89 c2             	mov    %rax,%rdx
  800420cf54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf58:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf5c:	e9 84 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf65:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf6c:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf70:	75 18                	jne    800420cf8a <trap_dispatch+0xc4>
  800420cf72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf76:	48 89 c7             	mov    %rax,%rdi
  800420cf79:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420cf80:	00 00 00 
  800420cf83:	ff d0                	callq  *%rax
  800420cf85:	e9 5b 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf8e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf95:	48 83 f8 27          	cmp    $0x27,%rax
  800420cf99:	75 33                	jne    800420cfce <trap_dispatch+0x108>
  800420cf9b:	48 bf 72 03 22 04 80 	movabs $0x8004220372,%rdi
  800420cfa2:	00 00 00 
  800420cfa5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfaa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cfb1:	00 00 00 
  800420cfb4:	ff d2                	callq  *%rdx
  800420cfb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfba:	48 89 c7             	mov    %rax,%rdi
  800420cfbd:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420cfc4:	00 00 00 
  800420cfc7:	ff d0                	callq  *%rax
  800420cfc9:	e9 17 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cfce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfd2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfd9:	48 83 f8 20          	cmp    $0x20,%rax
  800420cfdd:	75 34                	jne    800420d013 <trap_dispatch+0x14d>
  800420cfdf:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420cfe6:	00 00 00 
  800420cfe9:	ff d0                	callq  *%rax
  800420cfeb:	85 c0                	test   %eax,%eax
  800420cfed:	75 0c                	jne    800420cffb <trap_dispatch+0x135>
  800420cfef:	48 b8 ce 97 21 04 80 	movabs $0x80042197ce,%rax
  800420cff6:	00 00 00 
  800420cff9:	ff d0                	callq  *%rax
  800420cffb:	48 b8 c7 7f 21 04 80 	movabs $0x8004217fc7,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d00e:	00 00 00 
  800420d011:	ff d0                	callq  *%rax
  800420d013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d017:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d01e:	48 83 f8 21          	cmp    $0x21,%rax
  800420d022:	75 11                	jne    800420d035 <trap_dispatch+0x16f>
  800420d024:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  800420d02b:	00 00 00 
  800420d02e:	ff d0                	callq  *%rax
  800420d030:	e9 b0 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d039:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d040:	48 83 f8 24          	cmp    $0x24,%rax
  800420d044:	75 11                	jne    800420d057 <trap_dispatch+0x191>
  800420d046:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  800420d04d:	00 00 00 
  800420d050:	ff d0                	callq  *%rax
  800420d052:	e9 8e 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d057:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d05b:	48 89 c7             	mov    %rax,%rdi
  800420d05e:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d065:	00 00 00 
  800420d068:	ff d0                	callq  *%rax
  800420d06a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d06e:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d075:	66 83 f8 08          	cmp    $0x8,%ax
  800420d079:	75 2a                	jne    800420d0a5 <trap_dispatch+0x1df>
  800420d07b:	48 ba 8f 03 22 04 80 	movabs $0x800422038f,%rdx
  800420d082:	00 00 00 
  800420d085:	be 77 01 00 00       	mov    $0x177,%esi
  800420d08a:	48 bf a8 03 22 04 80 	movabs $0x80042203a8,%rdi
  800420d091:	00 00 00 
  800420d094:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d099:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d0a0:	00 00 00 
  800420d0a3:	ff d1                	callq  *%rcx
  800420d0a5:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d0ac:	00 00 00 
  800420d0af:	ff d0                	callq  *%rax
  800420d0b1:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d0b8:	00 00 00 
  800420d0bb:	48 98                	cltq   
  800420d0bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0c1:	48 89 c1             	mov    %rax,%rcx
  800420d0c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0c8:	48 01 c8             	add    %rcx,%rax
  800420d0cb:	48 01 d0             	add    %rdx,%rax
  800420d0ce:	48 83 c0 08          	add    $0x8,%rax
  800420d0d2:	48 8b 00             	mov    (%rax),%rax
  800420d0d5:	48 89 c7             	mov    %rax,%rdi
  800420d0d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d0df:	00 00 00 
  800420d0e2:	ff d0                	callq  *%rax
  800420d0e4:	90                   	nop
  800420d0e5:	c9                   	leaveq 
  800420d0e6:	c3                   	retq   

000000800420d0e7 <trap>:
  800420d0e7:	55                   	push   %rbp
  800420d0e8:	48 89 e5             	mov    %rsp,%rbp
  800420d0eb:	48 83 ec 20          	sub    $0x20,%rsp
  800420d0ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d0f3:	fc                   	cld    
  800420d0f4:	48 b8 d8 d5 6d 04 80 	movabs $0x80046dd5d8,%rax
  800420d0fb:	00 00 00 
  800420d0fe:	48 8b 00             	mov    (%rax),%rax
  800420d101:	48 85 c0             	test   %rax,%rax
  800420d104:	74 01                	je     800420d107 <trap+0x20>
  800420d106:	f4                   	hlt    
  800420d107:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d10e:	00 00 00 
  800420d111:	ff d0                	callq  *%rax
  800420d113:	48 98                	cltq   
  800420d115:	48 c1 e0 03          	shl    $0x3,%rax
  800420d119:	48 89 c2             	mov    %rax,%rdx
  800420d11c:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d120:	48 01 d0             	add    %rdx,%rax
  800420d123:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d12a:	00 00 00 
  800420d12d:	48 01 d0             	add    %rdx,%rax
  800420d130:	48 83 c0 04          	add    $0x4,%rax
  800420d134:	be 01 00 00 00       	mov    $0x1,%esi
  800420d139:	48 89 c7             	mov    %rax,%rdi
  800420d13c:	48 b8 4f 9d 20 04 80 	movabs $0x8004209d4f,%rax
  800420d143:	00 00 00 
  800420d146:	ff d0                	callq  *%rax
  800420d148:	83 f8 02             	cmp    $0x2,%eax
  800420d14b:	75 0c                	jne    800420d159 <trap+0x72>
  800420d14d:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d154:	00 00 00 
  800420d157:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d159:	9c                   	pushfq 
  800420d15a:	58                   	pop    %rax
  800420d15b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d15f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d163:	25 00 02 00 00       	and    $0x200,%eax
  800420d168:	48 85 c0             	test   %rax,%rax
  800420d16b:	74 35                	je     800420d1a2 <trap+0xbb>
  800420d16d:	48 b9 b7 03 22 04 80 	movabs $0x80042203b7,%rcx
  800420d174:	00 00 00 
  800420d177:	48 ba d0 03 22 04 80 	movabs $0x80042203d0,%rdx
  800420d17e:	00 00 00 
  800420d181:	be 94 01 00 00       	mov    $0x194,%esi
  800420d186:	48 bf a8 03 22 04 80 	movabs $0x80042203a8,%rdi
  800420d18d:	00 00 00 
  800420d190:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d195:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d19c:	00 00 00 
  800420d19f:	41 ff d0             	callq  *%r8
  800420d1a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1a6:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1ad:	0f b7 c0             	movzwl %ax,%eax
  800420d1b0:	83 e0 03             	and    $0x3,%eax
  800420d1b3:	83 f8 03             	cmp    $0x3,%eax
  800420d1b6:	0f 85 a9 01 00 00    	jne    800420d365 <trap+0x27e>
  800420d1bc:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d1c3:	00 00 00 
  800420d1c6:	ff d0                	callq  *%rax
  800420d1c8:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d1cf:	00 00 00 
  800420d1d2:	ff d0                	callq  *%rax
  800420d1d4:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d1db:	00 00 00 
  800420d1de:	48 98                	cltq   
  800420d1e0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1e4:	48 89 c1             	mov    %rax,%rcx
  800420d1e7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1eb:	48 01 c8             	add    %rcx,%rax
  800420d1ee:	48 01 d0             	add    %rdx,%rax
  800420d1f1:	48 83 c0 08          	add    $0x8,%rax
  800420d1f5:	48 8b 00             	mov    (%rax),%rax
  800420d1f8:	48 85 c0             	test   %rax,%rax
  800420d1fb:	75 35                	jne    800420d232 <trap+0x14b>
  800420d1fd:	48 b9 e5 03 22 04 80 	movabs $0x80042203e5,%rcx
  800420d204:	00 00 00 
  800420d207:	48 ba d0 03 22 04 80 	movabs $0x80042203d0,%rdx
  800420d20e:	00 00 00 
  800420d211:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d216:	48 bf a8 03 22 04 80 	movabs $0x80042203a8,%rdi
  800420d21d:	00 00 00 
  800420d220:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d225:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d22c:	00 00 00 
  800420d22f:	41 ff d0             	callq  *%r8
  800420d232:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d239:	00 00 00 
  800420d23c:	ff d0                	callq  *%rax
  800420d23e:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d245:	00 00 00 
  800420d248:	48 98                	cltq   
  800420d24a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d24e:	48 89 c1             	mov    %rax,%rcx
  800420d251:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d255:	48 01 c8             	add    %rcx,%rax
  800420d258:	48 01 d0             	add    %rdx,%rax
  800420d25b:	48 83 c0 08          	add    $0x8,%rax
  800420d25f:	48 8b 00             	mov    (%rax),%rax
  800420d262:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d268:	83 f8 01             	cmp    $0x1,%eax
  800420d26b:	75 7f                	jne    800420d2ec <trap+0x205>
  800420d26d:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d274:	00 00 00 
  800420d277:	ff d0                	callq  *%rax
  800420d279:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d280:	00 00 00 
  800420d283:	48 98                	cltq   
  800420d285:	48 c1 e0 03          	shl    $0x3,%rax
  800420d289:	48 89 c1             	mov    %rax,%rcx
  800420d28c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d290:	48 01 c8             	add    %rcx,%rax
  800420d293:	48 01 d0             	add    %rdx,%rax
  800420d296:	48 83 c0 08          	add    $0x8,%rax
  800420d29a:	48 8b 00             	mov    (%rax),%rax
  800420d29d:	48 89 c7             	mov    %rax,%rdi
  800420d2a0:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  800420d2a7:	00 00 00 
  800420d2aa:	ff d0                	callq  *%rax
  800420d2ac:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d2b3:	00 00 00 
  800420d2b6:	ff d0                	callq  *%rax
  800420d2b8:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d2bf:	00 00 00 
  800420d2c2:	48 98                	cltq   
  800420d2c4:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2c8:	48 89 c1             	mov    %rax,%rcx
  800420d2cb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2cf:	48 01 c8             	add    %rcx,%rax
  800420d2d2:	48 01 d0             	add    %rdx,%rax
  800420d2d5:	48 83 c0 08          	add    $0x8,%rax
  800420d2d9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2e0:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d2e7:	00 00 00 
  800420d2ea:	ff d0                	callq  *%rax
  800420d2ec:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d2f3:	00 00 00 
  800420d2f6:	ff d0                	callq  *%rax
  800420d2f8:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d2ff:	00 00 00 
  800420d302:	48 98                	cltq   
  800420d304:	48 c1 e0 03          	shl    $0x3,%rax
  800420d308:	48 89 c1             	mov    %rax,%rcx
  800420d30b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d30f:	48 01 c8             	add    %rcx,%rax
  800420d312:	48 01 d0             	add    %rdx,%rax
  800420d315:	48 83 c0 08          	add    $0x8,%rax
  800420d319:	48 8b 10             	mov    (%rax),%rdx
  800420d31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d320:	48 89 c6             	mov    %rax,%rsi
  800420d323:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d328:	48 89 d7             	mov    %rdx,%rdi
  800420d32b:	48 89 c1             	mov    %rax,%rcx
  800420d32e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d331:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d338:	00 00 00 
  800420d33b:	ff d0                	callq  *%rax
  800420d33d:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d344:	00 00 00 
  800420d347:	48 98                	cltq   
  800420d349:	48 c1 e0 03          	shl    $0x3,%rax
  800420d34d:	48 89 c1             	mov    %rax,%rcx
  800420d350:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d354:	48 01 c8             	add    %rcx,%rax
  800420d357:	48 01 d0             	add    %rdx,%rax
  800420d35a:	48 83 c0 08          	add    $0x8,%rax
  800420d35e:	48 8b 00             	mov    (%rax),%rax
  800420d361:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d365:	48 b8 90 f2 4d 04 80 	movabs $0x80044df290,%rax
  800420d36c:	00 00 00 
  800420d36f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d373:	48 89 10             	mov    %rdx,(%rax)
  800420d376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d37a:	48 89 c7             	mov    %rax,%rdi
  800420d37d:	48 b8 c6 ce 20 04 80 	movabs $0x800420cec6,%rax
  800420d384:	00 00 00 
  800420d387:	ff d0                	callq  *%rax
  800420d389:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d390:	00 00 00 
  800420d393:	ff d0                	callq  *%rax
  800420d395:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d39c:	00 00 00 
  800420d39f:	48 98                	cltq   
  800420d3a1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3a5:	48 89 c1             	mov    %rax,%rcx
  800420d3a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3ac:	48 01 c8             	add    %rcx,%rax
  800420d3af:	48 01 d0             	add    %rdx,%rax
  800420d3b2:	48 83 c0 08          	add    $0x8,%rax
  800420d3b6:	48 8b 00             	mov    (%rax),%rax
  800420d3b9:	48 85 c0             	test   %rax,%rax
  800420d3bc:	74 7a                	je     800420d438 <trap+0x351>
  800420d3be:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d3c5:	00 00 00 
  800420d3c8:	ff d0                	callq  *%rax
  800420d3ca:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d3d1:	00 00 00 
  800420d3d4:	48 98                	cltq   
  800420d3d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3da:	48 89 c1             	mov    %rax,%rcx
  800420d3dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3e1:	48 01 c8             	add    %rcx,%rax
  800420d3e4:	48 01 d0             	add    %rdx,%rax
  800420d3e7:	48 83 c0 08          	add    $0x8,%rax
  800420d3eb:	48 8b 00             	mov    (%rax),%rax
  800420d3ee:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3f4:	83 f8 03             	cmp    $0x3,%eax
  800420d3f7:	75 3f                	jne    800420d438 <trap+0x351>
  800420d3f9:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d400:	00 00 00 
  800420d403:	ff d0                	callq  *%rax
  800420d405:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d40c:	00 00 00 
  800420d40f:	48 98                	cltq   
  800420d411:	48 c1 e0 03          	shl    $0x3,%rax
  800420d415:	48 89 c1             	mov    %rax,%rcx
  800420d418:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d41c:	48 01 c8             	add    %rcx,%rax
  800420d41f:	48 01 d0             	add    %rdx,%rax
  800420d422:	48 83 c0 08          	add    $0x8,%rax
  800420d426:	48 8b 00             	mov    (%rax),%rax
  800420d429:	48 89 c7             	mov    %rax,%rdi
  800420d42c:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d433:	00 00 00 
  800420d436:	ff d0                	callq  *%rax
  800420d438:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d43f:	00 00 00 
  800420d442:	ff d0                	callq  *%rax

000000800420d444 <page_fault_handler>:
  800420d444:	55                   	push   %rbp
  800420d445:	48 89 e5             	mov    %rsp,%rbp
  800420d448:	53                   	push   %rbx
  800420d449:	48 83 ec 38          	sub    $0x38,%rsp
  800420d44d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d451:	0f 20 d0             	mov    %cr2,%rax
  800420d454:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d458:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d45c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d460:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d464:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d46b:	0f b7 c0             	movzwl %ax,%eax
  800420d46e:	83 e0 03             	and    $0x3,%eax
  800420d471:	85 c0                	test   %eax,%eax
  800420d473:	75 3d                	jne    800420d4b2 <page_fault_handler+0x6e>
  800420d475:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d479:	48 89 c7             	mov    %rax,%rdi
  800420d47c:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d483:	00 00 00 
  800420d486:	ff d0                	callq  *%rax
  800420d488:	48 ba ec 03 22 04 80 	movabs $0x80042203ec,%rdx
  800420d48f:	00 00 00 
  800420d492:	be de 01 00 00       	mov    $0x1de,%esi
  800420d497:	48 bf a8 03 22 04 80 	movabs $0x80042203a8,%rdi
  800420d49e:	00 00 00 
  800420d4a1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4a6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d4ad:	00 00 00 
  800420d4b0:	ff d1                	callq  *%rcx
  800420d4b2:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d4b9:	00 00 00 
  800420d4bc:	ff d0                	callq  *%rax
  800420d4be:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d4c5:	00 00 00 
  800420d4c8:	48 98                	cltq   
  800420d4ca:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4ce:	48 89 c1             	mov    %rax,%rcx
  800420d4d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4d5:	48 01 c8             	add    %rcx,%rax
  800420d4d8:	48 01 d0             	add    %rdx,%rax
  800420d4db:	48 83 c0 08          	add    $0x8,%rax
  800420d4df:	48 8b 00             	mov    (%rax),%rax
  800420d4e2:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d4e9:	48 85 c0             	test   %rax,%rax
  800420d4ec:	0f 85 b8 00 00 00    	jne    800420d5aa <page_fault_handler+0x166>
  800420d4f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d4f6:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d4fd:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d504:	00 00 00 
  800420d507:	ff d0                	callq  *%rax
  800420d509:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d510:	00 00 00 
  800420d513:	48 98                	cltq   
  800420d515:	48 c1 e0 03          	shl    $0x3,%rax
  800420d519:	48 89 c1             	mov    %rax,%rcx
  800420d51c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d520:	48 01 c8             	add    %rcx,%rax
  800420d523:	48 01 d0             	add    %rdx,%rax
  800420d526:	48 83 c0 08          	add    $0x8,%rax
  800420d52a:	48 8b 00             	mov    (%rax),%rax
  800420d52d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d533:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d537:	48 89 d9             	mov    %rbx,%rcx
  800420d53a:	89 c6                	mov    %eax,%esi
  800420d53c:	48 bf f8 03 22 04 80 	movabs $0x80042203f8,%rdi
  800420d543:	00 00 00 
  800420d546:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d54b:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420d552:	00 00 00 
  800420d555:	41 ff d0             	callq  *%r8
  800420d558:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d55c:	48 89 c7             	mov    %rax,%rdi
  800420d55f:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d566:	00 00 00 
  800420d569:	ff d0                	callq  *%rax
  800420d56b:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d572:	00 00 00 
  800420d575:	ff d0                	callq  *%rax
  800420d577:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d57e:	00 00 00 
  800420d581:	48 98                	cltq   
  800420d583:	48 c1 e0 03          	shl    $0x3,%rax
  800420d587:	48 89 c1             	mov    %rax,%rcx
  800420d58a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d58e:	48 01 c8             	add    %rcx,%rax
  800420d591:	48 01 d0             	add    %rdx,%rax
  800420d594:	48 83 c0 08          	add    $0x8,%rax
  800420d598:	48 8b 00             	mov    (%rax),%rax
  800420d59b:	48 89 c7             	mov    %rax,%rdi
  800420d59e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d5a5:	00 00 00 
  800420d5a8:	ff d0                	callq  *%rax
  800420d5aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ae:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5b5:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5ba:	48 39 c2             	cmp    %rax,%rdx
  800420d5bd:	76 2c                	jbe    800420d5eb <page_fault_handler+0x1a7>
  800420d5bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5c3:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5ca:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5cf:	48 39 c2             	cmp    %rax,%rdx
  800420d5d2:	77 17                	ja     800420d5eb <page_fault_handler+0x1a7>
  800420d5d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5d8:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5df:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d5e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5e9:	eb 09                	jmp    800420d5f4 <page_fault_handler+0x1b0>
  800420d5eb:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d5f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f4:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d5fb:	00 00 00 
  800420d5fe:	ff d0                	callq  *%rax
  800420d600:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d607:	00 00 00 
  800420d60a:	48 98                	cltq   
  800420d60c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d610:	48 89 c1             	mov    %rax,%rcx
  800420d613:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d617:	48 01 c8             	add    %rcx,%rax
  800420d61a:	48 01 d0             	add    %rdx,%rax
  800420d61d:	48 83 c0 08          	add    $0x8,%rax
  800420d621:	48 8b 00             	mov    (%rax),%rax
  800420d624:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d628:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d62d:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d632:	48 89 c7             	mov    %rax,%rdi
  800420d635:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420d63c:	00 00 00 
  800420d63f:	ff d0                	callq  *%rax
  800420d641:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d645:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d649:	48 89 10             	mov    %rdx,(%rax)
  800420d64c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d650:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d65b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d663:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d667:	48 8b 0a             	mov    (%rdx),%rcx
  800420d66a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d66e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d672:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d676:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d67a:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d67e:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d682:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d686:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d68a:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d68e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d692:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d696:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d69a:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d69e:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6a2:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6a6:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6aa:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ae:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6b2:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6b6:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6ba:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6be:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6c2:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6c6:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6ca:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6ce:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6d2:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6d6:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6da:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6e5:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d6ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6f0:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d6f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6fb:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d702:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d706:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d70d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d711:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d718:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d71c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d723:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d72b:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d732:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d739:	00 00 00 
  800420d73c:	ff d0                	callq  *%rax
  800420d73e:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d745:	00 00 00 
  800420d748:	48 98                	cltq   
  800420d74a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d74e:	48 89 c1             	mov    %rax,%rcx
  800420d751:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d755:	48 01 c8             	add    %rcx,%rax
  800420d758:	48 01 d0             	add    %rdx,%rax
  800420d75b:	48 83 c0 08          	add    $0x8,%rax
  800420d75f:	48 8b 00             	mov    (%rax),%rax
  800420d762:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d769:	48 89 c2             	mov    %rax,%rdx
  800420d76c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d770:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d777:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d77e:	00 00 00 
  800420d781:	ff d0                	callq  *%rax
  800420d783:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d78a:	00 00 00 
  800420d78d:	48 98                	cltq   
  800420d78f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d793:	48 89 c1             	mov    %rax,%rcx
  800420d796:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d79a:	48 01 c8             	add    %rcx,%rax
  800420d79d:	48 01 d0             	add    %rdx,%rax
  800420d7a0:	48 83 c0 08          	add    $0x8,%rax
  800420d7a4:	48 8b 00             	mov    (%rax),%rax
  800420d7a7:	48 89 c7             	mov    %rax,%rdi
  800420d7aa:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d7b1:	00 00 00 
  800420d7b4:	ff d0                	callq  *%rax
  800420d7b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7bd:	00 00 00 

000000800420d7c0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7c0:	6a 00                	pushq  $0x0
  800420d7c2:	6a 00                	pushq  $0x0
  800420d7c4:	e9 f7 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7c9:	90                   	nop

000000800420d7ca <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7ca:	6a 00                	pushq  $0x0
  800420d7cc:	6a 01                	pushq  $0x1
  800420d7ce:	e9 ed 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7d3:	90                   	nop

000000800420d7d4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7d4:	6a 00                	pushq  $0x0
  800420d7d6:	6a 02                	pushq  $0x2
  800420d7d8:	e9 e3 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7dd:	90                   	nop

000000800420d7de <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7de:	6a 00                	pushq  $0x0
  800420d7e0:	6a 03                	pushq  $0x3
  800420d7e2:	e9 d9 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7e7:	90                   	nop

000000800420d7e8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d7e8:	6a 00                	pushq  $0x0
  800420d7ea:	6a 04                	pushq  $0x4
  800420d7ec:	e9 cf 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7f1:	90                   	nop

000000800420d7f2 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d7f2:	6a 00                	pushq  $0x0
  800420d7f4:	6a 05                	pushq  $0x5
  800420d7f6:	e9 c5 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7fb:	90                   	nop

000000800420d7fc <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d7fc:	6a 00                	pushq  $0x0
  800420d7fe:	6a 06                	pushq  $0x6
  800420d800:	e9 bb 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d805:	90                   	nop

000000800420d806 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d806:	6a 00                	pushq  $0x0
  800420d808:	6a 07                	pushq  $0x7
  800420d80a:	e9 b1 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d80f:	90                   	nop

000000800420d810 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d810:	6a 08                	pushq  $0x8
  800420d812:	e9 a9 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d817:	90                   	nop

000000800420d818 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d818:	6a 0a                	pushq  $0xa
  800420d81a:	e9 a1 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d81f:	90                   	nop

000000800420d820 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d820:	6a 0b                	pushq  $0xb
  800420d822:	e9 99 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d827:	90                   	nop

000000800420d828 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d828:	6a 0c                	pushq  $0xc
  800420d82a:	e9 91 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d830:	6a 0d                	pushq  $0xd
  800420d832:	e9 89 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d838:	6a 0e                	pushq  $0xe
  800420d83a:	e9 81 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d840:	6a 00                	pushq  $0x0
  800420d842:	6a 10                	pushq  $0x10
  800420d844:	eb 7a                	jmp    800420d8c0 <_alltraps>

000000800420d846 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d846:	6a 11                	pushq  $0x11
  800420d848:	eb 76                	jmp    800420d8c0 <_alltraps>

000000800420d84a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d84a:	6a 00                	pushq  $0x0
  800420d84c:	6a 12                	pushq  $0x12
  800420d84e:	eb 70                	jmp    800420d8c0 <_alltraps>

000000800420d850 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d850:	6a 00                	pushq  $0x0
  800420d852:	6a 20                	pushq  $0x20
  800420d854:	eb 6a                	jmp    800420d8c0 <_alltraps>

000000800420d856 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d856:	6a 00                	pushq  $0x0
  800420d858:	6a 21                	pushq  $0x21
  800420d85a:	eb 64                	jmp    800420d8c0 <_alltraps>

000000800420d85c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d85c:	6a 00                	pushq  $0x0
  800420d85e:	6a 22                	pushq  $0x22
  800420d860:	eb 5e                	jmp    800420d8c0 <_alltraps>

000000800420d862 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d862:	6a 00                	pushq  $0x0
  800420d864:	6a 23                	pushq  $0x23
  800420d866:	eb 58                	jmp    800420d8c0 <_alltraps>

000000800420d868 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d868:	6a 00                	pushq  $0x0
  800420d86a:	6a 24                	pushq  $0x24
  800420d86c:	eb 52                	jmp    800420d8c0 <_alltraps>

000000800420d86e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d86e:	6a 00                	pushq  $0x0
  800420d870:	6a 25                	pushq  $0x25
  800420d872:	eb 4c                	jmp    800420d8c0 <_alltraps>

000000800420d874 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d874:	6a 00                	pushq  $0x0
  800420d876:	6a 26                	pushq  $0x26
  800420d878:	eb 46                	jmp    800420d8c0 <_alltraps>

000000800420d87a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d87a:	6a 00                	pushq  $0x0
  800420d87c:	6a 27                	pushq  $0x27
  800420d87e:	eb 40                	jmp    800420d8c0 <_alltraps>

000000800420d880 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d880:	6a 00                	pushq  $0x0
  800420d882:	6a 28                	pushq  $0x28
  800420d884:	eb 3a                	jmp    800420d8c0 <_alltraps>

000000800420d886 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d886:	6a 00                	pushq  $0x0
  800420d888:	6a 29                	pushq  $0x29
  800420d88a:	eb 34                	jmp    800420d8c0 <_alltraps>

000000800420d88c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d88c:	6a 00                	pushq  $0x0
  800420d88e:	6a 2a                	pushq  $0x2a
  800420d890:	eb 2e                	jmp    800420d8c0 <_alltraps>

000000800420d892 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d892:	6a 00                	pushq  $0x0
  800420d894:	6a 2b                	pushq  $0x2b
  800420d896:	eb 28                	jmp    800420d8c0 <_alltraps>

000000800420d898 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d898:	6a 00                	pushq  $0x0
  800420d89a:	6a 2c                	pushq  $0x2c
  800420d89c:	eb 22                	jmp    800420d8c0 <_alltraps>

000000800420d89e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d89e:	6a 00                	pushq  $0x0
  800420d8a0:	6a 2d                	pushq  $0x2d
  800420d8a2:	eb 1c                	jmp    800420d8c0 <_alltraps>

000000800420d8a4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8a4:	6a 00                	pushq  $0x0
  800420d8a6:	6a 2e                	pushq  $0x2e
  800420d8a8:	eb 16                	jmp    800420d8c0 <_alltraps>

000000800420d8aa <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d8aa:	6a 00                	pushq  $0x0
  800420d8ac:	6a 2f                	pushq  $0x2f
  800420d8ae:	eb 10                	jmp    800420d8c0 <_alltraps>

000000800420d8b0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d8b0:	6a 00                	pushq  $0x0
  800420d8b2:	6a 30                	pushq  $0x30
  800420d8b4:	eb 0a                	jmp    800420d8c0 <_alltraps>

000000800420d8b6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d8b6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d8bb:	eb 03                	jmp    800420d8c0 <_alltraps>
  800420d8bd:	0f 1f 00             	nopl   (%rax)

000000800420d8c0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d8c0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d8c4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d8c8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d8cb:	48 83 ec 78          	sub    $0x78,%rsp
  800420d8cf:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d8d4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d8d9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d8de:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d8e3:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d8e8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d8ed:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d8f2:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d8f7:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d8fc:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d901:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d906:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d90b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d910:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d915:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d919:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d91e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d920:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d922:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d924:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d926:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d928:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d92b:	e8 b7 f7 ff ff       	callq  800420d0e7 <trap>

000000800420d930 <spin>:
spin:	jmp spin
  800420d930:	eb fe                	jmp    800420d930 <spin>

000000800420d932 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d932:	55                   	push   %rbp
  800420d933:	48 89 e5             	mov    %rsp,%rbp
  800420d936:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d93a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d93e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d941:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d945:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d948:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d94c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d94f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d952:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d955:	c9                   	leaveq 
  800420d956:	c3                   	retq   

000000800420d957 <unlock_kernel>:
  800420d957:	55                   	push   %rbp
  800420d958:	48 89 e5             	mov    %rsp,%rbp
  800420d95b:	48 bf 60 67 23 04 80 	movabs $0x8004236760,%rdi
  800420d962:	00 00 00 
  800420d965:	48 b8 f4 83 21 04 80 	movabs $0x80042183f4,%rax
  800420d96c:	00 00 00 
  800420d96f:	ff d0                	callq  *%rax
  800420d971:	f3 90                	pause  
  800420d973:	5d                   	pop    %rbp
  800420d974:	c3                   	retq   

000000800420d975 <vmxon>:
  800420d975:	55                   	push   %rbp
  800420d976:	48 89 e5             	mov    %rsp,%rbp
  800420d979:	48 83 ec 10          	sub    $0x10,%rsp
  800420d97d:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420d984:	00 00 00 
  800420d987:	ff d0                	callq  *%rax
  800420d989:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d990:	00 00 00 
  800420d993:	48 98                	cltq   
  800420d995:	48 c1 e0 03          	shl    $0x3,%rax
  800420d999:	48 89 c1             	mov    %rax,%rcx
  800420d99c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9a0:	48 01 c8             	add    %rcx,%rax
  800420d9a3:	48 01 d0             	add    %rdx,%rax
  800420d9a6:	48 83 c0 70          	add    $0x70,%rax
  800420d9aa:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d9ae:	83 f0 01             	xor    $0x1,%eax
  800420d9b1:	84 c0                	test   %al,%al
  800420d9b3:	74 5a                	je     800420da0f <vmxon+0x9a>
  800420d9b5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9ba:	48 ba 1f b6 21 04 80 	movabs $0x800421b61f,%rdx
  800420d9c1:	00 00 00 
  800420d9c4:	ff d2                	callq  *%rdx
  800420d9c6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9c9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9cd:	79 25                	jns    800420d9f4 <vmxon+0x7f>
  800420d9cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9d2:	89 c6                	mov    %eax,%esi
  800420d9d4:	48 bf 00 06 22 04 80 	movabs $0x8004220600,%rdi
  800420d9db:	00 00 00 
  800420d9de:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9e3:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420d9ea:	00 00 00 
  800420d9ed:	ff d2                	callq  *%rdx
  800420d9ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9f2:	eb 20                	jmp    800420da14 <vmxon+0x9f>
  800420d9f4:	48 bf 1b 06 22 04 80 	movabs $0x800422061b,%rdi
  800420d9fb:	00 00 00 
  800420d9fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da03:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420da0a:	00 00 00 
  800420da0d:	ff d2                	callq  *%rdx
  800420da0f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da14:	c9                   	leaveq 
  800420da15:	c3                   	retq   

000000800420da16 <sched_yield>:
  800420da16:	55                   	push   %rbp
  800420da17:	48 89 e5             	mov    %rsp,%rbp
  800420da1a:	53                   	push   %rbx
  800420da1b:	48 83 ec 18          	sub    $0x18,%rsp
  800420da1f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420da26:	00 00 00 
  800420da29:	ff d0                	callq  *%rax
  800420da2b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420da32:	00 00 00 
  800420da35:	48 98                	cltq   
  800420da37:	48 c1 e0 03          	shl    $0x3,%rax
  800420da3b:	48 89 c1             	mov    %rax,%rcx
  800420da3e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da42:	48 01 c8             	add    %rcx,%rax
  800420da45:	48 01 d0             	add    %rdx,%rax
  800420da48:	48 83 c0 08          	add    $0x8,%rax
  800420da4c:	48 8b 00             	mov    (%rax),%rax
  800420da4f:	48 85 c0             	test   %rax,%rax
  800420da52:	74 60                	je     800420dab4 <sched_yield+0x9e>
  800420da54:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420da5b:	00 00 00 
  800420da5e:	ff d0                	callq  *%rax
  800420da60:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420da67:	00 00 00 
  800420da6a:	48 98                	cltq   
  800420da6c:	48 c1 e0 03          	shl    $0x3,%rax
  800420da70:	48 89 c1             	mov    %rax,%rcx
  800420da73:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da77:	48 01 c8             	add    %rcx,%rax
  800420da7a:	48 01 d0             	add    %rdx,%rax
  800420da7d:	48 83 c0 08          	add    $0x8,%rax
  800420da81:	48 8b 00             	mov    (%rax),%rax
  800420da84:	48 89 c2             	mov    %rax,%rdx
  800420da87:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420da8e:	00 00 00 
  800420da91:	48 8b 00             	mov    (%rax),%rax
  800420da94:	48 29 c2             	sub    %rax,%rdx
  800420da97:	48 89 d0             	mov    %rdx,%rax
  800420da9a:	48 c1 f8 03          	sar    $0x3,%rax
  800420da9e:	48 89 c2             	mov    %rax,%rdx
  800420daa1:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420daa8:	fa a4 4f 
  800420daab:	48 0f af c2          	imul   %rdx,%rax
  800420daaf:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dab2:	eb 07                	jmp    800420dabb <sched_yield+0xa5>
  800420dab4:	c7 45 ec ff 03 00 00 	movl   $0x3ff,-0x14(%rbp)
  800420dabb:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  800420dac2:	e9 1b 01 00 00       	jmpq   800420dbe2 <sched_yield+0x1cc>
  800420dac7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420daca:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420dacd:	01 c2                	add    %eax,%edx
  800420dacf:	89 d0                	mov    %edx,%eax
  800420dad1:	c1 f8 1f             	sar    $0x1f,%eax
  800420dad4:	c1 e8 16             	shr    $0x16,%eax
  800420dad7:	01 c2                	add    %eax,%edx
  800420dad9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420dadf:	29 c2                	sub    %eax,%edx
  800420dae1:	89 d0                	mov    %edx,%eax
  800420dae3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420dae6:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420daed:	00 00 00 
  800420daf0:	48 8b 10             	mov    (%rax),%rdx
  800420daf3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420daf6:	48 98                	cltq   
  800420daf8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420daff:	48 01 d0             	add    %rdx,%rax
  800420db02:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db08:	83 f8 02             	cmp    $0x2,%eax
  800420db0b:	0f 85 cd 00 00 00    	jne    800420dbde <sched_yield+0x1c8>
  800420db11:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420db18:	00 00 00 
  800420db1b:	48 8b 10             	mov    (%rax),%rdx
  800420db1e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db21:	48 98                	cltq   
  800420db23:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db2a:	48 01 d0             	add    %rdx,%rax
  800420db2d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420db33:	83 f8 03             	cmp    $0x3,%eax
  800420db36:	75 7b                	jne    800420dbb3 <sched_yield+0x19d>
  800420db38:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420db3f:	00 00 00 
  800420db42:	48 8b 10             	mov    (%rax),%rdx
  800420db45:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db48:	48 98                	cltq   
  800420db4a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db51:	48 01 d0             	add    %rdx,%rax
  800420db54:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420db5a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420db61:	00 00 00 
  800420db64:	ff d0                	callq  *%rax
  800420db66:	39 c3                	cmp    %eax,%ebx
  800420db68:	74 02                	je     800420db6c <sched_yield+0x156>
  800420db6a:	eb 72                	jmp    800420dbde <sched_yield+0x1c8>
  800420db6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420db71:	48 ba 75 d9 20 04 80 	movabs $0x800420d975,%rdx
  800420db78:	00 00 00 
  800420db7b:	ff d2                	callq  *%rdx
  800420db7d:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420db80:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420db84:	79 2d                	jns    800420dbb3 <sched_yield+0x19d>
  800420db86:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420db8d:	00 00 00 
  800420db90:	48 8b 10             	mov    (%rax),%rdx
  800420db93:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db96:	48 98                	cltq   
  800420db98:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db9f:	48 01 d0             	add    %rdx,%rax
  800420dba2:	48 89 c7             	mov    %rax,%rdi
  800420dba5:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420dbac:	00 00 00 
  800420dbaf:	ff d0                	callq  *%rax
  800420dbb1:	eb 2b                	jmp    800420dbde <sched_yield+0x1c8>
  800420dbb3:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dbba:	00 00 00 
  800420dbbd:	48 8b 10             	mov    (%rax),%rdx
  800420dbc0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbc3:	48 98                	cltq   
  800420dbc5:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbcc:	48 01 d0             	add    %rdx,%rax
  800420dbcf:	48 89 c7             	mov    %rax,%rdi
  800420dbd2:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420dbd9:	00 00 00 
  800420dbdc:	ff d0                	callq  *%rax
  800420dbde:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420dbe2:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
  800420dbe9:	0f 8e d8 fe ff ff    	jle    800420dac7 <sched_yield+0xb1>
  800420dbef:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420dbf6:	00 00 00 
  800420dbf9:	ff d0                	callq  *%rax
  800420dbfb:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dc02:	00 00 00 
  800420dc05:	48 98                	cltq   
  800420dc07:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc0b:	48 89 c1             	mov    %rax,%rcx
  800420dc0e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc12:	48 01 c8             	add    %rcx,%rax
  800420dc15:	48 01 d0             	add    %rdx,%rax
  800420dc18:	48 83 c0 08          	add    $0x8,%rax
  800420dc1c:	48 8b 00             	mov    (%rax),%rax
  800420dc1f:	48 85 c0             	test   %rax,%rax
  800420dc22:	0f 84 fe 00 00 00    	je     800420dd26 <sched_yield+0x310>
  800420dc28:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420dc2f:	00 00 00 
  800420dc32:	ff d0                	callq  *%rax
  800420dc34:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dc3b:	00 00 00 
  800420dc3e:	48 98                	cltq   
  800420dc40:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc44:	48 89 c1             	mov    %rax,%rcx
  800420dc47:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc4b:	48 01 c8             	add    %rcx,%rax
  800420dc4e:	48 01 d0             	add    %rdx,%rax
  800420dc51:	48 83 c0 08          	add    $0x8,%rax
  800420dc55:	48 8b 00             	mov    (%rax),%rax
  800420dc58:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc5e:	83 f8 03             	cmp    $0x3,%eax
  800420dc61:	0f 85 bf 00 00 00    	jne    800420dd26 <sched_yield+0x310>
  800420dc67:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dc6e:	00 00 00 
  800420dc71:	48 8b 10             	mov    (%rax),%rdx
  800420dc74:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dc77:	48 98                	cltq   
  800420dc79:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc80:	48 01 d0             	add    %rdx,%rax
  800420dc83:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420dc89:	83 f8 03             	cmp    $0x3,%eax
  800420dc8c:	75 59                	jne    800420dce7 <sched_yield+0x2d1>
  800420dc8e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dc93:	48 ba 75 d9 20 04 80 	movabs $0x800420d975,%rdx
  800420dc9a:	00 00 00 
  800420dc9d:	ff d2                	callq  *%rdx
  800420dc9f:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dca2:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dca6:	79 3f                	jns    800420dce7 <sched_yield+0x2d1>
  800420dca8:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420dcaf:	00 00 00 
  800420dcb2:	ff d0                	callq  *%rax
  800420dcb4:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dcbb:	00 00 00 
  800420dcbe:	48 98                	cltq   
  800420dcc0:	48 c1 e0 03          	shl    $0x3,%rax
  800420dcc4:	48 89 c1             	mov    %rax,%rcx
  800420dcc7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dccb:	48 01 c8             	add    %rcx,%rax
  800420dcce:	48 01 d0             	add    %rdx,%rax
  800420dcd1:	48 83 c0 08          	add    $0x8,%rax
  800420dcd5:	48 8b 00             	mov    (%rax),%rax
  800420dcd8:	48 89 c7             	mov    %rax,%rdi
  800420dcdb:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420dce2:	00 00 00 
  800420dce5:	ff d0                	callq  *%rax
  800420dce7:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420dcee:	00 00 00 
  800420dcf1:	ff d0                	callq  *%rax
  800420dcf3:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dcfa:	00 00 00 
  800420dcfd:	48 98                	cltq   
  800420dcff:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd03:	48 89 c1             	mov    %rax,%rcx
  800420dd06:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd0a:	48 01 c8             	add    %rcx,%rax
  800420dd0d:	48 01 d0             	add    %rdx,%rax
  800420dd10:	48 83 c0 08          	add    $0x8,%rax
  800420dd14:	48 8b 00             	mov    (%rax),%rax
  800420dd17:	48 89 c7             	mov    %rax,%rdi
  800420dd1a:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420dd21:	00 00 00 
  800420dd24:	ff d0                	callq  *%rax
  800420dd26:	48 b8 39 dd 20 04 80 	movabs $0x800420dd39,%rax
  800420dd2d:	00 00 00 
  800420dd30:	ff d0                	callq  *%rax
  800420dd32:	48 83 c4 18          	add    $0x18,%rsp
  800420dd36:	5b                   	pop    %rbx
  800420dd37:	5d                   	pop    %rbp
  800420dd38:	c3                   	retq   

000000800420dd39 <sched_halt>:
  800420dd39:	55                   	push   %rbp
  800420dd3a:	48 89 e5             	mov    %rsp,%rbp
  800420dd3d:	48 83 ec 20          	sub    $0x20,%rsp
  800420dd41:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420dd48:	eb 79                	jmp    800420ddc3 <sched_halt+0x8a>
  800420dd4a:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dd51:	00 00 00 
  800420dd54:	48 8b 10             	mov    (%rax),%rdx
  800420dd57:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dd5a:	48 98                	cltq   
  800420dd5c:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dd63:	48 01 d0             	add    %rdx,%rax
  800420dd66:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dd6c:	83 f8 02             	cmp    $0x2,%eax
  800420dd6f:	74 5f                	je     800420ddd0 <sched_halt+0x97>
  800420dd71:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dd78:	00 00 00 
  800420dd7b:	48 8b 10             	mov    (%rax),%rdx
  800420dd7e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dd81:	48 98                	cltq   
  800420dd83:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dd8a:	48 01 d0             	add    %rdx,%rax
  800420dd8d:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dd93:	83 f8 03             	cmp    $0x3,%eax
  800420dd96:	74 38                	je     800420ddd0 <sched_halt+0x97>
  800420dd98:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dd9f:	00 00 00 
  800420dda2:	48 8b 10             	mov    (%rax),%rdx
  800420dda5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dda8:	48 98                	cltq   
  800420ddaa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420ddb1:	48 01 d0             	add    %rdx,%rax
  800420ddb4:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420ddba:	83 f8 01             	cmp    $0x1,%eax
  800420ddbd:	74 11                	je     800420ddd0 <sched_halt+0x97>
  800420ddbf:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420ddc3:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420ddca:	0f 8e 7a ff ff ff    	jle    800420dd4a <sched_halt+0x11>
  800420ddd0:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420ddd7:	75 2e                	jne    800420de07 <sched_halt+0xce>
  800420ddd9:	48 bf 28 06 22 04 80 	movabs $0x8004220628,%rdi
  800420dde0:	00 00 00 
  800420dde3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dde8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ddef:	00 00 00 
  800420ddf2:	ff d2                	callq  *%rdx
  800420ddf4:	bf 00 00 00 00       	mov    $0x0,%edi
  800420ddf9:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420de00:	00 00 00 
  800420de03:	ff d0                	callq  *%rax
  800420de05:	eb ed                	jmp    800420ddf4 <sched_halt+0xbb>
  800420de07:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420de0e:	00 00 00 
  800420de11:	ff d0                	callq  *%rax
  800420de13:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420de1a:	00 00 00 
  800420de1d:	48 98                	cltq   
  800420de1f:	48 c1 e0 03          	shl    $0x3,%rax
  800420de23:	48 89 c1             	mov    %rax,%rcx
  800420de26:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de2a:	48 01 c8             	add    %rcx,%rax
  800420de2d:	48 01 d0             	add    %rdx,%rax
  800420de30:	48 83 c0 08          	add    $0x8,%rax
  800420de34:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420de3b:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420de42:	00 00 00 
  800420de45:	48 8b 00             	mov    (%rax),%rax
  800420de48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420de4c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420de53:	00 00 00 
  800420de56:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420de5a:	77 32                	ja     800420de8e <sched_halt+0x155>
  800420de5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420de60:	48 89 c1             	mov    %rax,%rcx
  800420de63:	48 ba 58 06 22 04 80 	movabs $0x8004220658,%rdx
  800420de6a:	00 00 00 
  800420de6d:	be 76 00 00 00       	mov    $0x76,%esi
  800420de72:	48 bf 7c 06 22 04 80 	movabs $0x800422067c,%rdi
  800420de79:	00 00 00 
  800420de7c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de81:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420de88:	00 00 00 
  800420de8b:	41 ff d0             	callq  *%r8
  800420de8e:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420de95:	ff ff ff 
  800420de98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420de9c:	48 01 d0             	add    %rdx,%rax
  800420de9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420dea3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dea7:	0f 22 d8             	mov    %rax,%cr3
  800420deaa:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420deb1:	00 00 00 
  800420deb4:	ff d0                	callq  *%rax
  800420deb6:	48 98                	cltq   
  800420deb8:	48 c1 e0 03          	shl    $0x3,%rax
  800420debc:	48 89 c2             	mov    %rax,%rdx
  800420debf:	48 c1 e2 04          	shl    $0x4,%rdx
  800420dec3:	48 01 d0             	add    %rdx,%rax
  800420dec6:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420decd:	00 00 00 
  800420ded0:	48 01 d0             	add    %rdx,%rax
  800420ded3:	48 83 c0 04          	add    $0x4,%rax
  800420ded7:	be 02 00 00 00       	mov    $0x2,%esi
  800420dedc:	48 89 c7             	mov    %rax,%rdi
  800420dedf:	48 b8 32 d9 20 04 80 	movabs $0x800420d932,%rax
  800420dee6:	00 00 00 
  800420dee9:	ff d0                	callq  *%rax
  800420deeb:	48 b8 57 d9 20 04 80 	movabs $0x800420d957,%rax
  800420def2:	00 00 00 
  800420def5:	ff d0                	callq  *%rax
  800420def7:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420defe:	00 00 00 
  800420df01:	ff d0                	callq  *%rax
  800420df03:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420df0a:	00 00 00 
  800420df0d:	48 98                	cltq   
  800420df0f:	48 c1 e0 03          	shl    $0x3,%rax
  800420df13:	48 89 c1             	mov    %rax,%rcx
  800420df16:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df1a:	48 01 c8             	add    %rcx,%rax
  800420df1d:	48 01 d0             	add    %rdx,%rax
  800420df20:	48 83 c0 10          	add    $0x10,%rax
  800420df24:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420df28:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420df2f:	48 89 c4             	mov    %rax,%rsp
  800420df32:	6a 00                	pushq  $0x0
  800420df34:	6a 00                	pushq  $0x0
  800420df36:	fb                   	sti    
  800420df37:	f4                   	hlt    
  800420df38:	c9                   	leaveq 
  800420df39:	c3                   	retq   

000000800420df3a <page2ppn>:
  800420df3a:	55                   	push   %rbp
  800420df3b:	48 89 e5             	mov    %rsp,%rbp
  800420df3e:	48 83 ec 08          	sub    $0x8,%rsp
  800420df42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420df46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420df4a:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800420df51:	00 00 00 
  800420df54:	48 8b 00             	mov    (%rax),%rax
  800420df57:	48 29 c2             	sub    %rax,%rdx
  800420df5a:	48 89 d0             	mov    %rdx,%rax
  800420df5d:	48 c1 f8 04          	sar    $0x4,%rax
  800420df61:	c9                   	leaveq 
  800420df62:	c3                   	retq   

000000800420df63 <page2pa>:
  800420df63:	55                   	push   %rbp
  800420df64:	48 89 e5             	mov    %rsp,%rbp
  800420df67:	48 83 ec 08          	sub    $0x8,%rsp
  800420df6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420df6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420df73:	48 89 c7             	mov    %rax,%rdi
  800420df76:	48 b8 3a df 20 04 80 	movabs $0x800420df3a,%rax
  800420df7d:	00 00 00 
  800420df80:	ff d0                	callq  *%rax
  800420df82:	48 c1 e0 0c          	shl    $0xc,%rax
  800420df86:	c9                   	leaveq 
  800420df87:	c3                   	retq   

000000800420df88 <page2kva>:
  800420df88:	55                   	push   %rbp
  800420df89:	48 89 e5             	mov    %rsp,%rbp
  800420df8c:	48 83 ec 20          	sub    $0x20,%rsp
  800420df90:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420df94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420df98:	48 89 c7             	mov    %rax,%rdi
  800420df9b:	48 b8 63 df 20 04 80 	movabs $0x800420df63,%rax
  800420dfa2:	00 00 00 
  800420dfa5:	ff d0                	callq  *%rax
  800420dfa7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420dfab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420dfaf:	48 c1 e8 0c          	shr    $0xc,%rax
  800420dfb3:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420dfb6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420dfb9:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420dfc0:	00 00 00 
  800420dfc3:	48 8b 00             	mov    (%rax),%rax
  800420dfc6:	48 39 c2             	cmp    %rax,%rdx
  800420dfc9:	72 32                	jb     800420dffd <page2kva+0x75>
  800420dfcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420dfcf:	48 89 c1             	mov    %rax,%rcx
  800420dfd2:	48 ba 90 06 22 04 80 	movabs $0x8004220690,%rdx
  800420dfd9:	00 00 00 
  800420dfdc:	be 62 00 00 00       	mov    $0x62,%esi
  800420dfe1:	48 bf b3 06 22 04 80 	movabs $0x80042206b3,%rdi
  800420dfe8:	00 00 00 
  800420dfeb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dff0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420dff7:	00 00 00 
  800420dffa:	41 ff d0             	callq  *%r8
  800420dffd:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420e004:	00 00 00 
  800420e007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e00b:	48 01 d0             	add    %rdx,%rax
  800420e00e:	c9                   	leaveq 
  800420e00f:	c3                   	retq   

000000800420e010 <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420e010:	55                   	push   %rbp
  800420e011:	48 89 e5             	mov    %rsp,%rbp
  800420e014:	48 83 ec 10          	sub    $0x10,%rsp
  800420e018:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e01c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    // Check that the user has permission to read memory [s, s+len).
    // Destroy the environment if not.

    // LAB 3: Your code here.
    user_mem_assert(curenv, s, len, PTE_U);
  800420e020:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e027:	00 00 00 
  800420e02a:	ff d0                	callq  *%rax
  800420e02c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e033:	00 00 00 
  800420e036:	48 98                	cltq   
  800420e038:	48 c1 e0 03          	shl    $0x3,%rax
  800420e03c:	48 89 c1             	mov    %rax,%rcx
  800420e03f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e043:	48 01 c8             	add    %rcx,%rax
  800420e046:	48 01 d0             	add    %rdx,%rax
  800420e049:	48 83 c0 08          	add    $0x8,%rax
  800420e04d:	48 8b 00             	mov    (%rax),%rax
  800420e050:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e054:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e058:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e05d:	48 89 c7             	mov    %rax,%rdi
  800420e060:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e067:	00 00 00 
  800420e06a:	ff d0                	callq  *%rax

    // Print the string supplied by the user.
    cprintf("%.*s", len, s);
  800420e06c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e070:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e074:	48 89 c6             	mov    %rax,%rsi
  800420e077:	48 bf c2 06 22 04 80 	movabs $0x80042206c2,%rdi
  800420e07e:	00 00 00 
  800420e081:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e086:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e08d:	00 00 00 
  800420e090:	ff d1                	callq  *%rcx
}
  800420e092:	c9                   	leaveq 
  800420e093:	c3                   	retq   

000000800420e094 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420e094:	55                   	push   %rbp
  800420e095:	48 89 e5             	mov    %rsp,%rbp
    return cons_getc();
  800420e098:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  800420e09f:	00 00 00 
  800420e0a2:	ff d0                	callq  *%rax
}
  800420e0a4:	5d                   	pop    %rbp
  800420e0a5:	c3                   	retq   

000000800420e0a6 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420e0a6:	55                   	push   %rbp
  800420e0a7:	48 89 e5             	mov    %rsp,%rbp
    return curenv->env_id;
  800420e0aa:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e0b1:	00 00 00 
  800420e0b4:	ff d0                	callq  *%rax
  800420e0b6:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e0bd:	00 00 00 
  800420e0c0:	48 98                	cltq   
  800420e0c2:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0c6:	48 89 c1             	mov    %rax,%rcx
  800420e0c9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0cd:	48 01 c8             	add    %rcx,%rax
  800420e0d0:	48 01 d0             	add    %rdx,%rax
  800420e0d3:	48 83 c0 08          	add    $0x8,%rax
  800420e0d7:	48 8b 00             	mov    (%rax),%rax
  800420e0da:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e0e0:	5d                   	pop    %rbp
  800420e0e1:	c3                   	retq   

000000800420e0e2 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420e0e2:	55                   	push   %rbp
  800420e0e3:	48 89 e5             	mov    %rsp,%rbp
  800420e0e6:	48 83 ec 20          	sub    $0x20,%rsp
  800420e0ea:	89 7d ec             	mov    %edi,-0x14(%rbp)
    int r;
    struct Env *e;

    if ((r = envid2env(envid, &e, 1)) < 0)
  800420e0ed:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e0f1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e0f4:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e0f9:	48 89 ce             	mov    %rcx,%rsi
  800420e0fc:	89 c7                	mov    %eax,%edi
  800420e0fe:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e105:	00 00 00 
  800420e108:	ff d0                	callq  *%rax
  800420e10a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e10d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e111:	79 05                	jns    800420e118 <sys_env_destroy+0x36>
        return r;
  800420e113:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e116:	eb 18                	jmp    800420e130 <sys_env_destroy+0x4e>
    env_destroy(e);
  800420e118:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e11c:	48 89 c7             	mov    %rax,%rdi
  800420e11f:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420e126:	00 00 00 
  800420e129:	ff d0                	callq  *%rax
    return 0;
  800420e12b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e130:	c9                   	leaveq 
  800420e131:	c3                   	retq   

000000800420e132 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420e132:	55                   	push   %rbp
  800420e133:	48 89 e5             	mov    %rsp,%rbp
    sched_yield();
  800420e136:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420e13d:	00 00 00 
  800420e140:	ff d0                	callq  *%rax

000000800420e142 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420e142:	55                   	push   %rbp
  800420e143:	48 89 e5             	mov    %rsp,%rbp
  800420e146:	53                   	push   %rbx
  800420e147:	48 83 ec 18          	sub    $0x18,%rsp
    int r;
    struct Env *e;

    if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420e14b:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e152:	00 00 00 
  800420e155:	ff d0                	callq  *%rax
  800420e157:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e15e:	00 00 00 
  800420e161:	48 98                	cltq   
  800420e163:	48 c1 e0 03          	shl    $0x3,%rax
  800420e167:	48 89 c1             	mov    %rax,%rcx
  800420e16a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e16e:	48 01 c8             	add    %rcx,%rax
  800420e171:	48 01 d0             	add    %rdx,%rax
  800420e174:	48 83 c0 08          	add    $0x8,%rax
  800420e178:	48 8b 00             	mov    (%rax),%rax
  800420e17b:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420e181:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420e185:	89 d6                	mov    %edx,%esi
  800420e187:	48 89 c7             	mov    %rax,%rdi
  800420e18a:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800420e191:	00 00 00 
  800420e194:	ff d0                	callq  *%rax
  800420e196:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e199:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e19d:	79 05                	jns    800420e1a4 <sys_exofork+0x62>
        return r;
  800420e19f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e1a2:	eb 6c                	jmp    800420e210 <sys_exofork+0xce>
    e->env_status = ENV_NOT_RUNNABLE;
  800420e1a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e1a8:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e1af:	00 00 00 
    e->env_tf = curenv->env_tf;
  800420e1b2:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420e1b6:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e1bd:	00 00 00 
  800420e1c0:	ff d0                	callq  *%rax
  800420e1c2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e1c9:	00 00 00 
  800420e1cc:	48 98                	cltq   
  800420e1ce:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1d2:	48 89 c1             	mov    %rax,%rcx
  800420e1d5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1d9:	48 01 c8             	add    %rcx,%rax
  800420e1dc:	48 01 d0             	add    %rdx,%rax
  800420e1df:	48 83 c0 08          	add    $0x8,%rax
  800420e1e3:	48 8b 00             	mov    (%rax),%rax
  800420e1e6:	48 89 da             	mov    %rbx,%rdx
  800420e1e9:	48 89 c6             	mov    %rax,%rsi
  800420e1ec:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e1f1:	48 89 d7             	mov    %rdx,%rdi
  800420e1f4:	48 89 c1             	mov    %rax,%rcx
  800420e1f7:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e1fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e1fe:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e205:	00 
    return e->env_id;
  800420e206:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e20a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e210:	48 83 c4 18          	add    $0x18,%rsp
  800420e214:	5b                   	pop    %rbx
  800420e215:	5d                   	pop    %rbp
  800420e216:	c3                   	retq   

000000800420e217 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420e217:	55                   	push   %rbp
  800420e218:	48 89 e5             	mov    %rsp,%rbp
  800420e21b:	48 83 ec 20          	sub    $0x20,%rsp
  800420e21f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e222:	89 75 e8             	mov    %esi,-0x18(%rbp)
    struct Env *e;
    int r;

    if ((r = envid2env(envid, &e, 1)) < 0)
  800420e225:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e229:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e22c:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e231:	48 89 ce             	mov    %rcx,%rsi
  800420e234:	89 c7                	mov    %eax,%edi
  800420e236:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e23d:	00 00 00 
  800420e240:	ff d0                	callq  *%rax
  800420e242:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e245:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e249:	79 05                	jns    800420e250 <sys_env_set_status+0x39>
        return r;
  800420e24b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e24e:	eb 25                	jmp    800420e275 <sys_env_set_status+0x5e>
    if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420e250:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e254:	74 0d                	je     800420e263 <sys_env_set_status+0x4c>
  800420e256:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e25a:	74 07                	je     800420e263 <sys_env_set_status+0x4c>
        return -E_INVAL;
  800420e25c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e261:	eb 12                	jmp    800420e275 <sys_env_set_status+0x5e>
    e->env_status = status;
  800420e263:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e267:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e26a:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
    return 0;
  800420e270:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e275:	c9                   	leaveq 
  800420e276:	c3                   	retq   

000000800420e277 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e277:	55                   	push   %rbp
  800420e278:	48 89 e5             	mov    %rsp,%rbp
  800420e27b:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e282:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e288:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
    int r;
    struct Env *e;
    struct Trapframe ltf;

    user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e28f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e296:	00 00 00 
  800420e299:	ff d0                	callq  *%rax
  800420e29b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e2a2:	00 00 00 
  800420e2a5:	48 98                	cltq   
  800420e2a7:	48 c1 e0 03          	shl    $0x3,%rax
  800420e2ab:	48 89 c1             	mov    %rax,%rcx
  800420e2ae:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e2b2:	48 01 c8             	add    %rcx,%rax
  800420e2b5:	48 01 d0             	add    %rdx,%rax
  800420e2b8:	48 83 c0 08          	add    $0x8,%rax
  800420e2bc:	48 8b 00             	mov    (%rax),%rax
  800420e2bf:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e2c6:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e2cb:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e2d0:	48 89 c7             	mov    %rax,%rdi
  800420e2d3:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e2da:	00 00 00 
  800420e2dd:	ff d0                	callq  *%rax
    ltf = *tf;
  800420e2df:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e2e6:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e2ed:	48 89 c6             	mov    %rax,%rsi
  800420e2f0:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e2f5:	48 89 d7             	mov    %rdx,%rdi
  800420e2f8:	48 89 c1             	mov    %rax,%rcx
  800420e2fb:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    ltf.tf_eflags |= FL_IF;
  800420e2fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e302:	80 cc 02             	or     $0x2,%ah
  800420e305:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ltf.tf_cs |= 3;
  800420e309:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e30d:	83 c8 03             	or     $0x3,%eax
  800420e310:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

    if ((r = envid2env(envid, &e, 1)) < 0)
  800420e314:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e318:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e31e:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e323:	48 89 ce             	mov    %rcx,%rsi
  800420e326:	89 c7                	mov    %eax,%edi
  800420e328:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e32f:	00 00 00 
  800420e332:	ff d0                	callq  *%rax
  800420e334:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e337:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e33b:	79 05                	jns    800420e342 <sys_env_set_trapframe+0xcb>
        return r;
  800420e33d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e340:	eb 21                	jmp    800420e363 <sys_env_set_trapframe+0xec>
    e->env_tf = ltf;
  800420e342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e346:	48 89 c2             	mov    %rax,%rdx
  800420e349:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e350:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e355:	48 89 d7             	mov    %rdx,%rdi
  800420e358:	48 89 c1             	mov    %rax,%rcx
  800420e35b:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    return 0;
  800420e35e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e363:	c9                   	leaveq 
  800420e364:	c3                   	retq   

000000800420e365 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e365:	55                   	push   %rbp
  800420e366:	48 89 e5             	mov    %rsp,%rbp
  800420e369:	48 83 ec 20          	sub    $0x20,%rsp
  800420e36d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e370:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    int r;
    struct Env *e;

    if ((r = envid2env(envid, &e, 1)) < 0)
  800420e374:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e378:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e37b:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e380:	48 89 ce             	mov    %rcx,%rsi
  800420e383:	89 c7                	mov    %eax,%edi
  800420e385:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e38c:	00 00 00 
  800420e38f:	ff d0                	callq  *%rax
  800420e391:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e394:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e398:	79 05                	jns    800420e39f <sys_env_set_pgfault_upcall+0x3a>
        return r;
  800420e39a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e39d:	eb 14                	jmp    800420e3b3 <sys_env_set_pgfault_upcall+0x4e>
    e->env_pgfault_upcall = func;
  800420e39f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3a3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e3a7:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
    return 0;
  800420e3ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e3b3:	c9                   	leaveq 
  800420e3b4:	c3                   	retq   

000000800420e3b5 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e3b5:	55                   	push   %rbp
  800420e3b6:	48 89 e5             	mov    %rsp,%rbp
  800420e3b9:	48 83 ec 30          	sub    $0x30,%rsp
  800420e3bd:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e3c0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e3c4:	89 55 d8             	mov    %edx,-0x28(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;

    if ((r = envid2env(envid, &e, 1)) < 0)
  800420e3c7:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e3cb:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e3ce:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e3d3:	48 89 ce             	mov    %rcx,%rsi
  800420e3d6:	89 c7                	mov    %eax,%edi
  800420e3d8:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e3df:	00 00 00 
  800420e3e2:	ff d0                	callq  *%rax
  800420e3e4:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e3e7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e3eb:	79 08                	jns    800420e3f5 <sys_page_alloc+0x40>
        return r;
  800420e3ed:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e3f0:	e9 a7 00 00 00       	jmpq   800420e49c <sys_page_alloc+0xe7>
    if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e3f5:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e3f8:	f7 d0                	not    %eax
  800420e3fa:	83 e0 05             	and    $0x5,%eax
  800420e3fd:	85 c0                	test   %eax,%eax
  800420e3ff:	75 0c                	jne    800420e40d <sys_page_alloc+0x58>
  800420e401:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e404:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e409:	85 c0                	test   %eax,%eax
  800420e40b:	74 0a                	je     800420e417 <sys_page_alloc+0x62>
        return -E_INVAL;
  800420e40d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e412:	e9 85 00 00 00       	jmpq   800420e49c <sys_page_alloc+0xe7>
    if (va >= (void*) UTOP)
  800420e417:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e41e:	00 00 00 
  800420e421:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e425:	76 07                	jbe    800420e42e <sys_page_alloc+0x79>
        return -E_INVAL;
  800420e427:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e42c:	eb 6e                	jmp    800420e49c <sys_page_alloc+0xe7>
    if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e42e:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e433:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420e43a:	00 00 00 
  800420e43d:	ff d0                	callq  *%rax
  800420e43f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e443:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e448:	75 07                	jne    800420e451 <sys_page_alloc+0x9c>
        return -E_NO_MEM;
  800420e44a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e44f:	eb 4b                	jmp    800420e49c <sys_page_alloc+0xe7>
    if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420e451:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e455:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e45c:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e45f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e463:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e467:	48 89 c7             	mov    %rax,%rdi
  800420e46a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e471:	00 00 00 
  800420e474:	ff d0                	callq  *%rax
  800420e476:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e479:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e47d:	79 18                	jns    800420e497 <sys_page_alloc+0xe2>
        page_free(pp);
  800420e47f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e483:	48 89 c7             	mov    %rax,%rdi
  800420e486:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420e48d:	00 00 00 
  800420e490:	ff d0                	callq  *%rax
        return r;
  800420e492:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e495:	eb 05                	jmp    800420e49c <sys_page_alloc+0xe7>
    }
    return 0;
  800420e497:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e49c:	c9                   	leaveq 
  800420e49d:	c3                   	retq   

000000800420e49e <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
         envid_t dstenvid, void *dstva, int perm)
{
  800420e49e:	55                   	push   %rbp
  800420e49f:	48 89 e5             	mov    %rsp,%rbp
  800420e4a2:	48 83 ec 60          	sub    $0x60,%rsp
  800420e4a6:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e4a9:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e4ad:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e4b0:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e4b4:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
    int r;
    struct Env *es, *ed;
    struct PageInfo *pp;
    pte_t *ppte;

    if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420e4b8:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e4bf:	00 00 00 
  800420e4c2:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e4c6:	77 10                	ja     800420e4d8 <sys_page_map+0x3a>
  800420e4c8:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e4cf:	00 00 00 
  800420e4d2:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e4d6:	76 0a                	jbe    800420e4e2 <sys_page_map+0x44>
        return -E_INVAL;
  800420e4d8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e4dd:	e9 3f 01 00 00       	jmpq   800420e621 <sys_page_map+0x183>
    if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e4e2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e4e6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e4ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4ee:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e4f4:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e4f8:	75 18                	jne    800420e512 <sys_page_map+0x74>
  800420e4fa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e4fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e502:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e506:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e50c:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e510:	74 0a                	je     800420e51c <sys_page_map+0x7e>
        return -E_INVAL;
  800420e512:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e517:	e9 05 01 00 00       	jmpq   800420e621 <sys_page_map+0x183>

    if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420e51c:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e520:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e523:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e528:	48 89 ce             	mov    %rcx,%rsi
  800420e52b:	89 c7                	mov    %eax,%edi
  800420e52d:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e534:	00 00 00 
  800420e537:	ff d0                	callq  *%rax
  800420e539:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e53c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e540:	78 26                	js     800420e568 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e542:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e546:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e549:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e54e:	48 89 ce             	mov    %rcx,%rsi
  800420e551:	89 c7                	mov    %eax,%edi
  800420e553:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e55a:	00 00 00 
  800420e55d:	ff d0                	callq  *%rax
  800420e55f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e562:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e566:	79 08                	jns    800420e570 <sys_page_map+0xd2>
        return r;
  800420e568:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e56b:	e9 b1 00 00 00       	jmpq   800420e621 <sys_page_map+0x183>
    if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e570:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e573:	f7 d0                	not    %eax
  800420e575:	83 e0 05             	and    $0x5,%eax
  800420e578:	85 c0                	test   %eax,%eax
  800420e57a:	75 0c                	jne    800420e588 <sys_page_map+0xea>
  800420e57c:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e57f:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e584:	85 c0                	test   %eax,%eax
  800420e586:	74 0a                	je     800420e592 <sys_page_map+0xf4>
        return -E_INVAL;
  800420e588:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e58d:	e9 8f 00 00 00       	jmpq   800420e621 <sys_page_map+0x183>
    if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e592:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e596:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e59d:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e5a1:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e5a5:	48 89 ce             	mov    %rcx,%rsi
  800420e5a8:	48 89 c7             	mov    %rax,%rdi
  800420e5ab:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e5b2:	00 00 00 
  800420e5b5:	ff d0                	callq  *%rax
  800420e5b7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e5bb:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e5c0:	75 07                	jne    800420e5c9 <sys_page_map+0x12b>
        return -E_INVAL;
  800420e5c2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5c7:	eb 58                	jmp    800420e621 <sys_page_map+0x183>
    if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e5c9:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e5cc:	83 e0 02             	and    $0x2,%eax
  800420e5cf:	85 c0                	test   %eax,%eax
  800420e5d1:	74 16                	je     800420e5e9 <sys_page_map+0x14b>
  800420e5d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e5d7:	48 8b 00             	mov    (%rax),%rax
  800420e5da:	83 e0 02             	and    $0x2,%eax
  800420e5dd:	48 85 c0             	test   %rax,%rax
  800420e5e0:	75 07                	jne    800420e5e9 <sys_page_map+0x14b>
        return -E_INVAL;
  800420e5e2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5e7:	eb 38                	jmp    800420e621 <sys_page_map+0x183>
    if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e5e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e5ed:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e5f4:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e5f7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e5fb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e5ff:	48 89 c7             	mov    %rax,%rdi
  800420e602:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e609:	00 00 00 
  800420e60c:	ff d0                	callq  *%rax
  800420e60e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e611:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e615:	79 05                	jns    800420e61c <sys_page_map+0x17e>
        return r;
  800420e617:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e61a:	eb 05                	jmp    800420e621 <sys_page_map+0x183>
    return 0;
  800420e61c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e621:	c9                   	leaveq 
  800420e622:	c3                   	retq   

000000800420e623 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e623:	55                   	push   %rbp
  800420e624:	48 89 e5             	mov    %rsp,%rbp
  800420e627:	48 83 ec 20          	sub    $0x20,%rsp
  800420e62b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e62e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    int r;
    struct Env *e;

    if ((r = envid2env(envid, &e, 1)) < 0)
  800420e632:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e636:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e639:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e63e:	48 89 ce             	mov    %rcx,%rsi
  800420e641:	89 c7                	mov    %eax,%edi
  800420e643:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e64a:	00 00 00 
  800420e64d:	ff d0                	callq  *%rax
  800420e64f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e652:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e656:	79 05                	jns    800420e65d <sys_page_unmap+0x3a>
        return r;
  800420e658:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e65b:	eb 4b                	jmp    800420e6a8 <sys_page_unmap+0x85>
    if (va >= (void*) UTOP || PGOFF(va))
  800420e65d:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e664:	00 00 00 
  800420e667:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e66b:	77 0e                	ja     800420e67b <sys_page_unmap+0x58>
  800420e66d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e671:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e676:	48 85 c0             	test   %rax,%rax
  800420e679:	74 07                	je     800420e682 <sys_page_unmap+0x5f>
        return -E_INVAL;
  800420e67b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e680:	eb 26                	jmp    800420e6a8 <sys_page_unmap+0x85>
    page_remove(e->env_pml4e, va);
  800420e682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e686:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e68d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e691:	48 89 d6             	mov    %rdx,%rsi
  800420e694:	48 89 c7             	mov    %rax,%rdi
  800420e697:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420e69e:	00 00 00 
  800420e6a1:	ff d0                	callq  *%rax
    return 0;
  800420e6a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e6a8:	c9                   	leaveq 
  800420e6a9:	c3                   	retq   

000000800420e6aa <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e6aa:	55                   	push   %rbp
  800420e6ab:	48 89 e5             	mov    %rsp,%rbp
  800420e6ae:	53                   	push   %rbx
  800420e6af:	48 83 ec 48          	sub    $0x48,%rsp
  800420e6b3:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e6b6:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e6b9:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e6bd:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;

    if ((r = envid2env(envid, &e, 0)) < 0)
  800420e6c0:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e6c4:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e6c7:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e6cc:	48 89 ce             	mov    %rcx,%rsi
  800420e6cf:	89 c7                	mov    %eax,%edi
  800420e6d1:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e6d8:	00 00 00 
  800420e6db:	ff d0                	callq  *%rax
  800420e6dd:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e6e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e6e4:	79 08                	jns    800420e6ee <sys_ipc_try_send+0x44>
        return r;
  800420e6e6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e6e9:	e9 3d 05 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
    if (!e->env_ipc_recving) {
  800420e6ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e6f2:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e6f9:	83 f0 01             	xor    $0x1,%eax
  800420e6fc:	84 c0                	test   %al,%al
  800420e6fe:	74 0a                	je     800420e70a <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420e700:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e705:	e9 21 05 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */


    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420e70a:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e711:	00 00 00 
  800420e714:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e718:	0f 87 22 03 00 00    	ja     800420ea40 <sys_ipc_try_send+0x396>
  800420e71e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e722:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e729:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e730:	00 00 00 
  800420e733:	48 39 c2             	cmp    %rax,%rdx
  800420e736:	0f 87 04 03 00 00    	ja     800420ea40 <sys_ipc_try_send+0x396>
            


        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420e73c:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e73f:	f7 d0                	not    %eax
  800420e741:	83 e0 05             	and    $0x5,%eax
  800420e744:	85 c0                	test   %eax,%eax
  800420e746:	75 0c                	jne    800420e754 <sys_ipc_try_send+0xaa>
  800420e748:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e74b:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e750:	85 c0                	test   %eax,%eax
  800420e752:	74 60                	je     800420e7b4 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e754:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e75b:	00 00 00 
  800420e75e:	ff d0                	callq  *%rax
  800420e760:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e767:	00 00 00 
  800420e76a:	48 98                	cltq   
  800420e76c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e770:	48 89 c1             	mov    %rax,%rcx
  800420e773:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e777:	48 01 c8             	add    %rcx,%rax
  800420e77a:	48 01 d0             	add    %rdx,%rax
  800420e77d:	48 83 c0 08          	add    $0x8,%rax
  800420e781:	48 8b 00             	mov    (%rax),%rax
  800420e784:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e78a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e78d:	89 c6                	mov    %eax,%esi
  800420e78f:	48 bf c8 06 22 04 80 	movabs $0x80042206c8,%rdi
  800420e796:	00 00 00 
  800420e799:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e79e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e7a5:	00 00 00 
  800420e7a8:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e7aa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e7af:	e9 77 04 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e7b4:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e7bb:	00 00 00 
  800420e7be:	ff d0                	callq  *%rax
  800420e7c0:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e7c7:	00 00 00 
  800420e7ca:	48 98                	cltq   
  800420e7cc:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7d0:	48 89 c1             	mov    %rax,%rcx
  800420e7d3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7d7:	48 01 c8             	add    %rcx,%rax
  800420e7da:	48 01 d0             	add    %rdx,%rax
  800420e7dd:	48 83 c0 08          	add    $0x8,%rax
  800420e7e1:	48 8b 00             	mov    (%rax),%rax
  800420e7e4:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e7eb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e7ef:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e7f3:	48 89 ce             	mov    %rcx,%rsi
  800420e7f6:	48 89 c7             	mov    %rax,%rdi
  800420e7f9:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e800:	00 00 00 
  800420e803:	ff d0                	callq  *%rax
  800420e805:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420e809:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e80e:	75 61                	jne    800420e871 <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e810:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e817:	00 00 00 
  800420e81a:	ff d0                	callq  *%rax
  800420e81c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e823:	00 00 00 
  800420e826:	48 98                	cltq   
  800420e828:	48 c1 e0 03          	shl    $0x3,%rax
  800420e82c:	48 89 c1             	mov    %rax,%rcx
  800420e82f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e833:	48 01 c8             	add    %rcx,%rax
  800420e836:	48 01 d0             	add    %rdx,%rax
  800420e839:	48 83 c0 08          	add    $0x8,%rax
  800420e83d:	48 8b 00             	mov    (%rax),%rax
  800420e840:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e846:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e84a:	89 c6                	mov    %eax,%esi
  800420e84c:	48 bf f0 06 22 04 80 	movabs $0x80042206f0,%rdi
  800420e853:	00 00 00 
  800420e856:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e85b:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e862:	00 00 00 
  800420e865:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e867:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e86c:	e9 ba 03 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420e871:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e874:	83 e0 02             	and    $0x2,%eax
  800420e877:	85 c0                	test   %eax,%eax
  800420e879:	74 6c                	je     800420e8e7 <sys_ipc_try_send+0x23d>
  800420e87b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e87f:	48 8b 00             	mov    (%rax),%rax
  800420e882:	83 e0 02             	and    $0x2,%eax
  800420e885:	48 85 c0             	test   %rax,%rax
  800420e888:	75 5d                	jne    800420e8e7 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e88a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e891:	00 00 00 
  800420e894:	ff d0                	callq  *%rax
  800420e896:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e89d:	00 00 00 
  800420e8a0:	48 98                	cltq   
  800420e8a2:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8a6:	48 89 c1             	mov    %rax,%rcx
  800420e8a9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e8ad:	48 01 c8             	add    %rcx,%rax
  800420e8b0:	48 01 d0             	add    %rdx,%rax
  800420e8b3:	48 83 c0 08          	add    $0x8,%rax
  800420e8b7:	48 8b 00             	mov    (%rax),%rax
  800420e8ba:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e8c0:	89 c6                	mov    %eax,%esi
  800420e8c2:	48 bf 28 07 22 04 80 	movabs $0x8004220728,%rdi
  800420e8c9:	00 00 00 
  800420e8cc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e8d1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420e8d8:	00 00 00 
  800420e8db:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420e8dd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e8e2:	e9 44 03 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
        }
        // Code here vtz
        if (e->env_type != ENV_TYPE_GUEST){
  800420e8e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e8eb:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420e8f1:	83 f8 03             	cmp    $0x3,%eax
  800420e8f4:	0f 84 9c 00 00 00    	je     800420e996 <sys_ipc_try_send+0x2ec>

            r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e8fa:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e8fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e901:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e908:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e90c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e913:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e917:	48 89 c7             	mov    %rax,%rdi
  800420e91a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e921:	00 00 00 
  800420e924:	ff d0                	callq  *%rax
  800420e926:	89 45 ec             	mov    %eax,-0x14(%rbp)
            if (r < 0) {
  800420e929:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e92d:	0f 89 fb 00 00 00    	jns    800420ea2e <sys_ipc_try_send+0x384>
                cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e933:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e93a:	00 00 00 
  800420e93d:	ff d0                	callq  *%rax
  800420e93f:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e946:	00 00 00 
  800420e949:	48 98                	cltq   
  800420e94b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e94f:	48 89 c1             	mov    %rax,%rcx
  800420e952:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e956:	48 01 c8             	add    %rcx,%rax
  800420e959:	48 01 d0             	add    %rdx,%rax
  800420e95c:	48 83 c0 08          	add    $0x8,%rax
  800420e960:	48 8b 00             	mov    (%rax),%rax
  800420e963:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e969:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e96c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e970:	89 c6                	mov    %eax,%esi
  800420e972:	48 bf 70 07 22 04 80 	movabs $0x8004220770,%rdi
  800420e979:	00 00 00 
  800420e97c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e981:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420e988:	00 00 00 
  800420e98b:	41 ff d0             	callq  *%r8
                return r;
  800420e98e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e991:	e9 95 02 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
            }
	}
#ifndef VMM_GUEST
        else {
                //cprintf("SUd ept page insert %d \n", e->env_type);
            r = ept_page_insert(e->env_pml4e, pp, (void*) e->env_ipc_dstva, perm);
  800420e996:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e999:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e99d:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e9a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9a8:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e9af:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e9b3:	48 89 c7             	mov    %rax,%rdi
  800420e9b6:	48 b8 76 9f 21 04 80 	movabs $0x8004219f76,%rax
  800420e9bd:	00 00 00 
  800420e9c0:	ff d0                	callq  *%rax
  800420e9c2:	89 45 ec             	mov    %eax,-0x14(%rbp)
            if (r < 0){
  800420e9c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e9c9:	79 63                	jns    800420ea2e <sys_ipc_try_send+0x384>
                cprintf("[%08x] ept_page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e9cb:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420e9d2:	00 00 00 
  800420e9d5:	ff d0                	callq  *%rax
  800420e9d7:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e9de:	00 00 00 
  800420e9e1:	48 98                	cltq   
  800420e9e3:	48 c1 e0 03          	shl    $0x3,%rax
  800420e9e7:	48 89 c1             	mov    %rax,%rcx
  800420e9ea:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e9ee:	48 01 c8             	add    %rcx,%rax
  800420e9f1:	48 01 d0             	add    %rdx,%rax
  800420e9f4:	48 83 c0 08          	add    $0x8,%rax
  800420e9f8:	48 8b 00             	mov    (%rax),%rax
  800420e9fb:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ea01:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420ea04:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ea08:	89 c6                	mov    %eax,%esi
  800420ea0a:	48 bf b0 07 22 04 80 	movabs $0x80042207b0,%rdi
  800420ea11:	00 00 00 
  800420ea14:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea19:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420ea20:	00 00 00 
  800420ea23:	41 ff d0             	callq  *%r8
                return r;
  800420ea26:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420ea29:	e9 fd 01 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
            }
        }
#endif

        e->env_ipc_perm = perm;
  800420ea2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea32:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420ea35:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420ea3b:	e9 5a 01 00 00       	jmpq   800420eb9a <sys_ipc_try_send+0x4f0>
    } 
#ifndef VMM_GUEST
    else if (srcva < (void*) UTOP &&  e->env_type == ENV_TYPE_GUEST) {
  800420ea40:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420ea47:	00 00 00 
  800420ea4a:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420ea4e:	0f 87 38 01 00 00    	ja     800420eb8c <sys_ipc_try_send+0x4e2>
  800420ea54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea58:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420ea5e:	83 f8 03             	cmp    $0x3,%eax
  800420ea61:	0f 85 25 01 00 00    	jne    800420eb8c <sys_ipc_try_send+0x4e2>
            pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420ea67:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ea6e:	00 00 00 
  800420ea71:	ff d0                	callq  *%rax
  800420ea73:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ea7a:	00 00 00 
  800420ea7d:	48 98                	cltq   
  800420ea7f:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea83:	48 89 c1             	mov    %rax,%rcx
  800420ea86:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea8a:	48 01 c8             	add    %rcx,%rax
  800420ea8d:	48 01 d0             	add    %rdx,%rax
  800420ea90:	48 83 c0 08          	add    $0x8,%rax
  800420ea94:	48 8b 00             	mov    (%rax),%rax
  800420ea97:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ea9e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420eaa2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420eaa6:	48 89 ce             	mov    %rcx,%rsi
  800420eaa9:	48 89 c7             	mov    %rax,%rdi
  800420eaac:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420eab3:	00 00 00 
  800420eab6:	ff d0                	callq  *%rax
  800420eab8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            cprintf("Sud ept page insert guest %d \n", e->env_type);
  800420eabc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eac0:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420eac6:	89 c6                	mov    %eax,%esi
  800420eac8:	48 bf f0 07 22 04 80 	movabs $0x80042207f0,%rdi
  800420eacf:	00 00 00 
  800420ead2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ead7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420eade:	00 00 00 
  800420eae1:	ff d2                	callq  *%rdx
            r = ept_page_insert(e->env_pml4e, pp, (void*) e->env_ipc_dstva, __EPTE_FULL);
  800420eae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eae7:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420eaee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eaf2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420eaf9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420eafd:	b9 07 00 00 00       	mov    $0x7,%ecx
  800420eb02:	48 89 c7             	mov    %rax,%rdi
  800420eb05:	48 b8 76 9f 21 04 80 	movabs $0x8004219f76,%rax
  800420eb0c:	00 00 00 
  800420eb0f:	ff d0                	callq  *%rax
  800420eb11:	89 45 ec             	mov    %eax,-0x14(%rbp)
            if (r < 0){
  800420eb14:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420eb18:	79 63                	jns    800420eb7d <sys_ipc_try_send+0x4d3>
                cprintf("[%08x] ept_page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420eb1a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420eb21:	00 00 00 
  800420eb24:	ff d0                	callq  *%rax
  800420eb26:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420eb2d:	00 00 00 
  800420eb30:	48 98                	cltq   
  800420eb32:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb36:	48 89 c1             	mov    %rax,%rcx
  800420eb39:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb3d:	48 01 c8             	add    %rcx,%rax
  800420eb40:	48 01 d0             	add    %rdx,%rax
  800420eb43:	48 83 c0 08          	add    $0x8,%rax
  800420eb47:	48 8b 00             	mov    (%rax),%rax
  800420eb4a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420eb50:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420eb53:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420eb57:	89 c6                	mov    %eax,%esi
  800420eb59:	48 bf b0 07 22 04 80 	movabs $0x80042207b0,%rdi
  800420eb60:	00 00 00 
  800420eb63:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eb68:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420eb6f:	00 00 00 
  800420eb72:	41 ff d0             	callq  *%r8
                return r;
  800420eb75:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420eb78:	e9 ae 00 00 00       	jmpq   800420ec2b <sys_ipc_try_send+0x581>
            }
    e->env_ipc_perm = perm;
  800420eb7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eb81:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420eb84:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420eb8a:	eb 0e                	jmp    800420eb9a <sys_ipc_try_send+0x4f0>

    }
#endif
    else	{
            //cprintf("Sud else %d \n", e->env_type);
	    e->env_ipc_perm = 0;
  800420eb8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eb90:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420eb97:	00 00 00 
    }
    e->env_ipc_recving = 0;
  800420eb9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eb9e:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420eba5:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420eba9:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ebb0:	00 00 00 
  800420ebb3:	ff d0                	callq  *%rax
  800420ebb5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ebbc:	00 00 00 
  800420ebbf:	48 98                	cltq   
  800420ebc1:	48 c1 e0 03          	shl    $0x3,%rax
  800420ebc5:	48 89 c1             	mov    %rax,%rcx
  800420ebc8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ebcc:	48 01 c8             	add    %rcx,%rax
  800420ebcf:	48 01 d0             	add    %rdx,%rax
  800420ebd2:	48 83 c0 08          	add    $0x8,%rax
  800420ebd6:	48 8b 00             	mov    (%rax),%rax
  800420ebd9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ebdf:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420ebe5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ebe9:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420ebec:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    if (e->env_type == ENV_TYPE_GUEST)
  800420ebf2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ebf6:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420ebfc:	83 f8 03             	cmp    $0x3,%eax
  800420ebff:	75 0b                	jne    800420ec0c <sys_ipc_try_send+0x562>
	e->env_tf.tf_regs.reg_rsi = value;
  800420ec01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ec05:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420ec08:	48 89 50 40          	mov    %rdx,0x40(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420ec0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ec10:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420ec17:	00 
    e->env_status = ENV_RUNNABLE;
  800420ec18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ec1c:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420ec23:	00 00 00 
    return 0;
  800420ec26:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ec2b:	48 83 c4 48          	add    $0x48,%rsp
  800420ec2f:	5b                   	pop    %rbx
  800420ec30:	5d                   	pop    %rbp
  800420ec31:	c3                   	retq   

000000800420ec32 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420ec32:	55                   	push   %rbp
  800420ec33:	48 89 e5             	mov    %rsp,%rbp
  800420ec36:	48 83 ec 10          	sub    $0x10,%rsp
  800420ec3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (curenv->env_ipc_recving)
  800420ec3e:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ec45:	00 00 00 
  800420ec48:	ff d0                	callq  *%rax
  800420ec4a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ec51:	00 00 00 
  800420ec54:	48 98                	cltq   
  800420ec56:	48 c1 e0 03          	shl    $0x3,%rax
  800420ec5a:	48 89 c1             	mov    %rax,%rcx
  800420ec5d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ec61:	48 01 c8             	add    %rcx,%rax
  800420ec64:	48 01 d0             	add    %rdx,%rax
  800420ec67:	48 83 c0 08          	add    $0x8,%rax
  800420ec6b:	48 8b 00             	mov    (%rax),%rax
  800420ec6e:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420ec75:	84 c0                	test   %al,%al
  800420ec77:	74 2a                	je     800420eca3 <sys_ipc_recv+0x71>
        panic("already recving!");
  800420ec79:	48 ba 0f 08 22 04 80 	movabs $0x800422080f,%rdx
  800420ec80:	00 00 00 
  800420ec83:	be 9d 01 00 00       	mov    $0x19d,%esi
  800420ec88:	48 bf 20 08 22 04 80 	movabs $0x8004220820,%rdi
  800420ec8f:	00 00 00 
  800420ec92:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec97:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420ec9e:	00 00 00 
  800420eca1:	ff d1                	callq  *%rcx

    curenv->env_ipc_recving = 1;
  800420eca3:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ecaa:	00 00 00 
  800420ecad:	ff d0                	callq  *%rax
  800420ecaf:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ecb6:	00 00 00 
  800420ecb9:	48 98                	cltq   
  800420ecbb:	48 c1 e0 03          	shl    $0x3,%rax
  800420ecbf:	48 89 c1             	mov    %rax,%rcx
  800420ecc2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ecc6:	48 01 c8             	add    %rcx,%rax
  800420ecc9:	48 01 d0             	add    %rdx,%rax
  800420eccc:	48 83 c0 08          	add    $0x8,%rax
  800420ecd0:	48 8b 00             	mov    (%rax),%rax
  800420ecd3:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
    curenv->env_ipc_dstva = dstva;
  800420ecda:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ece1:	00 00 00 
  800420ece4:	ff d0                	callq  *%rax
  800420ece6:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420eced:	00 00 00 
  800420ecf0:	48 98                	cltq   
  800420ecf2:	48 c1 e0 03          	shl    $0x3,%rax
  800420ecf6:	48 89 c1             	mov    %rax,%rcx
  800420ecf9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ecfd:	48 01 c8             	add    %rcx,%rax
  800420ed00:	48 01 d0             	add    %rdx,%rax
  800420ed03:	48 83 c0 08          	add    $0x8,%rax
  800420ed07:	48 8b 00             	mov    (%rax),%rax
  800420ed0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420ed0e:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
    curenv->env_status = ENV_NOT_RUNNABLE;
  800420ed15:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ed1c:	00 00 00 
  800420ed1f:	ff d0                	callq  *%rax
  800420ed21:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ed28:	00 00 00 
  800420ed2b:	48 98                	cltq   
  800420ed2d:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed31:	48 89 c1             	mov    %rax,%rcx
  800420ed34:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed38:	48 01 c8             	add    %rcx,%rax
  800420ed3b:	48 01 d0             	add    %rdx,%rax
  800420ed3e:	48 83 c0 08          	add    $0x8,%rax
  800420ed42:	48 8b 00             	mov    (%rax),%rax
  800420ed45:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420ed4c:	00 00 00 
    sched_yield();
  800420ed4f:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420ed56:	00 00 00 
  800420ed59:	ff d0                	callq  *%rax

000000800420ed5b <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420ed5b:	55                   	push   %rbp
  800420ed5c:	48 89 e5             	mov    %rsp,%rbp
    return (int) time_msec();
  800420ed5f:	48 b8 40 98 21 04 80 	movabs $0x8004219840,%rax
  800420ed66:	00 00 00 
  800420ed69:	ff d0                	callq  *%rax
}
  800420ed6b:	5d                   	pop    %rbp
  800420ed6c:	c3                   	retq   

000000800420ed6d <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420ed6d:	55                   	push   %rbp
  800420ed6e:	48 89 e5             	mov    %rsp,%rbp
  800420ed71:	48 83 ec 10          	sub    $0x10,%rsp
  800420ed75:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ed79:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    user_mem_assert(curenv, data, len, 0);
  800420ed7d:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420ed84:	00 00 00 
  800420ed87:	ff d0                	callq  *%rax
  800420ed89:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ed90:	00 00 00 
  800420ed93:	48 98                	cltq   
  800420ed95:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed99:	48 89 c1             	mov    %rax,%rcx
  800420ed9c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eda0:	48 01 c8             	add    %rcx,%rax
  800420eda3:	48 01 d0             	add    %rdx,%rax
  800420eda6:	48 83 c0 08          	add    $0x8,%rax
  800420edaa:	48 8b 00             	mov    (%rax),%rax
  800420edad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420edb1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420edb5:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420edba:	48 89 c7             	mov    %rax,%rdi
  800420edbd:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420edc4:	00 00 00 
  800420edc7:	ff d0                	callq  *%rax
    return e1000_transmit(data, len);
  800420edc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edcd:	89 c2                	mov    %eax,%edx
  800420edcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420edd3:	89 d6                	mov    %edx,%esi
  800420edd5:	48 89 c7             	mov    %rax,%rdi
  800420edd8:	48 b8 c9 89 21 04 80 	movabs $0x80042189c9,%rax
  800420eddf:	00 00 00 
  800420ede2:	ff d0                	callq  *%rax
}
  800420ede4:	c9                   	leaveq 
  800420ede5:	c3                   	retq   

000000800420ede6 <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420ede6:	55                   	push   %rbp
  800420ede7:	48 89 e5             	mov    %rsp,%rbp
  800420edea:	48 83 ec 10          	sub    $0x10,%rsp
  800420edee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420edf2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    user_mem_assert(curenv, buf, len, PTE_W);
  800420edf6:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420edfd:	00 00 00 
  800420ee00:	ff d0                	callq  *%rax
  800420ee02:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ee09:	00 00 00 
  800420ee0c:	48 98                	cltq   
  800420ee0e:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee12:	48 89 c1             	mov    %rax,%rcx
  800420ee15:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ee19:	48 01 c8             	add    %rcx,%rax
  800420ee1c:	48 01 d0             	add    %rdx,%rax
  800420ee1f:	48 83 c0 08          	add    $0x8,%rax
  800420ee23:	48 8b 00             	mov    (%rax),%rax
  800420ee26:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ee2a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ee2e:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420ee33:	48 89 c7             	mov    %rax,%rdi
  800420ee36:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420ee3d:	00 00 00 
  800420ee40:	ff d0                	callq  *%rax
    return e1000_receive(buf, len);
  800420ee42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee46:	89 c2                	mov    %eax,%edx
  800420ee48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ee4c:	89 d6                	mov    %edx,%esi
  800420ee4e:	48 89 c7             	mov    %rax,%rdi
  800420ee51:	48 b8 38 8b 21 04 80 	movabs $0x8004218b38,%rax
  800420ee58:	00 00 00 
  800420ee5b:	ff d0                	callq  *%rax
}
  800420ee5d:	c9                   	leaveq 
  800420ee5e:	c3                   	retq   

000000800420ee5f <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms() {
  800420ee5f:	55                   	push   %rbp
  800420ee60:	48 89 e5             	mov    %rsp,%rbp
    vmx_list_vms();
  800420ee63:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee68:	48 ba 6c b1 21 04 80 	movabs $0x800421b16c,%rdx
  800420ee6f:	00 00 00 
  800420ee72:	ff d2                	callq  *%rdx
}
  800420ee74:	5d                   	pop    %rbp
  800420ee75:	c3                   	retq   

000000800420ee76 <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i) {
  800420ee76:	55                   	push   %rbp
  800420ee77:	48 89 e5             	mov    %rsp,%rbp
  800420ee7a:	48 83 ec 10          	sub    $0x10,%rsp
  800420ee7e:	89 7d fc             	mov    %edi,-0x4(%rbp)
    return vmx_sel_resume(i);
  800420ee81:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ee84:	89 c7                	mov    %eax,%edi
  800420ee86:	48 b8 2c b2 21 04 80 	movabs $0x800421b22c,%rax
  800420ee8d:	00 00 00 
  800420ee90:	ff d0                	callq  *%rax
}
  800420ee92:	c9                   	leaveq 
  800420ee93:	c3                   	retq   

000000800420ee94 <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number() {
  800420ee94:	55                   	push   %rbp
  800420ee95:	48 89 e5             	mov    %rsp,%rbp
    return vmx_get_vmdisk_number();
  800420ee98:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee9d:	48 ba 7f dd 21 04 80 	movabs $0x800421dd7f,%rdx
  800420eea4:	00 00 00 
  800420eea7:	ff d2                	callq  *%rdx
}
  800420eea9:	5d                   	pop    %rbp
  800420eeaa:	c3                   	retq   

000000800420eeab <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number() {
  800420eeab:	55                   	push   %rbp
  800420eeac:	48 89 e5             	mov    %rsp,%rbp
    vmx_incr_vmdisk_number();
  800420eeaf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eeb4:	48 ba 91 dd 21 04 80 	movabs $0x800421dd91,%rdx
  800420eebb:	00 00 00 
  800420eebe:	ff d2                	callq  *%rdx
}
  800420eec0:	5d                   	pop    %rbp
  800420eec1:	c3                   	retq   

000000800420eec2 <sys_ept_map>:
//       instead of the normal page table. 
// 
static int
sys_ept_map(envid_t srcenvid, void *srcva,
        envid_t guest, void* guest_pa, int perm)
{
  800420eec2:	55                   	push   %rbp
  800420eec3:	48 89 e5             	mov    %rsp,%rbp
  800420eec6:	48 83 ec 60          	sub    $0x60,%rsp
  800420eeca:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420eecd:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420eed1:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420eed4:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420eed8:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
    struct Env *src_env, *guest_env;
    struct PageInfo *pp;
    pte_t *ppte;

    // check that the source virtual address is good
    if (srcva >= (void*) UTOP || srcva != ROUNDDOWN(srcva, PGSIZE)) {
  800420eedc:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420eee3:	00 00 00 
  800420eee6:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420eeea:	77 18                	ja     800420ef04 <sys_ept_map+0x42>
  800420eeec:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420eef0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420eef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eef8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420eefe:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420ef02:	74 0a                	je     800420ef0e <sys_ept_map+0x4c>
        return -E_INVAL;
  800420ef04:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ef09:	e9 6b 01 00 00       	jmpq   800420f079 <sys_ept_map+0x1b7>
    }

    // obtain src and guest env, returning error if either does not exist
    if ((ret = envid2env(srcenvid, &src_env, 1)) < 0 ||
  800420ef0e:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420ef12:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420ef15:	ba 01 00 00 00       	mov    $0x1,%edx
  800420ef1a:	48 89 ce             	mov    %rcx,%rsi
  800420ef1d:	89 c7                	mov    %eax,%edi
  800420ef1f:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420ef26:	00 00 00 
  800420ef29:	ff d0                	callq  *%rax
  800420ef2b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420ef2e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ef32:	78 26                	js     800420ef5a <sys_ept_map+0x98>
  800420ef34:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420ef38:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ef3b:	ba 01 00 00 00       	mov    $0x1,%edx
  800420ef40:	48 89 ce             	mov    %rcx,%rsi
  800420ef43:	89 c7                	mov    %eax,%edi
  800420ef45:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420ef4c:	00 00 00 
  800420ef4f:	ff d0                	callq  *%rax
  800420ef51:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420ef54:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ef58:	79 08                	jns    800420ef62 <sys_ept_map+0xa0>
        (ret = envid2env(guest, &guest_env, 1)) < 0) {
            return ret;
  800420ef5a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ef5d:	e9 17 01 00 00       	jmpq   800420f079 <sys_ept_map+0x1b7>
    }
    // check that the guest physical address is good
    if (guest_pa >= (void*) guest_env->env_vmxinfo.phys_sz || guest_pa != ROUNDDOWN(guest_pa, PGSIZE)) {
  800420ef62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ef66:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
  800420ef6d:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420ef71:	76 18                	jbe    800420ef8b <sys_ept_map+0xc9>
  800420ef73:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ef77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ef7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ef7f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420ef85:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420ef89:	74 0a                	je     800420ef95 <sys_ept_map+0xd3>
        return -E_INVAL;
  800420ef8b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ef90:	e9 e4 00 00 00       	jmpq   800420f079 <sys_ept_map+0x1b7>
    }
    
    // check that srcva is mapped in src_env's address space 
    if ((pp = page_lookup(src_env->env_pml4e, srcva, &ppte)) == 0) {
  800420ef95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ef99:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420efa0:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420efa4:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420efa8:	48 89 ce             	mov    %rcx,%rsi
  800420efab:	48 89 c7             	mov    %rax,%rdi
  800420efae:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420efb5:	00 00 00 
  800420efb8:	ff d0                	callq  *%rax
  800420efba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420efbe:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420efc3:	75 0a                	jne    800420efcf <sys_ept_map+0x10d>
        return -E_INVAL;
  800420efc5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420efca:	e9 aa 00 00 00       	jmpq   800420f079 <sys_ept_map+0x1b7>
    }

    // check that the requested permissions are valid (some combination of read, write, and exec)
    if ((perm & __EPTE_FULL) == 0)
  800420efcf:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420efd2:	83 e0 07             	and    $0x7,%eax
  800420efd5:	85 c0                	test   %eax,%eax
  800420efd7:	75 0a                	jne    800420efe3 <sys_ept_map+0x121>
		return -E_INVAL;
  800420efd9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420efde:	e9 96 00 00 00       	jmpq   800420f079 <sys_ept_map+0x1b7>

    // if perm requests write permission but we don't have write access to the page,
    // return an error
	if ((perm & __EPTE_WRITE) && ((*ppte) & PTE_W) == 0)
  800420efe3:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420efe6:	83 e0 02             	and    $0x2,%eax
  800420efe9:	85 c0                	test   %eax,%eax
  800420efeb:	74 16                	je     800420f003 <sys_ept_map+0x141>
  800420efed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420eff1:	48 8b 00             	mov    (%rax),%rax
  800420eff4:	83 e0 02             	and    $0x2,%eax
  800420eff7:	48 85 c0             	test   %rax,%rax
  800420effa:	75 07                	jne    800420f003 <sys_ept_map+0x141>
		return -E_INVAL;
  800420effc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420f001:	eb 76                	jmp    800420f079 <sys_ept_map+0x1b7>

    // increment the page ref count. we'll undo this later if the mapping fails
    pp->pp_ref += 1;
  800420f003:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f007:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420f00b:	8d 50 01             	lea    0x1(%rax),%edx
  800420f00e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f012:	66 89 50 08          	mov    %dx,0x8(%rax)
    ret = ept_map_hva2gpa(guest_env->env_pml4e, page2kva(pp), guest_pa, perm, 0);
  800420f016:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f01a:	48 89 c7             	mov    %rax,%rdi
  800420f01d:	48 b8 88 df 20 04 80 	movabs $0x800420df88,%rax
  800420f024:	00 00 00 
  800420f027:	ff d0                	callq  *%rax
  800420f029:	48 89 c6             	mov    %rax,%rsi
  800420f02c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f030:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420f037:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420f03a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420f03e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f044:	48 89 c7             	mov    %rax,%rdi
  800420f047:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800420f04e:	00 00 00 
  800420f051:	ff d0                	callq  *%rax
  800420f053:	89 45 fc             	mov    %eax,-0x4(%rbp)
    if (ret < 0) {
  800420f056:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420f05a:	79 18                	jns    800420f074 <sys_ept_map+0x1b2>
        pp->pp_ref -= 1;
  800420f05c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f060:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420f064:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420f067:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f06b:	66 89 50 08          	mov    %dx,0x8(%rax)
        return ret;
  800420f06f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f072:	eb 05                	jmp    800420f079 <sys_ept_map+0x1b7>
    }

    return 0;
  800420f074:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420f079:	c9                   	leaveq 
  800420f07a:	c3                   	retq   

000000800420f07b <sys_env_mkguest>:

static envid_t
    sys_env_mkguest(uint64_t gphysz, uint64_t gRIP) {
  800420f07b:	55                   	push   %rbp
  800420f07c:	48 89 e5             	mov    %rsp,%rbp
  800420f07f:	48 83 ec 20          	sub    $0x20,%rsp
  800420f083:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f087:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    int r;
    struct Env *e;

    // Check if the processor has VMX support.
    if ( !vmx_check_support() ) {
  800420f08b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f090:	48 ba 02 b3 21 04 80 	movabs $0x800421b302,%rdx
  800420f097:	00 00 00 
  800420f09a:	ff d2                	callq  *%rdx
  800420f09c:	83 f0 01             	xor    $0x1,%eax
  800420f09f:	84 c0                	test   %al,%al
  800420f0a1:	74 0a                	je     800420f0ad <sys_env_mkguest+0x32>
        return -E_NO_VMX;
  800420f0a3:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420f0a8:	e9 b1 00 00 00       	jmpq   800420f15e <sys_env_mkguest+0xe3>
    } else if ( !vmx_check_ept() ) {
  800420f0ad:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f0b2:	48 ba 83 b3 21 04 80 	movabs $0x800421b383,%rdx
  800420f0b9:	00 00 00 
  800420f0bc:	ff d2                	callq  *%rdx
  800420f0be:	83 f0 01             	xor    $0x1,%eax
  800420f0c1:	84 c0                	test   %al,%al
  800420f0c3:	74 0a                	je     800420f0cf <sys_env_mkguest+0x54>
        return -E_NO_EPT;
  800420f0c5:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420f0ca:	e9 8f 00 00 00       	jmpq   800420f15e <sys_env_mkguest+0xe3>
    } 
    if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420f0cf:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420f0d6:	00 00 00 
  800420f0d9:	ff d0                	callq  *%rax
  800420f0db:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420f0e2:	00 00 00 
  800420f0e5:	48 98                	cltq   
  800420f0e7:	48 c1 e0 03          	shl    $0x3,%rax
  800420f0eb:	48 89 c1             	mov    %rax,%rcx
  800420f0ee:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f0f2:	48 01 c8             	add    %rcx,%rax
  800420f0f5:	48 01 d0             	add    %rdx,%rax
  800420f0f8:	48 83 c0 08          	add    $0x8,%rax
  800420f0fc:	48 8b 00             	mov    (%rax),%rax
  800420f0ff:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420f105:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420f109:	89 d6                	mov    %edx,%esi
  800420f10b:	48 89 c7             	mov    %rax,%rdi
  800420f10e:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800420f115:	00 00 00 
  800420f118:	ff d0                	callq  *%rax
  800420f11a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420f11d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420f121:	79 05                	jns    800420f128 <sys_env_mkguest+0xad>
        return r;
  800420f123:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f126:	eb 36                	jmp    800420f15e <sys_env_mkguest+0xe3>
    e->env_status = ENV_NOT_RUNNABLE;
  800420f128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f12c:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420f133:	00 00 00 
    e->env_vmxinfo.phys_sz = gphysz;
  800420f136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f13a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f13e:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
    e->env_tf.tf_rip = gRIP;
  800420f145:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f149:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f14d:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    return e->env_id;
  800420f154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f158:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420f15e:	c9                   	leaveq 
  800420f15f:	c3                   	retq   

000000800420f160 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420f160:	55                   	push   %rbp
  800420f161:	48 89 e5             	mov    %rsp,%rbp
  800420f164:	48 83 ec 30          	sub    $0x30,%rsp
  800420f168:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420f16c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f170:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420f174:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420f178:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420f17c:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    switch (syscallno) {
  800420f180:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420f185:	0f 87 c6 02 00 00    	ja     800420f451 <syscall+0x2f1>
  800420f18b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f18f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f196:	00 
  800420f197:	48 b8 30 08 22 04 80 	movabs $0x8004220830,%rax
  800420f19e:	00 00 00 
  800420f1a1:	48 01 d0             	add    %rdx,%rax
  800420f1a4:	48 8b 00             	mov    (%rax),%rax
  800420f1a7:	ff e0                	jmpq   *%rax
    case SYS_cputs:
        sys_cputs((const char*) a1, a2);
  800420f1a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1b1:	48 89 d6             	mov    %rdx,%rsi
  800420f1b4:	48 89 c7             	mov    %rax,%rdi
  800420f1b7:	48 b8 10 e0 20 04 80 	movabs $0x800420e010,%rax
  800420f1be:	00 00 00 
  800420f1c1:	ff d0                	callq  *%rax
        return 0;
  800420f1c3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f1c8:	e9 8b 02 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_cgetc:
        return sys_cgetc();
  800420f1cd:	48 b8 94 e0 20 04 80 	movabs $0x800420e094,%rax
  800420f1d4:	00 00 00 
  800420f1d7:	ff d0                	callq  *%rax
  800420f1d9:	48 98                	cltq   
  800420f1db:	e9 78 02 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_getenvid:
        return sys_getenvid();
  800420f1e0:	48 b8 a6 e0 20 04 80 	movabs $0x800420e0a6,%rax
  800420f1e7:	00 00 00 
  800420f1ea:	ff d0                	callq  *%rax
  800420f1ec:	48 98                	cltq   
  800420f1ee:	e9 65 02 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_env_destroy:
        return sys_env_destroy(a1);
  800420f1f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1f7:	89 c7                	mov    %eax,%edi
  800420f1f9:	48 b8 e2 e0 20 04 80 	movabs $0x800420e0e2,%rax
  800420f200:	00 00 00 
  800420f203:	ff d0                	callq  *%rax
  800420f205:	48 98                	cltq   
  800420f207:	e9 4c 02 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_page_alloc:
        return sys_page_alloc(a1, (void*) a2, a3);
  800420f20c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f210:	89 c2                	mov    %eax,%edx
  800420f212:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f21a:	48 89 ce             	mov    %rcx,%rsi
  800420f21d:	89 c7                	mov    %eax,%edi
  800420f21f:	48 b8 b5 e3 20 04 80 	movabs $0x800420e3b5,%rax
  800420f226:	00 00 00 
  800420f229:	ff d0                	callq  *%rax
  800420f22b:	48 98                	cltq   
  800420f22d:	e9 26 02 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_page_map:
        return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420f232:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f236:	89 c7                	mov    %eax,%edi
  800420f238:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f23c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f240:	89 c2                	mov    %eax,%edx
  800420f242:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f246:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f24a:	41 89 f8             	mov    %edi,%r8d
  800420f24d:	89 c7                	mov    %eax,%edi
  800420f24f:	48 b8 9e e4 20 04 80 	movabs $0x800420e49e,%rax
  800420f256:	00 00 00 
  800420f259:	ff d0                	callq  *%rax
  800420f25b:	48 98                	cltq   
  800420f25d:	e9 f6 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_page_unmap:
        return sys_page_unmap(a1, (void*) a2);
  800420f262:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f266:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f26a:	48 89 d6             	mov    %rdx,%rsi
  800420f26d:	89 c7                	mov    %eax,%edi
  800420f26f:	48 b8 23 e6 20 04 80 	movabs $0x800420e623,%rax
  800420f276:	00 00 00 
  800420f279:	ff d0                	callq  *%rax
  800420f27b:	48 98                	cltq   
  800420f27d:	e9 d6 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_exofork:
        return sys_exofork();
  800420f282:	48 b8 42 e1 20 04 80 	movabs $0x800420e142,%rax
  800420f289:	00 00 00 
  800420f28c:	ff d0                	callq  *%rax
  800420f28e:	48 98                	cltq   
  800420f290:	e9 c3 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_env_set_status:
        return sys_env_set_status(a1, a2);
  800420f295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f299:	89 c2                	mov    %eax,%edx
  800420f29b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f29f:	89 d6                	mov    %edx,%esi
  800420f2a1:	89 c7                	mov    %eax,%edi
  800420f2a3:	48 b8 17 e2 20 04 80 	movabs $0x800420e217,%rax
  800420f2aa:	00 00 00 
  800420f2ad:	ff d0                	callq  *%rax
  800420f2af:	48 98                	cltq   
  800420f2b1:	e9 a2 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_env_set_trapframe:
        return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420f2b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f2be:	48 89 d6             	mov    %rdx,%rsi
  800420f2c1:	89 c7                	mov    %eax,%edi
  800420f2c3:	48 b8 77 e2 20 04 80 	movabs $0x800420e277,%rax
  800420f2ca:	00 00 00 
  800420f2cd:	ff d0                	callq  *%rax
  800420f2cf:	48 98                	cltq   
  800420f2d1:	e9 82 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_env_set_pgfault_upcall:
        return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420f2d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f2da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f2de:	48 89 d6             	mov    %rdx,%rsi
  800420f2e1:	89 c7                	mov    %eax,%edi
  800420f2e3:	48 b8 65 e3 20 04 80 	movabs $0x800420e365,%rax
  800420f2ea:	00 00 00 
  800420f2ed:	ff d0                	callq  *%rax
  800420f2ef:	48 98                	cltq   
  800420f2f1:	e9 62 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_yield:
        sys_yield();
  800420f2f6:	48 b8 32 e1 20 04 80 	movabs $0x800420e132,%rax
  800420f2fd:	00 00 00 
  800420f300:	ff d0                	callq  *%rax
        return 0;
  800420f302:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f307:	e9 4c 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_ipc_try_send:
        return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420f30c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f310:	89 c1                	mov    %eax,%ecx
  800420f312:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f316:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f31a:	89 c6                	mov    %eax,%esi
  800420f31c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f320:	89 c7                	mov    %eax,%edi
  800420f322:	48 b8 aa e6 20 04 80 	movabs $0x800420e6aa,%rax
  800420f329:	00 00 00 
  800420f32c:	ff d0                	callq  *%rax
  800420f32e:	48 98                	cltq   
  800420f330:	e9 23 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_ipc_recv:
        sys_ipc_recv((void*) a1);
  800420f335:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f339:	48 89 c7             	mov    %rax,%rdi
  800420f33c:	48 b8 32 ec 20 04 80 	movabs $0x800420ec32,%rax
  800420f343:	00 00 00 
  800420f346:	ff d0                	callq  *%rax
        return 0;
  800420f348:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f34d:	e9 06 01 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_time_msec:
        return sys_time_msec();
  800420f352:	48 b8 5b ed 20 04 80 	movabs $0x800420ed5b,%rax
  800420f359:	00 00 00 
  800420f35c:	ff d0                	callq  *%rax
  800420f35e:	48 98                	cltq   
  800420f360:	e9 f3 00 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_net_transmit:
        return sys_net_transmit((const void*)a1, a2);
  800420f365:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f369:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f36d:	48 89 d6             	mov    %rdx,%rsi
  800420f370:	48 89 c7             	mov    %rax,%rdi
  800420f373:	48 b8 6d ed 20 04 80 	movabs $0x800420ed6d,%rax
  800420f37a:	00 00 00 
  800420f37d:	ff d0                	callq  *%rax
  800420f37f:	48 98                	cltq   
  800420f381:	e9 d2 00 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_net_receive:
        return sys_net_receive((void*)a1, a2);
  800420f386:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f38a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f38e:	48 89 d6             	mov    %rdx,%rsi
  800420f391:	48 89 c7             	mov    %rax,%rdi
  800420f394:	48 b8 e6 ed 20 04 80 	movabs $0x800420ede6,%rax
  800420f39b:	00 00 00 
  800420f39e:	ff d0                	callq  *%rax
  800420f3a0:	48 98                	cltq   
  800420f3a2:	e9 b1 00 00 00       	jmpq   800420f458 <syscall+0x2f8>
#ifndef VMM_GUEST
    case SYS_ept_map:
        return sys_ept_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420f3a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f3ab:	89 c7                	mov    %eax,%edi
  800420f3ad:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f3b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f3b5:	89 c2                	mov    %eax,%edx
  800420f3b7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f3bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f3bf:	41 89 f8             	mov    %edi,%r8d
  800420f3c2:	89 c7                	mov    %eax,%edi
  800420f3c4:	48 b8 c2 ee 20 04 80 	movabs $0x800420eec2,%rax
  800420f3cb:	00 00 00 
  800420f3ce:	ff d0                	callq  *%rax
  800420f3d0:	48 98                	cltq   
  800420f3d2:	e9 81 00 00 00       	jmpq   800420f458 <syscall+0x2f8>
    case SYS_env_mkguest:
        return sys_env_mkguest(a1, a2);
  800420f3d7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f3df:	48 89 d6             	mov    %rdx,%rsi
  800420f3e2:	48 89 c7             	mov    %rax,%rdi
  800420f3e5:	48 b8 7b f0 20 04 80 	movabs $0x800420f07b,%rax
  800420f3ec:	00 00 00 
  800420f3ef:	ff d0                	callq  *%rax
  800420f3f1:	48 98                	cltq   
  800420f3f3:	eb 63                	jmp    800420f458 <syscall+0x2f8>
    case SYS_vmx_list_vms:
        sys_vmx_list_vms();
  800420f3f5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f3fa:	48 ba 5f ee 20 04 80 	movabs $0x800420ee5f,%rdx
  800420f401:	00 00 00 
  800420f404:	ff d2                	callq  *%rdx
        return 0;
  800420f406:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f40b:	eb 4b                	jmp    800420f458 <syscall+0x2f8>
    case SYS_vmx_sel_resume:
        return sys_vmx_sel_resume(a1);
  800420f40d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f411:	89 c7                	mov    %eax,%edi
  800420f413:	48 b8 76 ee 20 04 80 	movabs $0x800420ee76,%rax
  800420f41a:	00 00 00 
  800420f41d:	ff d0                	callq  *%rax
  800420f41f:	0f b6 c0             	movzbl %al,%eax
  800420f422:	eb 34                	jmp    800420f458 <syscall+0x2f8>
    case SYS_vmx_get_vmdisk_number:
        return sys_vmx_get_vmdisk_number();
  800420f424:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f429:	48 ba 94 ee 20 04 80 	movabs $0x800420ee94,%rdx
  800420f430:	00 00 00 
  800420f433:	ff d2                	callq  *%rdx
  800420f435:	48 98                	cltq   
  800420f437:	eb 1f                	jmp    800420f458 <syscall+0x2f8>
    case SYS_vmx_incr_vmdisk_number:
        sys_vmx_incr_vmdisk_number();
  800420f439:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f43e:	48 ba ab ee 20 04 80 	movabs $0x800420eeab,%rdx
  800420f445:	00 00 00 
  800420f448:	ff d2                	callq  *%rdx
        return 0;
  800420f44a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f44f:	eb 07                	jmp    800420f458 <syscall+0x2f8>
#endif

    default:
        return -E_NO_SYS;
  800420f451:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    }
}
  800420f458:	c9                   	leaveq 
  800420f459:	c3                   	retq   

000000800420f45a <_export_sys_ept_map>:

#ifdef TEST_EPT_MAP
int
_export_sys_ept_map(envid_t srcenvid, void *srcva,
            envid_t guest, void* guest_pa, int perm)
{
  800420f45a:	55                   	push   %rbp
  800420f45b:	48 89 e5             	mov    %rsp,%rbp
  800420f45e:	48 83 ec 20          	sub    $0x20,%rsp
  800420f462:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f465:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f469:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420f46c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420f470:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
    return sys_ept_map(srcenvid, srcva, guest, guest_pa, perm);
  800420f474:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  800420f477:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f47b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420f47e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420f482:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f485:	41 89 f8             	mov    %edi,%r8d
  800420f488:	89 c7                	mov    %eax,%edi
  800420f48a:	48 b8 c2 ee 20 04 80 	movabs $0x800420eec2,%rax
  800420f491:	00 00 00 
  800420f494:	ff d0                	callq  *%rax
}
  800420f496:	c9                   	leaveq 
  800420f497:	c3                   	retq   

000000800420f498 <list_func_die>:
  800420f498:	55                   	push   %rbp
  800420f499:	48 89 e5             	mov    %rsp,%rbp
  800420f49c:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420f4a3:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420f4aa:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420f4b1:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420f4b8:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f4bf:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420f4c6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f4ca:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f4d1:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f4d8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f4dc:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420f4e3:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f4ea:	48 89 d1             	mov    %rdx,%rcx
  800420f4ed:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f4f2:	48 89 ce             	mov    %rcx,%rsi
  800420f4f5:	48 89 c7             	mov    %rax,%rdi
  800420f4f8:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800420f4ff:	00 00 00 
  800420f502:	ff d0                	callq  *%rax
  800420f504:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420f50b:	00 
  800420f50c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f513:	00 
  800420f514:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f51b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f51f:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420f523:	74 0a                	je     800420f52f <list_func_die+0x97>
  800420f525:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f52a:	e9 cd 06 00 00       	jmpq   800420fbfc <list_func_die+0x764>
  800420f52f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f536:	ba 38 00 00 00       	mov    $0x38,%edx
  800420f53b:	be 00 00 00 00       	mov    $0x0,%esi
  800420f540:	48 89 c7             	mov    %rax,%rdi
  800420f543:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800420f54a:	00 00 00 
  800420f54d:	ff d0                	callq  *%rax
  800420f54f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f556:	be 11 00 00 00       	mov    $0x11,%esi
  800420f55b:	48 89 c7             	mov    %rax,%rdi
  800420f55e:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f565:	00 00 00 
  800420f568:	ff d0                	callq  *%rax
  800420f56a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f56e:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f575:	be 12 00 00 00       	mov    $0x12,%esi
  800420f57a:	48 89 c7             	mov    %rax,%rdi
  800420f57d:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f584:	00 00 00 
  800420f587:	ff d0                	callq  *%rax
  800420f589:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f58d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420f592:	0f 84 5f 06 00 00    	je     800420fbf7 <list_func_die+0x75f>
  800420f598:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f59c:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f5a0:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f5a7:	0f 83 4a 06 00 00    	jae    800420fbf7 <list_func_die+0x75f>
  800420f5ad:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f5b2:	0f 84 3f 06 00 00    	je     800420fbf7 <list_func_die+0x75f>
  800420f5b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f5bc:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f5c0:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f5c7:	0f 86 2a 06 00 00    	jbe    800420fbf7 <list_func_die+0x75f>
  800420f5cd:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f5d4:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f5db:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f5e2:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f5e9:	48 89 10             	mov    %rdx,(%rax)
  800420f5ec:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f5f3:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f5fa:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f601:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f605:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f60c:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f613:	48 89 c7             	mov    %rax,%rdi
  800420f616:	48 b8 8d 0c 21 04 80 	movabs $0x8004210c8d,%rax
  800420f61d:	00 00 00 
  800420f620:	ff d0                	callq  *%rax
  800420f622:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f629:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f62c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f630:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f634:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f63b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f63f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f646:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f64d:	48 85 c0             	test   %rax,%rax
  800420f650:	75 35                	jne    800420f687 <list_func_die+0x1ef>
  800420f652:	48 b9 20 0c 22 04 80 	movabs $0x8004220c20,%rcx
  800420f659:	00 00 00 
  800420f65c:	48 ba 2c 0c 22 04 80 	movabs $0x8004220c2c,%rdx
  800420f663:	00 00 00 
  800420f666:	be 95 00 00 00       	mov    $0x95,%esi
  800420f66b:	48 bf 41 0c 22 04 80 	movabs $0x8004220c41,%rdi
  800420f672:	00 00 00 
  800420f675:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f67a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f681:	00 00 00 
  800420f684:	41 ff d0             	callq  *%r8
  800420f687:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f68e:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f695:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f69c:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f6a3:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f6a8:	48 89 c7             	mov    %rax,%rdi
  800420f6ab:	48 b8 ee 64 21 04 80 	movabs $0x80042164ee,%rax
  800420f6b2:	00 00 00 
  800420f6b5:	ff d0                	callq  *%rax
  800420f6b7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f6be:	89 c2                	mov    %eax,%edx
  800420f6c0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f6c7:	89 50 08             	mov    %edx,0x8(%rax)
  800420f6ca:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f6d1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f6d8:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420f6df:	00 00 00 
  800420f6e2:	48 8b 00             	mov    (%rax),%rax
  800420f6e5:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f6ec:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f6f3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f6f7:	48 89 c7             	mov    %rax,%rdi
  800420f6fa:	48 b8 9e 31 21 04 80 	movabs $0x800421319e,%rax
  800420f701:	00 00 00 
  800420f704:	ff d0                	callq  *%rax
  800420f706:	83 f8 04             	cmp    $0x4,%eax
  800420f709:	0f 84 e1 04 00 00    	je     800420fbf0 <list_func_die+0x758>
  800420f70f:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f716:	48 83 f8 05          	cmp    $0x5,%rax
  800420f71a:	74 05                	je     800420f721 <list_func_die+0x289>
  800420f71c:	e9 cf 04 00 00       	jmpq   800420fbf0 <list_func_die+0x758>
  800420f721:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f728:	be 49 00 00 00       	mov    $0x49,%esi
  800420f72d:	48 89 c7             	mov    %rax,%rdi
  800420f730:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f737:	00 00 00 
  800420f73a:	ff d0                	callq  *%rax
  800420f73c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f740:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f745:	0f 84 d7 00 00 00    	je     800420f822 <list_func_die+0x38a>
  800420f74b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f74f:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f753:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f757:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f75b:	48 01 d0             	add    %rdx,%rax
  800420f75e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f762:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420f769:	00 00 00 
  800420f76c:	48 8b 08             	mov    (%rax),%rcx
  800420f76f:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f776:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f77a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f77e:	48 8b 38             	mov    (%rax),%rdi
  800420f781:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f785:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f789:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f78e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f792:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f797:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f79b:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f7a0:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f7a4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f7a9:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f7ad:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f7b2:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f7b6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f7bb:	48 89 cf             	mov    %rcx,%rdi
  800420f7be:	48 b8 c4 2d 21 04 80 	movabs $0x8004212dc4,%rax
  800420f7c5:	00 00 00 
  800420f7c8:	ff d0                	callq  *%rax
  800420f7ca:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f7d1:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f7d6:	48 89 c7             	mov    %rax,%rdi
  800420f7d9:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f7e0:	00 00 00 
  800420f7e3:	ff d0                	callq  *%rax
  800420f7e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f7ee:	74 0e                	je     800420f7fe <list_func_die+0x366>
  800420f7f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f7f4:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f7f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f7fc:	eb 24                	jmp    800420f822 <list_func_die+0x38a>
  800420f7fe:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f805:	be 49 00 00 00       	mov    $0x49,%esi
  800420f80a:	48 89 c7             	mov    %rax,%rdi
  800420f80d:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f814:	00 00 00 
  800420f817:	ff d0                	callq  *%rax
  800420f819:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f81d:	e9 1e ff ff ff       	jmpq   800420f740 <list_func_die+0x2a8>
  800420f822:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f829:	00 
  800420f82a:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f831:	be 02 00 00 00       	mov    $0x2,%esi
  800420f836:	48 89 c7             	mov    %rax,%rdi
  800420f839:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f840:	00 00 00 
  800420f843:	ff d0                	callq  *%rax
  800420f845:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f849:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f84e:	0f 84 a2 00 00 00    	je     800420f8f6 <list_func_die+0x45e>
  800420f854:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f858:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f85c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f864:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f868:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f86c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f870:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f874:	48 83 f8 03          	cmp    $0x3,%rax
  800420f878:	72 7c                	jb     800420f8f6 <list_func_die+0x45e>
  800420f87a:	48 83 f8 04          	cmp    $0x4,%rax
  800420f87e:	76 06                	jbe    800420f886 <list_func_die+0x3ee>
  800420f880:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f884:	75 70                	jne    800420f8f6 <list_func_die+0x45e>
  800420f886:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f88d:	00 
  800420f88e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f892:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f896:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f89a:	0f b6 00             	movzbl (%rax),%eax
  800420f89d:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f8a0:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f8a5:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f8a9:	75 4a                	jne    800420f8f5 <list_func_die+0x45d>
  800420f8ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f8af:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f8b6:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f8bd:	48 89 c7             	mov    %rax,%rdi
  800420f8c0:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  800420f8c7:	00 00 00 
  800420f8ca:	ff d0                	callq  *%rax
  800420f8cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f8d0:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f8d7:	48 89 c2             	mov    %rax,%rdx
  800420f8da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f8de:	48 29 c2             	sub    %rax,%rdx
  800420f8e1:	48 89 d0             	mov    %rdx,%rax
  800420f8e4:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f8e8:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f8ef:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f8f3:	eb 00                	jmp    800420f8f5 <list_func_die+0x45d>
  800420f8f5:	90                   	nop
  800420f8f6:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f8fd:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f900:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f904:	89 c2                	mov    %eax,%edx
  800420f906:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f90d:	48 63 c9             	movslq %ecx,%rcx
  800420f910:	48 83 c1 08          	add    $0x8,%rcx
  800420f914:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f918:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f91f:	8b 50 28             	mov    0x28(%rax),%edx
  800420f922:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f929:	48 63 d2             	movslq %edx,%rdx
  800420f92c:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f930:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f934:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f939:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f940:	8b 40 28             	mov    0x28(%rax),%eax
  800420f943:	8d 50 01             	lea    0x1(%rax),%edx
  800420f946:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f94d:	89 50 28             	mov    %edx,0x28(%rax)
  800420f950:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f957:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f95e:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f963:	48 89 ce             	mov    %rcx,%rsi
  800420f966:	48 89 c7             	mov    %rax,%rdi
  800420f969:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800420f970:	00 00 00 
  800420f973:	ff d0                	callq  *%rax
  800420f975:	e9 40 02 00 00       	jmpq   800420fbba <list_func_die+0x722>
  800420f97a:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f981:	48 83 f8 05          	cmp    $0x5,%rax
  800420f985:	74 05                	je     800420f98c <list_func_die+0x4f4>
  800420f987:	e9 64 02 00 00       	jmpq   800420fbf0 <list_func_die+0x758>
  800420f98c:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f993:	be 49 00 00 00       	mov    $0x49,%esi
  800420f998:	48 89 c7             	mov    %rax,%rdi
  800420f99b:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420f9a2:	00 00 00 
  800420f9a5:	ff d0                	callq  *%rax
  800420f9a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f9ab:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f9b0:	0f 84 b1 00 00 00    	je     800420fa67 <list_func_die+0x5cf>
  800420f9b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f9ba:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f9be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f9c2:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f9c6:	48 01 d0             	add    %rdx,%rax
  800420f9c9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f9cd:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420f9d4:	00 00 00 
  800420f9d7:	48 8b 08             	mov    (%rax),%rcx
  800420f9da:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f9e1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f9e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f9e9:	48 8b 38             	mov    (%rax),%rdi
  800420f9ec:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f9f0:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f9f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f9f9:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f9fd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420fa02:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420fa06:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420fa0b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420fa0f:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420fa14:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420fa18:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420fa1d:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420fa21:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420fa26:	48 89 cf             	mov    %rcx,%rdi
  800420fa29:	48 b8 c4 2d 21 04 80 	movabs $0x8004212dc4,%rax
  800420fa30:	00 00 00 
  800420fa33:	ff d0                	callq  *%rax
  800420fa35:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fa3c:	be 0b 00 00 00       	mov    $0xb,%esi
  800420fa41:	48 89 c7             	mov    %rax,%rdi
  800420fa44:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420fa4b:	00 00 00 
  800420fa4e:	ff d0                	callq  *%rax
  800420fa50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fa54:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fa59:	74 0c                	je     800420fa67 <list_func_die+0x5cf>
  800420fa5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa5f:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420fa63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fa67:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420fa6e:	00 
  800420fa6f:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420fa76:	be 02 00 00 00       	mov    $0x2,%esi
  800420fa7b:	48 89 c7             	mov    %rax,%rdi
  800420fa7e:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  800420fa85:	00 00 00 
  800420fa88:	ff d0                	callq  *%rax
  800420fa8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fa8e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fa93:	0f 84 a2 00 00 00    	je     800420fb3b <list_func_die+0x6a3>
  800420fa99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa9d:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420faa1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420faa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420faa9:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420faad:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420fab1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fab5:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420fab9:	48 83 f8 03          	cmp    $0x3,%rax
  800420fabd:	72 7c                	jb     800420fb3b <list_func_die+0x6a3>
  800420fabf:	48 83 f8 04          	cmp    $0x4,%rax
  800420fac3:	76 06                	jbe    800420facb <list_func_die+0x633>
  800420fac5:	48 83 f8 0a          	cmp    $0xa,%rax
  800420fac9:	75 70                	jne    800420fb3b <list_func_die+0x6a3>
  800420facb:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420fad2:	00 
  800420fad3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fad7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fadb:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fadf:	0f b6 00             	movzbl (%rax),%eax
  800420fae2:	88 45 97             	mov    %al,-0x69(%rbp)
  800420fae5:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420faea:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420faee:	75 4a                	jne    800420fb3a <list_func_die+0x6a2>
  800420faf0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420faf4:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420fafb:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420fb02:	48 89 c7             	mov    %rax,%rdi
  800420fb05:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  800420fb0c:	00 00 00 
  800420fb0f:	ff d0                	callq  *%rax
  800420fb11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420fb15:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420fb1c:	48 89 c2             	mov    %rax,%rdx
  800420fb1f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fb23:	48 29 c2             	sub    %rax,%rdx
  800420fb26:	48 89 d0             	mov    %rdx,%rax
  800420fb29:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420fb2d:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420fb34:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420fb38:	eb 00                	jmp    800420fb3a <list_func_die+0x6a2>
  800420fb3a:	90                   	nop
  800420fb3b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb42:	8b 48 28             	mov    0x28(%rax),%ecx
  800420fb45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fb49:	89 c2                	mov    %eax,%edx
  800420fb4b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb52:	48 63 c9             	movslq %ecx,%rcx
  800420fb55:	48 83 c1 08          	add    $0x8,%rcx
  800420fb59:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420fb5d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb64:	8b 50 28             	mov    0x28(%rax),%edx
  800420fb67:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb6e:	48 63 d2             	movslq %edx,%rdx
  800420fb71:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420fb75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fb79:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420fb7e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb85:	8b 40 28             	mov    0x28(%rax),%eax
  800420fb88:	8d 50 01             	lea    0x1(%rax),%edx
  800420fb8b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420fb92:	89 50 28             	mov    %edx,0x28(%rax)
  800420fb95:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420fb9c:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420fba3:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fba8:	48 89 ce             	mov    %rcx,%rsi
  800420fbab:	48 89 c7             	mov    %rax,%rdi
  800420fbae:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800420fbb5:	00 00 00 
  800420fbb8:	ff d0                	callq  *%rax
  800420fbba:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fbc1:	00 00 00 
  800420fbc4:	48 8b 00             	mov    (%rax),%rax
  800420fbc7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fbcb:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420fbd2:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420fbd9:	48 89 c7             	mov    %rax,%rdi
  800420fbdc:	48 b8 5a 2f 21 04 80 	movabs $0x8004212f5a,%rax
  800420fbe3:	00 00 00 
  800420fbe6:	ff d0                	callq  *%rax
  800420fbe8:	85 c0                	test   %eax,%eax
  800420fbea:	0f 84 8a fd ff ff    	je     800420f97a <list_func_die+0x4e2>
  800420fbf0:	b8 01 00 00 00       	mov    $0x1,%eax
  800420fbf5:	eb 05                	jmp    800420fbfc <list_func_die+0x764>
  800420fbf7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fbfc:	c9                   	leaveq 
  800420fbfd:	c3                   	retq   

000000800420fbfe <debuginfo_rip>:
  800420fbfe:	55                   	push   %rbp
  800420fbff:	48 89 e5             	mov    %rsp,%rbp
  800420fc02:	53                   	push   %rbx
  800420fc03:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420fc0a:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420fc11:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420fc18:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420fc1f:	00 
  800420fc20:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420fc27:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fc2b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc32:	48 bb 52 0c 22 04 80 	movabs $0x8004220c52,%rbx
  800420fc39:	00 00 00 
  800420fc3c:	48 89 18             	mov    %rbx,(%rax)
  800420fc3f:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc46:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420fc4d:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc54:	48 bb 52 0c 22 04 80 	movabs $0x8004220c52,%rbx
  800420fc5b:	00 00 00 
  800420fc5e:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420fc62:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc69:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420fc70:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc77:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fc7e:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420fc82:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc89:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420fc90:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420fc97:	00 00 00 
  800420fc9a:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420fca1:	76 13                	jbe    800420fcb6 <debuginfo_rip+0xb8>
  800420fca3:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420fcaa:	00 00 00 
  800420fcad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fcb1:	e9 04 01 00 00       	jmpq   800420fdba <debuginfo_rip+0x1bc>
  800420fcb6:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420fcbd:	00 00 00 
  800420fcc0:	ff d0                	callq  *%rax
  800420fcc2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420fcc9:	00 00 00 
  800420fccc:	48 98                	cltq   
  800420fcce:	48 c1 e0 03          	shl    $0x3,%rax
  800420fcd2:	48 89 c1             	mov    %rax,%rcx
  800420fcd5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fcd9:	48 01 c8             	add    %rcx,%rax
  800420fcdc:	48 01 d0             	add    %rdx,%rax
  800420fcdf:	48 83 c0 08          	add    $0x8,%rax
  800420fce3:	48 8b 10             	mov    (%rax),%rdx
  800420fce6:	48 b8 98 f2 4d 04 80 	movabs $0x80044df298,%rax
  800420fced:	00 00 00 
  800420fcf0:	48 8b 00             	mov    (%rax),%rax
  800420fcf3:	48 39 c2             	cmp    %rax,%rdx
  800420fcf6:	0f 84 83 00 00 00    	je     800420fd7f <debuginfo_rip+0x181>
  800420fcfc:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420fd03:	00 00 00 
  800420fd06:	ff d0                	callq  *%rax
  800420fd08:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420fd0f:	00 00 00 
  800420fd12:	48 98                	cltq   
  800420fd14:	48 c1 e0 03          	shl    $0x3,%rax
  800420fd18:	48 89 c1             	mov    %rax,%rcx
  800420fd1b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fd1f:	48 01 c8             	add    %rcx,%rax
  800420fd22:	48 01 d0             	add    %rdx,%rax
  800420fd25:	48 83 c0 08          	add    $0x8,%rax
  800420fd29:	48 8b 00             	mov    (%rax),%rax
  800420fd2c:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420fd33:	48 89 c7             	mov    %rax,%rdi
  800420fd36:	48 b8 e9 66 21 04 80 	movabs $0x80042166e9,%rax
  800420fd3d:	00 00 00 
  800420fd40:	ff d0                	callq  *%rax
  800420fd42:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420fd49:	00 00 00 
  800420fd4c:	ff d0                	callq  *%rax
  800420fd4e:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420fd55:	00 00 00 
  800420fd58:	48 98                	cltq   
  800420fd5a:	48 c1 e0 03          	shl    $0x3,%rax
  800420fd5e:	48 89 c1             	mov    %rax,%rcx
  800420fd61:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fd65:	48 01 c8             	add    %rcx,%rax
  800420fd68:	48 01 d0             	add    %rdx,%rax
  800420fd6b:	48 83 c0 08          	add    $0x8,%rax
  800420fd6f:	48 8b 10             	mov    (%rax),%rdx
  800420fd72:	48 b8 98 f2 4d 04 80 	movabs $0x80044df298,%rax
  800420fd79:	00 00 00 
  800420fd7c:	48 89 10             	mov    %rdx,(%rax)
  800420fd7f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800420fd86:	00 00 00 
  800420fd89:	ff d0                	callq  *%rax
  800420fd8b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420fd92:	00 00 00 
  800420fd95:	48 98                	cltq   
  800420fd97:	48 c1 e0 03          	shl    $0x3,%rax
  800420fd9b:	48 89 c1             	mov    %rax,%rcx
  800420fd9e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fda2:	48 01 c8             	add    %rcx,%rax
  800420fda5:	48 01 d0             	add    %rdx,%rax
  800420fda8:	48 83 c0 08          	add    $0x8,%rax
  800420fdac:	48 8b 00             	mov    (%rax),%rax
  800420fdaf:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420fdb6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fdba:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fdc1:	00 00 00 
  800420fdc4:	48 8b 00             	mov    (%rax),%rax
  800420fdc7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fdcb:	48 89 d6             	mov    %rdx,%rsi
  800420fdce:	48 89 c7             	mov    %rax,%rdi
  800420fdd1:	48 b8 d2 1d 21 04 80 	movabs $0x8004211dd2,%rax
  800420fdd8:	00 00 00 
  800420fddb:	ff d0                	callq  *%rax
  800420fddd:	48 bf 5c 0c 22 04 80 	movabs $0x8004220c5c,%rdi
  800420fde4:	00 00 00 
  800420fde7:	48 b8 69 66 21 04 80 	movabs $0x8004216669,%rax
  800420fdee:	00 00 00 
  800420fdf1:	ff d0                	callq  *%rax
  800420fdf3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fdf7:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fdfe:	00 00 00 
  800420fe01:	48 8b 00             	mov    (%rax),%rax
  800420fe04:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fe08:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420fe0c:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420fe10:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fe17:	00 00 00 
  800420fe1a:	48 8b 00             	mov    (%rax),%rax
  800420fe1d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fe21:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420fe25:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fe29:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fe30:	00 00 00 
  800420fe33:	48 8b 00             	mov    (%rax),%rax
  800420fe36:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420fe3a:	48 85 c0             	test   %rax,%rax
  800420fe3d:	75 35                	jne    800420fe74 <debuginfo_rip+0x276>
  800420fe3f:	48 b9 68 0c 22 04 80 	movabs $0x8004220c68,%rcx
  800420fe46:	00 00 00 
  800420fe49:	48 ba 2c 0c 22 04 80 	movabs $0x8004220c2c,%rdx
  800420fe50:	00 00 00 
  800420fe53:	be 40 01 00 00       	mov    $0x140,%esi
  800420fe58:	48 bf 41 0c 22 04 80 	movabs $0x8004220c41,%rdi
  800420fe5f:	00 00 00 
  800420fe62:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fe67:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420fe6e:	00 00 00 
  800420fe71:	41 ff d0             	callq  *%r8
  800420fe74:	e9 6f 01 00 00       	jmpq   800420ffe8 <debuginfo_rip+0x3ea>
  800420fe79:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fe80:	00 00 00 
  800420fe83:	48 8b 00             	mov    (%rax),%rax
  800420fe86:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fe8a:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fe91:	be 00 00 00 00       	mov    $0x0,%esi
  800420fe96:	48 89 c7             	mov    %rax,%rdi
  800420fe99:	48 b8 5a 2f 21 04 80 	movabs $0x8004212f5a,%rax
  800420fea0:	00 00 00 
  800420fea3:	ff d0                	callq  *%rax
  800420fea5:	83 f8 04             	cmp    $0x4,%eax
  800420fea8:	75 05                	jne    800420feaf <debuginfo_rip+0x2b1>
  800420feaa:	e9 39 01 00 00       	jmpq   800420ffe8 <debuginfo_rip+0x3ea>
  800420feaf:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420feb3:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420feba:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420fec1:	00 00 00 00 
  800420fec5:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420fecc:	00 00 00 
  800420fecf:	48 8b 00             	mov    (%rax),%rax
  800420fed2:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fed9:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fee0:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420fee4:	48 89 c7             	mov    %rax,%rdi
  800420fee7:	48 b8 9e 31 21 04 80 	movabs $0x800421319e,%rax
  800420feee:	00 00 00 
  800420fef1:	ff d0                	callq  *%rax
  800420fef3:	83 f8 04             	cmp    $0x4,%eax
  800420fef6:	75 05                	jne    800420fefd <debuginfo_rip+0x2ff>
  800420fef8:	e9 eb 00 00 00       	jmpq   800420ffe8 <debuginfo_rip+0x3ea>
  800420fefd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420ff01:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420ff08:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420ff0f:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420ff16:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420ff1d:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420ff24:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420ff2b:	48 89 ce             	mov    %rcx,%rsi
  800420ff2e:	48 89 c7             	mov    %rax,%rdi
  800420ff31:	48 b8 98 f4 20 04 80 	movabs $0x800420f498,%rax
  800420ff38:	00 00 00 
  800420ff3b:	ff d0                	callq  *%rax
  800420ff3d:	85 c0                	test   %eax,%eax
  800420ff3f:	74 30                	je     800420ff71 <debuginfo_rip+0x373>
  800420ff41:	90                   	nop
  800420ff42:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420ff49:	00 00 00 
  800420ff4c:	48 8b 00             	mov    (%rax),%rax
  800420ff4f:	be 00 00 00 00       	mov    $0x0,%esi
  800420ff54:	48 89 c7             	mov    %rax,%rdi
  800420ff57:	48 b8 76 58 21 04 80 	movabs $0x8004215876,%rax
  800420ff5e:	00 00 00 
  800420ff61:	ff d0                	callq  *%rax
  800420ff63:	83 f8 01             	cmp    $0x1,%eax
  800420ff66:	0f 85 bb 00 00 00    	jne    8004210027 <debuginfo_rip+0x429>
  800420ff6c:	e9 ac 00 00 00       	jmpq   800421001d <debuginfo_rip+0x41f>
  800420ff71:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420ff78:	00 00 00 
  800420ff7b:	48 8b 00             	mov    (%rax),%rax
  800420ff7e:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420ff82:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420ff89:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420ff90:	48 89 c7             	mov    %rax,%rdi
  800420ff93:	48 b8 5a 2f 21 04 80 	movabs $0x8004212f5a,%rax
  800420ff9a:	00 00 00 
  800420ff9d:	ff d0                	callq  *%rax
  800420ff9f:	85 c0                	test   %eax,%eax
  800420ffa1:	79 02                	jns    800420ffa5 <debuginfo_rip+0x3a7>
  800420ffa3:	eb 43                	jmp    800420ffe8 <debuginfo_rip+0x3ea>
  800420ffa5:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420ffac:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420ffb3:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ffb8:	48 89 ce             	mov    %rcx,%rsi
  800420ffbb:	48 89 c7             	mov    %rax,%rdi
  800420ffbe:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800420ffc5:	00 00 00 
  800420ffc8:	ff d0                	callq  *%rax
  800420ffca:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420ffce:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420ffd5:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420ffdc:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420ffe3:	e9 2e ff ff ff       	jmpq   800420ff16 <debuginfo_rip+0x318>
  800420ffe8:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800420ffef:	00 00 00 
  800420fff2:	48 8b 00             	mov    (%rax),%rax
  800420fff5:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420fff9:	48 89 d6             	mov    %rdx,%rsi
  800420fffc:	48 89 c7             	mov    %rax,%rdi
  800420ffff:	48 b8 b4 1e 21 04 80 	movabs $0x8004211eb4,%rax
  8004210006:	00 00 00 
  8004210009:	ff d0                	callq  *%rax
  800421000b:	85 c0                	test   %eax,%eax
  800421000d:	0f 84 66 fe ff ff    	je     800420fe79 <debuginfo_rip+0x27b>
  8004210013:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210018:	e9 a0 00 00 00       	jmpq   80042100bd <debuginfo_rip+0x4bf>
  800421001d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210022:	e9 96 00 00 00       	jmpq   80042100bd <debuginfo_rip+0x4bf>
  8004210027:	48 b8 80 66 23 04 80 	movabs $0x8004236680,%rax
  800421002e:	00 00 00 
  8004210031:	48 8b 08             	mov    (%rax),%rcx
  8004210034:	48 b8 78 66 23 04 80 	movabs $0x8004236678,%rax
  800421003b:	00 00 00 
  800421003e:	48 8b 10             	mov    (%rax),%rdx
  8004210041:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004210048:	00 00 00 
  800421004b:	48 8b 00             	mov    (%rax),%rax
  800421004e:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  8004210055:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421005b:	48 89 c7             	mov    %rax,%rdi
  800421005e:	48 b8 df 33 21 04 80 	movabs $0x80042133df,%rax
  8004210065:	00 00 00 
  8004210068:	ff d0                	callq  *%rax
  800421006a:	85 c0                	test   %eax,%eax
  800421006c:	75 4a                	jne    80042100b8 <debuginfo_rip+0x4ba>
  800421006e:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  8004210075:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800421007c:	48 b8 78 66 23 04 80 	movabs $0x8004236678,%rax
  8004210083:	00 00 00 
  8004210086:	48 8b 30             	mov    (%rax),%rsi
  8004210089:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004210090:	00 00 00 
  8004210093:	48 8b 00             	mov    (%rax),%rax
  8004210096:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800421009d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  80042100a3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042100a9:	48 89 c7             	mov    %rax,%rdi
  80042100ac:	48 b8 eb 46 21 04 80 	movabs $0x80042146eb,%rax
  80042100b3:	00 00 00 
  80042100b6:	ff d0                	callq  *%rax
  80042100b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042100bd:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  80042100c4:	5b                   	pop    %rbx
  80042100c5:	5d                   	pop    %rbp
  80042100c6:	c3                   	retq   

00000080042100c7 <printnum>:
  80042100c7:	55                   	push   %rbp
  80042100c8:	48 89 e5             	mov    %rsp,%rbp
  80042100cb:	53                   	push   %rbx
  80042100cc:	48 83 ec 38          	sub    $0x38,%rsp
  80042100d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042100d4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042100d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042100dc:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  80042100df:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  80042100e3:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  80042100e7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  80042100ea:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042100ee:	77 3b                	ja     800421012b <printnum+0x64>
  80042100f0:	8b 45 d0             	mov    -0x30(%rbp),%eax
  80042100f3:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  80042100f7:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  80042100fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042100fe:	ba 00 00 00 00       	mov    $0x0,%edx
  8004210103:	48 f7 f3             	div    %rbx
  8004210106:	48 89 c2             	mov    %rax,%rdx
  8004210109:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800421010c:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800421010f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004210113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210117:	41 89 f9             	mov    %edi,%r9d
  800421011a:	48 89 c7             	mov    %rax,%rdi
  800421011d:	48 b8 c7 00 21 04 80 	movabs $0x80042100c7,%rax
  8004210124:	00 00 00 
  8004210127:	ff d0                	callq  *%rax
  8004210129:	eb 1e                	jmp    8004210149 <printnum+0x82>
  800421012b:	eb 12                	jmp    800421013f <printnum+0x78>
  800421012d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004210131:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004210134:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210138:	48 89 ce             	mov    %rcx,%rsi
  800421013b:	89 d7                	mov    %edx,%edi
  800421013d:	ff d0                	callq  *%rax
  800421013f:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  8004210143:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  8004210147:	7f e4                	jg     800421012d <printnum+0x66>
  8004210149:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800421014c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210150:	ba 00 00 00 00       	mov    $0x0,%edx
  8004210155:	48 f7 f1             	div    %rcx
  8004210158:	48 89 d0             	mov    %rdx,%rax
  800421015b:	48 ba 70 0e 22 04 80 	movabs $0x8004220e70,%rdx
  8004210162:	00 00 00 
  8004210165:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004210169:	0f be d0             	movsbl %al,%edx
  800421016c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004210170:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210174:	48 89 ce             	mov    %rcx,%rsi
  8004210177:	89 d7                	mov    %edx,%edi
  8004210179:	ff d0                	callq  *%rax
  800421017b:	48 83 c4 38          	add    $0x38,%rsp
  800421017f:	5b                   	pop    %rbx
  8004210180:	5d                   	pop    %rbp
  8004210181:	c3                   	retq   

0000008004210182 <getuint>:
  8004210182:	55                   	push   %rbp
  8004210183:	48 89 e5             	mov    %rsp,%rbp
  8004210186:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421018a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421018e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210191:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004210195:	7e 52                	jle    80042101e9 <getuint+0x67>
  8004210197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421019b:	8b 00                	mov    (%rax),%eax
  800421019d:	83 f8 30             	cmp    $0x30,%eax
  80042101a0:	73 24                	jae    80042101c6 <getuint+0x44>
  80042101a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101a6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042101aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101ae:	8b 00                	mov    (%rax),%eax
  80042101b0:	89 c0                	mov    %eax,%eax
  80042101b2:	48 01 d0             	add    %rdx,%rax
  80042101b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101b9:	8b 12                	mov    (%rdx),%edx
  80042101bb:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042101be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101c2:	89 0a                	mov    %ecx,(%rdx)
  80042101c4:	eb 17                	jmp    80042101dd <getuint+0x5b>
  80042101c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101ca:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042101ce:	48 89 d0             	mov    %rdx,%rax
  80042101d1:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042101d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101d9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042101dd:	48 8b 00             	mov    (%rax),%rax
  80042101e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042101e4:	e9 a3 00 00 00       	jmpq   800421028c <getuint+0x10a>
  80042101e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042101ed:	74 4f                	je     800421023e <getuint+0xbc>
  80042101ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101f3:	8b 00                	mov    (%rax),%eax
  80042101f5:	83 f8 30             	cmp    $0x30,%eax
  80042101f8:	73 24                	jae    800421021e <getuint+0x9c>
  80042101fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101fe:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210202:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210206:	8b 00                	mov    (%rax),%eax
  8004210208:	89 c0                	mov    %eax,%eax
  800421020a:	48 01 d0             	add    %rdx,%rax
  800421020d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210211:	8b 12                	mov    (%rdx),%edx
  8004210213:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210216:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421021a:	89 0a                	mov    %ecx,(%rdx)
  800421021c:	eb 17                	jmp    8004210235 <getuint+0xb3>
  800421021e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210222:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210226:	48 89 d0             	mov    %rdx,%rax
  8004210229:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421022d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210231:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210235:	48 8b 00             	mov    (%rax),%rax
  8004210238:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421023c:	eb 4e                	jmp    800421028c <getuint+0x10a>
  800421023e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210242:	8b 00                	mov    (%rax),%eax
  8004210244:	83 f8 30             	cmp    $0x30,%eax
  8004210247:	73 24                	jae    800421026d <getuint+0xeb>
  8004210249:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421024d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210255:	8b 00                	mov    (%rax),%eax
  8004210257:	89 c0                	mov    %eax,%eax
  8004210259:	48 01 d0             	add    %rdx,%rax
  800421025c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210260:	8b 12                	mov    (%rdx),%edx
  8004210262:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210265:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210269:	89 0a                	mov    %ecx,(%rdx)
  800421026b:	eb 17                	jmp    8004210284 <getuint+0x102>
  800421026d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210271:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210275:	48 89 d0             	mov    %rdx,%rax
  8004210278:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421027c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210280:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210284:	8b 00                	mov    (%rax),%eax
  8004210286:	89 c0                	mov    %eax,%eax
  8004210288:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421028c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210290:	c9                   	leaveq 
  8004210291:	c3                   	retq   

0000008004210292 <getint>:
  8004210292:	55                   	push   %rbp
  8004210293:	48 89 e5             	mov    %rsp,%rbp
  8004210296:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421029a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421029e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042102a1:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  80042102a5:	7e 52                	jle    80042102f9 <getint+0x67>
  80042102a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042102ab:	8b 00                	mov    (%rax),%eax
  80042102ad:	83 f8 30             	cmp    $0x30,%eax
  80042102b0:	73 24                	jae    80042102d6 <getint+0x44>
  80042102b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042102b6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042102ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042102be:	8b 00                	mov    (%rax),%eax
  80042102c0:	89 c0                	mov    %eax,%eax
  80042102c2:	48 01 d0             	add    %rdx,%rax
  80042102c5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042102c9:	8b 12                	mov    (%rdx),%edx
  80042102cb:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042102ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042102d2:	89 0a                	mov    %ecx,(%rdx)
  80042102d4:	eb 17                	jmp    80042102ed <getint+0x5b>
  80042102d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042102da:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042102de:	48 89 d0             	mov    %rdx,%rax
  80042102e1:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042102e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042102e9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042102ed:	48 8b 00             	mov    (%rax),%rax
  80042102f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042102f4:	e9 a3 00 00 00       	jmpq   800421039c <getint+0x10a>
  80042102f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042102fd:	74 4f                	je     800421034e <getint+0xbc>
  80042102ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210303:	8b 00                	mov    (%rax),%eax
  8004210305:	83 f8 30             	cmp    $0x30,%eax
  8004210308:	73 24                	jae    800421032e <getint+0x9c>
  800421030a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421030e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210312:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210316:	8b 00                	mov    (%rax),%eax
  8004210318:	89 c0                	mov    %eax,%eax
  800421031a:	48 01 d0             	add    %rdx,%rax
  800421031d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210321:	8b 12                	mov    (%rdx),%edx
  8004210323:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210326:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421032a:	89 0a                	mov    %ecx,(%rdx)
  800421032c:	eb 17                	jmp    8004210345 <getint+0xb3>
  800421032e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210332:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210336:	48 89 d0             	mov    %rdx,%rax
  8004210339:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421033d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210341:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210345:	48 8b 00             	mov    (%rax),%rax
  8004210348:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421034c:	eb 4e                	jmp    800421039c <getint+0x10a>
  800421034e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210352:	8b 00                	mov    (%rax),%eax
  8004210354:	83 f8 30             	cmp    $0x30,%eax
  8004210357:	73 24                	jae    800421037d <getint+0xeb>
  8004210359:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421035d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210361:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210365:	8b 00                	mov    (%rax),%eax
  8004210367:	89 c0                	mov    %eax,%eax
  8004210369:	48 01 d0             	add    %rdx,%rax
  800421036c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210370:	8b 12                	mov    (%rdx),%edx
  8004210372:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210375:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210379:	89 0a                	mov    %ecx,(%rdx)
  800421037b:	eb 17                	jmp    8004210394 <getint+0x102>
  800421037d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210381:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210385:	48 89 d0             	mov    %rdx,%rax
  8004210388:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421038c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210390:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210394:	8b 00                	mov    (%rax),%eax
  8004210396:	48 98                	cltq   
  8004210398:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421039c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042103a0:	c9                   	leaveq 
  80042103a1:	c3                   	retq   

00000080042103a2 <vprintfmt>:
  80042103a2:	55                   	push   %rbp
  80042103a3:	48 89 e5             	mov    %rsp,%rbp
  80042103a6:	41 54                	push   %r12
  80042103a8:	53                   	push   %rbx
  80042103a9:	48 83 ec 60          	sub    $0x60,%rsp
  80042103ad:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042103b1:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042103b5:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  80042103b9:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  80042103bd:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042103c1:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042103c5:	48 8b 0a             	mov    (%rdx),%rcx
  80042103c8:	48 89 08             	mov    %rcx,(%rax)
  80042103cb:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042103cf:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042103d3:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042103d7:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042103db:	eb 17                	jmp    80042103f4 <vprintfmt+0x52>
  80042103dd:	85 db                	test   %ebx,%ebx
  80042103df:	0f 84 cc 04 00 00    	je     80042108b1 <vprintfmt+0x50f>
  80042103e5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042103e9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042103ed:	48 89 d6             	mov    %rdx,%rsi
  80042103f0:	89 df                	mov    %ebx,%edi
  80042103f2:	ff d0                	callq  *%rax
  80042103f4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042103f8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042103fc:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210400:	0f b6 00             	movzbl (%rax),%eax
  8004210403:	0f b6 d8             	movzbl %al,%ebx
  8004210406:	83 fb 25             	cmp    $0x25,%ebx
  8004210409:	75 d2                	jne    80042103dd <vprintfmt+0x3b>
  800421040b:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800421040f:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  8004210416:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800421041d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  8004210424:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800421042b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421042f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210433:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210437:	0f b6 00             	movzbl (%rax),%eax
  800421043a:	0f b6 d8             	movzbl %al,%ebx
  800421043d:	8d 43 dd             	lea    -0x23(%rbx),%eax
  8004210440:	83 f8 55             	cmp    $0x55,%eax
  8004210443:	0f 87 34 04 00 00    	ja     800421087d <vprintfmt+0x4db>
  8004210449:	89 c0                	mov    %eax,%eax
  800421044b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004210452:	00 
  8004210453:	48 b8 98 0e 22 04 80 	movabs $0x8004220e98,%rax
  800421045a:	00 00 00 
  800421045d:	48 01 d0             	add    %rdx,%rax
  8004210460:	48 8b 00             	mov    (%rax),%rax
  8004210463:	ff e0                	jmpq   *%rax
  8004210465:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  8004210469:	eb c0                	jmp    800421042b <vprintfmt+0x89>
  800421046b:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800421046f:	eb ba                	jmp    800421042b <vprintfmt+0x89>
  8004210471:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  8004210478:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800421047b:	89 d0                	mov    %edx,%eax
  800421047d:	c1 e0 02             	shl    $0x2,%eax
  8004210480:	01 d0                	add    %edx,%eax
  8004210482:	01 c0                	add    %eax,%eax
  8004210484:	01 d8                	add    %ebx,%eax
  8004210486:	83 e8 30             	sub    $0x30,%eax
  8004210489:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800421048c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210490:	0f b6 00             	movzbl (%rax),%eax
  8004210493:	0f be d8             	movsbl %al,%ebx
  8004210496:	83 fb 2f             	cmp    $0x2f,%ebx
  8004210499:	7e 0c                	jle    80042104a7 <vprintfmt+0x105>
  800421049b:	83 fb 39             	cmp    $0x39,%ebx
  800421049e:	7f 07                	jg     80042104a7 <vprintfmt+0x105>
  80042104a0:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  80042104a5:	eb d1                	jmp    8004210478 <vprintfmt+0xd6>
  80042104a7:	eb 58                	jmp    8004210501 <vprintfmt+0x15f>
  80042104a9:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042104ac:	83 f8 30             	cmp    $0x30,%eax
  80042104af:	73 17                	jae    80042104c8 <vprintfmt+0x126>
  80042104b1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042104b5:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042104b8:	89 c0                	mov    %eax,%eax
  80042104ba:	48 01 d0             	add    %rdx,%rax
  80042104bd:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042104c0:	83 c2 08             	add    $0x8,%edx
  80042104c3:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042104c6:	eb 0f                	jmp    80042104d7 <vprintfmt+0x135>
  80042104c8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042104cc:	48 89 d0             	mov    %rdx,%rax
  80042104cf:	48 83 c2 08          	add    $0x8,%rdx
  80042104d3:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042104d7:	8b 00                	mov    (%rax),%eax
  80042104d9:	89 45 d8             	mov    %eax,-0x28(%rbp)
  80042104dc:	eb 23                	jmp    8004210501 <vprintfmt+0x15f>
  80042104de:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042104e2:	79 0c                	jns    80042104f0 <vprintfmt+0x14e>
  80042104e4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  80042104eb:	e9 3b ff ff ff       	jmpq   800421042b <vprintfmt+0x89>
  80042104f0:	e9 36 ff ff ff       	jmpq   800421042b <vprintfmt+0x89>
  80042104f5:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  80042104fc:	e9 2a ff ff ff       	jmpq   800421042b <vprintfmt+0x89>
  8004210501:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210505:	79 12                	jns    8004210519 <vprintfmt+0x177>
  8004210507:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421050a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421050d:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  8004210514:	e9 12 ff ff ff       	jmpq   800421042b <vprintfmt+0x89>
  8004210519:	e9 0d ff ff ff       	jmpq   800421042b <vprintfmt+0x89>
  800421051e:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004210522:	e9 04 ff ff ff       	jmpq   800421042b <vprintfmt+0x89>
  8004210527:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421052a:	83 f8 30             	cmp    $0x30,%eax
  800421052d:	73 17                	jae    8004210546 <vprintfmt+0x1a4>
  800421052f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210533:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210536:	89 c0                	mov    %eax,%eax
  8004210538:	48 01 d0             	add    %rdx,%rax
  800421053b:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421053e:	83 c2 08             	add    $0x8,%edx
  8004210541:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210544:	eb 0f                	jmp    8004210555 <vprintfmt+0x1b3>
  8004210546:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421054a:	48 89 d0             	mov    %rdx,%rax
  800421054d:	48 83 c2 08          	add    $0x8,%rdx
  8004210551:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210555:	8b 10                	mov    (%rax),%edx
  8004210557:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421055b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421055f:	48 89 ce             	mov    %rcx,%rsi
  8004210562:	89 d7                	mov    %edx,%edi
  8004210564:	ff d0                	callq  *%rax
  8004210566:	e9 40 03 00 00       	jmpq   80042108ab <vprintfmt+0x509>
  800421056b:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421056e:	83 f8 30             	cmp    $0x30,%eax
  8004210571:	73 17                	jae    800421058a <vprintfmt+0x1e8>
  8004210573:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210577:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421057a:	89 c0                	mov    %eax,%eax
  800421057c:	48 01 d0             	add    %rdx,%rax
  800421057f:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210582:	83 c2 08             	add    $0x8,%edx
  8004210585:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210588:	eb 0f                	jmp    8004210599 <vprintfmt+0x1f7>
  800421058a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421058e:	48 89 d0             	mov    %rdx,%rax
  8004210591:	48 83 c2 08          	add    $0x8,%rdx
  8004210595:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210599:	8b 18                	mov    (%rax),%ebx
  800421059b:	85 db                	test   %ebx,%ebx
  800421059d:	79 02                	jns    80042105a1 <vprintfmt+0x1ff>
  800421059f:	f7 db                	neg    %ebx
  80042105a1:	83 fb 15             	cmp    $0x15,%ebx
  80042105a4:	7f 16                	jg     80042105bc <vprintfmt+0x21a>
  80042105a6:	48 b8 c0 0d 22 04 80 	movabs $0x8004220dc0,%rax
  80042105ad:	00 00 00 
  80042105b0:	48 63 d3             	movslq %ebx,%rdx
  80042105b3:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  80042105b7:	4d 85 e4             	test   %r12,%r12
  80042105ba:	75 2e                	jne    80042105ea <vprintfmt+0x248>
  80042105bc:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042105c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042105c4:	89 d9                	mov    %ebx,%ecx
  80042105c6:	48 ba 81 0e 22 04 80 	movabs $0x8004220e81,%rdx
  80042105cd:	00 00 00 
  80042105d0:	48 89 c7             	mov    %rax,%rdi
  80042105d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042105d8:	49 b8 ba 08 21 04 80 	movabs $0x80042108ba,%r8
  80042105df:	00 00 00 
  80042105e2:	41 ff d0             	callq  *%r8
  80042105e5:	e9 c1 02 00 00       	jmpq   80042108ab <vprintfmt+0x509>
  80042105ea:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042105ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042105f2:	4c 89 e1             	mov    %r12,%rcx
  80042105f5:	48 ba 8a 0e 22 04 80 	movabs $0x8004220e8a,%rdx
  80042105fc:	00 00 00 
  80042105ff:	48 89 c7             	mov    %rax,%rdi
  8004210602:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210607:	49 b8 ba 08 21 04 80 	movabs $0x80042108ba,%r8
  800421060e:	00 00 00 
  8004210611:	41 ff d0             	callq  *%r8
  8004210614:	e9 92 02 00 00       	jmpq   80042108ab <vprintfmt+0x509>
  8004210619:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421061c:	83 f8 30             	cmp    $0x30,%eax
  800421061f:	73 17                	jae    8004210638 <vprintfmt+0x296>
  8004210621:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210625:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210628:	89 c0                	mov    %eax,%eax
  800421062a:	48 01 d0             	add    %rdx,%rax
  800421062d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210630:	83 c2 08             	add    $0x8,%edx
  8004210633:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210636:	eb 0f                	jmp    8004210647 <vprintfmt+0x2a5>
  8004210638:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421063c:	48 89 d0             	mov    %rdx,%rax
  800421063f:	48 83 c2 08          	add    $0x8,%rdx
  8004210643:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210647:	4c 8b 20             	mov    (%rax),%r12
  800421064a:	4d 85 e4             	test   %r12,%r12
  800421064d:	75 0a                	jne    8004210659 <vprintfmt+0x2b7>
  800421064f:	49 bc 8d 0e 22 04 80 	movabs $0x8004220e8d,%r12
  8004210656:	00 00 00 
  8004210659:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421065d:	7e 3f                	jle    800421069e <vprintfmt+0x2fc>
  800421065f:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  8004210663:	74 39                	je     800421069e <vprintfmt+0x2fc>
  8004210665:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210668:	48 98                	cltq   
  800421066a:	48 89 c6             	mov    %rax,%rsi
  800421066d:	4c 89 e7             	mov    %r12,%rdi
  8004210670:	48 b8 bb 0c 21 04 80 	movabs $0x8004210cbb,%rax
  8004210677:	00 00 00 
  800421067a:	ff d0                	callq  *%rax
  800421067c:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800421067f:	eb 17                	jmp    8004210698 <vprintfmt+0x2f6>
  8004210681:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  8004210685:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210689:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421068d:	48 89 ce             	mov    %rcx,%rsi
  8004210690:	89 d7                	mov    %edx,%edi
  8004210692:	ff d0                	callq  *%rax
  8004210694:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210698:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421069c:	7f e3                	jg     8004210681 <vprintfmt+0x2df>
  800421069e:	eb 37                	jmp    80042106d7 <vprintfmt+0x335>
  80042106a0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  80042106a4:	74 1e                	je     80042106c4 <vprintfmt+0x322>
  80042106a6:	83 fb 1f             	cmp    $0x1f,%ebx
  80042106a9:	7e 05                	jle    80042106b0 <vprintfmt+0x30e>
  80042106ab:	83 fb 7e             	cmp    $0x7e,%ebx
  80042106ae:	7e 14                	jle    80042106c4 <vprintfmt+0x322>
  80042106b0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042106b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042106b8:	48 89 d6             	mov    %rdx,%rsi
  80042106bb:	bf 3f 00 00 00       	mov    $0x3f,%edi
  80042106c0:	ff d0                	callq  *%rax
  80042106c2:	eb 0f                	jmp    80042106d3 <vprintfmt+0x331>
  80042106c4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042106c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042106cc:	48 89 d6             	mov    %rdx,%rsi
  80042106cf:	89 df                	mov    %ebx,%edi
  80042106d1:	ff d0                	callq  *%rax
  80042106d3:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042106d7:	4c 89 e0             	mov    %r12,%rax
  80042106da:	4c 8d 60 01          	lea    0x1(%rax),%r12
  80042106de:	0f b6 00             	movzbl (%rax),%eax
  80042106e1:	0f be d8             	movsbl %al,%ebx
  80042106e4:	85 db                	test   %ebx,%ebx
  80042106e6:	74 10                	je     80042106f8 <vprintfmt+0x356>
  80042106e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  80042106ec:	78 b2                	js     80042106a0 <vprintfmt+0x2fe>
  80042106ee:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  80042106f2:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  80042106f6:	79 a8                	jns    80042106a0 <vprintfmt+0x2fe>
  80042106f8:	eb 16                	jmp    8004210710 <vprintfmt+0x36e>
  80042106fa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042106fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210702:	48 89 d6             	mov    %rdx,%rsi
  8004210705:	bf 20 00 00 00       	mov    $0x20,%edi
  800421070a:	ff d0                	callq  *%rax
  800421070c:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210710:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210714:	7f e4                	jg     80042106fa <vprintfmt+0x358>
  8004210716:	e9 90 01 00 00       	jmpq   80042108ab <vprintfmt+0x509>
  800421071b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421071f:	be 03 00 00 00       	mov    $0x3,%esi
  8004210724:	48 89 c7             	mov    %rax,%rdi
  8004210727:	48 b8 92 02 21 04 80 	movabs $0x8004210292,%rax
  800421072e:	00 00 00 
  8004210731:	ff d0                	callq  *%rax
  8004210733:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421073b:	48 85 c0             	test   %rax,%rax
  800421073e:	79 1d                	jns    800421075d <vprintfmt+0x3bb>
  8004210740:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210744:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210748:	48 89 d6             	mov    %rdx,%rsi
  800421074b:	bf 2d 00 00 00       	mov    $0x2d,%edi
  8004210750:	ff d0                	callq  *%rax
  8004210752:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210756:	48 f7 d8             	neg    %rax
  8004210759:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421075d:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210764:	e9 d5 00 00 00       	jmpq   800421083e <vprintfmt+0x49c>
  8004210769:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421076d:	be 03 00 00 00       	mov    $0x3,%esi
  8004210772:	48 89 c7             	mov    %rax,%rdi
  8004210775:	48 b8 82 01 21 04 80 	movabs $0x8004210182,%rax
  800421077c:	00 00 00 
  800421077f:	ff d0                	callq  *%rax
  8004210781:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210785:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800421078c:	e9 ad 00 00 00       	jmpq   800421083e <vprintfmt+0x49c>
  8004210791:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210795:	be 03 00 00 00       	mov    $0x3,%esi
  800421079a:	48 89 c7             	mov    %rax,%rdi
  800421079d:	48 b8 82 01 21 04 80 	movabs $0x8004210182,%rax
  80042107a4:	00 00 00 
  80042107a7:	ff d0                	callq  *%rax
  80042107a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042107ad:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  80042107b4:	e9 85 00 00 00       	jmpq   800421083e <vprintfmt+0x49c>
  80042107b9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042107bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042107c1:	48 89 d6             	mov    %rdx,%rsi
  80042107c4:	bf 30 00 00 00       	mov    $0x30,%edi
  80042107c9:	ff d0                	callq  *%rax
  80042107cb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042107cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042107d3:	48 89 d6             	mov    %rdx,%rsi
  80042107d6:	bf 78 00 00 00       	mov    $0x78,%edi
  80042107db:	ff d0                	callq  *%rax
  80042107dd:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042107e0:	83 f8 30             	cmp    $0x30,%eax
  80042107e3:	73 17                	jae    80042107fc <vprintfmt+0x45a>
  80042107e5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042107e9:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042107ec:	89 c0                	mov    %eax,%eax
  80042107ee:	48 01 d0             	add    %rdx,%rax
  80042107f1:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042107f4:	83 c2 08             	add    $0x8,%edx
  80042107f7:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042107fa:	eb 0f                	jmp    800421080b <vprintfmt+0x469>
  80042107fc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210800:	48 89 d0             	mov    %rdx,%rax
  8004210803:	48 83 c2 08          	add    $0x8,%rdx
  8004210807:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421080b:	48 8b 00             	mov    (%rax),%rax
  800421080e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210812:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210819:	eb 23                	jmp    800421083e <vprintfmt+0x49c>
  800421081b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421081f:	be 03 00 00 00       	mov    $0x3,%esi
  8004210824:	48 89 c7             	mov    %rax,%rdi
  8004210827:	48 b8 82 01 21 04 80 	movabs $0x8004210182,%rax
  800421082e:	00 00 00 
  8004210831:	ff d0                	callq  *%rax
  8004210833:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210837:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800421083e:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  8004210843:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004210846:	8b 7d dc             	mov    -0x24(%rbp),%edi
  8004210849:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421084d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210851:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210855:	45 89 c1             	mov    %r8d,%r9d
  8004210858:	41 89 f8             	mov    %edi,%r8d
  800421085b:	48 89 c7             	mov    %rax,%rdi
  800421085e:	48 b8 c7 00 21 04 80 	movabs $0x80042100c7,%rax
  8004210865:	00 00 00 
  8004210868:	ff d0                	callq  *%rax
  800421086a:	eb 3f                	jmp    80042108ab <vprintfmt+0x509>
  800421086c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210870:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210874:	48 89 d6             	mov    %rdx,%rsi
  8004210877:	89 df                	mov    %ebx,%edi
  8004210879:	ff d0                	callq  *%rax
  800421087b:	eb 2e                	jmp    80042108ab <vprintfmt+0x509>
  800421087d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210881:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210885:	48 89 d6             	mov    %rdx,%rsi
  8004210888:	bf 25 00 00 00       	mov    $0x25,%edi
  800421088d:	ff d0                	callq  *%rax
  800421088f:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210894:	eb 05                	jmp    800421089b <vprintfmt+0x4f9>
  8004210896:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800421089b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421089f:	48 83 e8 01          	sub    $0x1,%rax
  80042108a3:	0f b6 00             	movzbl (%rax),%eax
  80042108a6:	3c 25                	cmp    $0x25,%al
  80042108a8:	75 ec                	jne    8004210896 <vprintfmt+0x4f4>
  80042108aa:	90                   	nop
  80042108ab:	90                   	nop
  80042108ac:	e9 43 fb ff ff       	jmpq   80042103f4 <vprintfmt+0x52>
  80042108b1:	48 83 c4 60          	add    $0x60,%rsp
  80042108b5:	5b                   	pop    %rbx
  80042108b6:	41 5c                	pop    %r12
  80042108b8:	5d                   	pop    %rbp
  80042108b9:	c3                   	retq   

00000080042108ba <printfmt>:
  80042108ba:	55                   	push   %rbp
  80042108bb:	48 89 e5             	mov    %rsp,%rbp
  80042108be:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042108c5:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042108cc:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  80042108d3:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042108da:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042108e1:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042108e8:	84 c0                	test   %al,%al
  80042108ea:	74 20                	je     800421090c <printfmt+0x52>
  80042108ec:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042108f0:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042108f4:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042108f8:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042108fc:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210900:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210904:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210908:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800421090c:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004210913:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800421091a:	00 00 00 
  800421091d:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004210924:	00 00 00 
  8004210927:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800421092b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210932:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210939:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004210940:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  8004210947:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800421094e:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  8004210955:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421095c:	48 89 c7             	mov    %rax,%rdi
  800421095f:	48 b8 a2 03 21 04 80 	movabs $0x80042103a2,%rax
  8004210966:	00 00 00 
  8004210969:	ff d0                	callq  *%rax
  800421096b:	c9                   	leaveq 
  800421096c:	c3                   	retq   

000000800421096d <sprintputch>:
  800421096d:	55                   	push   %rbp
  800421096e:	48 89 e5             	mov    %rsp,%rbp
  8004210971:	48 83 ec 10          	sub    $0x10,%rsp
  8004210975:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004210978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421097c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210980:	8b 40 10             	mov    0x10(%rax),%eax
  8004210983:	8d 50 01             	lea    0x1(%rax),%edx
  8004210986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421098a:	89 50 10             	mov    %edx,0x10(%rax)
  800421098d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210991:	48 8b 10             	mov    (%rax),%rdx
  8004210994:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210998:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421099c:	48 39 c2             	cmp    %rax,%rdx
  800421099f:	73 17                	jae    80042109b8 <sprintputch+0x4b>
  80042109a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109a5:	48 8b 00             	mov    (%rax),%rax
  80042109a8:	48 8d 48 01          	lea    0x1(%rax),%rcx
  80042109ac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042109b0:	48 89 0a             	mov    %rcx,(%rdx)
  80042109b3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042109b6:	88 10                	mov    %dl,(%rax)
  80042109b8:	c9                   	leaveq 
  80042109b9:	c3                   	retq   

00000080042109ba <vsnprintf>:
  80042109ba:	55                   	push   %rbp
  80042109bb:	48 89 e5             	mov    %rsp,%rbp
  80042109be:	48 83 ec 50          	sub    $0x50,%rsp
  80042109c2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042109c6:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042109c9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042109cd:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042109d1:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  80042109d5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042109d9:	48 8b 0a             	mov    (%rdx),%rcx
  80042109dc:	48 89 08             	mov    %rcx,(%rax)
  80042109df:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042109e3:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042109e7:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042109eb:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042109ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042109f3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042109f7:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042109fa:	48 98                	cltq   
  80042109fc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210a00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210a04:	48 01 d0             	add    %rdx,%rax
  8004210a07:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004210a0b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  8004210a12:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004210a17:	74 06                	je     8004210a1f <vsnprintf+0x65>
  8004210a19:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004210a1d:	7f 07                	jg     8004210a26 <vsnprintf+0x6c>
  8004210a1f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004210a24:	eb 2f                	jmp    8004210a55 <vsnprintf+0x9b>
  8004210a26:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004210a2a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004210a2e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004210a32:	48 89 c6             	mov    %rax,%rsi
  8004210a35:	48 bf 6d 09 21 04 80 	movabs $0x800421096d,%rdi
  8004210a3c:	00 00 00 
  8004210a3f:	48 b8 a2 03 21 04 80 	movabs $0x80042103a2,%rax
  8004210a46:	00 00 00 
  8004210a49:	ff d0                	callq  *%rax
  8004210a4b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210a4f:	c6 00 00             	movb   $0x0,(%rax)
  8004210a52:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004210a55:	c9                   	leaveq 
  8004210a56:	c3                   	retq   

0000008004210a57 <snprintf>:
  8004210a57:	55                   	push   %rbp
  8004210a58:	48 89 e5             	mov    %rsp,%rbp
  8004210a5b:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004210a62:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004210a69:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210a6f:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004210a76:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210a7d:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210a84:	84 c0                	test   %al,%al
  8004210a86:	74 20                	je     8004210aa8 <snprintf+0x51>
  8004210a88:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210a8c:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210a90:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210a94:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210a98:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210a9c:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210aa0:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210aa4:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210aa8:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  8004210aaf:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  8004210ab6:	00 00 00 
  8004210ab9:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004210ac0:	00 00 00 
  8004210ac3:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210ac7:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004210ace:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210ad5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210adc:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004210ae3:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004210aea:	48 8b 0a             	mov    (%rdx),%rcx
  8004210aed:	48 89 08             	mov    %rcx,(%rax)
  8004210af0:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210af4:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210af8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210afc:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210b00:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  8004210b07:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004210b0e:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  8004210b14:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004210b1b:	48 89 c7             	mov    %rax,%rdi
  8004210b1e:	48 b8 ba 09 21 04 80 	movabs $0x80042109ba,%rax
  8004210b25:	00 00 00 
  8004210b28:	ff d0                	callq  *%rax
  8004210b2a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004210b30:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004210b36:	c9                   	leaveq 
  8004210b37:	c3                   	retq   

0000008004210b38 <readline>:
  8004210b38:	55                   	push   %rbp
  8004210b39:	48 89 e5             	mov    %rsp,%rbp
  8004210b3c:	48 83 ec 20          	sub    $0x20,%rsp
  8004210b40:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b44:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210b49:	74 22                	je     8004210b6d <readline+0x35>
  8004210b4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b4f:	48 89 c6             	mov    %rax,%rsi
  8004210b52:	48 bf 48 11 22 04 80 	movabs $0x8004221148,%rdi
  8004210b59:	00 00 00 
  8004210b5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210b61:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004210b68:	00 00 00 
  8004210b6b:	ff d2                	callq  *%rdx
  8004210b6d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210b74:	bf 00 00 00 00       	mov    $0x0,%edi
  8004210b79:	48 b8 33 12 20 04 80 	movabs $0x8004201233,%rax
  8004210b80:	00 00 00 
  8004210b83:	ff d0                	callq  *%rax
  8004210b85:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004210b88:	48 b8 11 12 20 04 80 	movabs $0x8004201211,%rax
  8004210b8f:	00 00 00 
  8004210b92:	ff d0                	callq  *%rax
  8004210b94:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004210b97:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004210b9b:	79 30                	jns    8004210bcd <readline+0x95>
  8004210b9d:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  8004210ba1:	74 20                	je     8004210bc3 <readline+0x8b>
  8004210ba3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210ba6:	89 c6                	mov    %eax,%esi
  8004210ba8:	48 bf 4b 11 22 04 80 	movabs $0x800422114b,%rdi
  8004210baf:	00 00 00 
  8004210bb2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210bb7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004210bbe:	00 00 00 
  8004210bc1:	ff d2                	callq  *%rdx
  8004210bc3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210bc8:	e9 be 00 00 00       	jmpq   8004210c8b <readline+0x153>
  8004210bcd:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004210bd1:	74 06                	je     8004210bd9 <readline+0xa1>
  8004210bd3:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  8004210bd7:	75 26                	jne    8004210bff <readline+0xc7>
  8004210bd9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210bdd:	7e 20                	jle    8004210bff <readline+0xc7>
  8004210bdf:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210be3:	74 11                	je     8004210bf6 <readline+0xbe>
  8004210be5:	bf 08 00 00 00       	mov    $0x8,%edi
  8004210bea:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210bf1:	00 00 00 
  8004210bf4:	ff d0                	callq  *%rax
  8004210bf6:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  8004210bfa:	e9 87 00 00 00       	jmpq   8004210c86 <readline+0x14e>
  8004210bff:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210c03:	7e 3f                	jle    8004210c44 <readline+0x10c>
  8004210c05:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  8004210c0c:	7f 36                	jg     8004210c44 <readline+0x10c>
  8004210c0e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210c12:	74 11                	je     8004210c25 <readline+0xed>
  8004210c14:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c17:	89 c7                	mov    %eax,%edi
  8004210c19:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210c20:	00 00 00 
  8004210c23:	ff d0                	callq  *%rax
  8004210c25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210c28:	8d 50 01             	lea    0x1(%rax),%edx
  8004210c2b:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210c2e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210c31:	89 d1                	mov    %edx,%ecx
  8004210c33:	48 ba a0 f2 4d 04 80 	movabs $0x80044df2a0,%rdx
  8004210c3a:	00 00 00 
  8004210c3d:	48 98                	cltq   
  8004210c3f:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004210c42:	eb 42                	jmp    8004210c86 <readline+0x14e>
  8004210c44:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210c48:	74 06                	je     8004210c50 <readline+0x118>
  8004210c4a:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210c4e:	75 36                	jne    8004210c86 <readline+0x14e>
  8004210c50:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210c54:	74 11                	je     8004210c67 <readline+0x12f>
  8004210c56:	bf 0a 00 00 00       	mov    $0xa,%edi
  8004210c5b:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210c62:	00 00 00 
  8004210c65:	ff d0                	callq  *%rax
  8004210c67:	48 ba a0 f2 4d 04 80 	movabs $0x80044df2a0,%rdx
  8004210c6e:	00 00 00 
  8004210c71:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210c74:	48 98                	cltq   
  8004210c76:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  8004210c7a:	48 b8 a0 f2 4d 04 80 	movabs $0x80044df2a0,%rax
  8004210c81:	00 00 00 
  8004210c84:	eb 05                	jmp    8004210c8b <readline+0x153>
  8004210c86:	e9 fd fe ff ff       	jmpq   8004210b88 <readline+0x50>
  8004210c8b:	c9                   	leaveq 
  8004210c8c:	c3                   	retq   

0000008004210c8d <strlen>:
  8004210c8d:	55                   	push   %rbp
  8004210c8e:	48 89 e5             	mov    %rsp,%rbp
  8004210c91:	48 83 ec 18          	sub    $0x18,%rsp
  8004210c95:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c99:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210ca0:	eb 09                	jmp    8004210cab <strlen+0x1e>
  8004210ca2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210ca6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210cab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210caf:	0f b6 00             	movzbl (%rax),%eax
  8004210cb2:	84 c0                	test   %al,%al
  8004210cb4:	75 ec                	jne    8004210ca2 <strlen+0x15>
  8004210cb6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210cb9:	c9                   	leaveq 
  8004210cba:	c3                   	retq   

0000008004210cbb <strnlen>:
  8004210cbb:	55                   	push   %rbp
  8004210cbc:	48 89 e5             	mov    %rsp,%rbp
  8004210cbf:	48 83 ec 20          	sub    $0x20,%rsp
  8004210cc3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210cc7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210ccb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210cd2:	eb 0e                	jmp    8004210ce2 <strnlen+0x27>
  8004210cd4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210cd8:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210cdd:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  8004210ce2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004210ce7:	74 0b                	je     8004210cf4 <strnlen+0x39>
  8004210ce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ced:	0f b6 00             	movzbl (%rax),%eax
  8004210cf0:	84 c0                	test   %al,%al
  8004210cf2:	75 e0                	jne    8004210cd4 <strnlen+0x19>
  8004210cf4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210cf7:	c9                   	leaveq 
  8004210cf8:	c3                   	retq   

0000008004210cf9 <strcpy>:
  8004210cf9:	55                   	push   %rbp
  8004210cfa:	48 89 e5             	mov    %rsp,%rbp
  8004210cfd:	48 83 ec 20          	sub    $0x20,%rsp
  8004210d01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210d05:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d0d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210d11:	90                   	nop
  8004210d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d16:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210d1a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210d1e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210d22:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210d26:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210d2a:	0f b6 12             	movzbl (%rdx),%edx
  8004210d2d:	88 10                	mov    %dl,(%rax)
  8004210d2f:	0f b6 00             	movzbl (%rax),%eax
  8004210d32:	84 c0                	test   %al,%al
  8004210d34:	75 dc                	jne    8004210d12 <strcpy+0x19>
  8004210d36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d3a:	c9                   	leaveq 
  8004210d3b:	c3                   	retq   

0000008004210d3c <strcat>:
  8004210d3c:	55                   	push   %rbp
  8004210d3d:	48 89 e5             	mov    %rsp,%rbp
  8004210d40:	48 83 ec 20          	sub    $0x20,%rsp
  8004210d44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210d48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210d4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d50:	48 89 c7             	mov    %rax,%rdi
  8004210d53:	48 b8 8d 0c 21 04 80 	movabs $0x8004210c8d,%rax
  8004210d5a:	00 00 00 
  8004210d5d:	ff d0                	callq  *%rax
  8004210d5f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210d62:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210d65:	48 63 d0             	movslq %eax,%rdx
  8004210d68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d6c:	48 01 c2             	add    %rax,%rdx
  8004210d6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d73:	48 89 c6             	mov    %rax,%rsi
  8004210d76:	48 89 d7             	mov    %rdx,%rdi
  8004210d79:	48 b8 f9 0c 21 04 80 	movabs $0x8004210cf9,%rax
  8004210d80:	00 00 00 
  8004210d83:	ff d0                	callq  *%rax
  8004210d85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d89:	c9                   	leaveq 
  8004210d8a:	c3                   	retq   

0000008004210d8b <strncpy>:
  8004210d8b:	55                   	push   %rbp
  8004210d8c:	48 89 e5             	mov    %rsp,%rbp
  8004210d8f:	48 83 ec 28          	sub    $0x28,%rsp
  8004210d93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210d97:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210d9b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210d9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210da3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210da7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210dae:	00 
  8004210daf:	eb 2a                	jmp    8004210ddb <strncpy+0x50>
  8004210db1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210db5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210db9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210dbd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210dc1:	0f b6 12             	movzbl (%rdx),%edx
  8004210dc4:	88 10                	mov    %dl,(%rax)
  8004210dc6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210dca:	0f b6 00             	movzbl (%rax),%eax
  8004210dcd:	84 c0                	test   %al,%al
  8004210dcf:	74 05                	je     8004210dd6 <strncpy+0x4b>
  8004210dd1:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  8004210dd6:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210ddb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ddf:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004210de3:	72 cc                	jb     8004210db1 <strncpy+0x26>
  8004210de5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210de9:	c9                   	leaveq 
  8004210dea:	c3                   	retq   

0000008004210deb <strlcpy>:
  8004210deb:	55                   	push   %rbp
  8004210dec:	48 89 e5             	mov    %rsp,%rbp
  8004210def:	48 83 ec 28          	sub    $0x28,%rsp
  8004210df3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210df7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210dfb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210dff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210e07:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210e0c:	74 3d                	je     8004210e4b <strlcpy+0x60>
  8004210e0e:	eb 1d                	jmp    8004210e2d <strlcpy+0x42>
  8004210e10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e14:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210e18:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210e1c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210e20:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210e24:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210e28:	0f b6 12             	movzbl (%rdx),%edx
  8004210e2b:	88 10                	mov    %dl,(%rax)
  8004210e2d:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210e32:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210e37:	74 0b                	je     8004210e44 <strlcpy+0x59>
  8004210e39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e3d:	0f b6 00             	movzbl (%rax),%eax
  8004210e40:	84 c0                	test   %al,%al
  8004210e42:	75 cc                	jne    8004210e10 <strlcpy+0x25>
  8004210e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e48:	c6 00 00             	movb   $0x0,(%rax)
  8004210e4b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e53:	48 29 c2             	sub    %rax,%rdx
  8004210e56:	48 89 d0             	mov    %rdx,%rax
  8004210e59:	c9                   	leaveq 
  8004210e5a:	c3                   	retq   

0000008004210e5b <strcmp>:
  8004210e5b:	55                   	push   %rbp
  8004210e5c:	48 89 e5             	mov    %rsp,%rbp
  8004210e5f:	48 83 ec 10          	sub    $0x10,%rsp
  8004210e63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210e67:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210e6b:	eb 0a                	jmp    8004210e77 <strcmp+0x1c>
  8004210e6d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210e72:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e7b:	0f b6 00             	movzbl (%rax),%eax
  8004210e7e:	84 c0                	test   %al,%al
  8004210e80:	74 12                	je     8004210e94 <strcmp+0x39>
  8004210e82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e86:	0f b6 10             	movzbl (%rax),%edx
  8004210e89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e8d:	0f b6 00             	movzbl (%rax),%eax
  8004210e90:	38 c2                	cmp    %al,%dl
  8004210e92:	74 d9                	je     8004210e6d <strcmp+0x12>
  8004210e94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e98:	0f b6 00             	movzbl (%rax),%eax
  8004210e9b:	0f b6 d0             	movzbl %al,%edx
  8004210e9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ea2:	0f b6 00             	movzbl (%rax),%eax
  8004210ea5:	0f b6 c0             	movzbl %al,%eax
  8004210ea8:	29 c2                	sub    %eax,%edx
  8004210eaa:	89 d0                	mov    %edx,%eax
  8004210eac:	c9                   	leaveq 
  8004210ead:	c3                   	retq   

0000008004210eae <strncmp>:
  8004210eae:	55                   	push   %rbp
  8004210eaf:	48 89 e5             	mov    %rsp,%rbp
  8004210eb2:	48 83 ec 18          	sub    $0x18,%rsp
  8004210eb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210eba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210ebe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210ec2:	eb 0f                	jmp    8004210ed3 <strncmp+0x25>
  8004210ec4:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004210ec9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210ece:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210ed3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210ed8:	74 1d                	je     8004210ef7 <strncmp+0x49>
  8004210eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ede:	0f b6 00             	movzbl (%rax),%eax
  8004210ee1:	84 c0                	test   %al,%al
  8004210ee3:	74 12                	je     8004210ef7 <strncmp+0x49>
  8004210ee5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ee9:	0f b6 10             	movzbl (%rax),%edx
  8004210eec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ef0:	0f b6 00             	movzbl (%rax),%eax
  8004210ef3:	38 c2                	cmp    %al,%dl
  8004210ef5:	74 cd                	je     8004210ec4 <strncmp+0x16>
  8004210ef7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210efc:	75 07                	jne    8004210f05 <strncmp+0x57>
  8004210efe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210f03:	eb 18                	jmp    8004210f1d <strncmp+0x6f>
  8004210f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f09:	0f b6 00             	movzbl (%rax),%eax
  8004210f0c:	0f b6 d0             	movzbl %al,%edx
  8004210f0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f13:	0f b6 00             	movzbl (%rax),%eax
  8004210f16:	0f b6 c0             	movzbl %al,%eax
  8004210f19:	29 c2                	sub    %eax,%edx
  8004210f1b:	89 d0                	mov    %edx,%eax
  8004210f1d:	c9                   	leaveq 
  8004210f1e:	c3                   	retq   

0000008004210f1f <strchr>:
  8004210f1f:	55                   	push   %rbp
  8004210f20:	48 89 e5             	mov    %rsp,%rbp
  8004210f23:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210f27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210f2b:	89 f0                	mov    %esi,%eax
  8004210f2d:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210f30:	eb 17                	jmp    8004210f49 <strchr+0x2a>
  8004210f32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f36:	0f b6 00             	movzbl (%rax),%eax
  8004210f39:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210f3c:	75 06                	jne    8004210f44 <strchr+0x25>
  8004210f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f42:	eb 15                	jmp    8004210f59 <strchr+0x3a>
  8004210f44:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f4d:	0f b6 00             	movzbl (%rax),%eax
  8004210f50:	84 c0                	test   %al,%al
  8004210f52:	75 de                	jne    8004210f32 <strchr+0x13>
  8004210f54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210f59:	c9                   	leaveq 
  8004210f5a:	c3                   	retq   

0000008004210f5b <strfind>:
  8004210f5b:	55                   	push   %rbp
  8004210f5c:	48 89 e5             	mov    %rsp,%rbp
  8004210f5f:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210f63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210f67:	89 f0                	mov    %esi,%eax
  8004210f69:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210f6c:	eb 13                	jmp    8004210f81 <strfind+0x26>
  8004210f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f72:	0f b6 00             	movzbl (%rax),%eax
  8004210f75:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210f78:	75 02                	jne    8004210f7c <strfind+0x21>
  8004210f7a:	eb 10                	jmp    8004210f8c <strfind+0x31>
  8004210f7c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210f81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f85:	0f b6 00             	movzbl (%rax),%eax
  8004210f88:	84 c0                	test   %al,%al
  8004210f8a:	75 e2                	jne    8004210f6e <strfind+0x13>
  8004210f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f90:	c9                   	leaveq 
  8004210f91:	c3                   	retq   

0000008004210f92 <memset>:
  8004210f92:	55                   	push   %rbp
  8004210f93:	48 89 e5             	mov    %rsp,%rbp
  8004210f96:	48 83 ec 18          	sub    $0x18,%rsp
  8004210f9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210f9e:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210fa1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210fa5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210faa:	75 06                	jne    8004210fb2 <memset+0x20>
  8004210fac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fb0:	eb 69                	jmp    800421101b <memset+0x89>
  8004210fb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fb6:	83 e0 03             	and    $0x3,%eax
  8004210fb9:	48 85 c0             	test   %rax,%rax
  8004210fbc:	75 48                	jne    8004211006 <memset+0x74>
  8004210fbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fc2:	83 e0 03             	and    $0x3,%eax
  8004210fc5:	48 85 c0             	test   %rax,%rax
  8004210fc8:	75 3c                	jne    8004211006 <memset+0x74>
  8004210fca:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004210fd1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210fd4:	c1 e0 18             	shl    $0x18,%eax
  8004210fd7:	89 c2                	mov    %eax,%edx
  8004210fd9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210fdc:	c1 e0 10             	shl    $0x10,%eax
  8004210fdf:	09 c2                	or     %eax,%edx
  8004210fe1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210fe4:	c1 e0 08             	shl    $0x8,%eax
  8004210fe7:	09 d0                	or     %edx,%eax
  8004210fe9:	09 45 f4             	or     %eax,-0xc(%rbp)
  8004210fec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ff0:	48 c1 e8 02          	shr    $0x2,%rax
  8004210ff4:	48 89 c1             	mov    %rax,%rcx
  8004210ff7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210ffb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210ffe:	48 89 d7             	mov    %rdx,%rdi
  8004211001:	fc                   	cld    
  8004211002:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004211004:	eb 11                	jmp    8004211017 <memset+0x85>
  8004211006:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421100a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421100d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211011:	48 89 d7             	mov    %rdx,%rdi
  8004211014:	fc                   	cld    
  8004211015:	f3 aa                	rep stos %al,%es:(%rdi)
  8004211017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421101b:	c9                   	leaveq 
  800421101c:	c3                   	retq   

000000800421101d <memmove>:
  800421101d:	55                   	push   %rbp
  800421101e:	48 89 e5             	mov    %rsp,%rbp
  8004211021:	48 83 ec 28          	sub    $0x28,%rsp
  8004211025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211029:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421102d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211031:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211035:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211039:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421103d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211045:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004211049:	0f 83 88 00 00 00    	jae    80042110d7 <memmove+0xba>
  800421104f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211053:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211057:	48 01 d0             	add    %rdx,%rax
  800421105a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421105e:	76 77                	jbe    80042110d7 <memmove+0xba>
  8004211060:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211064:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004211068:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421106c:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004211070:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211074:	83 e0 03             	and    $0x3,%eax
  8004211077:	48 85 c0             	test   %rax,%rax
  800421107a:	75 3b                	jne    80042110b7 <memmove+0x9a>
  800421107c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211080:	83 e0 03             	and    $0x3,%eax
  8004211083:	48 85 c0             	test   %rax,%rax
  8004211086:	75 2f                	jne    80042110b7 <memmove+0x9a>
  8004211088:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421108c:	83 e0 03             	and    $0x3,%eax
  800421108f:	48 85 c0             	test   %rax,%rax
  8004211092:	75 23                	jne    80042110b7 <memmove+0x9a>
  8004211094:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211098:	48 83 e8 04          	sub    $0x4,%rax
  800421109c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042110a0:	48 83 ea 04          	sub    $0x4,%rdx
  80042110a4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042110a8:	48 c1 e9 02          	shr    $0x2,%rcx
  80042110ac:	48 89 c7             	mov    %rax,%rdi
  80042110af:	48 89 d6             	mov    %rdx,%rsi
  80042110b2:	fd                   	std    
  80042110b3:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  80042110b5:	eb 1d                	jmp    80042110d4 <memmove+0xb7>
  80042110b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110bb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042110bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042110c3:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  80042110c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110cb:	48 89 d7             	mov    %rdx,%rdi
  80042110ce:	48 89 c1             	mov    %rax,%rcx
  80042110d1:	fd                   	std    
  80042110d2:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042110d4:	fc                   	cld    
  80042110d5:	eb 57                	jmp    800421112e <memmove+0x111>
  80042110d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042110db:	83 e0 03             	and    $0x3,%eax
  80042110de:	48 85 c0             	test   %rax,%rax
  80042110e1:	75 36                	jne    8004211119 <memmove+0xfc>
  80042110e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110e7:	83 e0 03             	and    $0x3,%eax
  80042110ea:	48 85 c0             	test   %rax,%rax
  80042110ed:	75 2a                	jne    8004211119 <memmove+0xfc>
  80042110ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110f3:	83 e0 03             	and    $0x3,%eax
  80042110f6:	48 85 c0             	test   %rax,%rax
  80042110f9:	75 1e                	jne    8004211119 <memmove+0xfc>
  80042110fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110ff:	48 c1 e8 02          	shr    $0x2,%rax
  8004211103:	48 89 c1             	mov    %rax,%rcx
  8004211106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421110a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421110e:	48 89 c7             	mov    %rax,%rdi
  8004211111:	48 89 d6             	mov    %rdx,%rsi
  8004211114:	fc                   	cld    
  8004211115:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004211117:	eb 15                	jmp    800421112e <memmove+0x111>
  8004211119:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421111d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211121:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004211125:	48 89 c7             	mov    %rax,%rdi
  8004211128:	48 89 d6             	mov    %rdx,%rsi
  800421112b:	fc                   	cld    
  800421112c:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  800421112e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211132:	c9                   	leaveq 
  8004211133:	c3                   	retq   

0000008004211134 <memcpy>:
  8004211134:	55                   	push   %rbp
  8004211135:	48 89 e5             	mov    %rsp,%rbp
  8004211138:	48 83 ec 18          	sub    $0x18,%rsp
  800421113c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004211140:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004211144:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211148:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421114c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004211150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211154:	48 89 ce             	mov    %rcx,%rsi
  8004211157:	48 89 c7             	mov    %rax,%rdi
  800421115a:	48 b8 1d 10 21 04 80 	movabs $0x800421101d,%rax
  8004211161:	00 00 00 
  8004211164:	ff d0                	callq  *%rax
  8004211166:	c9                   	leaveq 
  8004211167:	c3                   	retq   

0000008004211168 <memcmp>:
  8004211168:	55                   	push   %rbp
  8004211169:	48 89 e5             	mov    %rsp,%rbp
  800421116c:	48 83 ec 28          	sub    $0x28,%rsp
  8004211170:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211174:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211178:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421117c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211180:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211184:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211188:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421118c:	eb 36                	jmp    80042111c4 <memcmp+0x5c>
  800421118e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211192:	0f b6 10             	movzbl (%rax),%edx
  8004211195:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211199:	0f b6 00             	movzbl (%rax),%eax
  800421119c:	38 c2                	cmp    %al,%dl
  800421119e:	74 1a                	je     80042111ba <memcmp+0x52>
  80042111a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042111a4:	0f b6 00             	movzbl (%rax),%eax
  80042111a7:	0f b6 d0             	movzbl %al,%edx
  80042111aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111ae:	0f b6 00             	movzbl (%rax),%eax
  80042111b1:	0f b6 c0             	movzbl %al,%eax
  80042111b4:	29 c2                	sub    %eax,%edx
  80042111b6:	89 d0                	mov    %edx,%eax
  80042111b8:	eb 20                	jmp    80042111da <memcmp+0x72>
  80042111ba:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042111bf:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042111c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111c8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042111cc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042111d0:	48 85 c0             	test   %rax,%rax
  80042111d3:	75 b9                	jne    800421118e <memcmp+0x26>
  80042111d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042111da:	c9                   	leaveq 
  80042111db:	c3                   	retq   

00000080042111dc <memfind>:
  80042111dc:	55                   	push   %rbp
  80042111dd:	48 89 e5             	mov    %rsp,%rbp
  80042111e0:	48 83 ec 28          	sub    $0x28,%rsp
  80042111e4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042111e8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042111eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042111ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042111f7:	48 01 d0             	add    %rdx,%rax
  80042111fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042111fe:	eb 15                	jmp    8004211215 <memfind+0x39>
  8004211200:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211204:	0f b6 10             	movzbl (%rax),%edx
  8004211207:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421120a:	38 c2                	cmp    %al,%dl
  800421120c:	75 02                	jne    8004211210 <memfind+0x34>
  800421120e:	eb 0f                	jmp    800421121f <memfind+0x43>
  8004211210:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004211215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211219:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421121d:	72 e1                	jb     8004211200 <memfind+0x24>
  800421121f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211223:	c9                   	leaveq 
  8004211224:	c3                   	retq   

0000008004211225 <strtol>:
  8004211225:	55                   	push   %rbp
  8004211226:	48 89 e5             	mov    %rsp,%rbp
  8004211229:	48 83 ec 34          	sub    $0x34,%rsp
  800421122d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211231:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211235:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004211238:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421123f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004211246:	00 
  8004211247:	eb 05                	jmp    800421124e <strtol+0x29>
  8004211249:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421124e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211252:	0f b6 00             	movzbl (%rax),%eax
  8004211255:	3c 20                	cmp    $0x20,%al
  8004211257:	74 f0                	je     8004211249 <strtol+0x24>
  8004211259:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421125d:	0f b6 00             	movzbl (%rax),%eax
  8004211260:	3c 09                	cmp    $0x9,%al
  8004211262:	74 e5                	je     8004211249 <strtol+0x24>
  8004211264:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211268:	0f b6 00             	movzbl (%rax),%eax
  800421126b:	3c 2b                	cmp    $0x2b,%al
  800421126d:	75 07                	jne    8004211276 <strtol+0x51>
  800421126f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004211274:	eb 17                	jmp    800421128d <strtol+0x68>
  8004211276:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421127a:	0f b6 00             	movzbl (%rax),%eax
  800421127d:	3c 2d                	cmp    $0x2d,%al
  800421127f:	75 0c                	jne    800421128d <strtol+0x68>
  8004211281:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004211286:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  800421128d:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004211291:	74 06                	je     8004211299 <strtol+0x74>
  8004211293:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004211297:	75 28                	jne    80042112c1 <strtol+0x9c>
  8004211299:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421129d:	0f b6 00             	movzbl (%rax),%eax
  80042112a0:	3c 30                	cmp    $0x30,%al
  80042112a2:	75 1d                	jne    80042112c1 <strtol+0x9c>
  80042112a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112a8:	48 83 c0 01          	add    $0x1,%rax
  80042112ac:	0f b6 00             	movzbl (%rax),%eax
  80042112af:	3c 78                	cmp    $0x78,%al
  80042112b1:	75 0e                	jne    80042112c1 <strtol+0x9c>
  80042112b3:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  80042112b8:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  80042112bf:	eb 2c                	jmp    80042112ed <strtol+0xc8>
  80042112c1:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042112c5:	75 19                	jne    80042112e0 <strtol+0xbb>
  80042112c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112cb:	0f b6 00             	movzbl (%rax),%eax
  80042112ce:	3c 30                	cmp    $0x30,%al
  80042112d0:	75 0e                	jne    80042112e0 <strtol+0xbb>
  80042112d2:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042112d7:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  80042112de:	eb 0d                	jmp    80042112ed <strtol+0xc8>
  80042112e0:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042112e4:	75 07                	jne    80042112ed <strtol+0xc8>
  80042112e6:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  80042112ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112f1:	0f b6 00             	movzbl (%rax),%eax
  80042112f4:	3c 2f                	cmp    $0x2f,%al
  80042112f6:	7e 1d                	jle    8004211315 <strtol+0xf0>
  80042112f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112fc:	0f b6 00             	movzbl (%rax),%eax
  80042112ff:	3c 39                	cmp    $0x39,%al
  8004211301:	7f 12                	jg     8004211315 <strtol+0xf0>
  8004211303:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211307:	0f b6 00             	movzbl (%rax),%eax
  800421130a:	0f be c0             	movsbl %al,%eax
  800421130d:	83 e8 30             	sub    $0x30,%eax
  8004211310:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004211313:	eb 4e                	jmp    8004211363 <strtol+0x13e>
  8004211315:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211319:	0f b6 00             	movzbl (%rax),%eax
  800421131c:	3c 60                	cmp    $0x60,%al
  800421131e:	7e 1d                	jle    800421133d <strtol+0x118>
  8004211320:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211324:	0f b6 00             	movzbl (%rax),%eax
  8004211327:	3c 7a                	cmp    $0x7a,%al
  8004211329:	7f 12                	jg     800421133d <strtol+0x118>
  800421132b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421132f:	0f b6 00             	movzbl (%rax),%eax
  8004211332:	0f be c0             	movsbl %al,%eax
  8004211335:	83 e8 57             	sub    $0x57,%eax
  8004211338:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421133b:	eb 26                	jmp    8004211363 <strtol+0x13e>
  800421133d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211341:	0f b6 00             	movzbl (%rax),%eax
  8004211344:	3c 40                	cmp    $0x40,%al
  8004211346:	7e 48                	jle    8004211390 <strtol+0x16b>
  8004211348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421134c:	0f b6 00             	movzbl (%rax),%eax
  800421134f:	3c 5a                	cmp    $0x5a,%al
  8004211351:	7f 3d                	jg     8004211390 <strtol+0x16b>
  8004211353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211357:	0f b6 00             	movzbl (%rax),%eax
  800421135a:	0f be c0             	movsbl %al,%eax
  800421135d:	83 e8 37             	sub    $0x37,%eax
  8004211360:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004211363:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004211366:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004211369:	7c 02                	jl     800421136d <strtol+0x148>
  800421136b:	eb 23                	jmp    8004211390 <strtol+0x16b>
  800421136d:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004211372:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004211375:	48 98                	cltq   
  8004211377:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  800421137c:	48 89 c2             	mov    %rax,%rdx
  800421137f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004211382:	48 98                	cltq   
  8004211384:	48 01 d0             	add    %rdx,%rax
  8004211387:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421138b:	e9 5d ff ff ff       	jmpq   80042112ed <strtol+0xc8>
  8004211390:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211395:	74 0b                	je     80042113a2 <strtol+0x17d>
  8004211397:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421139b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421139f:	48 89 10             	mov    %rdx,(%rax)
  80042113a2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042113a6:	74 09                	je     80042113b1 <strtol+0x18c>
  80042113a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113ac:	48 f7 d8             	neg    %rax
  80042113af:	eb 04                	jmp    80042113b5 <strtol+0x190>
  80042113b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113b5:	c9                   	leaveq 
  80042113b6:	c3                   	retq   

00000080042113b7 <strstr>:
  80042113b7:	55                   	push   %rbp
  80042113b8:	48 89 e5             	mov    %rsp,%rbp
  80042113bb:	48 83 ec 30          	sub    $0x30,%rsp
  80042113bf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042113c3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042113c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042113cb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042113cf:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042113d3:	0f b6 00             	movzbl (%rax),%eax
  80042113d6:	88 45 ff             	mov    %al,-0x1(%rbp)
  80042113d9:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  80042113dd:	75 06                	jne    80042113e5 <strstr+0x2e>
  80042113df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042113e3:	eb 6b                	jmp    8004211450 <strstr+0x99>
  80042113e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042113e9:	48 89 c7             	mov    %rax,%rdi
  80042113ec:	48 b8 8d 0c 21 04 80 	movabs $0x8004210c8d,%rax
  80042113f3:	00 00 00 
  80042113f6:	ff d0                	callq  *%rax
  80042113f8:	48 98                	cltq   
  80042113fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042113fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211402:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211406:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421140a:	0f b6 00             	movzbl (%rax),%eax
  800421140d:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004211410:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  8004211414:	75 07                	jne    800421141d <strstr+0x66>
  8004211416:	b8 00 00 00 00       	mov    $0x0,%eax
  800421141b:	eb 33                	jmp    8004211450 <strstr+0x99>
  800421141d:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004211421:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004211424:	75 d8                	jne    80042113fe <strstr+0x47>
  8004211426:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421142a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  800421142e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211432:	48 89 ce             	mov    %rcx,%rsi
  8004211435:	48 89 c7             	mov    %rax,%rdi
  8004211438:	48 b8 ae 0e 21 04 80 	movabs $0x8004210eae,%rax
  800421143f:	00 00 00 
  8004211442:	ff d0                	callq  *%rax
  8004211444:	85 c0                	test   %eax,%eax
  8004211446:	75 b6                	jne    80042113fe <strstr+0x47>
  8004211448:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421144c:	48 83 e8 01          	sub    $0x1,%rax
  8004211450:	c9                   	leaveq 
  8004211451:	c3                   	retq   

0000008004211452 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004211452:	55                   	push   %rbp
  8004211453:	48 89 e5             	mov    %rsp,%rbp
  8004211456:	48 83 ec 24          	sub    $0x24,%rsp
  800421145a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421145e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211462:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004211465:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211469:	48 8b 10             	mov    (%rax),%rdx
  800421146c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211470:	48 01 d0             	add    %rdx,%rax
  8004211473:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211477:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421147e:	00 
	switch (bytes_to_read) {
  800421147f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211482:	83 f8 02             	cmp    $0x2,%eax
  8004211485:	0f 84 ab 00 00 00    	je     8004211536 <_dwarf_read_lsb+0xe4>
  800421148b:	83 f8 02             	cmp    $0x2,%eax
  800421148e:	7f 0e                	jg     800421149e <_dwarf_read_lsb+0x4c>
  8004211490:	83 f8 01             	cmp    $0x1,%eax
  8004211493:	0f 84 b3 00 00 00    	je     800421154c <_dwarf_read_lsb+0xfa>
  8004211499:	e9 d9 00 00 00       	jmpq   8004211577 <_dwarf_read_lsb+0x125>
  800421149e:	83 f8 04             	cmp    $0x4,%eax
  80042114a1:	74 65                	je     8004211508 <_dwarf_read_lsb+0xb6>
  80042114a3:	83 f8 08             	cmp    $0x8,%eax
  80042114a6:	0f 85 cb 00 00 00    	jne    8004211577 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042114ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114b0:	48 83 c0 04          	add    $0x4,%rax
  80042114b4:	0f b6 00             	movzbl (%rax),%eax
  80042114b7:	0f b6 c0             	movzbl %al,%eax
  80042114ba:	48 c1 e0 20          	shl    $0x20,%rax
  80042114be:	48 89 c2             	mov    %rax,%rdx
  80042114c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114c5:	48 83 c0 05          	add    $0x5,%rax
  80042114c9:	0f b6 00             	movzbl (%rax),%eax
  80042114cc:	0f b6 c0             	movzbl %al,%eax
  80042114cf:	48 c1 e0 28          	shl    $0x28,%rax
  80042114d3:	48 09 d0             	or     %rdx,%rax
  80042114d6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042114da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114de:	48 83 c0 06          	add    $0x6,%rax
  80042114e2:	0f b6 00             	movzbl (%rax),%eax
  80042114e5:	0f b6 c0             	movzbl %al,%eax
  80042114e8:	48 c1 e0 30          	shl    $0x30,%rax
  80042114ec:	48 89 c2             	mov    %rax,%rdx
  80042114ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114f3:	48 83 c0 07          	add    $0x7,%rax
  80042114f7:	0f b6 00             	movzbl (%rax),%eax
  80042114fa:	0f b6 c0             	movzbl %al,%eax
  80042114fd:	48 c1 e0 38          	shl    $0x38,%rax
  8004211501:	48 09 d0             	or     %rdx,%rax
  8004211504:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004211508:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421150c:	48 83 c0 02          	add    $0x2,%rax
  8004211510:	0f b6 00             	movzbl (%rax),%eax
  8004211513:	0f b6 c0             	movzbl %al,%eax
  8004211516:	48 c1 e0 10          	shl    $0x10,%rax
  800421151a:	48 89 c2             	mov    %rax,%rdx
  800421151d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211521:	48 83 c0 03          	add    $0x3,%rax
  8004211525:	0f b6 00             	movzbl (%rax),%eax
  8004211528:	0f b6 c0             	movzbl %al,%eax
  800421152b:	48 c1 e0 18          	shl    $0x18,%rax
  800421152f:	48 09 d0             	or     %rdx,%rax
  8004211532:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004211536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421153a:	48 83 c0 01          	add    $0x1,%rax
  800421153e:	0f b6 00             	movzbl (%rax),%eax
  8004211541:	0f b6 c0             	movzbl %al,%eax
  8004211544:	48 c1 e0 08          	shl    $0x8,%rax
  8004211548:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421154c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211550:	0f b6 00             	movzbl (%rax),%eax
  8004211553:	0f b6 c0             	movzbl %al,%eax
  8004211556:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421155a:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  800421155b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421155f:	48 8b 10             	mov    (%rax),%rdx
  8004211562:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211565:	48 98                	cltq   
  8004211567:	48 01 c2             	add    %rax,%rdx
  800421156a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421156e:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211575:	eb 05                	jmp    800421157c <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211577:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  800421157c:	c9                   	leaveq 
  800421157d:	c3                   	retq   

000000800421157e <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  800421157e:	55                   	push   %rbp
  800421157f:	48 89 e5             	mov    %rsp,%rbp
  8004211582:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211586:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421158a:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421158d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211591:	48 8b 00             	mov    (%rax),%rax
  8004211594:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211598:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421159f:	00 
	switch (bytes_to_read) {
  80042115a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042115a3:	83 f8 02             	cmp    $0x2,%eax
  80042115a6:	0f 84 ab 00 00 00    	je     8004211657 <_dwarf_decode_lsb+0xd9>
  80042115ac:	83 f8 02             	cmp    $0x2,%eax
  80042115af:	7f 0e                	jg     80042115bf <_dwarf_decode_lsb+0x41>
  80042115b1:	83 f8 01             	cmp    $0x1,%eax
  80042115b4:	0f 84 b3 00 00 00    	je     800421166d <_dwarf_decode_lsb+0xef>
  80042115ba:	e9 d9 00 00 00       	jmpq   8004211698 <_dwarf_decode_lsb+0x11a>
  80042115bf:	83 f8 04             	cmp    $0x4,%eax
  80042115c2:	74 65                	je     8004211629 <_dwarf_decode_lsb+0xab>
  80042115c4:	83 f8 08             	cmp    $0x8,%eax
  80042115c7:	0f 85 cb 00 00 00    	jne    8004211698 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042115cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115d1:	48 83 c0 04          	add    $0x4,%rax
  80042115d5:	0f b6 00             	movzbl (%rax),%eax
  80042115d8:	0f b6 c0             	movzbl %al,%eax
  80042115db:	48 c1 e0 20          	shl    $0x20,%rax
  80042115df:	48 89 c2             	mov    %rax,%rdx
  80042115e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115e6:	48 83 c0 05          	add    $0x5,%rax
  80042115ea:	0f b6 00             	movzbl (%rax),%eax
  80042115ed:	0f b6 c0             	movzbl %al,%eax
  80042115f0:	48 c1 e0 28          	shl    $0x28,%rax
  80042115f4:	48 09 d0             	or     %rdx,%rax
  80042115f7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042115fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115ff:	48 83 c0 06          	add    $0x6,%rax
  8004211603:	0f b6 00             	movzbl (%rax),%eax
  8004211606:	0f b6 c0             	movzbl %al,%eax
  8004211609:	48 c1 e0 30          	shl    $0x30,%rax
  800421160d:	48 89 c2             	mov    %rax,%rdx
  8004211610:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211614:	48 83 c0 07          	add    $0x7,%rax
  8004211618:	0f b6 00             	movzbl (%rax),%eax
  800421161b:	0f b6 c0             	movzbl %al,%eax
  800421161e:	48 c1 e0 38          	shl    $0x38,%rax
  8004211622:	48 09 d0             	or     %rdx,%rax
  8004211625:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004211629:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421162d:	48 83 c0 02          	add    $0x2,%rax
  8004211631:	0f b6 00             	movzbl (%rax),%eax
  8004211634:	0f b6 c0             	movzbl %al,%eax
  8004211637:	48 c1 e0 10          	shl    $0x10,%rax
  800421163b:	48 89 c2             	mov    %rax,%rdx
  800421163e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211642:	48 83 c0 03          	add    $0x3,%rax
  8004211646:	0f b6 00             	movzbl (%rax),%eax
  8004211649:	0f b6 c0             	movzbl %al,%eax
  800421164c:	48 c1 e0 18          	shl    $0x18,%rax
  8004211650:	48 09 d0             	or     %rdx,%rax
  8004211653:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004211657:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421165b:	48 83 c0 01          	add    $0x1,%rax
  800421165f:	0f b6 00             	movzbl (%rax),%eax
  8004211662:	0f b6 c0             	movzbl %al,%eax
  8004211665:	48 c1 e0 08          	shl    $0x8,%rax
  8004211669:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421166d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211671:	0f b6 00             	movzbl (%rax),%eax
  8004211674:	0f b6 c0             	movzbl %al,%eax
  8004211677:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421167b:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800421167c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211680:	48 8b 10             	mov    (%rax),%rdx
  8004211683:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211686:	48 98                	cltq   
  8004211688:	48 01 c2             	add    %rax,%rdx
  800421168b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421168f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211692:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211696:	eb 05                	jmp    800421169d <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211698:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800421169d:	c9                   	leaveq 
  800421169e:	c3                   	retq   

000000800421169f <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800421169f:	55                   	push   %rbp
  80042116a0:	48 89 e5             	mov    %rsp,%rbp
  80042116a3:	48 83 ec 24          	sub    $0x24,%rsp
  80042116a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042116ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042116af:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042116b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116b6:	48 8b 10             	mov    (%rax),%rdx
  80042116b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116bd:	48 01 d0             	add    %rdx,%rax
  80042116c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  80042116c4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042116c7:	83 f8 02             	cmp    $0x2,%eax
  80042116ca:	74 35                	je     8004211701 <_dwarf_read_msb+0x62>
  80042116cc:	83 f8 02             	cmp    $0x2,%eax
  80042116cf:	7f 0a                	jg     80042116db <_dwarf_read_msb+0x3c>
  80042116d1:	83 f8 01             	cmp    $0x1,%eax
  80042116d4:	74 18                	je     80042116ee <_dwarf_read_msb+0x4f>
  80042116d6:	e9 53 01 00 00       	jmpq   800421182e <_dwarf_read_msb+0x18f>
  80042116db:	83 f8 04             	cmp    $0x4,%eax
  80042116de:	74 49                	je     8004211729 <_dwarf_read_msb+0x8a>
  80042116e0:	83 f8 08             	cmp    $0x8,%eax
  80042116e3:	0f 84 96 00 00 00    	je     800421177f <_dwarf_read_msb+0xe0>
  80042116e9:	e9 40 01 00 00       	jmpq   800421182e <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  80042116ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042116f2:	0f b6 00             	movzbl (%rax),%eax
  80042116f5:	0f b6 c0             	movzbl %al,%eax
  80042116f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042116fc:	e9 34 01 00 00       	jmpq   8004211835 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211701:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211705:	48 83 c0 01          	add    $0x1,%rax
  8004211709:	0f b6 00             	movzbl (%rax),%eax
  800421170c:	0f b6 d0             	movzbl %al,%edx
  800421170f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211713:	0f b6 00             	movzbl (%rax),%eax
  8004211716:	0f b6 c0             	movzbl %al,%eax
  8004211719:	48 c1 e0 08          	shl    $0x8,%rax
  800421171d:	48 09 d0             	or     %rdx,%rax
  8004211720:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211724:	e9 0c 01 00 00       	jmpq   8004211835 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004211729:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421172d:	48 83 c0 03          	add    $0x3,%rax
  8004211731:	0f b6 00             	movzbl (%rax),%eax
  8004211734:	0f b6 c0             	movzbl %al,%eax
  8004211737:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421173b:	48 83 c2 02          	add    $0x2,%rdx
  800421173f:	0f b6 12             	movzbl (%rdx),%edx
  8004211742:	0f b6 d2             	movzbl %dl,%edx
  8004211745:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211749:	48 09 d0             	or     %rdx,%rax
  800421174c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211754:	48 83 c0 01          	add    $0x1,%rax
  8004211758:	0f b6 00             	movzbl (%rax),%eax
  800421175b:	0f b6 c0             	movzbl %al,%eax
  800421175e:	48 c1 e0 10          	shl    $0x10,%rax
  8004211762:	48 89 c2             	mov    %rax,%rdx
  8004211765:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211769:	0f b6 00             	movzbl (%rax),%eax
  800421176c:	0f b6 c0             	movzbl %al,%eax
  800421176f:	48 c1 e0 18          	shl    $0x18,%rax
  8004211773:	48 09 d0             	or     %rdx,%rax
  8004211776:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421177a:	e9 b6 00 00 00       	jmpq   8004211835 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421177f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211783:	48 83 c0 07          	add    $0x7,%rax
  8004211787:	0f b6 00             	movzbl (%rax),%eax
  800421178a:	0f b6 c0             	movzbl %al,%eax
  800421178d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211791:	48 83 c2 06          	add    $0x6,%rdx
  8004211795:	0f b6 12             	movzbl (%rdx),%edx
  8004211798:	0f b6 d2             	movzbl %dl,%edx
  800421179b:	48 c1 e2 08          	shl    $0x8,%rdx
  800421179f:	48 09 d0             	or     %rdx,%rax
  80042117a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042117a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117aa:	48 83 c0 05          	add    $0x5,%rax
  80042117ae:	0f b6 00             	movzbl (%rax),%eax
  80042117b1:	0f b6 c0             	movzbl %al,%eax
  80042117b4:	48 c1 e0 10          	shl    $0x10,%rax
  80042117b8:	48 89 c2             	mov    %rax,%rdx
  80042117bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117bf:	48 83 c0 04          	add    $0x4,%rax
  80042117c3:	0f b6 00             	movzbl (%rax),%eax
  80042117c6:	0f b6 c0             	movzbl %al,%eax
  80042117c9:	48 c1 e0 18          	shl    $0x18,%rax
  80042117cd:	48 09 d0             	or     %rdx,%rax
  80042117d0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042117d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117d8:	48 83 c0 03          	add    $0x3,%rax
  80042117dc:	0f b6 00             	movzbl (%rax),%eax
  80042117df:	0f b6 c0             	movzbl %al,%eax
  80042117e2:	48 c1 e0 20          	shl    $0x20,%rax
  80042117e6:	48 89 c2             	mov    %rax,%rdx
  80042117e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117ed:	48 83 c0 02          	add    $0x2,%rax
  80042117f1:	0f b6 00             	movzbl (%rax),%eax
  80042117f4:	0f b6 c0             	movzbl %al,%eax
  80042117f7:	48 c1 e0 28          	shl    $0x28,%rax
  80042117fb:	48 09 d0             	or     %rdx,%rax
  80042117fe:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211802:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211806:	48 83 c0 01          	add    $0x1,%rax
  800421180a:	0f b6 00             	movzbl (%rax),%eax
  800421180d:	0f b6 c0             	movzbl %al,%eax
  8004211810:	48 c1 e0 30          	shl    $0x30,%rax
  8004211814:	48 89 c2             	mov    %rax,%rdx
  8004211817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421181b:	0f b6 00             	movzbl (%rax),%eax
  800421181e:	0f b6 c0             	movzbl %al,%eax
  8004211821:	48 c1 e0 38          	shl    $0x38,%rax
  8004211825:	48 09 d0             	or     %rdx,%rax
  8004211828:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421182c:	eb 07                	jmp    8004211835 <_dwarf_read_msb+0x196>
	default:
		return (0);
  800421182e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211833:	eb 1a                	jmp    800421184f <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004211835:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211839:	48 8b 10             	mov    (%rax),%rdx
  800421183c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421183f:	48 98                	cltq   
  8004211841:	48 01 c2             	add    %rax,%rdx
  8004211844:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211848:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421184b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421184f:	c9                   	leaveq 
  8004211850:	c3                   	retq   

0000008004211851 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  8004211851:	55                   	push   %rbp
  8004211852:	48 89 e5             	mov    %rsp,%rbp
  8004211855:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211859:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421185d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211864:	48 8b 00             	mov    (%rax),%rax
  8004211867:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421186b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211872:	00 
	switch (bytes_to_read) {
  8004211873:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211876:	83 f8 02             	cmp    $0x2,%eax
  8004211879:	74 35                	je     80042118b0 <_dwarf_decode_msb+0x5f>
  800421187b:	83 f8 02             	cmp    $0x2,%eax
  800421187e:	7f 0a                	jg     800421188a <_dwarf_decode_msb+0x39>
  8004211880:	83 f8 01             	cmp    $0x1,%eax
  8004211883:	74 18                	je     800421189d <_dwarf_decode_msb+0x4c>
  8004211885:	e9 53 01 00 00       	jmpq   80042119dd <_dwarf_decode_msb+0x18c>
  800421188a:	83 f8 04             	cmp    $0x4,%eax
  800421188d:	74 49                	je     80042118d8 <_dwarf_decode_msb+0x87>
  800421188f:	83 f8 08             	cmp    $0x8,%eax
  8004211892:	0f 84 96 00 00 00    	je     800421192e <_dwarf_decode_msb+0xdd>
  8004211898:	e9 40 01 00 00       	jmpq   80042119dd <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  800421189d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118a1:	0f b6 00             	movzbl (%rax),%eax
  80042118a4:	0f b6 c0             	movzbl %al,%eax
  80042118a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042118ab:	e9 34 01 00 00       	jmpq   80042119e4 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042118b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118b4:	48 83 c0 01          	add    $0x1,%rax
  80042118b8:	0f b6 00             	movzbl (%rax),%eax
  80042118bb:	0f b6 d0             	movzbl %al,%edx
  80042118be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118c2:	0f b6 00             	movzbl (%rax),%eax
  80042118c5:	0f b6 c0             	movzbl %al,%eax
  80042118c8:	48 c1 e0 08          	shl    $0x8,%rax
  80042118cc:	48 09 d0             	or     %rdx,%rax
  80042118cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042118d3:	e9 0c 01 00 00       	jmpq   80042119e4 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042118d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042118dc:	48 83 c0 03          	add    $0x3,%rax
  80042118e0:	0f b6 00             	movzbl (%rax),%eax
  80042118e3:	0f b6 c0             	movzbl %al,%eax
  80042118e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042118ea:	48 83 c2 02          	add    $0x2,%rdx
  80042118ee:	0f b6 12             	movzbl (%rdx),%edx
  80042118f1:	0f b6 d2             	movzbl %dl,%edx
  80042118f4:	48 c1 e2 08          	shl    $0x8,%rdx
  80042118f8:	48 09 d0             	or     %rdx,%rax
  80042118fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042118ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211903:	48 83 c0 01          	add    $0x1,%rax
  8004211907:	0f b6 00             	movzbl (%rax),%eax
  800421190a:	0f b6 c0             	movzbl %al,%eax
  800421190d:	48 c1 e0 10          	shl    $0x10,%rax
  8004211911:	48 89 c2             	mov    %rax,%rdx
  8004211914:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211918:	0f b6 00             	movzbl (%rax),%eax
  800421191b:	0f b6 c0             	movzbl %al,%eax
  800421191e:	48 c1 e0 18          	shl    $0x18,%rax
  8004211922:	48 09 d0             	or     %rdx,%rax
  8004211925:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211929:	e9 b6 00 00 00       	jmpq   80042119e4 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421192e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211932:	48 83 c0 07          	add    $0x7,%rax
  8004211936:	0f b6 00             	movzbl (%rax),%eax
  8004211939:	0f b6 c0             	movzbl %al,%eax
  800421193c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211940:	48 83 c2 06          	add    $0x6,%rdx
  8004211944:	0f b6 12             	movzbl (%rdx),%edx
  8004211947:	0f b6 d2             	movzbl %dl,%edx
  800421194a:	48 c1 e2 08          	shl    $0x8,%rdx
  800421194e:	48 09 d0             	or     %rdx,%rax
  8004211951:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004211955:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211959:	48 83 c0 05          	add    $0x5,%rax
  800421195d:	0f b6 00             	movzbl (%rax),%eax
  8004211960:	0f b6 c0             	movzbl %al,%eax
  8004211963:	48 c1 e0 10          	shl    $0x10,%rax
  8004211967:	48 89 c2             	mov    %rax,%rdx
  800421196a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421196e:	48 83 c0 04          	add    $0x4,%rax
  8004211972:	0f b6 00             	movzbl (%rax),%eax
  8004211975:	0f b6 c0             	movzbl %al,%eax
  8004211978:	48 c1 e0 18          	shl    $0x18,%rax
  800421197c:	48 09 d0             	or     %rdx,%rax
  800421197f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211983:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211987:	48 83 c0 03          	add    $0x3,%rax
  800421198b:	0f b6 00             	movzbl (%rax),%eax
  800421198e:	0f b6 c0             	movzbl %al,%eax
  8004211991:	48 c1 e0 20          	shl    $0x20,%rax
  8004211995:	48 89 c2             	mov    %rax,%rdx
  8004211998:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421199c:	48 83 c0 02          	add    $0x2,%rax
  80042119a0:	0f b6 00             	movzbl (%rax),%eax
  80042119a3:	0f b6 c0             	movzbl %al,%eax
  80042119a6:	48 c1 e0 28          	shl    $0x28,%rax
  80042119aa:	48 09 d0             	or     %rdx,%rax
  80042119ad:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042119b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042119b5:	48 83 c0 01          	add    $0x1,%rax
  80042119b9:	0f b6 00             	movzbl (%rax),%eax
  80042119bc:	0f b6 c0             	movzbl %al,%eax
  80042119bf:	48 c1 e0 30          	shl    $0x30,%rax
  80042119c3:	48 89 c2             	mov    %rax,%rdx
  80042119c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042119ca:	0f b6 00             	movzbl (%rax),%eax
  80042119cd:	0f b6 c0             	movzbl %al,%eax
  80042119d0:	48 c1 e0 38          	shl    $0x38,%rax
  80042119d4:	48 09 d0             	or     %rdx,%rax
  80042119d7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042119db:	eb 07                	jmp    80042119e4 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  80042119dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042119e2:	eb 1a                	jmp    80042119fe <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  80042119e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119e8:	48 8b 10             	mov    (%rax),%rdx
  80042119eb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042119ee:	48 98                	cltq   
  80042119f0:	48 01 c2             	add    %rax,%rdx
  80042119f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119f7:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042119fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042119fe:	c9                   	leaveq 
  80042119ff:	c3                   	retq   

0000008004211a00 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211a00:	55                   	push   %rbp
  8004211a01:	48 89 e5             	mov    %rsp,%rbp
  8004211a04:	48 83 ec 30          	sub    $0x30,%rsp
  8004211a08:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211a0c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004211a10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211a17:	00 
	uint8_t b;
	int shift = 0;
  8004211a18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211a1f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211a23:	48 8b 10             	mov    (%rax),%rdx
  8004211a26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a2a:	48 01 d0             	add    %rdx,%rax
  8004211a2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a35:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211a39:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211a3d:	0f b6 00             	movzbl (%rax),%eax
  8004211a40:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211a43:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a47:	83 e0 7f             	and    $0x7f,%eax
  8004211a4a:	89 c2                	mov    %eax,%edx
  8004211a4c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211a4f:	89 c1                	mov    %eax,%ecx
  8004211a51:	d3 e2                	shl    %cl,%edx
  8004211a53:	89 d0                	mov    %edx,%eax
  8004211a55:	48 98                	cltq   
  8004211a57:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211a5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211a5f:	48 8b 00             	mov    (%rax),%rax
  8004211a62:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211a66:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211a6a:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211a6d:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211a71:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a75:	84 c0                	test   %al,%al
  8004211a77:	78 b8                	js     8004211a31 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004211a79:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211a7d:	7f 1f                	jg     8004211a9e <_dwarf_read_sleb128+0x9e>
  8004211a7f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a83:	83 e0 40             	and    $0x40,%eax
  8004211a86:	85 c0                	test   %eax,%eax
  8004211a88:	74 14                	je     8004211a9e <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004211a8a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211a8d:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211a92:	89 c1                	mov    %eax,%ecx
  8004211a94:	d3 e2                	shl    %cl,%edx
  8004211a96:	89 d0                	mov    %edx,%eax
  8004211a98:	48 98                	cltq   
  8004211a9a:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004211a9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211aa2:	c9                   	leaveq 
  8004211aa3:	c3                   	retq   

0000008004211aa4 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211aa4:	55                   	push   %rbp
  8004211aa5:	48 89 e5             	mov    %rsp,%rbp
  8004211aa8:	48 83 ec 30          	sub    $0x30,%rsp
  8004211aac:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211ab0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004211ab4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211abb:	00 
	uint8_t b;
	int shift = 0;
  8004211abc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211ac3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211ac7:	48 8b 10             	mov    (%rax),%rdx
  8004211aca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ace:	48 01 d0             	add    %rdx,%rax
  8004211ad1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211ad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ad9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211add:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211ae1:	0f b6 00             	movzbl (%rax),%eax
  8004211ae4:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211ae7:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211aeb:	83 e0 7f             	and    $0x7f,%eax
  8004211aee:	89 c2                	mov    %eax,%edx
  8004211af0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211af3:	89 c1                	mov    %eax,%ecx
  8004211af5:	d3 e2                	shl    %cl,%edx
  8004211af7:	89 d0                	mov    %edx,%eax
  8004211af9:	48 98                	cltq   
  8004211afb:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211aff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211b03:	48 8b 00             	mov    (%rax),%rax
  8004211b06:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211b0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211b0e:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211b11:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211b15:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211b19:	84 c0                	test   %al,%al
  8004211b1b:	78 b8                	js     8004211ad5 <_dwarf_read_uleb128+0x31>

	return (ret);
  8004211b1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211b21:	c9                   	leaveq 
  8004211b22:	c3                   	retq   

0000008004211b23 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004211b23:	55                   	push   %rbp
  8004211b24:	48 89 e5             	mov    %rsp,%rbp
  8004211b27:	48 83 ec 28          	sub    $0x28,%rsp
  8004211b2b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004211b2f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211b36:	00 
	uint8_t b;
	int shift = 0;
  8004211b37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211b3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b42:	48 8b 00             	mov    (%rax),%rax
  8004211b45:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211b49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b4d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211b51:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211b55:	0f b6 00             	movzbl (%rax),%eax
  8004211b58:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211b5b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211b5f:	83 e0 7f             	and    $0x7f,%eax
  8004211b62:	89 c2                	mov    %eax,%edx
  8004211b64:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211b67:	89 c1                	mov    %eax,%ecx
  8004211b69:	d3 e2                	shl    %cl,%edx
  8004211b6b:	89 d0                	mov    %edx,%eax
  8004211b6d:	48 98                	cltq   
  8004211b6f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211b73:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211b77:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211b7b:	84 c0                	test   %al,%al
  8004211b7d:	78 ca                	js     8004211b49 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211b7f:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211b83:	7f 1f                	jg     8004211ba4 <_dwarf_decode_sleb128+0x81>
  8004211b85:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211b89:	83 e0 40             	and    $0x40,%eax
  8004211b8c:	85 c0                	test   %eax,%eax
  8004211b8e:	74 14                	je     8004211ba4 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004211b90:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211b93:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211b98:	89 c1                	mov    %eax,%ecx
  8004211b9a:	d3 e2                	shl    %cl,%edx
  8004211b9c:	89 d0                	mov    %edx,%eax
  8004211b9e:	48 98                	cltq   
  8004211ba0:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004211ba4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ba8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211bac:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211baf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211bb3:	c9                   	leaveq 
  8004211bb4:	c3                   	retq   

0000008004211bb5 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004211bb5:	55                   	push   %rbp
  8004211bb6:	48 89 e5             	mov    %rsp,%rbp
  8004211bb9:	48 83 ec 28          	sub    $0x28,%rsp
  8004211bbd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004211bc1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211bc8:	00 
	uint8_t b;
	int shift = 0;
  8004211bc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211bd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211bd4:	48 8b 00             	mov    (%rax),%rax
  8004211bd7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211bdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211bdf:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211be3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211be7:	0f b6 00             	movzbl (%rax),%eax
  8004211bea:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211bed:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211bf1:	83 e0 7f             	and    $0x7f,%eax
  8004211bf4:	89 c2                	mov    %eax,%edx
  8004211bf6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211bf9:	89 c1                	mov    %eax,%ecx
  8004211bfb:	d3 e2                	shl    %cl,%edx
  8004211bfd:	89 d0                	mov    %edx,%eax
  8004211bff:	48 98                	cltq   
  8004211c01:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211c05:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211c09:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211c0d:	84 c0                	test   %al,%al
  8004211c0f:	78 ca                	js     8004211bdb <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004211c11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c15:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211c19:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211c1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211c20:	c9                   	leaveq 
  8004211c21:	c3                   	retq   

0000008004211c22 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004211c22:	55                   	push   %rbp
  8004211c23:	48 89 e5             	mov    %rsp,%rbp
  8004211c26:	48 83 ec 28          	sub    $0x28,%rsp
  8004211c2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211c2e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211c32:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004211c36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c3a:	48 8b 10             	mov    (%rax),%rdx
  8004211c3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c41:	48 01 d0             	add    %rdx,%rax
  8004211c44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211c48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211c4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211c50:	eb 17                	jmp    8004211c69 <_dwarf_read_string+0x47>
		src++;
  8004211c52:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211c57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c5b:	48 8b 00             	mov    (%rax),%rax
  8004211c5e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211c62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c66:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004211c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211c6d:	0f b6 00             	movzbl (%rax),%eax
  8004211c70:	84 c0                	test   %al,%al
  8004211c72:	74 0d                	je     8004211c81 <_dwarf_read_string+0x5f>
  8004211c74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c78:	48 8b 00             	mov    (%rax),%rax
  8004211c7b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211c7f:	72 d1                	jb     8004211c52 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004211c81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211c85:	0f b6 00             	movzbl (%rax),%eax
  8004211c88:	84 c0                	test   %al,%al
  8004211c8a:	75 1f                	jne    8004211cab <_dwarf_read_string+0x89>
  8004211c8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c90:	48 8b 00             	mov    (%rax),%rax
  8004211c93:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211c97:	73 12                	jae    8004211cab <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004211c99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211c9d:	48 8b 00             	mov    (%rax),%rax
  8004211ca0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211ca4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ca8:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211cab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211caf:	c9                   	leaveq 
  8004211cb0:	c3                   	retq   

0000008004211cb1 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004211cb1:	55                   	push   %rbp
  8004211cb2:	48 89 e5             	mov    %rsp,%rbp
  8004211cb5:	48 83 ec 28          	sub    $0x28,%rsp
  8004211cb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211cbd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211cc1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004211cc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211cc9:	48 8b 10             	mov    (%rax),%rdx
  8004211ccc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cd0:	48 01 d0             	add    %rdx,%rax
  8004211cd3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211cd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211cdb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004211cdf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ce3:	48 8b 10             	mov    (%rax),%rdx
  8004211ce6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211cea:	48 01 c2             	add    %rax,%rdx
  8004211ced:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211cf1:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211cf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211cf8:	c9                   	leaveq 
  8004211cf9:	c3                   	retq   

0000008004211cfa <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004211cfa:	55                   	push   %rbp
  8004211cfb:	48 89 e5             	mov    %rsp,%rbp
  8004211cfe:	48 83 ec 20          	sub    $0x20,%rsp
  8004211d02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004211d06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d0a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211d0e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211d13:	75 35                	jne    8004211d4a <_dwarf_elf_get_byte_order+0x50>
  8004211d15:	48 b9 60 11 22 04 80 	movabs $0x8004221160,%rcx
  8004211d1c:	00 00 00 
  8004211d1f:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004211d26:	00 00 00 
  8004211d29:	be 29 01 00 00       	mov    $0x129,%esi
  8004211d2e:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004211d35:	00 00 00 
  8004211d38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211d44:	00 00 00 
  8004211d47:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004211d4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211d4e:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004211d52:	0f b6 c0             	movzbl %al,%eax
  8004211d55:	83 f8 02             	cmp    $0x2,%eax
  8004211d58:	75 07                	jne    8004211d61 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004211d5a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d5f:	eb 05                	jmp    8004211d66 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211d61:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211d66:	c9                   	leaveq 
  8004211d67:	c3                   	retq   

0000008004211d68 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211d68:	55                   	push   %rbp
  8004211d69:	48 89 e5             	mov    %rsp,%rbp
  8004211d6c:	48 83 ec 20          	sub    $0x20,%rsp
  8004211d70:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211d74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211d7c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211d81:	75 35                	jne    8004211db8 <_dwarf_elf_get_pointer_size+0x50>
  8004211d83:	48 b9 60 11 22 04 80 	movabs $0x8004221160,%rcx
  8004211d8a:	00 00 00 
  8004211d8d:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004211d94:	00 00 00 
  8004211d97:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004211d9c:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004211da3:	00 00 00 
  8004211da6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211dab:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211db2:	00 00 00 
  8004211db5:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004211db8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211dbc:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004211dc0:	3c 01                	cmp    $0x1,%al
  8004211dc2:	75 07                	jne    8004211dcb <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004211dc4:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211dc9:	eb 05                	jmp    8004211dd0 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004211dcb:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004211dd0:	c9                   	leaveq 
  8004211dd1:	c3                   	retq   

0000008004211dd2 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004211dd2:	55                   	push   %rbp
  8004211dd3:	48 89 e5             	mov    %rsp,%rbp
  8004211dd6:	53                   	push   %rbx
  8004211dd7:	48 83 ec 18          	sub    $0x18,%rsp
  8004211ddb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211ddf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004211de3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211de7:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211dec:	be 00 00 00 00       	mov    $0x0,%esi
  8004211df1:	48 89 c7             	mov    %rax,%rdi
  8004211df4:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004211dfb:	00 00 00 
  8004211dfe:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004211e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e04:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004211e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e0f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004211e16:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004211e17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e1b:	48 89 c7             	mov    %rax,%rdi
  8004211e1e:	48 b8 68 1d 21 04 80 	movabs $0x8004211d68,%rax
  8004211e25:	00 00 00 
  8004211e28:	ff d0                	callq  *%rax
  8004211e2a:	0f b6 d0             	movzbl %al,%edx
  8004211e2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e31:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211e34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e38:	48 89 c7             	mov    %rax,%rdi
  8004211e3b:	48 b8 fa 1c 21 04 80 	movabs $0x8004211cfa,%rax
  8004211e42:	00 00 00 
  8004211e45:	ff d0                	callq  *%rax
  8004211e47:	85 c0                	test   %eax,%eax
  8004211e49:	75 26                	jne    8004211e71 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004211e4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e4f:	48 b9 9f 16 21 04 80 	movabs $0x800421169f,%rcx
  8004211e56:	00 00 00 
  8004211e59:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004211e5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e61:	48 bb 51 18 21 04 80 	movabs $0x8004211851,%rbx
  8004211e68:	00 00 00 
  8004211e6b:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211e6f:	eb 24                	jmp    8004211e95 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e75:	48 b9 52 14 21 04 80 	movabs $0x8004211452,%rcx
  8004211e7c:	00 00 00 
  8004211e7f:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211e83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e87:	48 be 7e 15 21 04 80 	movabs $0x800421157e,%rsi
  8004211e8e:	00 00 00 
  8004211e91:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211e95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e99:	48 89 c7             	mov    %rax,%rdi
  8004211e9c:	48 b8 9f 33 21 04 80 	movabs $0x800421339f,%rax
  8004211ea3:	00 00 00 
  8004211ea6:	ff d0                	callq  *%rax
	return 0;
  8004211ea8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ead:	48 83 c4 18          	add    $0x18,%rsp
  8004211eb1:	5b                   	pop    %rbx
  8004211eb2:	5d                   	pop    %rbp
  8004211eb3:	c3                   	retq   

0000008004211eb4 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004211eb4:	55                   	push   %rbp
  8004211eb5:	48 89 e5             	mov    %rsp,%rbp
  8004211eb8:	48 83 ec 20          	sub    $0x20,%rsp
  8004211ebc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211ec0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004211ec4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ec8:	48 8b 10             	mov    (%rax),%rdx
  8004211ecb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ecf:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211ed3:	48 39 c2             	cmp    %rax,%rdx
  8004211ed6:	76 0a                	jbe    8004211ee2 <_get_next_cu+0x2e>
		return -1;
  8004211ed8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211edd:	e9 6b 01 00 00       	jmpq   800421204d <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004211ee2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ee6:	48 8b 00             	mov    (%rax),%rax
  8004211ee9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004211eed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211ef1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ef5:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004211ef9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211efd:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211f01:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211f05:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211f09:	48 89 d1             	mov    %rdx,%rcx
  8004211f0c:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211f10:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211f15:	48 89 cf             	mov    %rcx,%rdi
  8004211f18:	ff d0                	callq  *%rax
  8004211f1a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004211f1d:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211f21:	75 2a                	jne    8004211f4d <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f27:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211f2b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211f2f:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211f33:	48 89 d1             	mov    %rdx,%rcx
  8004211f36:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211f3a:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211f3f:	48 89 cf             	mov    %rcx,%rdi
  8004211f42:	ff d0                	callq  *%rax
  8004211f44:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211f47:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004211f4b:	eb 04                	jmp    8004211f51 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004211f4d:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211f51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211f55:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211f59:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004211f5c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211f5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211f63:	48 01 c2             	add    %rax,%rdx
  8004211f66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f6a:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004211f6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f71:	48 8b 10             	mov    (%rax),%rdx
  8004211f74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211f78:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004211f7c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211f7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211f83:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211f86:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211f8a:	75 07                	jne    8004211f93 <_get_next_cu+0xdf>
  8004211f8c:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211f91:	eb 05                	jmp    8004211f98 <_get_next_cu+0xe4>
  8004211f93:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211f98:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211f9c:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211f9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fa3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211fa7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211fab:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211faf:	48 89 d1             	mov    %rdx,%rcx
  8004211fb2:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211fb6:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211fbb:	48 89 cf             	mov    %rcx,%rdi
  8004211fbe:	ff d0                	callq  *%rax
  8004211fc0:	89 c2                	mov    %eax,%edx
  8004211fc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211fc6:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211fca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fce:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211fd2:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211fd6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211fda:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004211fde:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211fe2:	48 89 cf             	mov    %rcx,%rdi
  8004211fe5:	ff d0                	callq  *%rax
  8004211fe7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211feb:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004211fef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ff3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ff7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211ffb:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211fff:	48 89 d1             	mov    %rdx,%rcx
  8004212002:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004212006:	ba 01 00 00 00       	mov    $0x1,%edx
  800421200b:	48 89 cf             	mov    %rcx,%rdi
  800421200e:	ff d0                	callq  *%rax
  8004212010:	89 c2                	mov    %eax,%edx
  8004212012:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212016:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004212019:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421201d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212021:	66 83 f8 01          	cmp    $0x1,%ax
  8004212025:	76 0e                	jbe    8004212035 <_get_next_cu+0x181>
  8004212027:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421202b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421202f:	66 83 f8 04          	cmp    $0x4,%ax
  8004212033:	76 07                	jbe    800421203c <_get_next_cu+0x188>
		return -1;
  8004212035:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421203a:	eb 11                	jmp    800421204d <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  800421203c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212040:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212044:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004212048:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421204d:	c9                   	leaveq 
  800421204e:	c3                   	retq   

000000800421204f <print_cu>:

void print_cu(Dwarf_CU cu)
{
  800421204f:	55                   	push   %rbp
  8004212050:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004212053:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004212057:	0f b6 c8             	movzbl %al,%ecx
  800421205a:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  800421205e:	0f b7 d0             	movzwl %ax,%edx
  8004212061:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004212065:	48 89 c6             	mov    %rax,%rsi
  8004212068:	48 bf 92 11 22 04 80 	movabs $0x8004221192,%rdi
  800421206f:	00 00 00 
  8004212072:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212077:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421207e:	00 00 00 
  8004212081:	41 ff d0             	callq  *%r8
}
  8004212084:	5d                   	pop    %rbp
  8004212085:	c3                   	retq   

0000008004212086 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004212086:	55                   	push   %rbp
  8004212087:	48 89 e5             	mov    %rsp,%rbp
  800421208a:	48 83 ec 60          	sub    $0x60,%rsp
  800421208e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004212092:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004212096:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  800421209a:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  800421209e:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042120a3:	75 35                	jne    80042120da <_dwarf_abbrev_parse+0x54>
  80042120a5:	48 b9 a1 11 22 04 80 	movabs $0x80042211a1,%rcx
  80042120ac:	00 00 00 
  80042120af:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  80042120b6:	00 00 00 
  80042120b9:	be a4 01 00 00       	mov    $0x1a4,%esi
  80042120be:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  80042120c5:	00 00 00 
  80042120c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042120cd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042120d4:	00 00 00 
  80042120d7:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  80042120da:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  80042120df:	75 35                	jne    8004212116 <_dwarf_abbrev_parse+0x90>
  80042120e1:	48 b9 ad 11 22 04 80 	movabs $0x80042211ad,%rcx
  80042120e8:	00 00 00 
  80042120eb:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  80042120f2:	00 00 00 
  80042120f5:	be a5 01 00 00       	mov    $0x1a5,%esi
  80042120fa:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212101:	00 00 00 
  8004212104:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212109:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212110:	00 00 00 
  8004212113:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004212116:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421211a:	48 8b 10             	mov    (%rax),%rdx
  800421211d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212121:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212125:	48 39 c2             	cmp    %rax,%rdx
  8004212128:	72 0a                	jb     8004212134 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  800421212a:	b8 04 00 00 00       	mov    $0x4,%eax
  800421212f:	e9 d3 01 00 00       	jmpq   8004212307 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004212134:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212138:	48 8b 00             	mov    (%rax),%rax
  800421213b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  800421213f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212143:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212147:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421214b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421214f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212153:	48 89 d6             	mov    %rdx,%rsi
  8004212156:	48 89 c7             	mov    %rax,%rdi
  8004212159:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004212160:	00 00 00 
  8004212163:	ff d0                	callq  *%rax
  8004212165:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004212169:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421216e:	75 15                	jne    8004212185 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004212170:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212174:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  800421217b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212180:	e9 82 01 00 00       	jmpq   8004212307 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004212185:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212189:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421218d:	48 89 d6             	mov    %rdx,%rsi
  8004212190:	48 89 c7             	mov    %rax,%rdi
  8004212193:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  800421219a:	00 00 00 
  800421219d:	ff d0                	callq  *%rax
  800421219f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  80042121a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042121a7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042121ab:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  80042121af:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042121b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042121b8:	48 89 cf             	mov    %rcx,%rdi
  80042121bb:	ff d0                	callq  *%rax
  80042121bd:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  80042121c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042121c8:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  80042121cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121cf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042121d3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  80042121d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121db:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  80042121df:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  80042121e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042121ea:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  80042121ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121f2:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  80042121f9:	00 
	abp->ab_atnum    = 0;
  80042121fa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042121fe:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004212205:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004212206:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421220a:	48 8b 00             	mov    (%rax),%rax
  800421220d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004212211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212215:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212219:	48 89 d6             	mov    %rdx,%rsi
  800421221c:	48 89 c7             	mov    %rax,%rdi
  800421221f:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004212226:	00 00 00 
  8004212229:	ff d0                	callq  *%rax
  800421222b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421222f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212233:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212237:	48 89 d6             	mov    %rdx,%rsi
  800421223a:	48 89 c7             	mov    %rax,%rdi
  800421223d:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004212244:	00 00 00 
  8004212247:	ff d0                	callq  *%rax
  8004212249:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  800421224d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212252:	0f 84 89 00 00 00    	je     80042122e1 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004212258:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421225c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212260:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004212264:	48 89 d0             	mov    %rdx,%rax
  8004212267:	48 01 c0             	add    %rax,%rax
  800421226a:	48 01 d0             	add    %rdx,%rax
  800421226d:	48 c1 e0 03          	shl    $0x3,%rax
  8004212271:	48 01 c8             	add    %rcx,%rax
  8004212274:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004212278:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421227c:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  800421227f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212283:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212287:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800421228b:	48 89 d0             	mov    %rdx,%rax
  800421228e:	48 01 c0             	add    %rax,%rax
  8004212291:	48 01 d0             	add    %rdx,%rax
  8004212294:	48 c1 e0 03          	shl    $0x3,%rax
  8004212298:	48 01 c8             	add    %rcx,%rax
  800421229b:	48 8d 50 38          	lea    0x38(%rax),%rdx
  800421229f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042122a3:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  80042122a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042122aa:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042122ae:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042122b2:	48 89 d0             	mov    %rdx,%rax
  80042122b5:	48 01 c0             	add    %rax,%rax
  80042122b8:	48 01 d0             	add    %rdx,%rax
  80042122bb:	48 c1 e0 03          	shl    $0x3,%rax
  80042122bf:	48 01 c8             	add    %rcx,%rax
  80042122c2:	48 8d 50 40          	lea    0x40(%rax),%rdx
  80042122c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042122ca:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  80042122cd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042122d1:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042122d5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042122d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042122dd:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  80042122e1:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042122e6:	0f 85 1a ff ff ff    	jne    8004212206 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  80042122ec:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042122f0:	48 8b 00             	mov    (%rax),%rax
  80042122f3:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  80042122f7:	48 89 c2             	mov    %rax,%rdx
  80042122fa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042122fe:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004212302:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212307:	c9                   	leaveq 
  8004212308:	c3                   	retq   

0000008004212309 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004212309:	55                   	push   %rbp
  800421230a:	48 89 e5             	mov    %rsp,%rbp
  800421230d:	48 83 ec 70          	sub    $0x70,%rsp
  8004212311:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212315:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212319:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  800421231d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212322:	75 0a                	jne    800421232e <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004212324:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212329:	e9 0a 01 00 00       	jmpq   8004212438 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  800421232e:	48 bf b8 11 22 04 80 	movabs $0x80042211b8,%rdi
  8004212335:	00 00 00 
  8004212338:	48 b8 69 66 21 04 80 	movabs $0x8004216669,%rax
  800421233f:	00 00 00 
  8004212342:	ff d0                	callq  *%rax
  8004212344:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004212348:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421234d:	75 35                	jne    8004212384 <_dwarf_abbrev_find+0x7b>
  800421234f:	48 b9 ad 11 22 04 80 	movabs $0x80042211ad,%rcx
  8004212356:	00 00 00 
  8004212359:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212360:	00 00 00 
  8004212363:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004212368:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  800421236f:	00 00 00 
  8004212372:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212377:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421237e:	00 00 00 
  8004212381:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004212384:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212388:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  800421238c:	e9 8d 00 00 00       	jmpq   800421241e <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004212391:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004212395:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212399:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  800421239d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042123a1:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042123a5:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042123a9:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  80042123ad:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042123b2:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  80042123b6:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042123bb:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  80042123bf:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042123c4:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  80042123c8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  80042123cd:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  80042123d1:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  80042123d6:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  80042123da:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  80042123df:	48 89 c7             	mov    %rax,%rdi
  80042123e2:	48 b8 86 20 21 04 80 	movabs $0x8004212086,%rax
  80042123e9:	00 00 00 
  80042123ec:	ff d0                	callq  *%rax
  80042123ee:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  80042123f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042123f5:	74 05                	je     80042123fc <_dwarf_abbrev_find+0xf3>
			return (ret);
  80042123f7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042123fa:	eb 3c                	jmp    8004212438 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  80042123fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212400:	48 8b 00             	mov    (%rax),%rax
  8004212403:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212407:	75 07                	jne    8004212410 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004212409:	b8 00 00 00 00       	mov    $0x0,%eax
  800421240e:	eb 28                	jmp    8004212438 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004212410:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212414:	48 8b 00             	mov    (%rax),%rax
  8004212417:	48 85 c0             	test   %rax,%rax
  800421241a:	75 02                	jne    800421241e <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  800421241c:	eb 15                	jmp    8004212433 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  800421241e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212422:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004212426:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421242a:	48 39 c2             	cmp    %rax,%rdx
  800421242d:	0f 87 5e ff ff ff    	ja     8004212391 <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  8004212433:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212438:	c9                   	leaveq 
  8004212439:	c3                   	retq   

000000800421243a <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  800421243a:	55                   	push   %rbp
  800421243b:	48 89 e5             	mov    %rsp,%rbp
  800421243e:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  8004212445:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800421244c:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004212453:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  800421245a:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  8004212461:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004212468:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  800421246f:	48 bf c6 11 22 04 80 	movabs $0x80042211c6,%rdi
  8004212476:	00 00 00 
  8004212479:	48 b8 69 66 21 04 80 	movabs $0x8004216669,%rax
  8004212480:	00 00 00 
  8004212483:	ff d0                	callq  *%rax
  8004212485:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004212489:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421248d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212491:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  8004212495:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421249c:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042124a0:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  80042124a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  80042124aa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042124b1:	ba 60 00 00 00       	mov    $0x60,%edx
  80042124b6:	be 00 00 00 00       	mov    $0x0,%esi
  80042124bb:	48 89 c7             	mov    %rax,%rdi
  80042124be:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  80042124c5:	00 00 00 
  80042124c8:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  80042124ca:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042124d1:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  80042124d8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042124df:	48 8b 00             	mov    (%rax),%rax
  80042124e2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  80042124e6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042124ed:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042124f1:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  80042124f5:	8b 45 10             	mov    0x10(%rbp),%eax
  80042124f8:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  80042124fb:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004212502:	00 

	switch (form) {
  8004212503:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  800421250a:	20 
  800421250b:	0f 87 82 04 00 00    	ja     8004212993 <_dwarf_attr_init+0x559>
  8004212511:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004212518:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421251f:	00 
  8004212520:	48 b8 f0 11 22 04 80 	movabs $0x80042211f0,%rax
  8004212527:	00 00 00 
  800421252a:	48 01 d0             	add    %rdx,%rax
  800421252d:	48 8b 00             	mov    (%rax),%rax
  8004212530:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004212532:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212539:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421253d:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212544:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212548:	0f b6 d2             	movzbl %dl,%edx
  800421254b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212552:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212556:	48 89 cf             	mov    %rcx,%rdi
  8004212559:	ff d0                	callq  *%rax
  800421255b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421255f:	e9 37 04 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004212564:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421256b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421256f:	48 89 d6             	mov    %rdx,%rsi
  8004212572:	48 89 c7             	mov    %rax,%rdi
  8004212575:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  800421257c:	00 00 00 
  800421257f:	ff d0                	callq  *%rax
  8004212581:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212585:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212589:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212590:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212594:	48 89 ce             	mov    %rcx,%rsi
  8004212597:	48 89 c7             	mov    %rax,%rdi
  800421259a:	48 b8 b1 1c 21 04 80 	movabs $0x8004211cb1,%rax
  80042125a1:	00 00 00 
  80042125a4:	ff d0                	callq  *%rax
  80042125a6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042125aa:	e9 ec 03 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042125af:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042125b6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042125ba:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042125c1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042125c5:	ba 01 00 00 00       	mov    $0x1,%edx
  80042125ca:	48 89 cf             	mov    %rcx,%rdi
  80042125cd:	ff d0                	callq  *%rax
  80042125cf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042125d3:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042125d7:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042125de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042125e2:	48 89 ce             	mov    %rcx,%rsi
  80042125e5:	48 89 c7             	mov    %rax,%rdi
  80042125e8:	48 b8 b1 1c 21 04 80 	movabs $0x8004211cb1,%rax
  80042125ef:	00 00 00 
  80042125f2:	ff d0                	callq  *%rax
  80042125f4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042125f8:	e9 9e 03 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042125fd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212604:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212608:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421260f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212613:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212618:	48 89 cf             	mov    %rcx,%rdi
  800421261b:	ff d0                	callq  *%rax
  800421261d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212621:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212625:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421262c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212630:	48 89 ce             	mov    %rcx,%rsi
  8004212633:	48 89 c7             	mov    %rax,%rdi
  8004212636:	48 b8 b1 1c 21 04 80 	movabs $0x8004211cb1,%rax
  800421263d:	00 00 00 
  8004212640:	ff d0                	callq  *%rax
  8004212642:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212646:	e9 50 03 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  800421264b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212652:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212656:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421265d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212661:	ba 04 00 00 00       	mov    $0x4,%edx
  8004212666:	48 89 cf             	mov    %rcx,%rdi
  8004212669:	ff d0                	callq  *%rax
  800421266b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421266f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212673:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421267a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421267e:	48 89 ce             	mov    %rcx,%rsi
  8004212681:	48 89 c7             	mov    %rax,%rdi
  8004212684:	48 b8 b1 1c 21 04 80 	movabs $0x8004211cb1,%rax
  800421268b:	00 00 00 
  800421268e:	ff d0                	callq  *%rax
  8004212690:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212694:	e9 02 03 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004212699:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042126a0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042126a4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042126ab:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042126af:	ba 01 00 00 00       	mov    $0x1,%edx
  80042126b4:	48 89 cf             	mov    %rcx,%rdi
  80042126b7:	ff d0                	callq  *%rax
  80042126b9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126bd:	e9 d9 02 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042126c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042126c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042126cd:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042126d4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042126d8:	ba 02 00 00 00       	mov    $0x2,%edx
  80042126dd:	48 89 cf             	mov    %rcx,%rdi
  80042126e0:	ff d0                	callq  *%rax
  80042126e2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126e6:	e9 b0 02 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042126eb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042126f2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042126f6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042126fd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212701:	ba 04 00 00 00       	mov    $0x4,%edx
  8004212706:	48 89 cf             	mov    %rcx,%rdi
  8004212709:	ff d0                	callq  *%rax
  800421270b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421270f:	e9 87 02 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  8004212714:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421271b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421271f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212726:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421272a:	ba 08 00 00 00       	mov    $0x8,%edx
  800421272f:	48 89 cf             	mov    %rcx,%rdi
  8004212732:	ff d0                	callq  *%rax
  8004212734:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212738:	e9 5e 02 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  800421273d:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212744:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212748:	48 89 d6             	mov    %rdx,%rsi
  800421274b:	48 89 c7             	mov    %rax,%rdi
  800421274e:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004212755:	00 00 00 
  8004212758:	ff d0                	callq  *%rax
  800421275a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  8004212761:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004212768:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  800421276f:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212776:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421277d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212784:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421278b:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004212792:	4d 89 c1             	mov    %r8,%r9
  8004212795:	49 89 f8             	mov    %rdi,%r8
  8004212798:	48 89 c7             	mov    %rax,%rdi
  800421279b:	48 b8 3a 24 21 04 80 	movabs $0x800421243a,%rax
  80042127a2:	00 00 00 
  80042127a5:	ff d0                	callq  *%rax
  80042127a7:	e9 1d 03 00 00       	jmpq   8004212ac9 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  80042127ac:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042127b3:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042127b7:	66 83 f8 02          	cmp    $0x2,%ax
  80042127bb:	75 2f                	jne    80042127ec <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042127bd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042127c4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042127c8:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042127cf:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042127d3:	0f b6 d2             	movzbl %dl,%edx
  80042127d6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042127dd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042127e1:	48 89 cf             	mov    %rcx,%rdi
  80042127e4:	ff d0                	callq  *%rax
  80042127e6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042127ea:	eb 39                	jmp    8004212825 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  80042127ec:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042127f3:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042127f7:	66 83 f8 03          	cmp    $0x3,%ax
  80042127fb:	75 28                	jne    8004212825 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042127fd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212804:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212808:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421280c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212813:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212817:	48 89 cf             	mov    %rcx,%rdi
  800421281a:	ff d0                	callq  *%rax
  800421281c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212820:	e9 76 01 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
  8004212825:	e9 71 01 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800421282a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212835:	48 89 d6             	mov    %rdx,%rsi
  8004212838:	48 89 c7             	mov    %rax,%rdi
  800421283b:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004212842:	00 00 00 
  8004212845:	ff d0                	callq  *%rax
  8004212847:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421284b:	e9 4b 01 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004212850:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212857:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421285b:	48 89 d6             	mov    %rdx,%rsi
  800421285e:	48 89 c7             	mov    %rax,%rdi
  8004212861:	48 b8 00 1a 21 04 80 	movabs $0x8004211a00,%rax
  8004212868:	00 00 00 
  800421286b:	ff d0                	callq  *%rax
  800421286d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212871:	e9 25 01 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212876:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421287d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212881:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212885:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421288c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212890:	48 89 cf             	mov    %rcx,%rdi
  8004212893:	ff d0                	callq  *%rax
  8004212895:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212899:	e9 fd 00 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  800421289e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042128a2:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042128a6:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042128ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042128b1:	48 89 ce             	mov    %rcx,%rsi
  80042128b4:	48 89 c7             	mov    %rax,%rdi
  80042128b7:	48 b8 22 1c 21 04 80 	movabs $0x8004211c22,%rax
  80042128be:	00 00 00 
  80042128c1:	ff d0                	callq  *%rax
  80042128c3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042128c7:	e9 cf 00 00 00       	jmpq   800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042128cc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042128d3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042128d7:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042128db:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042128e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042128e6:	48 89 cf             	mov    %rcx,%rdi
  80042128e9:	ff d0                	callq  *%rax
  80042128eb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  80042128ef:	48 bf d2 11 22 04 80 	movabs $0x80042211d2,%rdi
  80042128f6:	00 00 00 
  80042128f9:	48 b8 69 66 21 04 80 	movabs $0x8004216669,%rax
  8004212900:	00 00 00 
  8004212903:	ff d0                	callq  *%rax
  8004212905:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004212909:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421290e:	75 35                	jne    8004212945 <_dwarf_attr_init+0x50b>
  8004212910:	48 b9 dd 11 22 04 80 	movabs $0x80042211dd,%rcx
  8004212917:	00 00 00 
  800421291a:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212921:	00 00 00 
  8004212924:	be 51 02 00 00       	mov    $0x251,%esi
  8004212929:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212930:	00 00 00 
  8004212933:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212938:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421293f:	00 00 00 
  8004212942:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004212945:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212949:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421294d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212951:	48 01 d0             	add    %rdx,%rax
  8004212954:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212958:	eb 41                	jmp    800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  800421295a:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004212961:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004212962:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212966:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421296d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212971:	48 89 ce             	mov    %rcx,%rsi
  8004212974:	48 89 c7             	mov    %rax,%rdi
  8004212977:	48 b8 b1 1c 21 04 80 	movabs $0x8004211cb1,%rax
  800421297e:	00 00 00 
  8004212981:	ff d0                	callq  *%rax
  8004212983:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212987:	eb 12                	jmp    800421299b <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004212989:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004212990:	00 
		break;
  8004212991:	eb 08                	jmp    800421299b <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004212993:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  800421299a:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  800421299b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421299f:	0f 85 21 01 00 00    	jne    8004212ac6 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  80042129a5:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  80042129ac:	09 
  80042129ad:	74 1e                	je     80042129cd <_dwarf_attr_init+0x593>
  80042129af:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  80042129b6:	0a 
  80042129b7:	74 14                	je     80042129cd <_dwarf_attr_init+0x593>
  80042129b9:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  80042129c0:	03 
  80042129c1:	74 0a                	je     80042129cd <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  80042129c3:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  80042129ca:	04 
  80042129cb:	75 10                	jne    80042129dd <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  80042129cd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042129d1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  80042129d5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042129d9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  80042129dd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042129e1:	48 83 f8 03          	cmp    $0x3,%rax
  80042129e5:	75 39                	jne    8004212a20 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  80042129e7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042129eb:	48 83 f8 08          	cmp    $0x8,%rax
  80042129ef:	74 1c                	je     8004212a0d <_dwarf_attr_init+0x5d3>
  80042129f1:	48 83 f8 0e          	cmp    $0xe,%rax
  80042129f5:	74 02                	je     80042129f9 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  80042129f7:	eb 27                	jmp    8004212a20 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  80042129f9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042129fd:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212a04:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212a0b:	eb 13                	jmp    8004212a20 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  8004212a0d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212a11:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212a18:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212a1f:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004212a20:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212a27:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212a2e:	8d 48 01             	lea    0x1(%rax),%ecx
  8004212a31:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004212a38:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004212a3e:	0f b6 c0             	movzbl %al,%eax
  8004212a41:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212a48:	48 63 d0             	movslq %eax,%rdx
  8004212a4b:	48 89 d0             	mov    %rdx,%rax
  8004212a4e:	48 01 c0             	add    %rax,%rax
  8004212a51:	48 01 d0             	add    %rdx,%rax
  8004212a54:	48 c1 e0 05          	shl    $0x5,%rax
  8004212a58:	48 01 c8             	add    %rcx,%rax
  8004212a5b:	48 05 70 03 00 00    	add    $0x370,%rax
  8004212a61:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212a68:	48 89 10             	mov    %rdx,(%rax)
  8004212a6b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004212a72:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004212a76:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004212a7a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004212a7e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004212a82:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004212a86:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212a8a:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004212a8e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212a92:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004212a96:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212a9a:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004212a9e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212aa2:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004212aa6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212aaa:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004212aae:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004212ab2:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004212ab6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004212aba:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004212abe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212ac2:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004212ac6:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004212ac9:	c9                   	leaveq 
  8004212aca:	c3                   	retq   

0000008004212acb <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004212acb:	55                   	push   %rbp
  8004212acc:	48 89 e5             	mov    %rsp,%rbp
  8004212acf:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004212ad6:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004212add:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004212ae4:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004212aeb:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004212af1:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004212af8:	00 
  8004212af9:	75 35                	jne    8004212b30 <dwarf_search_die_within_cu+0x65>
  8004212afb:	48 b9 f8 12 22 04 80 	movabs $0x80042212f8,%rcx
  8004212b02:	00 00 00 
  8004212b05:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212b0c:	00 00 00 
  8004212b0f:	be 86 02 00 00       	mov    $0x286,%esi
  8004212b14:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212b1b:	00 00 00 
  8004212b1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212b23:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212b2a:	00 00 00 
  8004212b2d:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004212b30:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004212b37:	00 
  8004212b38:	75 35                	jne    8004212b6f <dwarf_search_die_within_cu+0xa4>
  8004212b3a:	48 b9 fc 12 22 04 80 	movabs $0x80042212fc,%rcx
  8004212b41:	00 00 00 
  8004212b44:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212b4b:	00 00 00 
  8004212b4e:	be 88 02 00 00       	mov    $0x288,%esi
  8004212b53:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212b5a:	00 00 00 
  8004212b5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212b62:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212b69:	00 00 00 
  8004212b6c:	41 ff d0             	callq  *%r8

	level = 1;
  8004212b6f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212b76:	e9 17 02 00 00       	jmpq   8004212d92 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004212b7b:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212b82:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004212b86:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212b8d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212b91:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004212b98:	48 89 d6             	mov    %rdx,%rsi
  8004212b9b:	48 89 c7             	mov    %rax,%rdi
  8004212b9e:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004212ba5:	00 00 00 
  8004212ba8:	ff d0                	callq  *%rax
  8004212baa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004212bae:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212bb3:	75 22                	jne    8004212bd7 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004212bb5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212bb9:	74 09                	je     8004212bc4 <dwarf_search_die_within_cu+0xf9>
  8004212bbb:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212bc2:	75 0a                	jne    8004212bce <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004212bc4:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212bc9:	e9 f4 01 00 00       	jmpq   8004212dc2 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004212bce:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004212bd2:	e9 bb 01 00 00       	jmpq   8004212d92 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004212bd7:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212bde:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212be2:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212be9:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004212bed:	48 89 34 24          	mov    %rsi,(%rsp)
  8004212bf1:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004212bf5:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004212bfa:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004212bfe:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004212c03:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004212c07:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004212c0c:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212c10:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004212c15:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004212c19:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004212c1e:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004212c22:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212c27:	48 89 ce             	mov    %rcx,%rsi
  8004212c2a:	48 89 c7             	mov    %rax,%rdi
  8004212c2d:	48 b8 09 23 21 04 80 	movabs $0x8004212309,%rax
  8004212c34:	00 00 00 
  8004212c37:	ff d0                	callq  *%rax
  8004212c39:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212c3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212c40:	74 08                	je     8004212c4a <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004212c42:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212c45:	e9 78 01 00 00       	jmpq   8004212dc2 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004212c4a:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212c51:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212c55:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212c58:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212c5f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212c63:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212c67:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212c6e:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212c72:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212c79:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212c7e:	48 89 d6             	mov    %rdx,%rsi
  8004212c81:	48 89 c1             	mov    %rax,%rcx
  8004212c84:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212c87:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212c8e:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212c95:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004212c9c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212ca3:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212ca7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004212cae:	e9 8e 00 00 00       	jmpq   8004212d41 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004212cb3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212cb6:	48 63 d0             	movslq %eax,%rdx
  8004212cb9:	48 89 d0             	mov    %rdx,%rax
  8004212cbc:	48 01 c0             	add    %rax,%rax
  8004212cbf:	48 01 d0             	add    %rdx,%rax
  8004212cc2:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cc6:	48 01 e8             	add    %rbp,%rax
  8004212cc9:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004212ccf:	48 8b 08             	mov    (%rax),%rcx
  8004212cd2:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004212cd9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212cdc:	48 63 d0             	movslq %eax,%rdx
  8004212cdf:	48 89 d0             	mov    %rdx,%rax
  8004212ce2:	48 01 c0             	add    %rax,%rax
  8004212ce5:	48 01 d0             	add    %rdx,%rax
  8004212ce8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cec:	48 83 c0 30          	add    $0x30,%rax
  8004212cf0:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004212cf4:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004212cfb:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004212d02:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212d09:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212d10:	49 89 c9             	mov    %rcx,%r9
  8004212d13:	49 89 f8             	mov    %rdi,%r8
  8004212d16:	48 89 d1             	mov    %rdx,%rcx
  8004212d19:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004212d1d:	48 89 c7             	mov    %rax,%rdi
  8004212d20:	48 b8 3a 24 21 04 80 	movabs $0x800421243a,%rax
  8004212d27:	00 00 00 
  8004212d2a:	ff d0                	callq  *%rax
  8004212d2c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212d2f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212d33:	74 08                	je     8004212d3d <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004212d35:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212d38:	e9 85 00 00 00       	jmpq   8004212dc2 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212d3d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004212d41:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212d44:	48 63 d0             	movslq %eax,%rdx
  8004212d47:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212d4e:	48 39 c2             	cmp    %rax,%rdx
  8004212d51:	0f 82 5c ff ff ff    	jb     8004212cb3 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004212d57:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212d5e:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212d65:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004212d69:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212d70:	74 19                	je     8004212d8b <dwarf_search_die_within_cu+0x2c0>
  8004212d72:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212d76:	7e 13                	jle    8004212d8b <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212d78:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212d7f:	3c 01                	cmp    $0x1,%al
  8004212d81:	75 06                	jne    8004212d89 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212d83:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212d87:	eb 09                	jmp    8004212d92 <dwarf_search_die_within_cu+0x2c7>
  8004212d89:	eb 07                	jmp    8004212d92 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004212d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212d90:	eb 30                	jmp    8004212dc2 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212d92:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004212d96:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212d9d:	48 39 c2             	cmp    %rax,%rdx
  8004212da0:	76 1b                	jbe    8004212dbd <dwarf_search_die_within_cu+0x2f2>
  8004212da2:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212da9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212dad:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212db4:	48 39 c2             	cmp    %rax,%rdx
  8004212db7:	0f 87 be fd ff ff    	ja     8004212b7b <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004212dbd:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212dc2:	c9                   	leaveq 
  8004212dc3:	c3                   	retq   

0000008004212dc4 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004212dc4:	55                   	push   %rbp
  8004212dc5:	48 89 e5             	mov    %rsp,%rbp
  8004212dc8:	48 83 ec 60          	sub    $0x60,%rsp
  8004212dcc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212dd0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212dd4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004212dd8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212ddd:	75 35                	jne    8004212e14 <dwarf_offdie+0x50>
  8004212ddf:	48 b9 f8 12 22 04 80 	movabs $0x80042212f8,%rcx
  8004212de6:	00 00 00 
  8004212de9:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212df0:	00 00 00 
  8004212df3:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004212df8:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212dff:	00 00 00 
  8004212e02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e0e:	00 00 00 
  8004212e11:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212e14:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212e19:	75 35                	jne    8004212e50 <dwarf_offdie+0x8c>
  8004212e1b:	48 b9 fc 12 22 04 80 	movabs $0x80042212fc,%rcx
  8004212e22:	00 00 00 
  8004212e25:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212e2c:	00 00 00 
  8004212e2f:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212e34:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212e3b:	00 00 00 
  8004212e3e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e43:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e4a:	00 00 00 
  8004212e4d:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212e50:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212e54:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212e58:	76 66                	jbe    8004212ec0 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004212e5a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212e5e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212e62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212e66:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004212e6a:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212e6e:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212e72:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212e77:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004212e7b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212e80:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212e84:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212e89:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004212e8d:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212e92:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212e96:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212e9b:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212e9f:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212ea4:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212ea9:	48 89 c7             	mov    %rax,%rdi
  8004212eac:	48 b8 cb 2a 21 04 80 	movabs $0x8004212acb,%rax
  8004212eb3:	00 00 00 
  8004212eb6:	ff d0                	callq  *%rax
  8004212eb8:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004212ebb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004212ebe:	eb 05                	jmp    8004212ec5 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212ec0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212ec5:	c9                   	leaveq 
  8004212ec6:	c3                   	retq   

0000008004212ec7 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212ec7:	55                   	push   %rbp
  8004212ec8:	48 89 e5             	mov    %rsp,%rbp
  8004212ecb:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004212ecf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212ed3:	89 f0                	mov    %esi,%eax
  8004212ed5:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004212ed9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212ee0:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212ee1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004212ee8:	eb 57                	jmp    8004212f41 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004212eea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212eee:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212ef1:	48 63 d0             	movslq %eax,%rdx
  8004212ef4:	48 89 d0             	mov    %rdx,%rax
  8004212ef7:	48 01 c0             	add    %rax,%rax
  8004212efa:	48 01 d0             	add    %rdx,%rax
  8004212efd:	48 c1 e0 05          	shl    $0x5,%rax
  8004212f01:	48 01 c8             	add    %rcx,%rax
  8004212f04:	48 05 80 03 00 00    	add    $0x380,%rax
  8004212f0a:	48 8b 10             	mov    (%rax),%rdx
  8004212f0d:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212f11:	48 39 c2             	cmp    %rax,%rdx
  8004212f14:	75 27                	jne    8004212f3d <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212f16:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212f19:	48 63 d0             	movslq %eax,%rdx
  8004212f1c:	48 89 d0             	mov    %rdx,%rax
  8004212f1f:	48 01 c0             	add    %rax,%rax
  8004212f22:	48 01 d0             	add    %rdx,%rax
  8004212f25:	48 c1 e0 05          	shl    $0x5,%rax
  8004212f29:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212f30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f34:	48 01 d0             	add    %rdx,%rax
  8004212f37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004212f3b:	eb 17                	jmp    8004212f54 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212f3d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f45:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212f4c:	0f b6 c0             	movzbl %al,%eax
  8004212f4f:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212f52:	7f 96                	jg     8004212eea <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004212f54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004212f58:	c9                   	leaveq 
  8004212f59:	c3                   	retq   

0000008004212f5a <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004212f5a:	55                   	push   %rbp
  8004212f5b:	48 89 e5             	mov    %rsp,%rbp
  8004212f5e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212f62:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212f66:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212f6a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212f6e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212f72:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212f77:	75 35                	jne    8004212fae <dwarf_siblingof+0x54>
  8004212f79:	48 b9 f8 12 22 04 80 	movabs $0x80042212f8,%rcx
  8004212f80:	00 00 00 
  8004212f83:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212f8a:	00 00 00 
  8004212f8d:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212f92:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212f99:	00 00 00 
  8004212f9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212fa1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212fa8:	00 00 00 
  8004212fab:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212fae:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212fb3:	75 35                	jne    8004212fea <dwarf_siblingof+0x90>
  8004212fb5:	48 b9 fc 12 22 04 80 	movabs $0x80042212fc,%rcx
  8004212fbc:	00 00 00 
  8004212fbf:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004212fc6:	00 00 00 
  8004212fc9:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004212fce:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004212fd5:	00 00 00 
  8004212fd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212fdd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212fe4:	00 00 00 
  8004212fe7:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212fea:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212fef:	75 35                	jne    8004213026 <dwarf_siblingof+0xcc>
  8004212ff1:	48 b9 04 13 22 04 80 	movabs $0x8004221304,%rcx
  8004212ff8:	00 00 00 
  8004212ffb:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004213002:	00 00 00 
  8004213005:	be ee 02 00 00       	mov    $0x2ee,%esi
  800421300a:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004213011:	00 00 00 
  8004213014:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213019:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213020:	00 00 00 
  8004213023:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004213026:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421302b:	75 65                	jne    8004213092 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  800421302d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213031:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004213035:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213039:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421303d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213041:	48 8b 38             	mov    (%rax),%rdi
  8004213044:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004213048:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800421304c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004213051:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004213055:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800421305a:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800421305e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004213063:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004213067:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800421306c:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004213070:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004213075:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213079:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421307e:	48 89 cf             	mov    %rcx,%rdi
  8004213081:	48 b8 c4 2d 21 04 80 	movabs $0x8004212dc4,%rax
  8004213088:	00 00 00 
  800421308b:	ff d0                	callq  *%rax
  800421308d:	e9 0a 01 00 00       	jmpq   800421319c <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004213092:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004213099:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421309d:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042130a1:	84 c0                	test   %al,%al
  80042130a3:	75 0e                	jne    80042130b3 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  80042130a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042130a9:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042130ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042130b1:	eb 6b                	jmp    800421311e <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  80042130b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042130b7:	be 01 00 00 00       	mov    $0x1,%esi
  80042130bc:	48 89 c7             	mov    %rax,%rdi
  80042130bf:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  80042130c6:	00 00 00 
  80042130c9:	ff d0                	callq  *%rax
  80042130cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042130cf:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042130d4:	74 35                	je     800421310b <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  80042130d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042130da:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042130de:	48 83 f8 10          	cmp    $0x10,%rax
  80042130e2:	74 19                	je     80042130fd <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  80042130e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042130e8:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042130ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042130f0:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042130f4:	48 01 d0             	add    %rdx,%rax
  80042130f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042130fb:	eb 21                	jmp    800421311e <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  80042130fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213101:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213105:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213109:	eb 13                	jmp    800421311e <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  800421310b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421310f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213113:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004213117:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  800421311e:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004213121:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213125:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004213129:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  800421312d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213131:	4c 8b 00             	mov    (%rax),%r8
  8004213134:	4c 89 04 24          	mov    %r8,(%rsp)
  8004213138:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421313c:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004213141:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004213145:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800421314a:	4c 8b 40 18          	mov    0x18(%rax),%r8
  800421314e:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004213153:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004213157:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  800421315c:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004213160:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004213165:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213169:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421316e:	48 b8 cb 2a 21 04 80 	movabs $0x8004212acb,%rax
  8004213175:	00 00 00 
  8004213178:	ff d0                	callq  *%rax
  800421317a:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  800421317d:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004213181:	75 07                	jne    800421318a <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004213183:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213188:	eb 12                	jmp    800421319c <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  800421318a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421318e:	74 07                	je     8004213197 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004213190:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213195:	eb 05                	jmp    800421319c <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004213197:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421319c:	c9                   	leaveq 
  800421319d:	c3                   	retq   

000000800421319e <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  800421319e:	55                   	push   %rbp
  800421319f:	48 89 e5             	mov    %rsp,%rbp
  80042131a2:	48 83 ec 70          	sub    $0x70,%rsp
  80042131a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042131aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042131ae:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042131b2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  80042131b6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042131bb:	75 35                	jne    80042131f2 <dwarf_child+0x54>
  80042131bd:	48 b9 07 13 22 04 80 	movabs $0x8004221307,%rcx
  80042131c4:	00 00 00 
  80042131c7:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  80042131ce:	00 00 00 
  80042131d1:	be 1c 03 00 00       	mov    $0x31c,%esi
  80042131d6:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  80042131dd:	00 00 00 
  80042131e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042131e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042131ec:	00 00 00 
  80042131ef:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042131f2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042131f7:	75 35                	jne    800421322e <dwarf_child+0x90>
  80042131f9:	48 b9 fc 12 22 04 80 	movabs $0x80042212fc,%rcx
  8004213200:	00 00 00 
  8004213203:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  800421320a:	00 00 00 
  800421320d:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004213212:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004213219:	00 00 00 
  800421321c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213221:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213228:	00 00 00 
  800421322b:	41 ff d0             	callq  *%r8
	assert(dbg);
  800421322e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004213233:	75 35                	jne    800421326a <dwarf_child+0xcc>
  8004213235:	48 b9 f8 12 22 04 80 	movabs $0x80042212f8,%rcx
  800421323c:	00 00 00 
  800421323f:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004213246:	00 00 00 
  8004213249:	be 1e 03 00 00       	mov    $0x31e,%esi
  800421324e:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004213255:	00 00 00 
  8004213258:	b8 00 00 00 00       	mov    $0x0,%eax
  800421325d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213264:	00 00 00 
  8004213267:	41 ff d0             	callq  *%r8
	assert(cu);
  800421326a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421326f:	75 35                	jne    80042132a6 <dwarf_child+0x108>
  8004213271:	48 b9 04 13 22 04 80 	movabs $0x8004221304,%rcx
  8004213278:	00 00 00 
  800421327b:	48 ba 6a 11 22 04 80 	movabs $0x800422116a,%rdx
  8004213282:	00 00 00 
  8004213285:	be 1f 03 00 00       	mov    $0x31f,%esi
  800421328a:	48 bf 7f 11 22 04 80 	movabs $0x800422117f,%rdi
  8004213291:	00 00 00 
  8004213294:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213299:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042132a0:	00 00 00 
  80042132a3:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  80042132a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042132aa:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042132ae:	84 c0                	test   %al,%al
  80042132b0:	75 0a                	jne    80042132bc <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  80042132b2:	b8 04 00 00 00       	mov    $0x4,%eax
  80042132b7:	e9 84 00 00 00       	jmpq   8004213340 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  80042132bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042132c0:	48 8b 70 08          	mov    0x8(%rax),%rsi
  80042132c4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132c8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  80042132cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042132d0:	48 8b 08             	mov    (%rax),%rcx
  80042132d3:	48 89 0c 24          	mov    %rcx,(%rsp)
  80042132d7:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042132db:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  80042132e0:	48 8b 48 10          	mov    0x10(%rax),%rcx
  80042132e4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  80042132e9:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042132ed:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  80042132f2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132f6:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  80042132fb:	48 8b 48 28          	mov    0x28(%rax),%rcx
  80042132ff:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004213304:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213308:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800421330d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004213312:	48 b8 cb 2a 21 04 80 	movabs $0x8004212acb,%rax
  8004213319:	00 00 00 
  800421331c:	ff d0                	callq  *%rax
  800421331e:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004213321:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004213325:	75 07                	jne    800421332e <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004213327:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421332c:	eb 12                	jmp    8004213340 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  800421332e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004213332:	74 07                	je     800421333b <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004213334:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213339:	eb 05                	jmp    8004213340 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  800421333b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213340:	c9                   	leaveq 
  8004213341:	c3                   	retq   

0000008004213342 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004213342:	55                   	push   %rbp
  8004213343:	48 89 e5             	mov    %rsp,%rbp
  8004213346:	48 83 ec 20          	sub    $0x20,%rsp
  800421334a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  800421334e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213352:	48 8b 00             	mov    (%rax),%rax
  8004213355:	48 89 c7             	mov    %rax,%rdi
  8004213358:	48 b8 69 66 21 04 80 	movabs $0x8004216669,%rax
  800421335f:	00 00 00 
  8004213362:	ff d0                	callq  *%rax
  8004213364:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004213368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421336c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004213370:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213374:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004213378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421337c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004213380:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213384:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004213388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421338c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004213390:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213394:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004213398:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421339d:	c9                   	leaveq 
  800421339e:	c3                   	retq   

000000800421339f <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  800421339f:	55                   	push   %rbp
  80042133a0:	48 89 e5             	mov    %rsp,%rbp
  80042133a3:	48 83 ec 08          	sub    $0x8,%rsp
  80042133a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  80042133ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042133af:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  80042133b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042133b9:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  80042133bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042133c3:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  80042133c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042133cd:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  80042133d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042133d7:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  80042133dd:	c9                   	leaveq 
  80042133de:	c3                   	retq   

00000080042133df <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  80042133df:	55                   	push   %rbp
  80042133e0:	48 89 e5             	mov    %rsp,%rbp
  80042133e3:	48 83 ec 40          	sub    $0x40,%rsp
  80042133e7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042133eb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042133ef:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042133f3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042133f7:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  80042133fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042133ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004213403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213407:	ba 80 00 00 00       	mov    $0x80,%edx
  800421340c:	be 00 00 00 00       	mov    $0x0,%esi
  8004213411:	48 89 c7             	mov    %rax,%rdi
  8004213414:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421341b:	00 00 00 
  800421341e:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004213420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213424:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213428:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  800421342c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213431:	75 07                	jne    800421343a <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004213433:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213438:	eb 75                	jmp    80042134af <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800421343a:	eb 59                	jmp    8004213495 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  800421343c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004213440:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213444:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213448:	be 01 00 00 00       	mov    $0x1,%esi
  800421344d:	48 89 c7             	mov    %rax,%rdi
  8004213450:	48 b8 f4 55 21 04 80 	movabs $0x80042155f4,%rax
  8004213457:	00 00 00 
  800421345a:	ff d0                	callq  *%rax
  800421345c:	85 c0                	test   %eax,%eax
  800421345e:	79 07                	jns    8004213467 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004213460:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213465:	eb 48                	jmp    80042134af <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004213467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421346b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421346f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213473:	77 20                	ja     8004213495 <dwarf_get_fde_at_pc+0xb6>
  8004213475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213479:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  800421347d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213481:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004213485:	48 01 d0             	add    %rdx,%rax
  8004213488:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421348c:	76 07                	jbe    8004213495 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  800421348e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213493:	eb 1a                	jmp    80042134af <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004213495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213499:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421349d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042134a1:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042134a5:	48 39 c2             	cmp    %rax,%rdx
  80042134a8:	72 92                	jb     800421343c <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  80042134aa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  80042134af:	c9                   	leaveq 
  80042134b0:	c3                   	retq   

00000080042134b1 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  80042134b1:	55                   	push   %rbp
  80042134b2:	48 89 e5             	mov    %rsp,%rbp
  80042134b5:	53                   	push   %rbx
  80042134b6:	48 83 ec 38          	sub    $0x38,%rsp
  80042134ba:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042134be:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042134c2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042134c6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  80042134ca:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042134cf:	75 35                	jne    8004213506 <_dwarf_frame_regtable_copy+0x55>
  80042134d1:	48 b9 1a 13 22 04 80 	movabs $0x800422131a,%rcx
  80042134d8:	00 00 00 
  80042134db:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  80042134e2:	00 00 00 
  80042134e5:	be 57 00 00 00       	mov    $0x57,%esi
  80042134ea:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  80042134f1:	00 00 00 
  80042134f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042134f9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213500:	00 00 00 
  8004213503:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  8004213506:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421350b:	75 35                	jne    8004213542 <_dwarf_frame_regtable_copy+0x91>
  800421350d:	48 b9 52 13 22 04 80 	movabs $0x8004221352,%rcx
  8004213514:	00 00 00 
  8004213517:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  800421351e:	00 00 00 
  8004213521:	be 58 00 00 00       	mov    $0x58,%esi
  8004213526:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  800421352d:	00 00 00 
  8004213530:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213535:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421353c:	00 00 00 
  800421353f:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004213542:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213546:	48 8b 00             	mov    (%rax),%rax
  8004213549:	48 85 c0             	test   %rax,%rax
  800421354c:	75 39                	jne    8004213587 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  800421354e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213552:	48 bb e0 f6 4d 04 80 	movabs $0x80044df6e0,%rbx
  8004213559:	00 00 00 
  800421355c:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  800421355f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213563:	48 8b 00             	mov    (%rax),%rax
  8004213566:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421356a:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  800421356e:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004213572:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213576:	48 8b 00             	mov    (%rax),%rax
  8004213579:	48 bb 00 d8 6d 04 80 	movabs $0x80046dd800,%rbx
  8004213580:	00 00 00 
  8004213583:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004213587:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421358b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421358f:	48 8b 00             	mov    (%rax),%rax
  8004213592:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213597:	48 89 ce             	mov    %rcx,%rsi
  800421359a:	48 89 c7             	mov    %rax,%rdi
  800421359d:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  80042135a4:	00 00 00 
  80042135a7:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042135a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042135b0:	eb 5a                	jmp    800421360c <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  80042135b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042135b6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135ba:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042135bd:	48 63 d0             	movslq %eax,%rdx
  80042135c0:	48 89 d0             	mov    %rdx,%rax
  80042135c3:	48 01 c0             	add    %rax,%rax
  80042135c6:	48 01 d0             	add    %rdx,%rax
  80042135c9:	48 c1 e0 03          	shl    $0x3,%rax
  80042135cd:	48 01 c1             	add    %rax,%rcx
  80042135d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042135d4:	48 8b 00             	mov    (%rax),%rax
  80042135d7:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042135db:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042135de:	48 63 d0             	movslq %eax,%rdx
  80042135e1:	48 89 d0             	mov    %rdx,%rax
  80042135e4:	48 01 c0             	add    %rax,%rax
  80042135e7:	48 01 d0             	add    %rdx,%rax
  80042135ea:	48 c1 e0 03          	shl    $0x3,%rax
  80042135ee:	48 01 f0             	add    %rsi,%rax
  80042135f1:	ba 18 00 00 00       	mov    $0x18,%edx
  80042135f6:	48 89 ce             	mov    %rcx,%rsi
  80042135f9:	48 89 c7             	mov    %rax,%rdi
  80042135fc:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  8004213603:	00 00 00 
  8004213606:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004213608:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421360c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213610:	48 8b 00             	mov    (%rax),%rax
  8004213613:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213617:	0f b7 c0             	movzwl %ax,%eax
  800421361a:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421361d:	7e 10                	jle    800421362f <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  800421361f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213623:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213627:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421362a:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421362d:	7f 83                	jg     80042135b2 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421362f:	eb 32                	jmp    8004213663 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  8004213631:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213635:	48 8b 00             	mov    (%rax),%rax
  8004213638:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421363c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421363f:	48 63 d0             	movslq %eax,%rdx
  8004213642:	48 89 d0             	mov    %rdx,%rax
  8004213645:	48 01 c0             	add    %rax,%rax
  8004213648:	48 01 d0             	add    %rdx,%rax
  800421364b:	48 c1 e0 03          	shl    $0x3,%rax
  800421364f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004213653:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213657:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  800421365b:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421365f:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004213663:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213667:	48 8b 00             	mov    (%rax),%rax
  800421366a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421366e:	0f b7 c0             	movzwl %ax,%eax
  8004213671:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213674:	7f bb                	jg     8004213631 <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  8004213676:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421367b:	48 83 c4 38          	add    $0x38,%rsp
  800421367f:	5b                   	pop    %rbx
  8004213680:	5d                   	pop    %rbp
  8004213681:	c3                   	retq   

0000008004213682 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004213682:	55                   	push   %rbp
  8004213683:	48 89 e5             	mov    %rsp,%rbp
  8004213686:	53                   	push   %rbx
  8004213687:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  800421368e:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004213692:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004213696:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  800421369a:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800421369e:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  80042136a5:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  80042136ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  80042136b3:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042136ba:	00 
  80042136bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042136bf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  80042136c3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042136c7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042136cb:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  80042136ce:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042136d2:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042136d6:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  80042136da:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042136de:	48 89 c7             	mov    %rax,%rdi
  80042136e1:	48 b8 b1 34 21 04 80 	movabs $0x80042134b1,%rax
  80042136e8:	00 00 00 
  80042136eb:	ff d0                	callq  *%rax
	p = insts;
  80042136ed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042136f1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  80042136f5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042136f9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042136fd:	48 01 d0             	add    %rdx,%rax
  8004213700:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  8004213704:	e9 3a 0d 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  8004213709:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421370d:	0f b6 00             	movzbl (%rax),%eax
  8004213710:	84 c0                	test   %al,%al
  8004213712:	75 11                	jne    8004213725 <_dwarf_frame_run_inst+0xa3>
			p++;
  8004213714:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213718:	48 83 c0 01          	add    $0x1,%rax
  800421371c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004213720:	e9 1e 0d 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  8004213725:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213729:	0f b6 00             	movzbl (%rax),%eax
  800421372c:	83 e0 c0             	and    $0xffffffc0,%eax
  800421372f:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  8004213732:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213736:	0f b6 00             	movzbl (%rax),%eax
  8004213739:	83 e0 3f             	and    $0x3f,%eax
  800421373c:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  800421373f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213743:	48 83 c0 01          	add    $0x1,%rax
  8004213747:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  800421374b:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  800421374f:	0f 84 a1 01 00 00    	je     80042138f6 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  8004213755:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004213759:	3d 80 00 00 00       	cmp    $0x80,%eax
  800421375e:	74 38                	je     8004213798 <_dwarf_frame_run_inst+0x116>
  8004213760:	3d c0 00 00 00       	cmp    $0xc0,%eax
  8004213765:	0f 84 01 01 00 00    	je     800421386c <_dwarf_frame_run_inst+0x1ea>
  800421376b:	83 f8 40             	cmp    $0x40,%eax
  800421376e:	0f 85 71 01 00 00    	jne    80042138e5 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004213774:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213778:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421377f:	ff 
  8004213780:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004213784:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213788:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421378c:	73 05                	jae    8004213793 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  800421378e:	e9 be 0c 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004213793:	e9 59 01 00 00       	jmpq   80042138f1 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004213798:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421379c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042137a0:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042137a3:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042137a7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137ab:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042137af:	66 39 c2             	cmp    %ax,%dx
  80042137b2:	72 0c                	jb     80042137c0 <_dwarf_frame_run_inst+0x13e>
  80042137b4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042137bb:	e9 91 0c 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  80042137c0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137c4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137c8:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042137cc:	48 89 d0             	mov    %rdx,%rax
  80042137cf:	48 01 c0             	add    %rax,%rax
  80042137d2:	48 01 d0             	add    %rdx,%rax
  80042137d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042137d9:	48 01 c8             	add    %rcx,%rax
  80042137dc:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  80042137df:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137e3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137e7:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042137eb:	48 89 d0             	mov    %rdx,%rax
  80042137ee:	48 01 c0             	add    %rax,%rax
  80042137f1:	48 01 d0             	add    %rdx,%rax
  80042137f4:	48 c1 e0 03          	shl    $0x3,%rax
  80042137f8:	48 01 c8             	add    %rcx,%rax
  80042137fb:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  80042137ff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213803:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213807:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421380b:	48 89 d0             	mov    %rdx,%rax
  800421380e:	48 01 c0             	add    %rax,%rax
  8004213811:	48 01 d0             	add    %rdx,%rax
  8004213814:	48 c1 e0 03          	shl    $0x3,%rax
  8004213818:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421381c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213820:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213824:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004213828:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421382c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213830:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213834:	48 89 d0             	mov    %rdx,%rax
  8004213837:	48 01 c0             	add    %rax,%rax
  800421383a:	48 01 d0             	add    %rdx,%rax
  800421383d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213841:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  8004213845:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213849:	48 89 c7             	mov    %rax,%rdi
  800421384c:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213853:	00 00 00 
  8004213856:	ff d0                	callq  *%rax
  8004213858:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421385f:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  8004213863:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004213867:	e9 85 00 00 00       	jmpq   80042138f1 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  800421386c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213870:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213874:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213877:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421387b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421387f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213883:	66 39 c2             	cmp    %ax,%dx
  8004213886:	72 0c                	jb     8004213894 <_dwarf_frame_run_inst+0x212>
  8004213888:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421388f:	e9 bd 0b 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004213894:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213898:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421389c:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042138a0:	48 89 d0             	mov    %rdx,%rax
  80042138a3:	48 01 c0             	add    %rax,%rax
  80042138a6:	48 01 d0             	add    %rdx,%rax
  80042138a9:	48 c1 e0 03          	shl    $0x3,%rax
  80042138ad:	48 01 c1             	add    %rax,%rcx
  80042138b0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138b4:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042138b8:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042138bc:	48 89 d0             	mov    %rdx,%rax
  80042138bf:	48 01 c0             	add    %rax,%rax
  80042138c2:	48 01 d0             	add    %rdx,%rax
  80042138c5:	48 c1 e0 03          	shl    $0x3,%rax
  80042138c9:	48 01 f0             	add    %rsi,%rax
  80042138cc:	ba 18 00 00 00       	mov    $0x18,%edx
  80042138d1:	48 89 ce             	mov    %rcx,%rsi
  80042138d4:	48 89 c7             	mov    %rax,%rdi
  80042138d7:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  80042138de:	00 00 00 
  80042138e1:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  80042138e3:	eb 0c                	jmp    80042138f1 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042138e5:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  80042138ec:	e9 60 0b 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  80042138f1:	e9 4d 0b 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  80042138f6:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042138fa:	83 f8 16             	cmp    $0x16,%eax
  80042138fd:	0f 87 37 0b 00 00    	ja     800421443a <_dwarf_frame_run_inst+0xdb8>
  8004213903:	89 c0                	mov    %eax,%eax
  8004213905:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421390c:	00 
  800421390d:	48 b8 60 13 22 04 80 	movabs $0x8004221360,%rax
  8004213914:	00 00 00 
  8004213917:	48 01 d0             	add    %rdx,%rax
  800421391a:	48 8b 00             	mov    (%rax),%rax
  800421391d:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  800421391f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213923:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213927:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421392b:	8b 4a 28             	mov    0x28(%rdx),%ecx
  800421392e:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213932:	89 ce                	mov    %ecx,%esi
  8004213934:	48 89 d7             	mov    %rdx,%rdi
  8004213937:	ff d0                	callq  *%rax
  8004213939:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421393d:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213941:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213945:	73 05                	jae    800421394c <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004213947:	e9 05 0b 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			break;
  800421394c:	e9 f2 0a 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  8004213951:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213955:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213959:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421395d:	be 01 00 00 00       	mov    $0x1,%esi
  8004213962:	48 89 d7             	mov    %rdx,%rdi
  8004213965:	ff d0                	callq  *%rax
  8004213967:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421396e:	ff 
  800421396f:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213973:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213977:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421397b:	73 05                	jae    8004213982 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  800421397d:	e9 cf 0a 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213982:	e9 bc 0a 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004213987:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421398b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421398f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213993:	be 02 00 00 00       	mov    $0x2,%esi
  8004213998:	48 89 d7             	mov    %rdx,%rdi
  800421399b:	ff d0                	callq  *%rax
  800421399d:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042139a4:	ff 
  80042139a5:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042139a9:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042139ad:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042139b1:	73 05                	jae    80042139b8 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  80042139b3:	e9 99 0a 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042139b8:	e9 86 0a 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  80042139bd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042139c1:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042139c5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042139c9:	be 04 00 00 00       	mov    $0x4,%esi
  80042139ce:	48 89 d7             	mov    %rdx,%rdi
  80042139d1:	ff d0                	callq  *%rax
  80042139d3:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042139da:	ff 
  80042139db:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042139df:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042139e3:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042139e7:	73 05                	jae    80042139ee <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  80042139e9:	e9 63 0a 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042139ee:	e9 50 0a 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  80042139f3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042139f7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042139fb:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042139fe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a02:	48 89 c7             	mov    %rax,%rdi
  8004213a05:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213a0c:	00 00 00 
  8004213a0f:	ff d0                	callq  *%rax
  8004213a11:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213a15:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a19:	48 89 c7             	mov    %rax,%rdi
  8004213a1c:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213a23:	00 00 00 
  8004213a26:	ff d0                	callq  *%rax
  8004213a28:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213a2c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a30:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213a34:	0f b7 c0             	movzwl %ax,%eax
  8004213a37:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213a3b:	77 0c                	ja     8004213a49 <_dwarf_frame_run_inst+0x3c7>
  8004213a3d:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213a44:	e9 08 0a 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213a49:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a4d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a51:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a55:	48 89 d0             	mov    %rdx,%rax
  8004213a58:	48 01 c0             	add    %rax,%rax
  8004213a5b:	48 01 d0             	add    %rdx,%rax
  8004213a5e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a62:	48 01 c8             	add    %rcx,%rax
  8004213a65:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213a68:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a6c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a70:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a74:	48 89 d0             	mov    %rdx,%rax
  8004213a77:	48 01 c0             	add    %rax,%rax
  8004213a7a:	48 01 d0             	add    %rdx,%rax
  8004213a7d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a81:	48 01 c8             	add    %rcx,%rax
  8004213a84:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213a88:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a8c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a90:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a94:	48 89 d0             	mov    %rdx,%rax
  8004213a97:	48 01 c0             	add    %rax,%rax
  8004213a9a:	48 01 d0             	add    %rdx,%rax
  8004213a9d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213aa1:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213aa5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213aa9:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213aad:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213ab1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ab5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ab9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213abd:	48 89 d0             	mov    %rdx,%rax
  8004213ac0:	48 01 c0             	add    %rax,%rax
  8004213ac3:	48 01 d0             	add    %rdx,%rax
  8004213ac6:	48 c1 e0 03          	shl    $0x3,%rax
  8004213aca:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213ace:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213ad5:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213ada:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213ade:	e9 60 09 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004213ae3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ae7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213aeb:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213aee:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213af2:	48 89 c7             	mov    %rax,%rdi
  8004213af5:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213afc:	00 00 00 
  8004213aff:	ff d0                	callq  *%rax
  8004213b01:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213b05:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b09:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213b0d:	0f b7 c0             	movzwl %ax,%eax
  8004213b10:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213b14:	77 0c                	ja     8004213b22 <_dwarf_frame_run_inst+0x4a0>
  8004213b16:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213b1d:	e9 2f 09 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004213b22:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213b26:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b2a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b2e:	48 89 d0             	mov    %rdx,%rax
  8004213b31:	48 01 c0             	add    %rax,%rax
  8004213b34:	48 01 d0             	add    %rdx,%rax
  8004213b37:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b3b:	48 01 c1             	add    %rax,%rcx
  8004213b3e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b42:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213b46:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b4a:	48 89 d0             	mov    %rdx,%rax
  8004213b4d:	48 01 c0             	add    %rax,%rax
  8004213b50:	48 01 d0             	add    %rdx,%rax
  8004213b53:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b57:	48 01 f0             	add    %rsi,%rax
  8004213b5a:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213b5f:	48 89 ce             	mov    %rcx,%rsi
  8004213b62:	48 89 c7             	mov    %rax,%rdi
  8004213b65:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  8004213b6c:	00 00 00 
  8004213b6f:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004213b71:	e9 cd 08 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004213b76:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213b7a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213b7e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213b81:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b85:	48 89 c7             	mov    %rax,%rdi
  8004213b88:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213b8f:	00 00 00 
  8004213b92:	ff d0                	callq  *%rax
  8004213b94:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213b98:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b9c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213ba0:	0f b7 c0             	movzwl %ax,%eax
  8004213ba3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213ba7:	77 0c                	ja     8004213bb5 <_dwarf_frame_run_inst+0x533>
  8004213ba9:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213bb0:	e9 9c 08 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213bb5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bb9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213bbd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bc1:	48 89 d0             	mov    %rdx,%rax
  8004213bc4:	48 01 c0             	add    %rax,%rax
  8004213bc7:	48 01 d0             	add    %rdx,%rax
  8004213bca:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bce:	48 01 c8             	add    %rcx,%rax
  8004213bd1:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004213bd4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bd8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213bdc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213be0:	48 89 d0             	mov    %rdx,%rax
  8004213be3:	48 01 c0             	add    %rax,%rax
  8004213be6:	48 01 d0             	add    %rdx,%rax
  8004213be9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bed:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213bf1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213bf5:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004213bf9:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213bfd:	e9 41 08 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004213c02:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c06:	48 89 c7             	mov    %rax,%rdi
  8004213c09:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213c10:	00 00 00 
  8004213c13:	ff d0                	callq  *%rax
  8004213c15:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213c19:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c1d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213c21:	0f b7 c0             	movzwl %ax,%eax
  8004213c24:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213c28:	77 0c                	ja     8004213c36 <_dwarf_frame_run_inst+0x5b4>
  8004213c2a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213c31:	e9 1b 08 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213c36:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c3a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c3e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c42:	48 89 d0             	mov    %rdx,%rax
  8004213c45:	48 01 c0             	add    %rax,%rax
  8004213c48:	48 01 d0             	add    %rdx,%rax
  8004213c4b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c4f:	48 01 c8             	add    %rcx,%rax
  8004213c52:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004213c55:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c59:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c5d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c61:	48 89 d0             	mov    %rdx,%rax
  8004213c64:	48 01 c0             	add    %rax,%rax
  8004213c67:	48 01 d0             	add    %rdx,%rax
  8004213c6a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c6e:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c72:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c76:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004213c7a:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213c7e:	e9 c0 07 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213c83:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c87:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c8b:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c8e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c92:	48 89 c7             	mov    %rax,%rdi
  8004213c95:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213c9c:	00 00 00 
  8004213c9f:	ff d0                	callq  *%rax
  8004213ca1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004213ca5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ca9:	48 89 c7             	mov    %rax,%rdi
  8004213cac:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213cb3:	00 00 00 
  8004213cb6:	ff d0                	callq  *%rax
  8004213cb8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213cbc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cc0:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213cc4:	0f b7 c0             	movzwl %ax,%eax
  8004213cc7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213ccb:	77 0c                	ja     8004213cd9 <_dwarf_frame_run_inst+0x657>
  8004213ccd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213cd4:	e9 78 07 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213cd9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cdd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ce1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ce5:	48 89 d0             	mov    %rdx,%rax
  8004213ce8:	48 01 c0             	add    %rax,%rax
  8004213ceb:	48 01 d0             	add    %rdx,%rax
  8004213cee:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cf2:	48 01 c8             	add    %rcx,%rax
  8004213cf5:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004213cf8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cfc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d00:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d04:	48 89 d0             	mov    %rdx,%rax
  8004213d07:	48 01 c0             	add    %rax,%rax
  8004213d0a:	48 01 d0             	add    %rdx,%rax
  8004213d0d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d11:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213d15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d19:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213d1d:	e9 21 07 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004213d22:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213d26:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213d2a:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213d2e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213d32:	48 89 c7             	mov    %rax,%rdi
  8004213d35:	48 b8 b1 34 21 04 80 	movabs $0x80042134b1,%rax
  8004213d3c:	00 00 00 
  8004213d3f:	ff d0                	callq  *%rax
			break;
  8004213d41:	e9 fd 06 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004213d46:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d4a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d4e:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004213d51:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004213d55:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213d59:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004213d5d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213d61:	48 89 c7             	mov    %rax,%rdi
  8004213d64:	48 b8 b1 34 21 04 80 	movabs $0x80042134b1,%rax
  8004213d6b:	00 00 00 
  8004213d6e:	ff d0                	callq  *%rax
			break;
  8004213d70:	e9 ce 06 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213d75:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d79:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d7d:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213d80:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d84:	48 89 c7             	mov    %rax,%rdi
  8004213d87:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213d8e:	00 00 00 
  8004213d91:	ff d0                	callq  *%rax
  8004213d93:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213d97:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d9b:	48 89 c7             	mov    %rax,%rdi
  8004213d9e:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213da5:	00 00 00 
  8004213da8:	ff d0                	callq  *%rax
  8004213daa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213dae:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213db2:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213db5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213db9:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213dbd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dc1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dc5:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213dc9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dcd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213dd1:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213dd5:	e9 69 06 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004213dda:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213dde:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213de2:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213de5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213de9:	48 89 c7             	mov    %rax,%rdi
  8004213dec:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213df3:	00 00 00 
  8004213df6:	ff d0                	callq  *%rax
  8004213df8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004213dfc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e00:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e04:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004213e08:	e9 36 06 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004213e0d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213e11:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213e15:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004213e18:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e1c:	48 89 c7             	mov    %rax,%rdi
  8004213e1f:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213e26:	00 00 00 
  8004213e29:	ff d0                	callq  *%rax
  8004213e2b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213e2f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e33:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213e36:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e3a:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213e3e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e42:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213e46:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213e4a:	e9 f4 05 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213e4f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213e53:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213e57:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004213e5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e5e:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213e61:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e65:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004213e69:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004213e6d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e71:	48 89 c7             	mov    %rax,%rdi
  8004213e74:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213e7b:	00 00 00 
  8004213e7e:	ff d0                	callq  *%rax
  8004213e80:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213e84:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e88:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213e8c:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213e90:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213e94:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e98:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213e9c:	48 01 d0             	add    %rdx,%rax
  8004213e9f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213ea3:	e9 9b 05 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004213ea8:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213eac:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213eb0:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213eb3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213eb7:	48 89 c7             	mov    %rax,%rdi
  8004213eba:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213ec1:	00 00 00 
  8004213ec4:	ff d0                	callq  *%rax
  8004213ec6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213eca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ece:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213ed2:	0f b7 c0             	movzwl %ax,%eax
  8004213ed5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213ed9:	77 0c                	ja     8004213ee7 <_dwarf_frame_run_inst+0x865>
  8004213edb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213ee2:	e9 6a 05 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213ee7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213eeb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213eef:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ef3:	48 89 d0             	mov    %rdx,%rax
  8004213ef6:	48 01 c0             	add    %rax,%rax
  8004213ef9:	48 01 d0             	add    %rdx,%rax
  8004213efc:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f00:	48 01 c8             	add    %rcx,%rax
  8004213f03:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004213f06:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f0a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f0e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f12:	48 89 d0             	mov    %rdx,%rax
  8004213f15:	48 01 c0             	add    %rax,%rax
  8004213f18:	48 01 d0             	add    %rdx,%rax
  8004213f1b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f1f:	48 01 c8             	add    %rcx,%rax
  8004213f22:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213f26:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f2a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f2e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f32:	48 89 d0             	mov    %rdx,%rax
  8004213f35:	48 01 c0             	add    %rax,%rax
  8004213f38:	48 01 d0             	add    %rdx,%rax
  8004213f3b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f3f:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213f43:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f47:	48 89 c7             	mov    %rax,%rdi
  8004213f4a:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213f51:	00 00 00 
  8004213f54:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213f56:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213f5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f5e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f62:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f66:	48 89 d0             	mov    %rdx,%rax
  8004213f69:	48 01 c0             	add    %rax,%rax
  8004213f6c:	48 01 d0             	add    %rdx,%rax
  8004213f6f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f73:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f77:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213f7b:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213f7f:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213f83:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f87:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213f8b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f8f:	48 89 d0             	mov    %rdx,%rax
  8004213f92:	48 01 c0             	add    %rax,%rax
  8004213f95:	48 01 d0             	add    %rdx,%rax
  8004213f98:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f9c:	48 01 f0             	add    %rsi,%rax
  8004213f9f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213fa3:	48 01 c8             	add    %rcx,%rax
  8004213fa6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213faa:	e9 94 04 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004213faf:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213fb3:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213fb7:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213fba:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213fbe:	48 89 c7             	mov    %rax,%rdi
  8004213fc1:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004213fc8:	00 00 00 
  8004213fcb:	ff d0                	callq  *%rax
  8004213fcd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213fd1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213fd5:	48 89 c7             	mov    %rax,%rdi
  8004213fd8:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  8004213fdf:	00 00 00 
  8004213fe2:	ff d0                	callq  *%rax
  8004213fe4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213fe8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fec:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213ff0:	0f b7 c0             	movzwl %ax,%eax
  8004213ff3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213ff7:	77 0c                	ja     8004214005 <_dwarf_frame_run_inst+0x983>
  8004213ff9:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004214000:	e9 4c 04 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004214005:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214009:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421400d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214011:	48 89 d0             	mov    %rdx,%rax
  8004214014:	48 01 c0             	add    %rax,%rax
  8004214017:	48 01 d0             	add    %rdx,%rax
  800421401a:	48 c1 e0 03          	shl    $0x3,%rax
  800421401e:	48 01 c8             	add    %rcx,%rax
  8004214021:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004214024:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214028:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421402c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214030:	48 89 d0             	mov    %rdx,%rax
  8004214033:	48 01 c0             	add    %rax,%rax
  8004214036:	48 01 d0             	add    %rdx,%rax
  8004214039:	48 c1 e0 03          	shl    $0x3,%rax
  800421403d:	48 01 c8             	add    %rcx,%rax
  8004214040:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214044:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214048:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421404c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214050:	48 89 d0             	mov    %rdx,%rax
  8004214053:	48 01 c0             	add    %rax,%rax
  8004214056:	48 01 d0             	add    %rdx,%rax
  8004214059:	48 c1 e0 03          	shl    $0x3,%rax
  800421405d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214061:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004214065:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214069:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800421406d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214071:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214075:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214079:	48 89 d0             	mov    %rdx,%rax
  800421407c:	48 01 c0             	add    %rax,%rax
  800421407f:	48 01 d0             	add    %rdx,%rax
  8004214082:	48 c1 e0 03          	shl    $0x3,%rax
  8004214086:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421408a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004214091:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004214096:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421409a:	e9 a4 03 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  800421409f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042140a3:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042140a7:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042140aa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042140ae:	48 89 c7             	mov    %rax,%rdi
  80042140b1:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  80042140b8:	00 00 00 
  80042140bb:	ff d0                	callq  *%rax
  80042140bd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042140c1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042140c5:	48 89 c7             	mov    %rax,%rdi
  80042140c8:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  80042140cf:	00 00 00 
  80042140d2:	ff d0                	callq  *%rax
  80042140d4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  80042140d8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140dc:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042140df:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140e3:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042140e7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140eb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042140ef:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  80042140f3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140f7:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  80042140fe:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004214103:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004214107:	e9 37 03 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  800421410c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214110:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004214114:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004214117:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421411b:	48 89 c7             	mov    %rax,%rdi
  800421411e:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  8004214125:	00 00 00 
  8004214128:	ff d0                	callq  *%rax
  800421412a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  800421412e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214132:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004214135:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214139:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800421413d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214141:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004214148:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800421414d:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004214151:	e9 ed 02 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004214156:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421415a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421415e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214161:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214165:	48 89 c7             	mov    %rax,%rdi
  8004214168:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  800421416f:	00 00 00 
  8004214172:	ff d0                	callq  *%rax
  8004214174:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004214178:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421417c:	48 89 c7             	mov    %rax,%rdi
  800421417f:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004214186:	00 00 00 
  8004214189:	ff d0                	callq  *%rax
  800421418b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421418f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214193:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214197:	0f b7 c0             	movzwl %ax,%eax
  800421419a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421419e:	77 0c                	ja     80042141ac <_dwarf_frame_run_inst+0xb2a>
  80042141a0:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042141a7:	e9 a5 02 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042141ac:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141b0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141b4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141b8:	48 89 d0             	mov    %rdx,%rax
  80042141bb:	48 01 c0             	add    %rax,%rax
  80042141be:	48 01 d0             	add    %rdx,%rax
  80042141c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042141c5:	48 01 c8             	add    %rcx,%rax
  80042141c8:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042141cb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141cf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141d3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141d7:	48 89 d0             	mov    %rdx,%rax
  80042141da:	48 01 c0             	add    %rax,%rax
  80042141dd:	48 01 d0             	add    %rdx,%rax
  80042141e0:	48 c1 e0 03          	shl    $0x3,%rax
  80042141e4:	48 01 c8             	add    %rcx,%rax
  80042141e7:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042141eb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141ef:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141f3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141f7:	48 89 d0             	mov    %rdx,%rax
  80042141fa:	48 01 c0             	add    %rax,%rax
  80042141fd:	48 01 d0             	add    %rdx,%rax
  8004214200:	48 c1 e0 03          	shl    $0x3,%rax
  8004214204:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214208:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421420c:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214210:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004214214:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214218:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421421c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214220:	48 89 d0             	mov    %rdx,%rax
  8004214223:	48 01 c0             	add    %rax,%rax
  8004214226:	48 01 d0             	add    %rdx,%rax
  8004214229:	48 c1 e0 03          	shl    $0x3,%rax
  800421422d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214231:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004214238:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800421423d:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004214241:	e9 fd 01 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004214246:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421424a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421424e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214251:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214255:	48 89 c7             	mov    %rax,%rdi
  8004214258:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  800421425f:	00 00 00 
  8004214262:	ff d0                	callq  *%rax
  8004214264:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004214268:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421426c:	48 89 c7             	mov    %rax,%rdi
  800421426f:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  8004214276:	00 00 00 
  8004214279:	ff d0                	callq  *%rax
  800421427b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421427f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214283:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214287:	0f b7 c0             	movzwl %ax,%eax
  800421428a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421428e:	77 0c                	ja     800421429c <_dwarf_frame_run_inst+0xc1a>
  8004214290:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004214297:	e9 b5 01 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421429c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042142a0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142a4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142a8:	48 89 d0             	mov    %rdx,%rax
  80042142ab:	48 01 c0             	add    %rax,%rax
  80042142ae:	48 01 d0             	add    %rdx,%rax
  80042142b1:	48 c1 e0 03          	shl    $0x3,%rax
  80042142b5:	48 01 c8             	add    %rcx,%rax
  80042142b8:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042142bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042142bf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142c3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142c7:	48 89 d0             	mov    %rdx,%rax
  80042142ca:	48 01 c0             	add    %rax,%rax
  80042142cd:	48 01 d0             	add    %rdx,%rax
  80042142d0:	48 c1 e0 03          	shl    $0x3,%rax
  80042142d4:	48 01 c8             	add    %rcx,%rax
  80042142d7:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042142db:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042142df:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142e3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042142e7:	48 89 d0             	mov    %rdx,%rax
  80042142ea:	48 01 c0             	add    %rax,%rax
  80042142ed:	48 01 d0             	add    %rdx,%rax
  80042142f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042142f4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042142f8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042142fc:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214300:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004214304:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214308:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421430c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214310:	48 89 d0             	mov    %rdx,%rax
  8004214313:	48 01 c0             	add    %rax,%rax
  8004214316:	48 01 d0             	add    %rdx,%rax
  8004214319:	48 c1 e0 03          	shl    $0x3,%rax
  800421431d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214321:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004214328:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800421432d:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004214331:	e9 0d 01 00 00       	jmpq   8004214443 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004214336:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421433a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421433e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214341:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004214345:	48 89 c7             	mov    %rax,%rdi
  8004214348:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  800421434f:	00 00 00 
  8004214352:	ff d0                	callq  *%rax
  8004214354:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004214358:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421435c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214360:	0f b7 c0             	movzwl %ax,%eax
  8004214363:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004214367:	77 0c                	ja     8004214375 <_dwarf_frame_run_inst+0xcf3>
  8004214369:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004214370:	e9 dc 00 00 00       	jmpq   8004214451 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004214375:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214379:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421437d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214381:	48 89 d0             	mov    %rdx,%rax
  8004214384:	48 01 c0             	add    %rax,%rax
  8004214387:	48 01 d0             	add    %rdx,%rax
  800421438a:	48 c1 e0 03          	shl    $0x3,%rax
  800421438e:	48 01 c8             	add    %rcx,%rax
  8004214391:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004214394:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214398:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421439c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042143a0:	48 89 d0             	mov    %rdx,%rax
  80042143a3:	48 01 c0             	add    %rax,%rax
  80042143a6:	48 01 d0             	add    %rdx,%rax
  80042143a9:	48 c1 e0 03          	shl    $0x3,%rax
  80042143ad:	48 01 c8             	add    %rcx,%rax
  80042143b0:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  80042143b4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042143b8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042143bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042143c0:	48 89 d0             	mov    %rdx,%rax
  80042143c3:	48 01 c0             	add    %rax,%rax
  80042143c6:	48 01 d0             	add    %rdx,%rax
  80042143c9:	48 c1 e0 03          	shl    $0x3,%rax
  80042143cd:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  80042143d1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042143d5:	48 89 c7             	mov    %rax,%rdi
  80042143d8:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  80042143df:	00 00 00 
  80042143e2:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  80042143e4:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  80042143e8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042143ec:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042143f0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042143f4:	48 89 d0             	mov    %rdx,%rax
  80042143f7:	48 01 c0             	add    %rax,%rax
  80042143fa:	48 01 d0             	add    %rdx,%rax
  80042143fd:	48 c1 e0 03          	shl    $0x3,%rax
  8004214401:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214405:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214409:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  800421440d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004214411:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214415:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004214419:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421441d:	48 89 d0             	mov    %rdx,%rax
  8004214420:	48 01 c0             	add    %rax,%rax
  8004214423:	48 01 d0             	add    %rdx,%rax
  8004214426:	48 c1 e0 03          	shl    $0x3,%rax
  800421442a:	48 01 f0             	add    %rsi,%rax
  800421442d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004214431:	48 01 c8             	add    %rcx,%rax
  8004214434:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004214438:	eb 09                	jmp    8004214443 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  800421443a:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  8004214441:	eb 0e                	jmp    8004214451 <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004214443:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214447:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421444b:	0f 82 b8 f2 ff ff    	jb     8004213709 <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  8004214451:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004214454:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  800421445b:	5b                   	pop    %rbx
  800421445c:	5d                   	pop    %rbp
  800421445d:	c3                   	retq   

000000800421445e <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  800421445e:	55                   	push   %rbp
  800421445f:	48 89 e5             	mov    %rsp,%rbp
  8004214462:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004214466:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421446a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421446e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214472:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214476:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  800421447a:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  800421447e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214483:	75 35                	jne    80042144ba <_dwarf_frame_get_internal_table+0x5c>
  8004214485:	48 b9 18 14 22 04 80 	movabs $0x8004221418,%rcx
  800421448c:	00 00 00 
  800421448f:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  8004214496:	00 00 00 
  8004214499:	be 83 01 00 00       	mov    $0x183,%esi
  800421449e:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  80042144a5:	00 00 00 
  80042144a8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042144ad:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042144b4:	00 00 00 
  80042144b7:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  80042144ba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042144bf:	75 35                	jne    80042144f6 <_dwarf_frame_get_internal_table+0x98>
  80042144c1:	48 b9 27 14 22 04 80 	movabs $0x8004221427,%rcx
  80042144c8:	00 00 00 
  80042144cb:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  80042144d2:	00 00 00 
  80042144d5:	be 86 01 00 00       	mov    $0x186,%esi
  80042144da:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  80042144e1:	00 00 00 
  80042144e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042144e9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042144f0:	00 00 00 
  80042144f3:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  80042144f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144fa:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042144fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004214502:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214506:	ba 18 00 00 00       	mov    $0x18,%edx
  800421450b:	be 00 00 00 00       	mov    $0x0,%esi
  8004214510:	48 89 c7             	mov    %rax,%rdi
  8004214513:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421451a:	00 00 00 
  800421451d:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  800421451f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214523:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214527:	0f b7 d0             	movzwl %ax,%edx
  800421452a:	48 89 d0             	mov    %rdx,%rax
  800421452d:	48 01 c0             	add    %rax,%rax
  8004214530:	48 01 d0             	add    %rdx,%rax
  8004214533:	48 c1 e0 03          	shl    $0x3,%rax
  8004214537:	48 89 c2             	mov    %rax,%rdx
  800421453a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421453e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214542:	be 00 00 00 00       	mov    $0x0,%esi
  8004214547:	48 89 c7             	mov    %rax,%rdi
  800421454a:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004214551:	00 00 00 
  8004214554:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004214556:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421455d:	eb 2f                	jmp    800421458e <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  800421455f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214563:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214567:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421456a:	48 63 d0             	movslq %eax,%rdx
  800421456d:	48 89 d0             	mov    %rdx,%rax
  8004214570:	48 01 c0             	add    %rax,%rax
  8004214573:	48 01 d0             	add    %rdx,%rax
  8004214576:	48 c1 e0 03          	shl    $0x3,%rax
  800421457a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421457e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214582:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004214586:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421458a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421458e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214592:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214596:	0f b7 c0             	movzwl %ax,%eax
  8004214599:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421459c:	7f c1                	jg     800421455f <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  800421459e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042145a2:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042145a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  80042145aa:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042145af:	75 35                	jne    80042145e6 <_dwarf_frame_get_internal_table+0x188>
  80042145b1:	48 b9 33 14 22 04 80 	movabs $0x8004221433,%rcx
  80042145b8:	00 00 00 
  80042145bb:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  80042145c2:	00 00 00 
  80042145c5:	be 95 01 00 00       	mov    $0x195,%esi
  80042145ca:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  80042145d1:	00 00 00 
  80042145d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042145d9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042145e0:	00 00 00 
  80042145e3:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  80042145e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145ea:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042145ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145f2:	4c 8b 40 38          	mov    0x38(%rax),%r8
  80042145f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145fa:	48 8b 48 70          	mov    0x70(%rax),%rcx
  80042145fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214602:	48 8b 50 68          	mov    0x68(%rax),%rdx
  8004214606:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421460a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421460e:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004214612:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004214617:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  800421461b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004214620:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004214627:	ff ff 
  8004214629:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004214630:	00 
  8004214631:	48 89 c7             	mov    %rax,%rdi
  8004214634:	48 b8 82 36 21 04 80 	movabs $0x8004213682,%rax
  800421463b:	00 00 00 
  800421463e:	ff d0                	callq  *%rax
  8004214640:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004214643:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004214647:	74 08                	je     8004214651 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004214649:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421464c:	e9 98 00 00 00       	jmpq   80042146e9 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  8004214651:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214655:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214659:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800421465d:	77 6f                	ja     80042146ce <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  800421465f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214663:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004214667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421466b:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800421466f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214673:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004214677:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421467b:	48 8b 48 58          	mov    0x58(%rax),%rcx
  800421467f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214683:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004214687:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421468b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421468f:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004214693:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004214698:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  800421469c:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042146a1:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  80042146a5:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042146aa:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042146ae:	4d 89 d0             	mov    %r10,%r8
  80042146b1:	48 89 c7             	mov    %rax,%rdi
  80042146b4:	48 b8 82 36 21 04 80 	movabs $0x8004213682,%rax
  80042146bb:	00 00 00 
  80042146be:	ff d0                	callq  *%rax
  80042146c0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  80042146c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042146c7:	74 05                	je     80042146ce <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  80042146c9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042146cc:	eb 1b                	jmp    80042146e9 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  80042146ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042146d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042146d6:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  80042146d9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042146dd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042146e1:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042146e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042146e9:	c9                   	leaveq 
  80042146ea:	c3                   	retq   

00000080042146eb <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  80042146eb:	55                   	push   %rbp
  80042146ec:	48 89 e5             	mov    %rsp,%rbp
  80042146ef:	48 83 ec 50          	sub    $0x50,%rsp
  80042146f3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042146f7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042146fb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042146ff:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004214703:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  8004214707:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  800421470b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004214710:	74 07                	je     8004214719 <dwarf_get_fde_info_for_all_regs+0x2e>
  8004214712:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004214717:	75 0a                	jne    8004214723 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004214719:	b8 01 00 00 00       	mov    $0x1,%eax
  800421471e:	e9 eb 02 00 00       	jmpq   8004214a0e <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  8004214723:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004214728:	75 35                	jne    800421475f <dwarf_get_fde_info_for_all_regs+0x74>
  800421472a:	48 b9 27 14 22 04 80 	movabs $0x8004221427,%rcx
  8004214731:	00 00 00 
  8004214734:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  800421473b:	00 00 00 
  800421473e:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004214743:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  800421474a:	00 00 00 
  800421474d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214752:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214759:	00 00 00 
  800421475c:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  800421475f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214763:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214767:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800421476b:	77 19                	ja     8004214786 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  800421476d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214771:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004214775:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214779:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421477d:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004214780:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214784:	77 0a                	ja     8004214790 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004214786:	b8 01 00 00 00       	mov    $0x1,%eax
  800421478b:	e9 7e 02 00 00       	jmpq   8004214a0e <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004214790:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004214794:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004214798:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421479c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042147a0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042147a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042147a8:	4d 89 c1             	mov    %r8,%r9
  80042147ab:	49 89 f8             	mov    %rdi,%r8
  80042147ae:	48 89 c7             	mov    %rax,%rdi
  80042147b1:	48 b8 5e 44 21 04 80 	movabs $0x800421445e,%rax
  80042147b8:	00 00 00 
  80042147bb:	ff d0                	callq  *%rax
  80042147bd:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  80042147c0:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042147c4:	74 0a                	je     80042147d0 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  80042147c6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042147cb:	e9 3e 02 00 00       	jmpq   8004214a0e <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  80042147d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042147d4:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042147d8:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  80042147dc:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  80042147e1:	0f 87 b1 00 00 00    	ja     8004214898 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  80042147e7:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  80042147eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147ef:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  80042147f2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042147f6:	48 63 c9             	movslq %ecx,%rcx
  80042147f9:	48 83 c1 01          	add    $0x1,%rcx
  80042147fd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214801:	48 01 ca             	add    %rcx,%rdx
  8004214804:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  8004214806:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421480a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421480e:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004214812:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214816:	48 63 c9             	movslq %ecx,%rcx
  8004214819:	48 83 c1 01          	add    $0x1,%rcx
  800421481d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214821:	48 01 ca             	add    %rcx,%rdx
  8004214824:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004214827:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421482b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421482f:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214833:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214837:	48 63 c9             	movslq %ecx,%rcx
  800421483a:	48 83 c1 01          	add    $0x1,%rcx
  800421483e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214842:	48 01 ca             	add    %rcx,%rdx
  8004214845:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004214849:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421484d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214851:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004214855:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214859:	48 63 c9             	movslq %ecx,%rcx
  800421485c:	48 83 c1 01          	add    $0x1,%rcx
  8004214860:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214864:	48 01 ca             	add    %rcx,%rdx
  8004214867:	48 83 c2 08          	add    $0x8,%rdx
  800421486b:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  800421486e:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004214872:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004214876:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421487a:	48 63 d2             	movslq %edx,%rdx
  800421487d:	48 83 c2 01          	add    $0x1,%rdx
  8004214881:	48 c1 e2 04          	shl    $0x4,%rdx
  8004214885:	48 01 d0             	add    %rdx,%rax
  8004214888:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421488c:	48 8b 00             	mov    (%rax),%rax
  800421488f:	48 89 01             	mov    %rax,(%rcx)
  8004214892:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004214896:	eb 3c                	jmp    80042148d4 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004214898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421489c:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  800421489f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148a3:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  80042148a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148a9:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  80042148ad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148b1:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  80042148b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148b8:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  80042148bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148c0:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  80042148c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148c8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042148cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148d0:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042148d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042148db:	e9 fd 00 00 00       	jmpq   80042149dd <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  80042148e0:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  80042148e4:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042148e7:	75 05                	jne    80042148ee <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  80042148e9:	e9 eb 00 00 00       	jmpq   80042149d9 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  80042148ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148f2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042148f6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042148f9:	48 63 d0             	movslq %eax,%rdx
  80042148fc:	48 89 d0             	mov    %rdx,%rax
  80042148ff:	48 01 c0             	add    %rax,%rax
  8004214902:	48 01 d0             	add    %rdx,%rax
  8004214905:	48 c1 e0 03          	shl    $0x3,%rax
  8004214909:	48 01 c8             	add    %rcx,%rax
  800421490c:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  800421490f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214913:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214916:	48 63 c9             	movslq %ecx,%rcx
  8004214919:	48 83 c1 01          	add    $0x1,%rcx
  800421491d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214921:	48 01 ca             	add    %rcx,%rdx
  8004214924:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004214926:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421492a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421492e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214931:	48 63 d0             	movslq %eax,%rdx
  8004214934:	48 89 d0             	mov    %rdx,%rax
  8004214937:	48 01 c0             	add    %rax,%rax
  800421493a:	48 01 d0             	add    %rdx,%rax
  800421493d:	48 c1 e0 03          	shl    $0x3,%rax
  8004214941:	48 01 c8             	add    %rcx,%rax
  8004214944:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004214948:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421494c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421494f:	48 63 c9             	movslq %ecx,%rcx
  8004214952:	48 83 c1 01          	add    $0x1,%rcx
  8004214956:	48 c1 e1 04          	shl    $0x4,%rcx
  800421495a:	48 01 ca             	add    %rcx,%rdx
  800421495d:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214960:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214964:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214968:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421496b:	48 63 d0             	movslq %eax,%rdx
  800421496e:	48 89 d0             	mov    %rdx,%rax
  8004214971:	48 01 c0             	add    %rax,%rax
  8004214974:	48 01 d0             	add    %rdx,%rax
  8004214977:	48 c1 e0 03          	shl    $0x3,%rax
  800421497b:	48 01 c8             	add    %rcx,%rax
  800421497e:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214982:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214986:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214989:	48 63 c9             	movslq %ecx,%rcx
  800421498c:	48 83 c1 01          	add    $0x1,%rcx
  8004214990:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214994:	48 01 ca             	add    %rcx,%rdx
  8004214997:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  800421499b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421499f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042149a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042149a6:	48 63 d0             	movslq %eax,%rdx
  80042149a9:	48 89 d0             	mov    %rdx,%rax
  80042149ac:	48 01 c0             	add    %rax,%rax
  80042149af:	48 01 d0             	add    %rdx,%rax
  80042149b2:	48 c1 e0 03          	shl    $0x3,%rax
  80042149b6:	48 01 c8             	add    %rcx,%rax
  80042149b9:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  80042149bd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042149c1:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042149c4:	48 63 c9             	movslq %ecx,%rcx
  80042149c7:	48 83 c1 01          	add    $0x1,%rcx
  80042149cb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042149cf:	48 01 ca             	add    %rcx,%rdx
  80042149d2:	48 83 c2 08          	add    $0x8,%rdx
  80042149d6:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  80042149d9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042149dd:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  80042149e1:	7f 14                	jg     80042149f7 <dwarf_get_fde_info_for_all_regs+0x30c>
  80042149e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042149e7:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  80042149eb:	0f b7 c0             	movzwl %ax,%eax
  80042149ee:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042149f1:	0f 8f e9 fe ff ff    	jg     80042148e0 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  80042149f7:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  80042149fc:	74 0b                	je     8004214a09 <dwarf_get_fde_info_for_all_regs+0x31e>
  80042149fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214a02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214a06:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004214a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214a0e:	c9                   	leaveq 
  8004214a0f:	c3                   	retq   

0000008004214a10 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214a10:	55                   	push   %rbp
  8004214a11:	48 89 e5             	mov    %rsp,%rbp
  8004214a14:	48 83 ec 40          	sub    $0x40,%rsp
  8004214a18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214a1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004214a20:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004214a24:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004214a28:	44 89 c0             	mov    %r8d,%eax
  8004214a2b:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004214a2f:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004214a32:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004214a36:	75 0a                	jne    8004214a42 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004214a38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214a3d:	e9 e6 01 00 00       	jmpq   8004214c28 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004214a42:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214a46:	83 e0 f0             	and    $0xfffffff0,%eax
  8004214a49:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004214a4c:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004214a50:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214a54:	83 f8 0c             	cmp    $0xc,%eax
  8004214a57:	0f 87 72 01 00 00    	ja     8004214bcf <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004214a5d:	89 c0                	mov    %eax,%eax
  8004214a5f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214a66:	00 
  8004214a67:	48 b8 40 14 22 04 80 	movabs $0x8004221440,%rax
  8004214a6e:	00 00 00 
  8004214a71:	48 01 d0             	add    %rdx,%rax
  8004214a74:	48 8b 00             	mov    (%rax),%rax
  8004214a77:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004214a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a7d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a85:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214a88:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214a8c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214a90:	48 89 cf             	mov    %rcx,%rdi
  8004214a93:	ff d0                	callq  *%rax
  8004214a95:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214a99:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214a9c:	e9 35 01 00 00       	jmpq   8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004214aa1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214aa5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214aa9:	48 89 d6             	mov    %rdx,%rsi
  8004214aac:	48 89 c7             	mov    %rax,%rdi
  8004214aaf:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004214ab6:	00 00 00 
  8004214ab9:	ff d0                	callq  *%rax
  8004214abb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214abf:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214ac2:	e9 0f 01 00 00       	jmpq   8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004214ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214acb:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214acf:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214ad3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214ad7:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214adc:	48 89 cf             	mov    %rcx,%rdi
  8004214adf:	ff d0                	callq  *%rax
  8004214ae1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214ae5:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214ae8:	e9 e9 00 00 00       	jmpq   8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004214aed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214af1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214af5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214af9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214afd:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214b02:	48 89 cf             	mov    %rcx,%rdi
  8004214b05:	ff d0                	callq  *%rax
  8004214b07:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214b0b:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214b0e:	e9 c3 00 00 00       	jmpq   8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004214b13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b17:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214b1b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214b1f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214b23:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214b28:	48 89 cf             	mov    %rcx,%rdi
  8004214b2b:	ff d0                	callq  *%rax
  8004214b2d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214b31:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214b34:	e9 9d 00 00 00       	jmpq   8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004214b39:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214b3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214b41:	48 89 d6             	mov    %rdx,%rsi
  8004214b44:	48 89 c7             	mov    %rax,%rdi
  8004214b47:	48 b8 00 1a 21 04 80 	movabs $0x8004211a00,%rax
  8004214b4e:	00 00 00 
  8004214b51:	ff d0                	callq  *%rax
  8004214b53:	48 89 c2             	mov    %rax,%rdx
  8004214b56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214b5a:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214b5d:	eb 77                	jmp    8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214b5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b63:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214b67:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214b6b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214b6f:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214b74:	48 89 cf             	mov    %rcx,%rdi
  8004214b77:	ff d0                	callq  *%rax
  8004214b79:	48 0f bf d0          	movswq %ax,%rdx
  8004214b7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214b81:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214b84:	eb 50                	jmp    8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004214b86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b8a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214b8e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214b92:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214b96:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214b9b:	48 89 cf             	mov    %rcx,%rdi
  8004214b9e:	ff d0                	callq  *%rax
  8004214ba0:	48 63 d0             	movslq %eax,%rdx
  8004214ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214ba7:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214baa:	eb 2a                	jmp    8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004214bac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bb0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214bb4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214bb8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214bbc:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214bc1:	48 89 cf             	mov    %rcx,%rdi
  8004214bc4:	ff d0                	callq  *%rax
  8004214bc6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214bca:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214bcd:	eb 07                	jmp    8004214bd6 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214bcf:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214bd4:	eb 52                	jmp    8004214c28 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004214bd6:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004214bda:	75 47                	jne    8004214c23 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004214bdc:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214be0:	83 f8 01             	cmp    $0x1,%eax
  8004214be3:	7c 3d                	jl     8004214c22 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214be5:	83 f8 04             	cmp    $0x4,%eax
  8004214be8:	7e 0a                	jle    8004214bf4 <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004214bea:	83 e8 09             	sub    $0x9,%eax
  8004214bed:	83 f8 03             	cmp    $0x3,%eax
  8004214bf0:	77 30                	ja     8004214c22 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214bf2:	eb 17                	jmp    8004214c0b <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004214bf4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214bf8:	48 8b 10             	mov    (%rax),%rdx
  8004214bfb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214bff:	48 01 c2             	add    %rax,%rdx
  8004214c02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214c06:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214c09:	eb 18                	jmp    8004214c23 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004214c0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214c0f:	48 8b 10             	mov    (%rax),%rdx
  8004214c12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214c16:	48 01 c2             	add    %rax,%rdx
  8004214c19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214c1d:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214c20:	eb 01                	jmp    8004214c23 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004214c22:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004214c23:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214c28:	c9                   	leaveq 
  8004214c29:	c3                   	retq   

0000008004214c2a <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004214c2a:	55                   	push   %rbp
  8004214c2b:	48 89 e5             	mov    %rsp,%rbp
  8004214c2e:	48 83 ec 50          	sub    $0x50,%rsp
  8004214c32:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214c36:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214c3a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214c3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214c42:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214c46:	48 85 c0             	test   %rax,%rax
  8004214c49:	74 0f                	je     8004214c5a <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004214c4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214c4f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214c53:	0f b6 00             	movzbl (%rax),%eax
  8004214c56:	3c 7a                	cmp    $0x7a,%al
  8004214c58:	74 35                	je     8004214c8f <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004214c5a:	48 b9 a8 14 22 04 80 	movabs $0x80042214a8,%rcx
  8004214c61:	00 00 00 
  8004214c64:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  8004214c6b:	00 00 00 
  8004214c6e:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214c73:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  8004214c7a:	00 00 00 
  8004214c7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214c82:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214c89:	00 00 00 
  8004214c8c:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214c8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214c93:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214c97:	48 83 c0 01          	add    $0x1,%rax
  8004214c9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214c9f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214ca3:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214ca7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004214cab:	e9 af 00 00 00       	jmpq   8004214d5f <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004214cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214cb4:	0f b6 00             	movzbl (%rax),%eax
  8004214cb7:	0f b6 c0             	movzbl %al,%eax
  8004214cba:	83 f8 50             	cmp    $0x50,%eax
  8004214cbd:	74 18                	je     8004214cd7 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004214cbf:	83 f8 52             	cmp    $0x52,%eax
  8004214cc2:	74 77                	je     8004214d3b <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004214cc4:	83 f8 4c             	cmp    $0x4c,%eax
  8004214cc7:	0f 85 86 00 00 00    	jne    8004214d53 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004214ccd:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004214cd2:	e9 83 00 00 00       	jmpq   8004214d5a <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004214cd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214cdb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214cdf:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214ce3:	0f b6 00             	movzbl (%rax),%eax
  8004214ce6:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004214ce9:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004214cf0:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214cf1:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004214cf6:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004214cfa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214cfe:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004214d02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d06:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214d0a:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214d0e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214d14:	48 89 c7             	mov    %rax,%rdi
  8004214d17:	48 b8 10 4a 21 04 80 	movabs $0x8004214a10,%rax
  8004214d1e:	00 00 00 
  8004214d21:	ff d0                	callq  *%rax
  8004214d23:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004214d26:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004214d2a:	74 05                	je     8004214d31 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004214d2c:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214d2f:	eb 42                	jmp    8004214d73 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004214d31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214d35:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004214d39:	eb 1f                	jmp    8004214d5a <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004214d3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214d3f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214d43:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214d47:	0f b6 10             	movzbl (%rax),%edx
  8004214d4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214d4e:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004214d51:	eb 07                	jmp    8004214d5a <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214d53:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214d58:	eb 19                	jmp    8004214d73 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004214d5a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214d5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214d63:	0f b6 00             	movzbl (%rax),%eax
  8004214d66:	84 c0                	test   %al,%al
  8004214d68:	0f 85 42 ff ff ff    	jne    8004214cb0 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004214d6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214d73:	c9                   	leaveq 
  8004214d74:	c3                   	retq   

0000008004214d75 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214d75:	55                   	push   %rbp
  8004214d76:	48 89 e5             	mov    %rsp,%rbp
  8004214d79:	48 83 ec 60          	sub    $0x60,%rsp
  8004214d7d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214d81:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214d85:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214d89:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214d8d:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004214d91:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214d96:	75 35                	jne    8004214dcd <_dwarf_frame_set_cie+0x58>
  8004214d98:	48 b9 dd 14 22 04 80 	movabs $0x80042214dd,%rcx
  8004214d9f:	00 00 00 
  8004214da2:	48 ba 27 13 22 04 80 	movabs $0x8004221327,%rdx
  8004214da9:	00 00 00 
  8004214dac:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004214db1:	48 bf 3c 13 22 04 80 	movabs $0x800422133c,%rdi
  8004214db8:	00 00 00 
  8004214dbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214dc0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214dc7:	00 00 00 
  8004214dca:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004214dcd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214dd1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004214dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dd9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ddd:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004214de0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214de4:	48 8b 10             	mov    (%rax),%rdx
  8004214de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214deb:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214def:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214df3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214df7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214dfb:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214dff:	48 89 d1             	mov    %rdx,%rcx
  8004214e02:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214e06:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214e0b:	48 89 cf             	mov    %rcx,%rdi
  8004214e0e:	ff d0                	callq  *%rax
  8004214e10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214e14:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214e19:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214e1d:	75 2e                	jne    8004214e4d <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004214e1f:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214e26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e2a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e2e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e32:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e36:	48 89 d1             	mov    %rdx,%rcx
  8004214e39:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214e3d:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214e42:	48 89 cf             	mov    %rcx,%rdi
  8004214e45:	ff d0                	callq  *%rax
  8004214e47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214e4b:	eb 07                	jmp    8004214e54 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004214e4d:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214e54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e58:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214e5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214e60:	48 8b 00             	mov    (%rax),%rax
  8004214e63:	48 29 c2             	sub    %rax,%rdx
  8004214e66:	48 89 d0             	mov    %rdx,%rax
  8004214e69:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214e6d:	73 0a                	jae    8004214e79 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214e6f:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214e74:	e9 5d 03 00 00       	jmpq   80042151d6 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004214e79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e7d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e81:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e85:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e89:	48 89 d1             	mov    %rdx,%rcx
  8004214e8c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214e8f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214e93:	48 89 cf             	mov    %rcx,%rdi
  8004214e96:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214e98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214ea0:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214ea4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ea8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214eac:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214eb0:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214eb4:	48 89 d1             	mov    %rdx,%rcx
  8004214eb7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214ebb:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214ec0:	48 89 cf             	mov    %rcx,%rdi
  8004214ec3:	ff d0                	callq  *%rax
  8004214ec5:	89 c2                	mov    %eax,%edx
  8004214ec7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ecb:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214ecf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ed3:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214ed7:	66 83 f8 01          	cmp    $0x1,%ax
  8004214edb:	74 26                	je     8004214f03 <_dwarf_frame_set_cie+0x18e>
  8004214edd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ee1:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214ee5:	66 83 f8 03          	cmp    $0x3,%ax
  8004214ee9:	74 18                	je     8004214f03 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004214eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214eef:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214ef3:	66 83 f8 04          	cmp    $0x4,%ax
  8004214ef7:	74 0a                	je     8004214f03 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004214ef9:	b8 16 00 00 00       	mov    $0x16,%eax
  8004214efe:	e9 d3 02 00 00       	jmpq   80042151d6 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214f03:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f07:	48 8b 10             	mov    (%rax),%rdx
  8004214f0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f0e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f12:	48 01 d0             	add    %rdx,%rax
  8004214f15:	48 89 c2             	mov    %rax,%rdx
  8004214f18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f1c:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214f20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f24:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f28:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004214f2c:	90                   	nop
  8004214f2d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f31:	48 8b 00             	mov    (%rax),%rax
  8004214f34:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004214f38:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214f3c:	48 89 0a             	mov    %rcx,(%rdx)
  8004214f3f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214f43:	48 01 d0             	add    %rdx,%rax
  8004214f46:	0f b6 00             	movzbl (%rax),%eax
  8004214f49:	84 c0                	test   %al,%al
  8004214f4b:	75 e0                	jne    8004214f2d <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004214f4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f51:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f55:	0f b6 00             	movzbl (%rax),%eax
  8004214f58:	84 c0                	test   %al,%al
  8004214f5a:	74 48                	je     8004214fa4 <_dwarf_frame_set_cie+0x22f>
  8004214f5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f60:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f64:	0f b6 00             	movzbl (%rax),%eax
  8004214f67:	3c 7a                	cmp    $0x7a,%al
  8004214f69:	74 39                	je     8004214fa4 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214f6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f6f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214f73:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214f77:	75 07                	jne    8004214f80 <_dwarf_frame_set_cie+0x20b>
  8004214f79:	b8 04 00 00 00       	mov    $0x4,%eax
  8004214f7e:	eb 05                	jmp    8004214f85 <_dwarf_frame_set_cie+0x210>
  8004214f80:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214f85:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214f88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f8c:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214f90:	48 01 c2             	add    %rax,%rdx
  8004214f93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f97:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004214f9a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214f9f:	e9 32 02 00 00       	jmpq   80042151d6 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214fa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fa8:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214fac:	48 be e5 14 22 04 80 	movabs $0x80042214e5,%rsi
  8004214fb3:	00 00 00 
  8004214fb6:	48 89 c7             	mov    %rax,%rdi
  8004214fb9:	48 b8 b7 13 21 04 80 	movabs $0x80042113b7,%rax
  8004214fc0:	00 00 00 
  8004214fc3:	ff d0                	callq  *%rax
  8004214fc5:	48 85 c0             	test   %rax,%rax
  8004214fc8:	74 28                	je     8004214ff2 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214fca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fce:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214fd2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214fd6:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214fd9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214fdd:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214fe1:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214fe5:	48 89 cf             	mov    %rcx,%rdi
  8004214fe8:	ff d0                	callq  *%rax
  8004214fea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214fee:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214ff2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ff6:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ffa:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214ffe:	48 89 d6             	mov    %rdx,%rsi
  8004215001:	48 89 c7             	mov    %rax,%rdi
  8004215004:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  800421500b:	00 00 00 
  800421500e:	ff d0                	callq  *%rax
  8004215010:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215014:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215018:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421501c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215020:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215024:	48 89 d6             	mov    %rdx,%rsi
  8004215027:	48 89 c7             	mov    %rax,%rdi
  800421502a:	48 b8 00 1a 21 04 80 	movabs $0x8004211a00,%rax
  8004215031:	00 00 00 
  8004215034:	ff d0                	callq  *%rax
  8004215036:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421503a:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  800421503e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215042:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004215046:	66 83 f8 01          	cmp    $0x1,%ax
  800421504a:	75 2b                	jne    8004215077 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800421504c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215050:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215054:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215058:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421505c:	48 89 d1             	mov    %rdx,%rcx
  800421505f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004215063:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215068:	48 89 cf             	mov    %rcx,%rdi
  800421506b:	ff d0                	callq  *%rax
  800421506d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215071:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004215075:	eb 26                	jmp    800421509d <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215077:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421507b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421507f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215083:	48 89 d6             	mov    %rdx,%rsi
  8004215086:	48 89 c7             	mov    %rax,%rdi
  8004215089:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  8004215090:	00 00 00 
  8004215093:	ff d0                	callq  *%rax
  8004215095:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215099:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  800421509d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150a1:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042150a5:	0f b6 00             	movzbl (%rax),%eax
  80042150a8:	3c 7a                	cmp    $0x7a,%al
  80042150aa:	0f 85 93 00 00 00    	jne    8004215143 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042150b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150b4:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150b8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042150bc:	48 89 d6             	mov    %rdx,%rsi
  80042150bf:	48 89 c7             	mov    %rax,%rdi
  80042150c2:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  80042150c9:	00 00 00 
  80042150cc:	ff d0                	callq  *%rax
  80042150ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042150d2:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042150d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042150da:	48 8b 10             	mov    (%rax),%rdx
  80042150dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150e1:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150e5:	48 01 d0             	add    %rdx,%rax
  80042150e8:	48 89 c2             	mov    %rax,%rdx
  80042150eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150ef:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  80042150f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042150f7:	48 8b 10             	mov    (%rax),%rdx
  80042150fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150fe:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004215102:	48 01 c2             	add    %rax,%rdx
  8004215105:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215109:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  800421510c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215110:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004215114:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004215118:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421511c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215120:	48 89 ce             	mov    %rcx,%rsi
  8004215123:	48 89 c7             	mov    %rax,%rdi
  8004215126:	48 b8 2a 4c 21 04 80 	movabs $0x8004214c2a,%rax
  800421512d:	00 00 00 
  8004215130:	ff d0                	callq  *%rax
  8004215132:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004215135:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215139:	74 08                	je     8004215143 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  800421513b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421513e:	e9 93 00 00 00       	jmpq   80042151d6 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004215143:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215147:	48 8b 10             	mov    (%rax),%rdx
  800421514a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421514e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215152:	48 01 d0             	add    %rdx,%rax
  8004215155:	48 89 c2             	mov    %rax,%rdx
  8004215158:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421515c:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004215160:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215164:	75 2a                	jne    8004215190 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004215166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421516a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421516e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215172:	48 01 c2             	add    %rax,%rdx
  8004215175:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215179:	48 8b 00             	mov    (%rax),%rax
  800421517c:	48 29 c2             	sub    %rax,%rdx
  800421517f:	48 89 d0             	mov    %rdx,%rax
  8004215182:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004215186:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421518a:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421518e:	eb 28                	jmp    80042151b8 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004215190:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215194:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421519c:	48 01 c2             	add    %rax,%rdx
  800421519f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042151a3:	48 8b 00             	mov    (%rax),%rax
  80042151a6:	48 29 c2             	sub    %rax,%rdx
  80042151a9:	48 89 d0             	mov    %rdx,%rax
  80042151ac:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042151b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151b4:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  80042151b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042151bc:	48 8b 10             	mov    (%rax),%rdx
  80042151bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151c3:	48 8b 40 70          	mov    0x70(%rax),%rax
  80042151c7:	48 01 c2             	add    %rax,%rdx
  80042151ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042151ce:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042151d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042151d6:	c9                   	leaveq 
  80042151d7:	c3                   	retq   

00000080042151d8 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  80042151d8:	55                   	push   %rbp
  80042151d9:	48 89 e5             	mov    %rsp,%rbp
  80042151dc:	48 83 ec 70          	sub    $0x70,%rsp
  80042151e0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042151e4:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042151e8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042151ec:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042151f0:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  80042151f4:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  80042151f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042151fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004215200:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215204:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215208:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421520b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421520f:	48 8b 10             	mov    (%rax),%rdx
  8004215212:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215216:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421521a:	48 01 d0             	add    %rdx,%rax
  800421521d:	48 89 c2             	mov    %rax,%rdx
  8004215220:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215224:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004215228:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421522c:	48 8b 10             	mov    (%rax),%rdx
  800421522f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215233:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004215237:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421523b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421523f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215243:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215247:	48 89 d1             	mov    %rdx,%rcx
  800421524a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421524e:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215253:	48 89 cf             	mov    %rcx,%rdi
  8004215256:	ff d0                	callq  *%rax
  8004215258:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800421525c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215261:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215265:	75 2e                	jne    8004215295 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004215267:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  800421526e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215272:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215276:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421527a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421527e:	48 89 d1             	mov    %rdx,%rcx
  8004215281:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215285:	ba 08 00 00 00       	mov    $0x8,%edx
  800421528a:	48 89 cf             	mov    %rcx,%rdi
  800421528d:	ff d0                	callq  *%rax
  800421528f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215293:	eb 07                	jmp    800421529c <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004215295:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  800421529c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152a0:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042152a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042152a8:	48 8b 00             	mov    (%rax),%rax
  80042152ab:	48 29 c2             	sub    %rax,%rdx
  80042152ae:	48 89 d0             	mov    %rdx,%rax
  80042152b1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042152b5:	73 0a                	jae    80042152c1 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042152b7:	b8 12 00 00 00       	mov    $0x12,%eax
  80042152bc:	e9 ca 02 00 00       	jmpq   800421558b <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  80042152c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042152c5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042152c9:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  80042152cd:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042152d1:	74 5e                	je     8004215331 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042152d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152d7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152db:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042152df:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042152e3:	48 89 d1             	mov    %rdx,%rcx
  80042152e6:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042152ea:	ba 04 00 00 00       	mov    $0x4,%edx
  80042152ef:	48 89 cf             	mov    %rcx,%rdi
  80042152f2:	ff d0                	callq  *%rax
  80042152f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042152f8:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  80042152fc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215300:	48 8b 10             	mov    (%rax),%rdx
  8004215303:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215307:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421530b:	48 29 c2             	sub    %rax,%rdx
  800421530e:	48 89 d0             	mov    %rdx,%rax
  8004215311:	48 83 e8 04          	sub    $0x4,%rax
  8004215315:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004215319:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421531d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215321:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004215325:	75 3d                	jne    8004215364 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004215327:	b8 13 00 00 00       	mov    $0x13,%eax
  800421532c:	e9 5a 02 00 00       	jmpq   800421558b <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004215331:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215335:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215339:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421533d:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215341:	48 89 d1             	mov    %rdx,%rcx
  8004215344:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215347:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421534b:	48 89 cf             	mov    %rcx,%rdi
  800421534e:	ff d0                	callq  *%rax
  8004215350:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215354:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004215358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421535c:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004215364:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215368:	0f 84 c9 00 00 00    	je     8004215437 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  800421536e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215372:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215376:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421537a:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421537d:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004215381:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215385:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215389:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800421538d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215391:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215395:	48 89 c2             	mov    %rax,%rdx
  8004215398:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800421539c:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042153a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153a4:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042153a8:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042153ac:	48 89 c7             	mov    %rax,%rdi
  80042153af:	48 b8 10 4a 21 04 80 	movabs $0x8004214a10,%rax
  80042153b6:	00 00 00 
  80042153b9:	ff d0                	callq  *%rax
  80042153bb:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  80042153be:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042153c2:	74 08                	je     80042153cc <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  80042153c4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042153c7:	e9 bf 01 00 00       	jmpq   800421558b <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  80042153cc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042153d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153d4:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  80042153d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042153dc:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042153e0:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  80042153e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153e8:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042153ec:	48 89 c2             	mov    %rax,%rdx
  80042153ef:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042153f3:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042153f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153fb:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042153ff:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215403:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004215409:	48 89 c7             	mov    %rax,%rdi
  800421540c:	48 b8 10 4a 21 04 80 	movabs $0x8004214a10,%rax
  8004215413:	00 00 00 
  8004215416:	ff d0                	callq  *%rax
  8004215418:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  800421541b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421541f:	74 08                	je     8004215429 <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004215421:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004215424:	e9 62 01 00 00       	jmpq   800421558b <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004215429:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421542d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215431:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004215435:	eb 50                	jmp    8004215487 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215437:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421543b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421543f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215443:	8b 52 28             	mov    0x28(%rdx),%edx
  8004215446:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421544a:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421544e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215452:	48 89 cf             	mov    %rcx,%rdi
  8004215455:	ff d0                	callq  *%rax
  8004215457:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421545b:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800421545f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215463:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215467:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421546b:	8b 52 28             	mov    0x28(%rdx),%edx
  800421546e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004215472:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004215476:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421547a:	48 89 cf             	mov    %rcx,%rdi
  800421547d:	ff d0                	callq  *%rax
  800421547f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215483:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004215487:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421548b:	74 6b                	je     80042154f8 <_dwarf_frame_set_fde+0x320>
  800421548d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215491:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215495:	0f b6 00             	movzbl (%rax),%eax
  8004215498:	3c 7a                	cmp    $0x7a,%al
  800421549a:	75 5c                	jne    80042154f8 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421549c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154a0:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042154a4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042154a8:	48 89 d6             	mov    %rdx,%rsi
  80042154ab:	48 89 c7             	mov    %rax,%rdi
  80042154ae:	48 b8 a4 1a 21 04 80 	movabs $0x8004211aa4,%rax
  80042154b5:	00 00 00 
  80042154b8:	ff d0                	callq  *%rax
  80042154ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042154be:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042154c2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042154c6:	48 8b 10             	mov    (%rax),%rdx
  80042154c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154cd:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042154d1:	48 01 d0             	add    %rdx,%rax
  80042154d4:	48 89 c2             	mov    %rax,%rdx
  80042154d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042154db:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  80042154df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042154e3:	48 8b 10             	mov    (%rax),%rdx
  80042154e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042154ea:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042154ee:	48 01 c2             	add    %rax,%rdx
  80042154f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042154f5:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042154f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042154fc:	48 8b 10             	mov    (%rax),%rdx
  80042154ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215503:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215507:	48 01 d0             	add    %rdx,%rax
  800421550a:	48 89 c2             	mov    %rax,%rdx
  800421550d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215511:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  8004215515:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215519:	75 2a                	jne    8004215545 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  800421551b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421551f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215523:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215527:	48 01 c2             	add    %rax,%rdx
  800421552a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421552e:	48 8b 00             	mov    (%rax),%rax
  8004215531:	48 29 c2             	sub    %rax,%rdx
  8004215534:	48 89 d0             	mov    %rdx,%rax
  8004215537:	48 8d 50 04          	lea    0x4(%rax),%rdx
  800421553b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421553f:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004215543:	eb 28                	jmp    800421556d <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  8004215545:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215549:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421554d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215551:	48 01 c2             	add    %rax,%rdx
  8004215554:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215558:	48 8b 00             	mov    (%rax),%rax
  800421555b:	48 29 c2             	sub    %rax,%rdx
  800421555e:	48 89 d0             	mov    %rdx,%rax
  8004215561:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004215565:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215569:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  800421556d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215571:	48 8b 10             	mov    (%rax),%rdx
  8004215574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215578:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421557c:	48 01 c2             	add    %rax,%rdx
  800421557f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215583:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004215586:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421558b:	c9                   	leaveq 
  800421558c:	c3                   	retq   

000000800421558d <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421558d:	55                   	push   %rbp
  800421558e:	48 89 e5             	mov    %rsp,%rbp
  8004215591:	48 83 ec 20          	sub    $0x20,%rsp
  8004215595:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215599:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  800421559d:	48 b8 a0 f6 4d 04 80 	movabs $0x80044df6a0,%rax
  80042155a4:	00 00 00 
  80042155a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  80042155ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042155af:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042155b3:	48 85 c0             	test   %rax,%rax
  80042155b6:	74 07                	je     80042155bf <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  80042155b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042155bd:	eb 33                	jmp    80042155f2 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  80042155bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042155c3:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  80042155c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042155cb:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  80042155cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042155d3:	48 b9 40 de 6d 04 80 	movabs $0x80046dde40,%rcx
  80042155da:	00 00 00 
  80042155dd:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  80042155e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042155e5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042155e9:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  80042155ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042155f2:	c9                   	leaveq 
  80042155f3:	c3                   	retq   

00000080042155f4 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  80042155f4:	55                   	push   %rbp
  80042155f5:	48 89 e5             	mov    %rsp,%rbp
  80042155f8:	48 83 ec 60          	sub    $0x60,%rsp
  80042155fc:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215600:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004215603:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215607:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  800421560b:	48 b8 a0 66 23 04 80 	movabs $0x80042366a0,%rax
  8004215612:	00 00 00 
  8004215615:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004215619:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004215620:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215624:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004215628:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  800421562c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215630:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004215634:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215638:	48 39 c2             	cmp    %rax,%rdx
  800421563b:	0f 86 fe 01 00 00    	jbe    800421583f <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  8004215641:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215645:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004215649:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421564d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215651:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215655:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215659:	48 89 d1             	mov    %rdx,%rcx
  800421565c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215660:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215665:	48 89 cf             	mov    %rcx,%rdi
  8004215668:	ff d0                	callq  *%rax
  800421566a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  800421566e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215673:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215677:	75 2e                	jne    80042156a7 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  8004215679:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004215680:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215684:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215688:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421568c:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215690:	48 89 d1             	mov    %rdx,%rcx
  8004215693:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215697:	ba 08 00 00 00       	mov    $0x8,%edx
  800421569c:	48 89 cf             	mov    %rcx,%rdi
  800421569f:	ff d0                	callq  *%rax
  80042156a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042156a5:	eb 07                	jmp    80042156ae <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  80042156a7:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  80042156ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156b2:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042156b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042156ba:	48 29 c2             	sub    %rax,%rdx
  80042156bd:	48 89 d0             	mov    %rdx,%rax
  80042156c0:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042156c4:	72 0d                	jb     80042156d3 <_dwarf_get_next_fde+0xdf>
  80042156c6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042156cb:	75 10                	jne    80042156dd <_dwarf_get_next_fde+0xe9>
  80042156cd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042156d1:	75 0a                	jne    80042156dd <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042156d3:	b8 12 00 00 00       	mov    $0x12,%eax
  80042156d8:	e9 67 01 00 00       	jmpq   8004215844 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  80042156dd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042156e1:	74 11                	je     80042156f4 <_dwarf_get_next_fde+0x100>
  80042156e3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042156e8:	75 0a                	jne    80042156f4 <_dwarf_get_next_fde+0x100>
			return(-1);
  80042156ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042156ef:	e9 50 01 00 00       	jmpq   8004215844 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  80042156f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042156f8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042156fc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215700:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215704:	48 89 d1             	mov    %rdx,%rcx
  8004215707:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421570a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421570e:	48 89 cf             	mov    %rcx,%rdi
  8004215711:	ff d0                	callq  *%rax
  8004215713:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  8004215717:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421571b:	74 79                	je     8004215796 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  800421571d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004215722:	75 32                	jne    8004215756 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004215724:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215728:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421572c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215730:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004215734:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004215738:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421573c:	49 89 f8             	mov    %rdi,%r8
  800421573f:	48 89 c7             	mov    %rax,%rdi
  8004215742:	48 b8 75 4d 21 04 80 	movabs $0x8004214d75,%rax
  8004215749:	00 00 00 
  800421574c:	ff d0                	callq  *%rax
  800421574e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215751:	e9 c8 00 00 00       	jmpq   800421581e <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  8004215756:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421575a:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421575e:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215762:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215766:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421576a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421576e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215772:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215776:	4d 89 c1             	mov    %r8,%r9
  8004215779:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421577f:	48 89 c7             	mov    %rax,%rdi
  8004215782:	48 b8 d8 51 21 04 80 	movabs $0x80042151d8,%rax
  8004215789:	00 00 00 
  800421578c:	ff d0                	callq  *%rax
  800421578e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215791:	e9 88 00 00 00       	jmpq   800421581e <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004215796:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421579a:	75 0b                	jne    80042157a7 <_dwarf_get_next_fde+0x1b3>
  800421579c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042157a1:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042157a5:	74 0d                	je     80042157b4 <_dwarf_get_next_fde+0x1c0>
  80042157a7:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042157ab:	75 36                	jne    80042157e3 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  80042157ad:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  80042157b2:	75 2f                	jne    80042157e3 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042157b4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042157b8:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042157bc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042157c0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042157c4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042157c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042157cc:	49 89 f8             	mov    %rdi,%r8
  80042157cf:	48 89 c7             	mov    %rax,%rdi
  80042157d2:	48 b8 75 4d 21 04 80 	movabs $0x8004214d75,%rax
  80042157d9:	00 00 00 
  80042157dc:	ff d0                	callq  *%rax
  80042157de:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042157e1:	eb 3b                	jmp    800421581e <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  80042157e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042157e7:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042157eb:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042157ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042157f3:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042157f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042157fb:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042157ff:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215803:	4d 89 c1             	mov    %r8,%r9
  8004215806:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421580c:	48 89 c7             	mov    %rax,%rdi
  800421580f:	48 b8 d8 51 21 04 80 	movabs $0x80042151d8,%rax
  8004215816:	00 00 00 
  8004215819:	ff d0                	callq  *%rax
  800421581b:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  800421581e:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004215822:	74 07                	je     800421582b <_dwarf_get_next_fde+0x237>
			return(-1);
  8004215824:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215829:	eb 19                	jmp    8004215844 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  800421582b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421582f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004215833:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215837:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421583b:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  800421583f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215844:	c9                   	leaveq 
  8004215845:	c3                   	retq   

0000008004215846 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  8004215846:	55                   	push   %rbp
  8004215847:	48 89 e5             	mov    %rsp,%rbp
  800421584a:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421584e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215852:	89 f0                	mov    %esi,%eax
  8004215854:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004215858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421585c:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215860:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004215864:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215868:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  800421586c:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215870:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004215874:	c9                   	leaveq 
  8004215875:	c3                   	retq   

0000008004215876 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215876:	55                   	push   %rbp
  8004215877:	48 89 e5             	mov    %rsp,%rbp
  800421587a:	48 83 ec 10          	sub    $0x10,%rsp
  800421587e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004215882:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004215886:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421588b:	75 0a                	jne    8004215897 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421588d:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215892:	e9 85 00 00 00       	jmpq   800421591c <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004215897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421589b:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421589f:	48 85 c0             	test   %rax,%rax
  80042158a2:	75 25                	jne    80042158c9 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  80042158a4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042158a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042158ac:	48 89 d6             	mov    %rdx,%rsi
  80042158af:	48 89 c7             	mov    %rax,%rdi
  80042158b2:	48 b8 8d 55 21 04 80 	movabs $0x800421558d,%rax
  80042158b9:	00 00 00 
  80042158bc:	ff d0                	callq  *%rax
  80042158be:	85 c0                	test   %eax,%eax
  80042158c0:	74 07                	je     80042158c9 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  80042158c2:	b8 01 00 00 00       	mov    $0x1,%eax
  80042158c7:	eb 53                	jmp    800421591c <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  80042158c9:	48 bf a0 66 23 04 80 	movabs $0x80042366a0,%rdi
  80042158d0:	00 00 00 
  80042158d3:	48 b8 42 33 21 04 80 	movabs $0x8004213342,%rax
  80042158da:	00 00 00 
  80042158dd:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  80042158df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042158e3:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  80042158ea:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  80042158eb:	48 b8 a0 66 23 04 80 	movabs $0x80042366a0,%rax
  80042158f2:	00 00 00 
  80042158f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042158f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042158fd:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  8004215901:	48 b8 a0 66 23 04 80 	movabs $0x80042366a0,%rax
  8004215908:	00 00 00 
  800421590b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421590f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215913:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004215917:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421591c:	c9                   	leaveq 
  800421591d:	c3                   	retq   

000000800421591e <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  800421591e:	55                   	push   %rbp
  800421591f:	48 89 e5             	mov    %rsp,%rbp
  8004215922:	53                   	push   %rbx
  8004215923:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  800421592a:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  800421592e:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004215932:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215939:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004215940:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004215947:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  800421594e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215952:	48 83 c0 48          	add    $0x48,%rax
  8004215956:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  800421595a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215961:	00 
  8004215962:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215969:	00 
  800421596a:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215971:	00 
  8004215972:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215979:	00 
  800421597a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421597e:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215982:	0f b6 c0             	movzbl %al,%eax
  8004215985:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215988:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  800421598f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215996:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800421599d:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042159a4:	e9 0a 05 00 00       	jmpq   8004215eb3 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  80042159a9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159b0:	0f b6 00             	movzbl (%rax),%eax
  80042159b3:	84 c0                	test   %al,%al
  80042159b5:	0f 85 78 01 00 00    	jne    8004215b33 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  80042159bb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159c2:	48 83 c0 01          	add    $0x1,%rax
  80042159c6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  80042159cd:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042159d4:	48 89 c7             	mov    %rax,%rdi
  80042159d7:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  80042159de:	00 00 00 
  80042159e1:	ff d0                	callq  *%rax
  80042159e3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  80042159e7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159ee:	0f b6 00             	movzbl (%rax),%eax
  80042159f1:	0f b6 c0             	movzbl %al,%eax
  80042159f4:	83 f8 02             	cmp    $0x2,%eax
  80042159f7:	74 7a                	je     8004215a73 <_dwarf_lineno_run_program+0x155>
  80042159f9:	83 f8 03             	cmp    $0x3,%eax
  80042159fc:	0f 84 b3 00 00 00    	je     8004215ab5 <_dwarf_lineno_run_program+0x197>
  8004215a02:	83 f8 01             	cmp    $0x1,%eax
  8004215a05:	0f 85 09 01 00 00    	jne    8004215b14 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004215a0b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215a12:	48 83 c0 01          	add    $0x1,%rax
  8004215a16:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004215a1d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004215a24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215a2b:	00 
  8004215a2c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215a33:	00 
  8004215a34:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215a3b:	00 
  8004215a3c:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215a43:	00 
  8004215a44:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a48:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215a4c:	0f b6 c0             	movzbl %al,%eax
  8004215a4f:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215a52:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215a59:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215a60:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215a67:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215a6e:	e9 bb 00 00 00       	jmpq   8004215b2e <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004215a73:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215a7a:	48 83 c0 01          	add    $0x1,%rax
  8004215a7e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004215a85:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004215a8c:	00 00 00 
  8004215a8f:	48 8b 00             	mov    (%rax),%rax
  8004215a92:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215a96:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004215a9a:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004215a9e:	0f b6 ca             	movzbl %dl,%ecx
  8004215aa1:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215aa8:	89 ce                	mov    %ecx,%esi
  8004215aaa:	48 89 d7             	mov    %rdx,%rdi
  8004215aad:	ff d0                	callq  *%rax
  8004215aaf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004215ab3:	eb 79                	jmp    8004215b2e <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004215ab5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215abc:	48 83 c0 01          	add    $0x1,%rax
  8004215ac0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004215ac7:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004215ace:	00 00 00 
  8004215ad1:	48 8b 08             	mov    (%rax),%rcx
  8004215ad4:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004215adb:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004215ae2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215ae6:	49 89 c8             	mov    %rcx,%r8
  8004215ae9:	48 89 d1             	mov    %rdx,%rcx
  8004215aec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215af1:	48 89 c7             	mov    %rax,%rdi
  8004215af4:	48 b8 d6 5e 21 04 80 	movabs $0x8004215ed6,%rax
  8004215afb:	00 00 00 
  8004215afe:	ff d0                	callq  *%rax
  8004215b00:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004215b03:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004215b07:	74 09                	je     8004215b12 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004215b09:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004215b0a:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004215b0d:	e9 ba 03 00 00       	jmpq   8004215ecc <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004215b12:	eb 1a                	jmp    8004215b2e <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004215b14:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004215b1b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215b1f:	48 01 d0             	add    %rdx,%rax
  8004215b22:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215b29:	e9 85 03 00 00       	jmpq   8004215eb3 <_dwarf_lineno_run_program+0x595>
  8004215b2e:	e9 80 03 00 00       	jmpq   8004215eb3 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004215b33:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215b3a:	0f b6 00             	movzbl (%rax),%eax
  8004215b3d:	84 c0                	test   %al,%al
  8004215b3f:	0f 84 3c 02 00 00    	je     8004215d81 <_dwarf_lineno_run_program+0x463>
  8004215b45:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215b4c:	0f b6 10             	movzbl (%rax),%edx
  8004215b4f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215b53:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215b57:	38 c2                	cmp    %al,%dl
  8004215b59:	0f 83 22 02 00 00    	jae    8004215d81 <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215b5f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215b66:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215b6a:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215b71:	0f b6 00             	movzbl (%rax),%eax
  8004215b74:	0f b6 c0             	movzbl %al,%eax
  8004215b77:	83 f8 0c             	cmp    $0xc,%eax
  8004215b7a:	0f 87 fb 01 00 00    	ja     8004215d7b <_dwarf_lineno_run_program+0x45d>
  8004215b80:	89 c0                	mov    %eax,%eax
  8004215b82:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004215b89:	00 
  8004215b8a:	48 b8 e8 14 22 04 80 	movabs $0x80042214e8,%rax
  8004215b91:	00 00 00 
  8004215b94:	48 01 d0             	add    %rdx,%rax
  8004215b97:	48 8b 00             	mov    (%rax),%rax
  8004215b9a:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004215b9c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215ba3:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215ba7:	73 0a                	jae    8004215bb3 <_dwarf_lineno_run_program+0x295>
  8004215ba9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215bae:	e9 19 03 00 00       	jmpq   8004215ecc <_dwarf_lineno_run_program+0x5ae>
  8004215bb3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bb7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215bbb:	48 89 10             	mov    %rdx,(%rax)
  8004215bbe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bc2:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215bc9:	00 
  8004215bca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bce:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215bd2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215bd6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bda:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215bde:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215be2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215be6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bea:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215bee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bf2:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215bf5:	89 50 28             	mov    %edx,0x28(%rax)
  8004215bf8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215bfc:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215bff:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215c02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c06:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215c09:	89 50 30             	mov    %edx,0x30(%rax)
  8004215c0c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c10:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215c17:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215c1b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c1f:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004215c26:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004215c2d:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004215c34:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215c3b:	e9 3c 01 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215c40:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215c47:	48 89 c7             	mov    %rax,%rdi
  8004215c4a:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215c51:	00 00 00 
  8004215c54:	ff d0                	callq  *%rax
					li->li_minlen;
  8004215c56:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004215c5a:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215c5e:	0f b6 d2             	movzbl %dl,%edx
  8004215c61:	48 0f af c2          	imul   %rdx,%rax
  8004215c65:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004215c69:	e9 0e 01 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004215c6e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215c75:	48 89 c7             	mov    %rax,%rdi
  8004215c78:	48 b8 23 1b 21 04 80 	movabs $0x8004211b23,%rax
  8004215c7f:	00 00 00 
  8004215c82:	ff d0                	callq  *%rax
  8004215c84:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215c88:	e9 ef 00 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004215c8d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215c94:	48 89 c7             	mov    %rax,%rdi
  8004215c97:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215c9e:	00 00 00 
  8004215ca1:	ff d0                	callq  *%rax
  8004215ca3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215ca7:	e9 d0 00 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004215cac:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215cb3:	48 89 c7             	mov    %rax,%rdi
  8004215cb6:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215cbd:	00 00 00 
  8004215cc0:	ff d0                	callq  *%rax
  8004215cc2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004215cc6:	e9 b1 00 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004215ccb:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004215ccf:	0f 94 c0             	sete   %al
  8004215cd2:	0f b6 c0             	movzbl %al,%eax
  8004215cd5:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004215cd8:	e9 9f 00 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004215cdd:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004215ce4:	e9 93 00 00 00       	jmpq   8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004215ce9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215ced:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215cf1:	0f b6 c0             	movzbl %al,%eax
  8004215cf4:	ba ff 00 00 00       	mov    $0xff,%edx
  8004215cf9:	89 d1                	mov    %edx,%ecx
  8004215cfb:	29 c1                	sub    %eax,%ecx
  8004215cfd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d01:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215d05:	0f b6 d8             	movzbl %al,%ebx
  8004215d08:	89 c8                	mov    %ecx,%eax
  8004215d0a:	99                   	cltd   
  8004215d0b:	f7 fb                	idiv   %ebx
  8004215d0d:	89 c2                	mov    %eax,%edx
  8004215d0f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d13:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215d17:	0f b6 c0             	movzbl %al,%eax
  8004215d1a:	0f af c2             	imul   %edx,%eax
  8004215d1d:	48 98                	cltq   
  8004215d1f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215d23:	eb 57                	jmp    8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004215d25:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004215d2c:	00 00 00 
  8004215d2f:	48 8b 00             	mov    (%rax),%rax
  8004215d32:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215d36:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215d3d:	be 02 00 00 00       	mov    $0x2,%esi
  8004215d42:	48 89 d7             	mov    %rdx,%rdi
  8004215d45:	ff d0                	callq  *%rax
  8004215d47:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215d4b:	eb 2f                	jmp    8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004215d4d:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004215d54:	eb 26                	jmp    8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004215d56:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004215d5d:	eb 1d                	jmp    8004215d7c <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215d5f:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215d66:	48 89 c7             	mov    %rax,%rdi
  8004215d69:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215d70:	00 00 00 
  8004215d73:	ff d0                	callq  *%rax
  8004215d75:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004215d79:	eb 01                	jmp    8004215d7c <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004215d7b:	90                   	nop
			}

		} else {
  8004215d7c:	e9 32 01 00 00       	jmpq   8004215eb3 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004215d81:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d85:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004215d89:	0f be c8             	movsbl %al,%ecx
  8004215d8c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215d93:	0f b6 00             	movzbl (%rax),%eax
  8004215d96:	0f b6 d0             	movzbl %al,%edx
  8004215d99:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215d9d:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215da1:	0f b6 c0             	movzbl %al,%eax
  8004215da4:	29 c2                	sub    %eax,%edx
  8004215da6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215daa:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215dae:	0f b6 f0             	movzbl %al,%esi
  8004215db1:	89 d0                	mov    %edx,%eax
  8004215db3:	99                   	cltd   
  8004215db4:	f7 fe                	idiv   %esi
  8004215db6:	89 d0                	mov    %edx,%eax
  8004215db8:	01 c8                	add    %ecx,%eax
  8004215dba:	48 98                	cltq   
  8004215dbc:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004215dc0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215dc7:	0f b6 00             	movzbl (%rax),%eax
  8004215dca:	0f b6 d0             	movzbl %al,%edx
  8004215dcd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215dd1:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215dd5:	0f b6 c0             	movzbl %al,%eax
  8004215dd8:	89 d1                	mov    %edx,%ecx
  8004215dda:	29 c1                	sub    %eax,%ecx
  8004215ddc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215de0:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215de4:	0f b6 d8             	movzbl %al,%ebx
  8004215de7:	89 c8                	mov    %ecx,%eax
  8004215de9:	99                   	cltd   
  8004215dea:	f7 fb                	idiv   %ebx
  8004215dec:	89 c2                	mov    %eax,%edx
  8004215dee:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215df2:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215df6:	0f b6 c0             	movzbl %al,%eax
  8004215df9:	0f af c2             	imul   %edx,%eax
  8004215dfc:	48 98                	cltq   
  8004215dfe:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004215e02:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215e09:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215e0d:	73 0a                	jae    8004215e19 <_dwarf_lineno_run_program+0x4fb>
  8004215e0f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215e14:	e9 b3 00 00 00       	jmpq   8004215ecc <_dwarf_lineno_run_program+0x5ae>
  8004215e19:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215e21:	48 89 10             	mov    %rdx,(%rax)
  8004215e24:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e28:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215e2f:	00 
  8004215e30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e34:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215e38:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215e3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e40:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215e44:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215e48:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e50:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215e54:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e58:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215e5b:	89 50 28             	mov    %edx,0x28(%rax)
  8004215e5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e62:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215e65:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215e68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e6c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215e6f:	89 50 30             	mov    %edx,0x30(%rax)
  8004215e72:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215e76:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215e7d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215e81:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215e85:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004215e8c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215e93:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004215e9a:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215ea1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215ea8:	48 83 c0 01          	add    $0x1,%rax
  8004215eac:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215eb3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215eba:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004215ec1:	0f 82 e2 fa ff ff    	jb     80042159a9 <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004215ec7:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004215ecc:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004215ed3:	5b                   	pop    %rbx
  8004215ed4:	5d                   	pop    %rbp
  8004215ed5:	c3                   	retq   

0000008004215ed6 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004215ed6:	55                   	push   %rbp
  8004215ed7:	48 89 e5             	mov    %rsp,%rbp
  8004215eda:	53                   	push   %rbx
  8004215edb:	48 83 ec 48          	sub    $0x48,%rsp
  8004215edf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004215ee3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004215ee7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004215eeb:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004215eef:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004215ef3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215ef7:	48 8b 00             	mov    (%rax),%rax
  8004215efa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004215efe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215f02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004215f06:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004215f0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215f0e:	48 89 c7             	mov    %rax,%rdi
  8004215f11:	48 b8 8d 0c 21 04 80 	movabs $0x8004210c8d,%rax
  8004215f18:	00 00 00 
  8004215f1b:	ff d0                	callq  *%rax
  8004215f1d:	48 98                	cltq   
  8004215f1f:	48 83 c0 01          	add    $0x1,%rax
  8004215f23:	48 01 d8             	add    %rbx,%rax
  8004215f26:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004215f2a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215f2e:	48 89 c7             	mov    %rax,%rdi
  8004215f31:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215f38:	00 00 00 
  8004215f3b:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004215f3d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215f41:	48 89 c7             	mov    %rax,%rdi
  8004215f44:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215f4b:	00 00 00 
  8004215f4e:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215f50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215f54:	48 89 c7             	mov    %rax,%rdi
  8004215f57:	48 b8 b5 1b 21 04 80 	movabs $0x8004211bb5,%rax
  8004215f5e:	00 00 00 
  8004215f61:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215f63:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215f67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215f6b:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215f6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215f73:	48 83 c4 48          	add    $0x48,%rsp
  8004215f77:	5b                   	pop    %rbx
  8004215f78:	5d                   	pop    %rbp
  8004215f79:	c3                   	retq   

0000008004215f7a <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004215f7a:	55                   	push   %rbp
  8004215f7b:	48 89 e5             	mov    %rsp,%rbp
  8004215f7e:	53                   	push   %rbx
  8004215f7f:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215f86:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004215f8d:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215f94:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004215f9b:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215fa2:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004215fa9:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004215fb0:	00 
  8004215fb1:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215fb8:	00 
  8004215fb9:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004215fc0:	00 
  8004215fc1:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215fc8:	00 
  8004215fc9:	48 b8 50 15 22 04 80 	movabs $0x8004221550,%rax
  8004215fd0:	00 00 00 
  8004215fd3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215fd7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215fdb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004215fdf:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215fe6:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004215fed:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004215ff1:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215ff6:	75 35                	jne    800421602d <_dwarf_lineno_init+0xb3>
  8004215ff8:	48 b9 5c 15 22 04 80 	movabs $0x800422155c,%rcx
  8004215fff:	00 00 00 
  8004216002:	48 ba 67 15 22 04 80 	movabs $0x8004221567,%rdx
  8004216009:	00 00 00 
  800421600c:	be 13 01 00 00       	mov    $0x113,%esi
  8004216011:	48 bf 7c 15 22 04 80 	movabs $0x800422157c,%rdi
  8004216018:	00 00 00 
  800421601b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216020:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216027:	00 00 00 
  800421602a:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  800421602d:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216034:	00 00 00 
  8004216037:	48 8b 00             	mov    (%rax),%rax
  800421603a:	48 85 c0             	test   %rax,%rax
  800421603d:	75 35                	jne    8004216074 <_dwarf_lineno_init+0xfa>
  800421603f:	48 b9 93 15 22 04 80 	movabs $0x8004221593,%rcx
  8004216046:	00 00 00 
  8004216049:	48 ba 67 15 22 04 80 	movabs $0x8004221567,%rdx
  8004216050:	00 00 00 
  8004216053:	be 14 01 00 00       	mov    $0x114,%esi
  8004216058:	48 bf 7c 15 22 04 80 	movabs $0x800422157c,%rdi
  800421605f:	00 00 00 
  8004216062:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216067:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421606e:	00 00 00 
  8004216071:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004216074:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216078:	48 89 c7             	mov    %rax,%rdi
  800421607b:	48 b8 42 33 21 04 80 	movabs $0x8004213342,%rax
  8004216082:	00 00 00 
  8004216085:	ff d0                	callq  *%rax
  8004216087:	85 c0                	test   %eax,%eax
  8004216089:	74 0a                	je     8004216095 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  800421608b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216090:	e9 4f 04 00 00       	jmpq   80042164e4 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004216095:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421609c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  80042160a0:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  80042160a7:	00 00 00 
  80042160aa:	48 8b 00             	mov    (%rax),%rax
  80042160ad:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160b1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160b5:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042160b9:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042160c0:	ba 04 00 00 00       	mov    $0x4,%edx
  80042160c5:	48 89 cf             	mov    %rcx,%rdi
  80042160c8:	ff d0                	callq  *%rax
  80042160ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  80042160ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042160d3:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042160d7:	75 37                	jne    8004216110 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  80042160d9:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  80042160e0:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  80042160e7:	00 00 00 
  80042160ea:	48 8b 00             	mov    (%rax),%rax
  80042160ed:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160f1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160f5:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042160f9:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216100:	ba 08 00 00 00       	mov    $0x8,%edx
  8004216105:	48 89 cf             	mov    %rcx,%rdi
  8004216108:	ff d0                	callq  *%rax
  800421610a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421610e:	eb 07                	jmp    8004216117 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004216110:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004216117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421611b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421611f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004216126:	48 29 c2             	sub    %rax,%rdx
  8004216129:	48 89 d0             	mov    %rdx,%rax
  800421612c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004216130:	73 0a                	jae    800421613c <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004216132:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004216137:	e9 a8 03 00 00       	jmpq   80042164e4 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  800421613c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216140:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216144:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004216147:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421614e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216152:	48 01 d0             	add    %rdx,%rax
  8004216155:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004216159:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216160:	00 00 00 
  8004216163:	48 8b 00             	mov    (%rax),%rax
  8004216166:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421616a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421616e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216172:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216179:	ba 02 00 00 00       	mov    $0x2,%edx
  800421617e:	48 89 cf             	mov    %rcx,%rdi
  8004216181:	ff d0                	callq  *%rax
  8004216183:	89 c2                	mov    %eax,%edx
  8004216185:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216189:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  800421618d:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216194:	00 00 00 
  8004216197:	48 8b 00             	mov    (%rax),%rax
  800421619a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421619e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042161a2:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042161a6:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042161a9:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042161b0:	48 89 cf             	mov    %rcx,%rdi
  80042161b3:	ff d0                	callq  *%rax
  80042161b5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042161b9:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  80042161bd:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042161c4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  80042161c8:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  80042161cf:	00 00 00 
  80042161d2:	48 8b 00             	mov    (%rax),%rax
  80042161d5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042161d9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042161dd:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042161e1:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042161e8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042161ed:	48 89 cf             	mov    %rcx,%rdi
  80042161f0:	ff d0                	callq  *%rax
  80042161f2:	89 c2                	mov    %eax,%edx
  80042161f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042161f8:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  80042161fb:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216202:	00 00 00 
  8004216205:	48 8b 00             	mov    (%rax),%rax
  8004216208:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421620c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216210:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216214:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421621b:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216220:	48 89 cf             	mov    %rcx,%rdi
  8004216223:	ff d0                	callq  *%rax
  8004216225:	89 c2                	mov    %eax,%edx
  8004216227:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421622b:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  800421622e:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216235:	00 00 00 
  8004216238:	48 8b 00             	mov    (%rax),%rax
  800421623b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421623f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216243:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216247:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421624e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216253:	48 89 cf             	mov    %rcx,%rdi
  8004216256:	ff d0                	callq  *%rax
  8004216258:	89 c2                	mov    %eax,%edx
  800421625a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421625e:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004216261:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216268:	00 00 00 
  800421626b:	48 8b 00             	mov    (%rax),%rax
  800421626e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216272:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216276:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421627a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216281:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216286:	48 89 cf             	mov    %rcx,%rdi
  8004216289:	ff d0                	callq  *%rax
  800421628b:	89 c2                	mov    %eax,%edx
  800421628d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216291:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004216294:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  800421629b:	00 00 00 
  800421629e:	48 8b 00             	mov    (%rax),%rax
  80042162a1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042162a5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042162a9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042162ad:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042162b4:	ba 01 00 00 00       	mov    $0x1,%edx
  80042162b9:	48 89 cf             	mov    %rcx,%rdi
  80042162bc:	ff d0                	callq  *%rax
  80042162be:	89 c2                	mov    %eax,%edx
  80042162c0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042162c4:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  80042162c7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042162cb:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042162cf:	8d 50 fb             	lea    -0x5(%rax),%edx
  80042162d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042162d6:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042162da:	0f b6 c0             	movzbl %al,%eax
  80042162dd:	83 e8 01             	sub    $0x1,%eax
  80042162e0:	39 c2                	cmp    %eax,%edx
  80042162e2:	7d 0c                	jge    80042162f0 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042162e4:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042162eb:	e9 f1 01 00 00       	jmpq   80042164e1 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  80042162f0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042162f4:	48 bb 80 e4 6d 04 80 	movabs $0x80046de480,%rbx
  80042162fb:	00 00 00 
  80042162fe:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004216302:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004216309:	eb 41                	jmp    800421634c <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  800421630b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421630f:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216313:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004216316:	48 98                	cltq   
  8004216318:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800421631c:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216323:	00 00 00 
  8004216326:	48 8b 00             	mov    (%rax),%rax
  8004216329:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421632d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216331:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216335:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421633c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216341:	48 89 cf             	mov    %rcx,%rdi
  8004216344:	ff d0                	callq  *%rax
  8004216346:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004216348:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800421634c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216350:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004216354:	0f b6 c0             	movzbl %al,%eax
  8004216357:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  800421635a:	7f af                	jg     800421630b <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  800421635c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004216363:	00 
	p = ds->ds_data + offset;
  8004216364:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216368:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421636c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004216373:	48 01 d0             	add    %rdx,%rax
  8004216376:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  800421637d:	eb 1f                	jmp    800421639e <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  800421637f:	90                   	nop
  8004216380:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216387:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421638b:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004216392:	0f b6 00             	movzbl (%rax),%eax
  8004216395:	84 c0                	test   %al,%al
  8004216397:	75 e7                	jne    8004216380 <_dwarf_lineno_init+0x406>
			;
		length++;
  8004216399:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  800421639e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042163a5:	0f b6 00             	movzbl (%rax),%eax
  80042163a8:	84 c0                	test   %al,%al
  80042163aa:	75 d3                	jne    800421637f <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  80042163ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042163b0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042163b4:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  80042163b8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042163bf:	48 89 c2             	mov    %rax,%rdx
  80042163c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042163c6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042163ca:	48 29 c2             	sub    %rax,%rdx
  80042163cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042163d1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042163d5:	48 98                	cltq   
  80042163d7:	48 39 c2             	cmp    %rax,%rdx
  80042163da:	7e 0c                	jle    80042163e8 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042163dc:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042163e3:	e9 f9 00 00 00       	jmpq   80042164e1 <_dwarf_lineno_init+0x567>
	}
	p++;
  80042163e8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042163ef:	48 83 c0 01          	add    $0x1,%rax
  80042163f3:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  80042163fa:	eb 3c                	jmp    8004216438 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  80042163fc:	48 b8 88 66 23 04 80 	movabs $0x8004236688,%rax
  8004216403:	00 00 00 
  8004216406:	48 8b 08             	mov    (%rax),%rcx
  8004216409:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004216410:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004216417:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421641b:	49 89 c8             	mov    %rcx,%r8
  800421641e:	48 89 d1             	mov    %rdx,%rcx
  8004216421:	ba 00 00 00 00       	mov    $0x0,%edx
  8004216426:	48 89 c7             	mov    %rax,%rdi
  8004216429:	48 b8 d6 5e 21 04 80 	movabs $0x8004215ed6,%rax
  8004216430:	00 00 00 
  8004216433:	ff d0                	callq  *%rax
  8004216435:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004216438:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421643f:	0f b6 00             	movzbl (%rax),%eax
  8004216442:	84 c0                	test   %al,%al
  8004216444:	75 b6                	jne    80042163fc <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  8004216446:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421644d:	48 83 c0 01          	add    $0x1,%rax
  8004216451:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004216458:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421645f:	48 89 c2             	mov    %rax,%rdx
  8004216462:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216466:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421646a:	48 29 c2             	sub    %rax,%rdx
  800421646d:	48 89 d0             	mov    %rdx,%rax
  8004216470:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004216474:	48 89 c2             	mov    %rax,%rdx
  8004216477:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421647b:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421647f:	48 39 c2             	cmp    %rax,%rdx
  8004216482:	74 09                	je     800421648d <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004216484:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  800421648b:	eb 54                	jmp    80042164e1 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  800421648d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216491:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004216495:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216499:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  800421649d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042164a4:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  80042164ab:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042164b2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042164b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042164ba:	4d 89 c1             	mov    %r8,%r9
  80042164bd:	49 89 f8             	mov    %rdi,%r8
  80042164c0:	48 89 c7             	mov    %rax,%rdi
  80042164c3:	48 b8 1e 59 21 04 80 	movabs $0x800421591e,%rax
  80042164ca:	00 00 00 
  80042164cd:	ff d0                	callq  *%rax
  80042164cf:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042164d2:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042164d6:	74 02                	je     80042164da <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  80042164d8:	eb 07                	jmp    80042164e1 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042164da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042164df:	eb 03                	jmp    80042164e4 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  80042164e1:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  80042164e4:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  80042164eb:	5b                   	pop    %rbx
  80042164ec:	5d                   	pop    %rbp
  80042164ed:	c3                   	retq   

00000080042164ee <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042164ee:	55                   	push   %rbp
  80042164ef:	48 89 e5             	mov    %rsp,%rbp
  80042164f2:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  80042164f9:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004216500:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004216507:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  800421650e:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004216515:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  800421651c:	00 
  800421651d:	75 35                	jne    8004216554 <dwarf_srclines+0x66>
  800421651f:	48 b9 9f 15 22 04 80 	movabs $0x800422159f,%rcx
  8004216526:	00 00 00 
  8004216529:	48 ba 67 15 22 04 80 	movabs $0x8004221567,%rdx
  8004216530:	00 00 00 
  8004216533:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004216538:	48 bf 7c 15 22 04 80 	movabs $0x800422157c,%rdi
  800421653f:	00 00 00 
  8004216542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421654e:	00 00 00 
  8004216551:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004216554:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800421655b:	00 
  800421655c:	75 35                	jne    8004216593 <dwarf_srclines+0xa5>
  800421655e:	48 b9 a3 15 22 04 80 	movabs $0x80042215a3,%rcx
  8004216565:	00 00 00 
  8004216568:	48 ba 67 15 22 04 80 	movabs $0x8004221567,%rdx
  800421656f:	00 00 00 
  8004216572:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004216577:	48 bf 7c 15 22 04 80 	movabs $0x800422157c,%rdi
  800421657e:	00 00 00 
  8004216581:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216586:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421658d:	00 00 00 
  8004216590:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004216593:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421659a:	ba 88 00 00 00       	mov    $0x88,%edx
  800421659f:	be 00 00 00 00       	mov    $0x0,%esi
  80042165a4:	48 89 c7             	mov    %rax,%rdi
  80042165a7:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  80042165ae:	00 00 00 
  80042165b1:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  80042165b3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042165ba:	be 10 00 00 00       	mov    $0x10,%esi
  80042165bf:	48 89 c7             	mov    %rax,%rdi
  80042165c2:	48 b8 c7 2e 21 04 80 	movabs $0x8004212ec7,%rax
  80042165c9:	00 00 00 
  80042165cc:	ff d0                	callq  *%rax
  80042165ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042165d2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042165d7:	75 0a                	jne    80042165e3 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042165d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042165de:	e9 84 00 00 00       	jmpq   8004216667 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  80042165e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042165e7:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042165eb:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  80042165f2:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  80042165f9:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004216600:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216607:	49 89 f8             	mov    %rdi,%r8
  800421660a:	48 89 c7             	mov    %rax,%rdi
  800421660d:	48 b8 7a 5f 21 04 80 	movabs $0x8004215f7a,%rax
  8004216614:	00 00 00 
  8004216617:	ff d0                	callq  *%rax
  8004216619:	85 c0                	test   %eax,%eax
  800421661b:	74 07                	je     8004216624 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  800421661d:	b8 01 00 00 00       	mov    $0x1,%eax
  8004216622:	eb 43                	jmp    8004216667 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004216624:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421662b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421662f:	48 89 10             	mov    %rdx,(%rax)
  8004216632:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004216636:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421663a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421663e:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216642:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216646:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421664a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421664e:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004216652:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216656:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421665a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421665e:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004216662:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004216667:	c9                   	leaveq 
  8004216668:	c3                   	retq   

0000008004216669 <_dwarf_find_section>:
  8004216669:	55                   	push   %rbp
  800421666a:	48 89 e5             	mov    %rsp,%rbp
  800421666d:	48 83 ec 20          	sub    $0x20,%rsp
  8004216671:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216675:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421667c:	00 
  800421667d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216684:	eb 57                	jmp    80042166dd <_dwarf_find_section+0x74>
  8004216686:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  800421668d:	00 00 00 
  8004216690:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216693:	48 63 d2             	movslq %edx,%rdx
  8004216696:	48 c1 e2 05          	shl    $0x5,%rdx
  800421669a:	48 01 d0             	add    %rdx,%rax
  800421669d:	48 8b 00             	mov    (%rax),%rax
  80042166a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042166a4:	48 89 d6             	mov    %rdx,%rsi
  80042166a7:	48 89 c7             	mov    %rax,%rdi
  80042166aa:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  80042166b1:	00 00 00 
  80042166b4:	ff d0                	callq  *%rax
  80042166b6:	85 c0                	test   %eax,%eax
  80042166b8:	75 1f                	jne    80042166d9 <_dwarf_find_section+0x70>
  80042166ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042166bd:	48 98                	cltq   
  80042166bf:	48 c1 e0 05          	shl    $0x5,%rax
  80042166c3:	48 89 c2             	mov    %rax,%rdx
  80042166c6:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042166cd:	00 00 00 
  80042166d0:	48 01 d0             	add    %rdx,%rax
  80042166d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042166d7:	eb 0a                	jmp    80042166e3 <_dwarf_find_section+0x7a>
  80042166d9:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042166dd:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042166e1:	7e a3                	jle    8004216686 <_dwarf_find_section+0x1d>
  80042166e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166e7:	c9                   	leaveq 
  80042166e8:	c3                   	retq   

00000080042166e9 <find_debug_sections>:
  80042166e9:	55                   	push   %rbp
  80042166ea:	48 89 e5             	mov    %rsp,%rbp
  80042166ed:	48 83 ec 40          	sub    $0x40,%rsp
  80042166f1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042166f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042166f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042166fd:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004216704:	00 
  8004216705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216709:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421670d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216711:	48 01 d0             	add    %rdx,%rax
  8004216714:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216718:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421671c:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216720:	0f b7 c0             	movzwl %ax,%eax
  8004216723:	48 c1 e0 06          	shl    $0x6,%rax
  8004216727:	48 89 c2             	mov    %rax,%rdx
  800421672a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421672e:	48 01 d0             	add    %rdx,%rax
  8004216731:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216735:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216739:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800421673d:	0f b7 c0             	movzwl %ax,%eax
  8004216740:	48 c1 e0 06          	shl    $0x6,%rax
  8004216744:	48 89 c2             	mov    %rax,%rdx
  8004216747:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421674b:	48 01 d0             	add    %rdx,%rax
  800421674e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216752:	e9 4b 02 00 00       	jmpq   80042169a2 <find_debug_sections+0x2b9>
  8004216757:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421675b:	8b 00                	mov    (%rax),%eax
  800421675d:	89 c2                	mov    %eax,%edx
  800421675f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216763:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004216767:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421676b:	48 01 c8             	add    %rcx,%rax
  800421676e:	48 01 d0             	add    %rdx,%rax
  8004216771:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216775:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216779:	48 be ab 15 22 04 80 	movabs $0x80042215ab,%rsi
  8004216780:	00 00 00 
  8004216783:	48 89 c7             	mov    %rax,%rdi
  8004216786:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  800421678d:	00 00 00 
  8004216790:	ff d0                	callq  *%rax
  8004216792:	85 c0                	test   %eax,%eax
  8004216794:	75 4b                	jne    80042167e1 <find_debug_sections+0xf8>
  8004216796:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421679a:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042167a1:	00 00 00 
  80042167a4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042167a8:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042167af:	00 00 00 
  80042167b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042167b6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042167ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167be:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042167c2:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042167c9:	00 00 00 
  80042167cc:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042167d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167d4:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042167d8:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042167dc:	e9 bc 01 00 00       	jmpq   800421699d <find_debug_sections+0x2b4>
  80042167e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042167e5:	48 be b7 15 22 04 80 	movabs $0x80042215b7,%rsi
  80042167ec:	00 00 00 
  80042167ef:	48 89 c7             	mov    %rax,%rdi
  80042167f2:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  80042167f9:	00 00 00 
  80042167fc:	ff d0                	callq  *%rax
  80042167fe:	85 c0                	test   %eax,%eax
  8004216800:	75 4b                	jne    800421684d <find_debug_sections+0x164>
  8004216802:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216806:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  800421680d:	00 00 00 
  8004216810:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216814:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  800421681b:	00 00 00 
  800421681e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216822:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216826:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421682a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421682e:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216835:	00 00 00 
  8004216838:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421683c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216840:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216844:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216848:	e9 50 01 00 00       	jmpq   800421699d <find_debug_sections+0x2b4>
  800421684d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216851:	48 be cf 15 22 04 80 	movabs $0x80042215cf,%rsi
  8004216858:	00 00 00 
  800421685b:	48 89 c7             	mov    %rax,%rdi
  800421685e:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216865:	00 00 00 
  8004216868:	ff d0                	callq  *%rax
  800421686a:	85 c0                	test   %eax,%eax
  800421686c:	75 4b                	jne    80042168b9 <find_debug_sections+0x1d0>
  800421686e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216872:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216879:	00 00 00 
  800421687c:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216880:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216887:	00 00 00 
  800421688a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421688e:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216892:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216896:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421689a:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042168a1:	00 00 00 
  80042168a4:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042168a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168ac:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042168b0:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042168b4:	e9 e4 00 00 00       	jmpq   800421699d <find_debug_sections+0x2b4>
  80042168b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042168bd:	48 be c5 15 22 04 80 	movabs $0x80042215c5,%rsi
  80042168c4:	00 00 00 
  80042168c7:	48 89 c7             	mov    %rax,%rdi
  80042168ca:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  80042168d1:	00 00 00 
  80042168d4:	ff d0                	callq  *%rax
  80042168d6:	85 c0                	test   %eax,%eax
  80042168d8:	75 53                	jne    800421692d <find_debug_sections+0x244>
  80042168da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168de:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042168e2:	48 89 c2             	mov    %rax,%rdx
  80042168e5:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042168ec:	00 00 00 
  80042168ef:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042168f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042168fb:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216902:	00 00 00 
  8004216905:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216909:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421690d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216911:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216918:	00 00 00 
  800421691b:	48 89 50 58          	mov    %rdx,0x58(%rax)
  800421691f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216923:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216927:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421692b:	eb 70                	jmp    800421699d <find_debug_sections+0x2b4>
  800421692d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216931:	48 be db 15 22 04 80 	movabs $0x80042215db,%rsi
  8004216938:	00 00 00 
  800421693b:	48 89 c7             	mov    %rax,%rdi
  800421693e:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216945:	00 00 00 
  8004216948:	ff d0                	callq  *%rax
  800421694a:	85 c0                	test   %eax,%eax
  800421694c:	75 4f                	jne    800421699d <find_debug_sections+0x2b4>
  800421694e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216952:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216959:	00 00 00 
  800421695c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216963:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  800421696a:	00 00 00 
  800421696d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216971:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216978:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421697c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216980:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216987:	00 00 00 
  800421698a:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216991:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216995:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216999:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421699d:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  80042169a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042169a6:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042169aa:	0f 82 a7 fd ff ff    	jb     8004216757 <find_debug_sections+0x6e>
  80042169b0:	c9                   	leaveq 
  80042169b1:	c3                   	retq   

00000080042169b2 <read_section_headers>:
  80042169b2:	55                   	push   %rbp
  80042169b3:	48 89 e5             	mov    %rsp,%rbp
  80042169b6:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  80042169bd:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  80042169c4:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  80042169cb:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  80042169d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042169d7:	ba 14 00 00 00       	mov    $0x14,%edx
  80042169dc:	48 89 f7             	mov    %rsi,%rdi
  80042169df:	48 89 d1             	mov    %rdx,%rcx
  80042169e2:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  80042169e5:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  80042169ec:	00 
  80042169ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042169f1:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  80042169f8:	48 01 d0             	add    %rdx,%rax
  80042169fb:	48 83 e8 01          	sub    $0x1,%rax
  80042169ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216a03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216a07:	ba 00 00 00 00       	mov    $0x0,%edx
  8004216a0c:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004216a10:	48 89 d0             	mov    %rdx,%rax
  8004216a13:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216a17:	48 29 c2             	sub    %rax,%rdx
  8004216a1a:	48 89 d0             	mov    %rdx,%rax
  8004216a1d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216a21:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004216a28:	00 00 00 00 
  8004216a2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a30:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216a34:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004216a3b:	00 
  8004216a3c:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004216a43:	00 00 00 
  8004216a46:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004216a4d:	75 11                	jne    8004216a60 <read_section_headers+0xae>
  8004216a4f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216a56:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216a5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216a5e:	eb 26                	jmp    8004216a86 <read_section_headers+0xd4>
  8004216a60:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216a67:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216a6b:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216a72:	48 01 c2             	add    %rax,%rdx
  8004216a75:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004216a7c:	ff ff ff 
  8004216a7f:	48 01 d0             	add    %rdx,%rax
  8004216a82:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216a86:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216a8d:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216a91:	0f b7 c0             	movzwl %ax,%eax
  8004216a94:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004216a97:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216a9e:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004216aa2:	0f b7 c0             	movzwl %ax,%eax
  8004216aa5:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004216aa8:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216aaf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004216ab3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216ab6:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004216aba:	48 63 f0             	movslq %eax,%rsi
  8004216abd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ac1:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216ac8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216acc:	48 89 c7             	mov    %rax,%rdi
  8004216acf:	48 b8 f1 70 21 04 80 	movabs $0x80042170f1,%rax
  8004216ad6:	00 00 00 
  8004216ad9:	ff d0                	callq  *%rax
  8004216adb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216adf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004216ae3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216ae7:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216aed:	48 89 c2             	mov    %rax,%rdx
  8004216af0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216af4:	48 29 d0             	sub    %rdx,%rax
  8004216af7:	48 89 c2             	mov    %rax,%rdx
  8004216afa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216afe:	48 01 d0             	add    %rdx,%rax
  8004216b01:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004216b05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216b0c:	eb 24                	jmp    8004216b32 <read_section_headers+0x180>
  8004216b0e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b11:	48 98                	cltq   
  8004216b13:	48 c1 e0 06          	shl    $0x6,%rax
  8004216b17:	48 89 c2             	mov    %rax,%rdx
  8004216b1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216b1e:	48 01 c2             	add    %rax,%rdx
  8004216b21:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b24:	48 98                	cltq   
  8004216b26:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004216b2d:	ff 
  8004216b2e:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216b32:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b35:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216b38:	7c d4                	jl     8004216b0e <read_section_headers+0x15c>
  8004216b3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216b3e:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216b42:	0f b7 c0             	movzwl %ax,%eax
  8004216b45:	48 98                	cltq   
  8004216b47:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b4e:	ff 
  8004216b4f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004216b53:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216b5a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216b5e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216b62:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216b66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216b6a:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216b6e:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216b75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b79:	48 01 c8             	add    %rcx,%rax
  8004216b7c:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216b83:	48 89 c7             	mov    %rax,%rdi
  8004216b86:	48 b8 f1 70 21 04 80 	movabs $0x80042170f1,%rax
  8004216b8d:	00 00 00 
  8004216b90:	ff d0                	callq  *%rax
  8004216b92:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216b96:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216b9a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216b9e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216ba2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004216ba6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004216baa:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216bb0:	48 29 c2             	sub    %rax,%rdx
  8004216bb3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216bb7:	48 01 c2             	add    %rax,%rdx
  8004216bba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216bbe:	48 01 d0             	add    %rdx,%rax
  8004216bc1:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004216bc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216bcc:	e9 04 05 00 00       	jmpq   80042170d5 <read_section_headers+0x723>
  8004216bd1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bd4:	48 98                	cltq   
  8004216bd6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216bdd:	ff 
  8004216bde:	8b 00                	mov    (%rax),%eax
  8004216be0:	89 c2                	mov    %eax,%edx
  8004216be2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004216be6:	48 01 d0             	add    %rdx,%rax
  8004216be9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004216bed:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216bf4:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216bf9:	48 85 c0             	test   %rax,%rax
  8004216bfc:	74 35                	je     8004216c33 <read_section_headers+0x281>
  8004216bfe:	48 b9 e6 15 22 04 80 	movabs $0x80042215e6,%rcx
  8004216c05:	00 00 00 
  8004216c08:	48 ba ff 15 22 04 80 	movabs $0x80042215ff,%rdx
  8004216c0f:	00 00 00 
  8004216c12:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216c17:	48 bf 14 16 22 04 80 	movabs $0x8004221614,%rdi
  8004216c1e:	00 00 00 
  8004216c21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c26:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216c2d:	00 00 00 
  8004216c30:	41 ff d0             	callq  *%r8
  8004216c33:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216c3a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216c3e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216c42:	48 be ab 15 22 04 80 	movabs $0x80042215ab,%rsi
  8004216c49:	00 00 00 
  8004216c4c:	48 89 c7             	mov    %rax,%rdi
  8004216c4f:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216c56:	00 00 00 
  8004216c59:	ff d0                	callq  *%rax
  8004216c5b:	85 c0                	test   %eax,%eax
  8004216c5d:	0f 85 d8 00 00 00    	jne    8004216d3b <read_section_headers+0x389>
  8004216c63:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c66:	48 98                	cltq   
  8004216c68:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c6f:	ff 
  8004216c70:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216c74:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c77:	48 98                	cltq   
  8004216c79:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c80:	ff 
  8004216c81:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216c85:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216c8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c90:	48 01 c8             	add    %rcx,%rax
  8004216c93:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216c9a:	48 89 c7             	mov    %rax,%rdi
  8004216c9d:	48 b8 f1 70 21 04 80 	movabs $0x80042170f1,%rax
  8004216ca4:	00 00 00 
  8004216ca7:	ff d0                	callq  *%rax
  8004216ca9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cac:	48 98                	cltq   
  8004216cae:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216cb5:	ff 
  8004216cb6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216cba:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cbd:	48 98                	cltq   
  8004216cbf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216cc6:	ff 
  8004216cc7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216ccb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004216ccf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216cd3:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216cd9:	48 29 c2             	sub    %rax,%rdx
  8004216cdc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ce0:	48 01 c2             	add    %rax,%rdx
  8004216ce3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ce7:	48 01 c2             	add    %rax,%rdx
  8004216cea:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216cf1:	00 00 00 
  8004216cf4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216cf8:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216cff:	00 00 00 
  8004216d02:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216d06:	48 89 c2             	mov    %rax,%rdx
  8004216d09:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216d10:	00 00 00 
  8004216d13:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216d17:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d1a:	48 98                	cltq   
  8004216d1c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d23:	ff 
  8004216d24:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216d28:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216d2f:	00 00 00 
  8004216d32:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216d36:	e9 96 03 00 00       	jmpq   80042170d1 <read_section_headers+0x71f>
  8004216d3b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216d3f:	48 be b7 15 22 04 80 	movabs $0x80042215b7,%rsi
  8004216d46:	00 00 00 
  8004216d49:	48 89 c7             	mov    %rax,%rdi
  8004216d4c:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216d53:	00 00 00 
  8004216d56:	ff d0                	callq  *%rax
  8004216d58:	85 c0                	test   %eax,%eax
  8004216d5a:	0f 85 de 00 00 00    	jne    8004216e3e <read_section_headers+0x48c>
  8004216d60:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d63:	48 98                	cltq   
  8004216d65:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d6c:	ff 
  8004216d6d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216d71:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d74:	48 98                	cltq   
  8004216d76:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d7d:	ff 
  8004216d7e:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216d82:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216d89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d8d:	48 01 c8             	add    %rcx,%rax
  8004216d90:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216d97:	48 89 c7             	mov    %rax,%rdi
  8004216d9a:	48 b8 f1 70 21 04 80 	movabs $0x80042170f1,%rax
  8004216da1:	00 00 00 
  8004216da4:	ff d0                	callq  *%rax
  8004216da6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216da9:	48 98                	cltq   
  8004216dab:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216db2:	ff 
  8004216db3:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216db7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216dba:	48 98                	cltq   
  8004216dbc:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216dc3:	ff 
  8004216dc4:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216dc8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004216dcf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004216dd6:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216ddc:	48 29 c2             	sub    %rax,%rdx
  8004216ddf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216de3:	48 01 c2             	add    %rax,%rdx
  8004216de6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216dea:	48 01 c2             	add    %rax,%rdx
  8004216ded:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216df4:	00 00 00 
  8004216df7:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216dfb:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216e02:	00 00 00 
  8004216e05:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216e09:	48 89 c2             	mov    %rax,%rdx
  8004216e0c:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216e13:	00 00 00 
  8004216e16:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216e1a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e1d:	48 98                	cltq   
  8004216e1f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e26:	ff 
  8004216e27:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216e2b:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216e32:	00 00 00 
  8004216e35:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216e39:	e9 93 02 00 00       	jmpq   80042170d1 <read_section_headers+0x71f>
  8004216e3e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216e42:	48 be cf 15 22 04 80 	movabs $0x80042215cf,%rsi
  8004216e49:	00 00 00 
  8004216e4c:	48 89 c7             	mov    %rax,%rdi
  8004216e4f:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216e56:	00 00 00 
  8004216e59:	ff d0                	callq  *%rax
  8004216e5b:	85 c0                	test   %eax,%eax
  8004216e5d:	0f 85 de 00 00 00    	jne    8004216f41 <read_section_headers+0x58f>
  8004216e63:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e66:	48 98                	cltq   
  8004216e68:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e6f:	ff 
  8004216e70:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216e74:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e77:	48 98                	cltq   
  8004216e79:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e80:	ff 
  8004216e81:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216e85:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216e8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216e90:	48 01 c8             	add    %rcx,%rax
  8004216e93:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216e9a:	48 89 c7             	mov    %rax,%rdi
  8004216e9d:	48 b8 f1 70 21 04 80 	movabs $0x80042170f1,%rax
  8004216ea4:	00 00 00 
  8004216ea7:	ff d0                	callq  *%rax
  8004216ea9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216eac:	48 98                	cltq   
  8004216eae:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216eb5:	ff 
  8004216eb6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216eba:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ebd:	48 98                	cltq   
  8004216ebf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ec6:	ff 
  8004216ec7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216ecb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004216ed2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004216ed9:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216edf:	48 29 c2             	sub    %rax,%rdx
  8004216ee2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ee6:	48 01 c2             	add    %rax,%rdx
  8004216ee9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216eed:	48 01 c2             	add    %rax,%rdx
  8004216ef0:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216ef7:	00 00 00 
  8004216efa:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216efe:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216f05:	00 00 00 
  8004216f08:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004216f0c:	48 89 c2             	mov    %rax,%rdx
  8004216f0f:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216f16:	00 00 00 
  8004216f19:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216f1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f20:	48 98                	cltq   
  8004216f22:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216f29:	ff 
  8004216f2a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216f2e:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216f35:	00 00 00 
  8004216f38:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216f3c:	e9 90 01 00 00       	jmpq   80042170d1 <read_section_headers+0x71f>
  8004216f41:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216f45:	48 be c5 15 22 04 80 	movabs $0x80042215c5,%rsi
  8004216f4c:	00 00 00 
  8004216f4f:	48 89 c7             	mov    %rax,%rdi
  8004216f52:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216f59:	00 00 00 
  8004216f5c:	ff d0                	callq  *%rax
  8004216f5e:	85 c0                	test   %eax,%eax
  8004216f60:	75 65                	jne    8004216fc7 <read_section_headers+0x615>
  8004216f62:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f65:	48 98                	cltq   
  8004216f67:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216f6e:	ff 
  8004216f6f:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216f73:	48 89 c2             	mov    %rax,%rdx
  8004216f76:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216f7d:	00 00 00 
  8004216f80:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216f84:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216f8b:	00 00 00 
  8004216f8e:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216f92:	48 89 c2             	mov    %rax,%rdx
  8004216f95:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216f9c:	00 00 00 
  8004216f9f:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216fa3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216fa6:	48 98                	cltq   
  8004216fa8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216faf:	ff 
  8004216fb0:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216fb4:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004216fbb:	00 00 00 
  8004216fbe:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216fc2:	e9 0a 01 00 00       	jmpq   80042170d1 <read_section_headers+0x71f>
  8004216fc7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216fcb:	48 be db 15 22 04 80 	movabs $0x80042215db,%rsi
  8004216fd2:	00 00 00 
  8004216fd5:	48 89 c7             	mov    %rax,%rdi
  8004216fd8:	48 b8 5b 0e 21 04 80 	movabs $0x8004210e5b,%rax
  8004216fdf:	00 00 00 
  8004216fe2:	ff d0                	callq  *%rax
  8004216fe4:	85 c0                	test   %eax,%eax
  8004216fe6:	0f 85 e5 00 00 00    	jne    80042170d1 <read_section_headers+0x71f>
  8004216fec:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216fef:	48 98                	cltq   
  8004216ff1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ff8:	ff 
  8004216ff9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216ffd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217000:	48 98                	cltq   
  8004217002:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004217009:	ff 
  800421700a:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421700e:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004217015:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217019:	48 01 c8             	add    %rcx,%rax
  800421701c:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004217023:	48 89 c7             	mov    %rax,%rdi
  8004217026:	48 b8 f1 70 21 04 80 	movabs $0x80042170f1,%rax
  800421702d:	00 00 00 
  8004217030:	ff d0                	callq  *%rax
  8004217032:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217035:	48 98                	cltq   
  8004217037:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421703e:	ff 
  800421703f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004217043:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217046:	48 98                	cltq   
  8004217048:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421704f:	ff 
  8004217050:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004217054:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421705b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004217062:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004217068:	48 29 c2             	sub    %rax,%rdx
  800421706b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421706f:	48 01 c2             	add    %rax,%rdx
  8004217072:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217076:	48 01 c2             	add    %rax,%rdx
  8004217079:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004217080:	00 00 00 
  8004217083:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800421708a:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  8004217091:	00 00 00 
  8004217094:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800421709b:	48 89 c2             	mov    %rax,%rdx
  800421709e:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042170a5:	00 00 00 
  80042170a8:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  80042170af:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042170b2:	48 98                	cltq   
  80042170b4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042170bb:	ff 
  80042170bc:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042170c0:	48 b8 c0 66 23 04 80 	movabs $0x80042366c0,%rax
  80042170c7:	00 00 00 
  80042170ca:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042170d1:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042170d5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042170d8:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042170db:	0f 8c f0 fa ff ff    	jl     8004216bd1 <read_section_headers+0x21f>
  80042170e1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042170e5:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042170ec:	48 01 d0             	add    %rdx,%rax
  80042170ef:	c9                   	leaveq 
  80042170f0:	c3                   	retq   

00000080042170f1 <readseg>:
  80042170f1:	55                   	push   %rbp
  80042170f2:	48 89 e5             	mov    %rsp,%rbp
  80042170f5:	48 83 ec 30          	sub    $0x30,%rsp
  80042170f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042170fd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004217101:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004217105:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004217109:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421710d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217111:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217115:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004217119:	48 01 d0             	add    %rdx,%rax
  800421711c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217124:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004217129:	48 85 c0             	test   %rax,%rax
  800421712c:	74 35                	je     8004217163 <readseg+0x72>
  800421712e:	48 b9 25 16 22 04 80 	movabs $0x8004221625,%rcx
  8004217135:	00 00 00 
  8004217138:	48 ba ff 15 22 04 80 	movabs $0x80042215ff,%rdx
  800421713f:	00 00 00 
  8004217142:	be c4 00 00 00       	mov    $0xc4,%esi
  8004217147:	48 bf 14 16 22 04 80 	movabs $0x8004221614,%rdi
  800421714e:	00 00 00 
  8004217151:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217156:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421715d:	00 00 00 
  8004217160:	41 ff d0             	callq  *%r8
  8004217163:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  800421716a:	ff 
  800421716b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421716f:	48 c1 e8 09          	shr    $0x9,%rax
  8004217173:	48 83 c0 01          	add    $0x1,%rax
  8004217177:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421717b:	eb 3c                	jmp    80042171b9 <readseg+0xc8>
  800421717d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217181:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004217185:	48 89 d6             	mov    %rdx,%rsi
  8004217188:	48 89 c7             	mov    %rax,%rdi
  800421718b:	48 b8 81 72 21 04 80 	movabs $0x8004217281,%rax
  8004217192:	00 00 00 
  8004217195:	ff d0                	callq  *%rax
  8004217197:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  800421719e:	00 
  800421719f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042171a3:	48 8b 00             	mov    (%rax),%rax
  80042171a6:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042171ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042171b1:	48 89 10             	mov    %rdx,(%rax)
  80042171b4:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042171b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042171bd:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042171c1:	72 ba                	jb     800421717d <readseg+0x8c>
  80042171c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171c7:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042171cc:	48 89 c2             	mov    %rax,%rdx
  80042171cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171d3:	48 01 d0             	add    %rdx,%rax
  80042171d6:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  80042171dc:	76 2f                	jbe    800421720d <readseg+0x11c>
  80042171de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042171e2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042171e6:	48 89 d6             	mov    %rdx,%rsi
  80042171e9:	48 89 c7             	mov    %rax,%rdi
  80042171ec:	48 b8 81 72 21 04 80 	movabs $0x8004217281,%rax
  80042171f3:	00 00 00 
  80042171f6:	ff d0                	callq  *%rax
  80042171f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042171fc:	48 8b 00             	mov    (%rax),%rax
  80042171ff:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004217206:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421720a:	48 89 10             	mov    %rdx,(%rax)
  800421720d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217211:	48 8b 00             	mov    (%rax),%rax
  8004217214:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004217219:	48 85 c0             	test   %rax,%rax
  800421721c:	74 35                	je     8004217253 <readseg+0x162>
  800421721e:	48 b9 38 16 22 04 80 	movabs $0x8004221638,%rcx
  8004217225:	00 00 00 
  8004217228:	48 ba ff 15 22 04 80 	movabs $0x80042215ff,%rdx
  800421722f:	00 00 00 
  8004217232:	be da 00 00 00       	mov    $0xda,%esi
  8004217237:	48 bf 14 16 22 04 80 	movabs $0x8004221614,%rdi
  800421723e:	00 00 00 
  8004217241:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217246:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421724d:	00 00 00 
  8004217250:	41 ff d0             	callq  *%r8
  8004217253:	c9                   	leaveq 
  8004217254:	c3                   	retq   

0000008004217255 <waitdisk>:
  8004217255:	55                   	push   %rbp
  8004217256:	48 89 e5             	mov    %rsp,%rbp
  8004217259:	48 83 ec 10          	sub    $0x10,%rsp
  800421725d:	90                   	nop
  800421725e:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217265:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217268:	89 c2                	mov    %eax,%edx
  800421726a:	ec                   	in     (%dx),%al
  800421726b:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800421726e:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004217272:	0f b6 c0             	movzbl %al,%eax
  8004217275:	25 c0 00 00 00       	and    $0xc0,%eax
  800421727a:	83 f8 40             	cmp    $0x40,%eax
  800421727d:	75 df                	jne    800421725e <waitdisk+0x9>
  800421727f:	c9                   	leaveq 
  8004217280:	c3                   	retq   

0000008004217281 <readsect>:
  8004217281:	55                   	push   %rbp
  8004217282:	48 89 e5             	mov    %rsp,%rbp
  8004217285:	48 83 ec 60          	sub    $0x60,%rsp
  8004217289:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421728d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004217291:	48 b8 55 72 21 04 80 	movabs $0x8004217255,%rax
  8004217298:	00 00 00 
  800421729b:	ff d0                	callq  *%rax
  800421729d:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  80042172a4:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042172a8:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042172ac:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042172af:	ee                   	out    %al,(%dx)
  80042172b0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042172b4:	0f b6 c0             	movzbl %al,%eax
  80042172b7:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  80042172be:	88 45 f3             	mov    %al,-0xd(%rbp)
  80042172c1:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042172c5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042172c8:	ee                   	out    %al,(%dx)
  80042172c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042172cd:	48 c1 e8 08          	shr    $0x8,%rax
  80042172d1:	0f b6 c0             	movzbl %al,%eax
  80042172d4:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  80042172db:	88 45 eb             	mov    %al,-0x15(%rbp)
  80042172de:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042172e2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042172e5:	ee                   	out    %al,(%dx)
  80042172e6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042172ea:	48 c1 e8 10          	shr    $0x10,%rax
  80042172ee:	0f b6 c0             	movzbl %al,%eax
  80042172f1:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  80042172f8:	88 45 e3             	mov    %al,-0x1d(%rbp)
  80042172fb:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042172ff:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217302:	ee                   	out    %al,(%dx)
  8004217303:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217307:	48 c1 e8 18          	shr    $0x18,%rax
  800421730b:	83 c8 e0             	or     $0xffffffe0,%eax
  800421730e:	0f b6 c0             	movzbl %al,%eax
  8004217311:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  8004217318:	88 45 db             	mov    %al,-0x25(%rbp)
  800421731b:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421731f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217322:	ee                   	out    %al,(%dx)
  8004217323:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  800421732a:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800421732e:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217332:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217335:	ee                   	out    %al,(%dx)
  8004217336:	48 b8 55 72 21 04 80 	movabs $0x8004217255,%rax
  800421733d:	00 00 00 
  8004217340:	ff d0                	callq  *%rax
  8004217342:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004217349:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421734d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004217351:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004217358:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421735b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421735f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004217362:	48 89 ce             	mov    %rcx,%rsi
  8004217365:	48 89 f7             	mov    %rsi,%rdi
  8004217368:	89 c1                	mov    %eax,%ecx
  800421736a:	fc                   	cld    
  800421736b:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  800421736d:	89 c8                	mov    %ecx,%eax
  800421736f:	48 89 fe             	mov    %rdi,%rsi
  8004217372:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004217376:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004217379:	c9                   	leaveq 
  800421737a:	c3                   	retq   
  800421737b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000008004217380 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004217380:	fa                   	cli    
	xorw    %ax, %ax
  8004217381:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004217383:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004217385:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004217387:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004217389:	0f 01 16             	lgdt   (%rsi)
  800421738c:	e0 70                	loopne 80042173fe <start64+0x10>
	movl    %cr0, %eax
  800421738e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004217391:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004217395:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004217398:	ea                   	(bad)  
  8004217399:	1d                   	.byte 0x1d
  800421739a:	70 08                	jo     80042173a4 <start32+0x7>
	...

000000800421739d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  800421739d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042173a1:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042173a3:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042173a5:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042173a7:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042173ab:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042173ad:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  80042173af:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  80042173b4:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  80042173b7:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421e47e <handle_ioinstr+0xe1>
	movl    %cr0, %eax
  80042173be:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042173c1:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  80042173c4:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  80042173c7:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  80042173cc:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  80042173cf:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  80042173d4:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  80042173d6:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  80042173da:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  80042173dc:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  80042173df:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  80042173e4:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  80042173e7:	ea                   	(bad)  
  80042173e8:	6e                   	outsb  %ds:(%rsi),(%dx)
  80042173e9:	70 00                	jo     80042173eb <start32+0x4e>
  80042173eb:	00 08                	add    %cl,(%rax)
	...

00000080042173ee <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  80042173ee:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042173f2:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042173f4:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042173f6:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042173f8:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042173fc:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042173fe:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004217400:	48 a1 e0 d5 6d 04 80 	movabs 0x80046dd5e0,%rax
  8004217407:	00 00 00 
	movq    %rax,%rsp
  800421740a:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  800421740d:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  8004217414:	48 b8 03 04 20 04 80 	movabs $0x8004200403,%rax
  800421741b:	00 00 00 
	call    *%rax
  800421741e:	ff d0                	callq  *%rax

0000008004217420 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004217420:	eb fe                	jmp    8004217420 <spin>
  8004217422:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004217428 <gdt>:
	...
  8004217430:	ff                   	(bad)  
  8004217431:	ff 00                	incl   (%rax)
  8004217433:	00 00                	add    %al,(%rax)
  8004217435:	9a                   	(bad)  
  8004217436:	af                   	scas   %es:(%rdi),%eax
  8004217437:	00 ff                	add    %bh,%bh
  8004217439:	ff 00                	incl   (%rax)
  800421743b:	00 00                	add    %al,(%rax)
  800421743d:	92                   	xchg   %eax,%edx
  800421743e:	af                   	scas   %es:(%rdi),%eax
	...

0000008004217440 <gdtdesc>:
  8004217440:	17                   	(bad)  
  8004217441:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  8004217447:	90                   	nop

0000008004217448 <gdt32>:
	...
  8004217450:	ff                   	(bad)  
  8004217451:	ff 00                	incl   (%rax)
  8004217453:	00 00                	add    %al,(%rax)
  8004217455:	9a                   	(bad)  
  8004217456:	cf                   	iret   
  8004217457:	00 ff                	add    %bh,%bh
  8004217459:	ff 00                	incl   (%rax)
  800421745b:	00 00                	add    %al,(%rax)
  800421745d:	92                   	xchg   %eax,%edx
  800421745e:	cf                   	iret   
	...

0000008004217460 <gdt32desc>:
  8004217460:	17                   	(bad)  
  8004217461:	00 c8                	add    %cl,%al
  8004217463:	70 00                	jo     8004217465 <gdt32desc+0x5>
	...

0000008004217466 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  8004217466:	90                   	nop

0000008004217467 <sum>:
  8004217467:	55                   	push   %rbp
  8004217468:	48 89 e5             	mov    %rsp,%rbp
  800421746b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421746f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217473:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217476:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421747d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217484:	eb 1a                	jmp    80042174a0 <sum+0x39>
  8004217486:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217489:	48 63 d0             	movslq %eax,%rdx
  800421748c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217490:	48 01 d0             	add    %rdx,%rax
  8004217493:	0f b6 00             	movzbl (%rax),%eax
  8004217496:	0f b6 c0             	movzbl %al,%eax
  8004217499:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421749c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042174a0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042174a3:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042174a6:	7c de                	jl     8004217486 <sum+0x1f>
  80042174a8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042174ab:	c9                   	leaveq 
  80042174ac:	c3                   	retq   

00000080042174ad <mpsearch1>:
  80042174ad:	55                   	push   %rbp
  80042174ae:	48 89 e5             	mov    %rsp,%rbp
  80042174b1:	48 83 ec 40          	sub    $0x40,%rsp
  80042174b5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042174b9:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042174bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042174c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042174c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042174c8:	48 c1 e8 0c          	shr    $0xc,%rax
  80042174cc:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042174cf:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042174d2:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042174d9:	00 00 00 
  80042174dc:	48 8b 00             	mov    (%rax),%rax
  80042174df:	48 39 c2             	cmp    %rax,%rdx
  80042174e2:	72 32                	jb     8004217516 <mpsearch1+0x69>
  80042174e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042174e8:	48 89 c1             	mov    %rax,%rcx
  80042174eb:	48 ba 58 16 22 04 80 	movabs $0x8004221658,%rdx
  80042174f2:	00 00 00 
  80042174f5:	be 74 00 00 00       	mov    $0x74,%esi
  80042174fa:	48 bf 7b 16 22 04 80 	movabs $0x800422167b,%rdi
  8004217501:	00 00 00 
  8004217504:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217509:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217510:	00 00 00 
  8004217513:	41 ff d0             	callq  *%r8
  8004217516:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421751d:	00 00 00 
  8004217520:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217524:	48 01 d0             	add    %rdx,%rax
  8004217527:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421752b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421752e:	48 63 d0             	movslq %eax,%rdx
  8004217531:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217535:	48 01 d0             	add    %rdx,%rax
  8004217538:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421753c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217540:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217544:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004217547:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421754a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004217551:	00 00 00 
  8004217554:	48 8b 00             	mov    (%rax),%rax
  8004217557:	48 39 c2             	cmp    %rax,%rdx
  800421755a:	72 32                	jb     800421758e <mpsearch1+0xe1>
  800421755c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217560:	48 89 c1             	mov    %rax,%rcx
  8004217563:	48 ba 58 16 22 04 80 	movabs $0x8004221658,%rdx
  800421756a:	00 00 00 
  800421756d:	be 74 00 00 00       	mov    $0x74,%esi
  8004217572:	48 bf 7b 16 22 04 80 	movabs $0x800422167b,%rdi
  8004217579:	00 00 00 
  800421757c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217581:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217588:	00 00 00 
  800421758b:	41 ff d0             	callq  *%r8
  800421758e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217595:	00 00 00 
  8004217598:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421759c:	48 01 d0             	add    %rdx,%rax
  800421759f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042175a3:	eb 4d                	jmp    80042175f2 <mpsearch1+0x145>
  80042175a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175a9:	ba 04 00 00 00       	mov    $0x4,%edx
  80042175ae:	48 be 8e 16 22 04 80 	movabs $0x800422168e,%rsi
  80042175b5:	00 00 00 
  80042175b8:	48 89 c7             	mov    %rax,%rdi
  80042175bb:	48 b8 68 11 21 04 80 	movabs $0x8004211168,%rax
  80042175c2:	00 00 00 
  80042175c5:	ff d0                	callq  *%rax
  80042175c7:	85 c0                	test   %eax,%eax
  80042175c9:	75 22                	jne    80042175ed <mpsearch1+0x140>
  80042175cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175cf:	be 10 00 00 00       	mov    $0x10,%esi
  80042175d4:	48 89 c7             	mov    %rax,%rdi
  80042175d7:	48 b8 67 74 21 04 80 	movabs $0x8004217467,%rax
  80042175de:	00 00 00 
  80042175e1:	ff d0                	callq  *%rax
  80042175e3:	84 c0                	test   %al,%al
  80042175e5:	75 06                	jne    80042175ed <mpsearch1+0x140>
  80042175e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175eb:	eb 14                	jmp    8004217601 <mpsearch1+0x154>
  80042175ed:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  80042175f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175f6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042175fa:	72 a9                	jb     80042175a5 <mpsearch1+0xf8>
  80042175fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217601:	c9                   	leaveq 
  8004217602:	c3                   	retq   

0000008004217603 <mpsearch>:
  8004217603:	55                   	push   %rbp
  8004217604:	48 89 e5             	mov    %rsp,%rbp
  8004217607:	48 83 ec 30          	sub    $0x30,%rsp
  800421760b:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004217612:	00 
  8004217613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217617:	48 c1 e8 0c          	shr    $0xc,%rax
  800421761b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421761e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004217621:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004217628:	00 00 00 
  800421762b:	48 8b 00             	mov    (%rax),%rax
  800421762e:	48 39 c2             	cmp    %rax,%rdx
  8004217631:	72 32                	jb     8004217665 <mpsearch+0x62>
  8004217633:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217637:	48 89 c1             	mov    %rax,%rcx
  800421763a:	48 ba 58 16 22 04 80 	movabs $0x8004221658,%rdx
  8004217641:	00 00 00 
  8004217644:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004217649:	48 bf 7b 16 22 04 80 	movabs $0x800422167b,%rdi
  8004217650:	00 00 00 
  8004217653:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217658:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421765f:	00 00 00 
  8004217662:	41 ff d0             	callq  *%r8
  8004217665:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421766c:	00 00 00 
  800421766f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217673:	48 01 d0             	add    %rdx,%rax
  8004217676:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421767a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421767e:	48 83 c0 0e          	add    $0xe,%rax
  8004217682:	0f b7 00             	movzwl (%rax),%eax
  8004217685:	0f b7 c0             	movzwl %ax,%eax
  8004217688:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421768b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421768f:	74 2c                	je     80042176bd <mpsearch+0xba>
  8004217691:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004217695:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217698:	be 00 04 00 00       	mov    $0x400,%esi
  800421769d:	48 89 c7             	mov    %rax,%rdi
  80042176a0:	48 b8 ad 74 21 04 80 	movabs $0x80042174ad,%rax
  80042176a7:	00 00 00 
  80042176aa:	ff d0                	callq  *%rax
  80042176ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042176b0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042176b5:	74 49                	je     8004217700 <mpsearch+0xfd>
  80042176b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042176bb:	eb 59                	jmp    8004217716 <mpsearch+0x113>
  80042176bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042176c1:	48 83 c0 13          	add    $0x13,%rax
  80042176c5:	0f b7 00             	movzwl (%rax),%eax
  80042176c8:	0f b7 c0             	movzwl %ax,%eax
  80042176cb:	c1 e0 0a             	shl    $0xa,%eax
  80042176ce:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042176d1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042176d4:	2d 00 04 00 00       	sub    $0x400,%eax
  80042176d9:	89 c0                	mov    %eax,%eax
  80042176db:	be 00 04 00 00       	mov    $0x400,%esi
  80042176e0:	48 89 c7             	mov    %rax,%rdi
  80042176e3:	48 b8 ad 74 21 04 80 	movabs $0x80042174ad,%rax
  80042176ea:	00 00 00 
  80042176ed:	ff d0                	callq  *%rax
  80042176ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042176f3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042176f8:	74 06                	je     8004217700 <mpsearch+0xfd>
  80042176fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042176fe:	eb 16                	jmp    8004217716 <mpsearch+0x113>
  8004217700:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217705:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  800421770a:	48 b8 ad 74 21 04 80 	movabs $0x80042174ad,%rax
  8004217711:	00 00 00 
  8004217714:	ff d0                	callq  *%rax
  8004217716:	c9                   	leaveq 
  8004217717:	c3                   	retq   

0000008004217718 <mpconfig>:
  8004217718:	55                   	push   %rbp
  8004217719:	48 89 e5             	mov    %rsp,%rbp
  800421771c:	48 83 ec 30          	sub    $0x30,%rsp
  8004217720:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004217724:	48 b8 03 76 21 04 80 	movabs $0x8004217603,%rax
  800421772b:	00 00 00 
  800421772e:	ff d0                	callq  *%rax
  8004217730:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217734:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217739:	75 0a                	jne    8004217745 <mpconfig+0x2d>
  800421773b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217740:	e9 f6 01 00 00       	jmpq   800421793b <mpconfig+0x223>
  8004217745:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217749:	8b 40 04             	mov    0x4(%rax),%eax
  800421774c:	85 c0                	test   %eax,%eax
  800421774e:	74 0c                	je     800421775c <mpconfig+0x44>
  8004217750:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217754:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004217758:	84 c0                	test   %al,%al
  800421775a:	74 25                	je     8004217781 <mpconfig+0x69>
  800421775c:	48 bf 98 16 22 04 80 	movabs $0x8004221698,%rdi
  8004217763:	00 00 00 
  8004217766:	b8 00 00 00 00       	mov    $0x0,%eax
  800421776b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217772:	00 00 00 
  8004217775:	ff d2                	callq  *%rdx
  8004217777:	b8 00 00 00 00       	mov    $0x0,%eax
  800421777c:	e9 ba 01 00 00       	jmpq   800421793b <mpconfig+0x223>
  8004217781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217785:	8b 40 04             	mov    0x4(%rax),%eax
  8004217788:	89 c0                	mov    %eax,%eax
  800421778a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421778e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217792:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217796:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217799:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421779c:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042177a3:	00 00 00 
  80042177a6:	48 8b 00             	mov    (%rax),%rax
  80042177a9:	48 39 c2             	cmp    %rax,%rdx
  80042177ac:	72 32                	jb     80042177e0 <mpconfig+0xc8>
  80042177ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042177b2:	48 89 c1             	mov    %rax,%rcx
  80042177b5:	48 ba 58 16 22 04 80 	movabs $0x8004221658,%rdx
  80042177bc:	00 00 00 
  80042177bf:	be ad 00 00 00       	mov    $0xad,%esi
  80042177c4:	48 bf 7b 16 22 04 80 	movabs $0x800422167b,%rdi
  80042177cb:	00 00 00 
  80042177ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177d3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042177da:	00 00 00 
  80042177dd:	41 ff d0             	callq  *%r8
  80042177e0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042177e7:	00 00 00 
  80042177ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042177ee:	48 01 d0             	add    %rdx,%rax
  80042177f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042177f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042177f9:	ba 04 00 00 00       	mov    $0x4,%edx
  80042177fe:	48 be c5 16 22 04 80 	movabs $0x80042216c5,%rsi
  8004217805:	00 00 00 
  8004217808:	48 89 c7             	mov    %rax,%rdi
  800421780b:	48 b8 68 11 21 04 80 	movabs $0x8004211168,%rax
  8004217812:	00 00 00 
  8004217815:	ff d0                	callq  *%rax
  8004217817:	85 c0                	test   %eax,%eax
  8004217819:	74 25                	je     8004217840 <mpconfig+0x128>
  800421781b:	48 bf d0 16 22 04 80 	movabs $0x80042216d0,%rdi
  8004217822:	00 00 00 
  8004217825:	b8 00 00 00 00       	mov    $0x0,%eax
  800421782a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217831:	00 00 00 
  8004217834:	ff d2                	callq  *%rdx
  8004217836:	b8 00 00 00 00       	mov    $0x0,%eax
  800421783b:	e9 fb 00 00 00       	jmpq   800421793b <mpconfig+0x223>
  8004217840:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217844:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004217848:	0f b7 d0             	movzwl %ax,%edx
  800421784b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421784f:	89 d6                	mov    %edx,%esi
  8004217851:	48 89 c7             	mov    %rax,%rdi
  8004217854:	48 b8 67 74 21 04 80 	movabs $0x8004217467,%rax
  800421785b:	00 00 00 
  800421785e:	ff d0                	callq  *%rax
  8004217860:	84 c0                	test   %al,%al
  8004217862:	74 25                	je     8004217889 <mpconfig+0x171>
  8004217864:	48 bf 08 17 22 04 80 	movabs $0x8004221708,%rdi
  800421786b:	00 00 00 
  800421786e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217873:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421787a:	00 00 00 
  800421787d:	ff d2                	callq  *%rdx
  800421787f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217884:	e9 b2 00 00 00       	jmpq   800421793b <mpconfig+0x223>
  8004217889:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421788d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217891:	3c 01                	cmp    $0x1,%al
  8004217893:	74 3b                	je     80042178d0 <mpconfig+0x1b8>
  8004217895:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217899:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  800421789d:	3c 04                	cmp    $0x4,%al
  800421789f:	74 2f                	je     80042178d0 <mpconfig+0x1b8>
  80042178a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042178a5:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042178a9:	0f b6 c0             	movzbl %al,%eax
  80042178ac:	89 c6                	mov    %eax,%esi
  80042178ae:	48 bf 30 17 22 04 80 	movabs $0x8004221730,%rdi
  80042178b5:	00 00 00 
  80042178b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178bd:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042178c4:	00 00 00 
  80042178c7:	ff d2                	callq  *%rdx
  80042178c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178ce:	eb 6b                	jmp    800421793b <mpconfig+0x223>
  80042178d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042178d4:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  80042178d8:	0f b7 c0             	movzwl %ax,%eax
  80042178db:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042178df:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  80042178e3:	0f b7 ca             	movzwl %dx,%ecx
  80042178e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042178ea:	48 01 ca             	add    %rcx,%rdx
  80042178ed:	89 c6                	mov    %eax,%esi
  80042178ef:	48 89 d7             	mov    %rdx,%rdi
  80042178f2:	48 b8 67 74 21 04 80 	movabs $0x8004217467,%rax
  80042178f9:	00 00 00 
  80042178fc:	ff d0                	callq  *%rax
  80042178fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217902:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  8004217906:	38 d0                	cmp    %dl,%al
  8004217908:	74 22                	je     800421792c <mpconfig+0x214>
  800421790a:	48 bf 50 17 22 04 80 	movabs $0x8004221750,%rdi
  8004217911:	00 00 00 
  8004217914:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217919:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217920:	00 00 00 
  8004217923:	ff d2                	callq  *%rdx
  8004217925:	b8 00 00 00 00       	mov    $0x0,%eax
  800421792a:	eb 0f                	jmp    800421793b <mpconfig+0x223>
  800421792c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217930:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004217934:	48 89 10             	mov    %rdx,(%rax)
  8004217937:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421793b:	c9                   	leaveq 
  800421793c:	c3                   	retq   

000000800421793d <mp_init>:
  800421793d:	55                   	push   %rbp
  800421793e:	48 89 e5             	mov    %rsp,%rbp
  8004217941:	53                   	push   %rbx
  8004217942:	48 83 ec 58          	sub    $0x58,%rsp
  8004217946:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  800421794d:	00 00 00 
  8004217950:	48 bb 20 f0 6d 04 80 	movabs $0x80046df020,%rbx
  8004217957:	00 00 00 
  800421795a:	48 89 18             	mov    %rbx,(%rax)
  800421795d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217961:	48 89 c7             	mov    %rax,%rdi
  8004217964:	48 b8 18 77 21 04 80 	movabs $0x8004217718,%rax
  800421796b:	00 00 00 
  800421796e:	ff d0                	callq  *%rax
  8004217970:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217974:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217979:	75 05                	jne    8004217980 <mp_init+0x43>
  800421797b:	e9 d2 03 00 00       	jmpq   8004217d52 <mp_init+0x415>
  8004217980:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  8004217987:	00 00 00 
  800421798a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217994:	8b 40 24             	mov    0x24(%rax),%eax
  8004217997:	89 c2                	mov    %eax,%edx
  8004217999:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  80042179a0:	00 00 00 
  80042179a3:	48 89 10             	mov    %rdx,(%rax)
  80042179a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042179aa:	48 83 c0 2c          	add    $0x2c,%rax
  80042179ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042179b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042179b9:	e9 17 02 00 00       	jmpq   8004217bd5 <mp_init+0x298>
  80042179be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042179c2:	0f b6 00             	movzbl (%rax),%eax
  80042179c5:	0f b6 c0             	movzbl %al,%eax
  80042179c8:	85 c0                	test   %eax,%eax
  80042179ca:	74 16                	je     80042179e2 <mp_init+0xa5>
  80042179cc:	85 c0                	test   %eax,%eax
  80042179ce:	0f 88 b8 01 00 00    	js     8004217b8c <mp_init+0x24f>
  80042179d4:	83 f8 04             	cmp    $0x4,%eax
  80042179d7:	0f 8f af 01 00 00    	jg     8004217b8c <mp_init+0x24f>
  80042179dd:	e9 a3 01 00 00       	jmpq   8004217b85 <mp_init+0x248>
  80042179e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042179e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042179ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042179ee:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042179f2:	0f b6 c0             	movzbl %al,%eax
  80042179f5:	83 e0 02             	and    $0x2,%eax
  80042179f8:	85 c0                	test   %eax,%eax
  80042179fa:	74 51                	je     8004217a4d <mp_init+0x110>
  80042179fc:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217a03:	00 00 00 
  8004217a06:	8b 00                	mov    (%rax),%eax
  8004217a08:	48 98                	cltq   
  8004217a0a:	48 c1 e0 03          	shl    $0x3,%rax
  8004217a0e:	48 89 c2             	mov    %rax,%rdx
  8004217a11:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217a15:	48 01 d0             	add    %rdx,%rax
  8004217a18:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217a1f:	00 00 00 
  8004217a22:	48 01 c2             	add    %rax,%rdx
  8004217a25:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217a2c:	00 00 00 
  8004217a2f:	48 89 10             	mov    %rdx,(%rax)
  8004217a32:	48 bf 7d 17 22 04 80 	movabs $0x800422177d,%rdi
  8004217a39:	00 00 00 
  8004217a3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a41:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217a48:	00 00 00 
  8004217a4b:	ff d2                	callq  *%rdx
  8004217a4d:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217a54:	00 00 00 
  8004217a57:	8b 00                	mov    (%rax),%eax
  8004217a59:	83 f8 03             	cmp    $0x3,%eax
  8004217a5c:	0f 8f f4 00 00 00    	jg     8004217b56 <mp_init+0x219>
  8004217a62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a66:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004217a6a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a6e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217a72:	0f b6 f0             	movzbl %al,%esi
  8004217a75:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a79:	8b 78 08             	mov    0x8(%rax),%edi
  8004217a7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a80:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004217a84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a88:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004217a8c:	0f b6 c8             	movzbl %al,%ecx
  8004217a8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a93:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217a97:	0f b6 d0             	movzbl %al,%edx
  8004217a9a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217a9e:	0f b6 00             	movzbl (%rax),%eax
  8004217aa1:	0f b6 c0             	movzbl %al,%eax
  8004217aa4:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004217aa9:	89 34 24             	mov    %esi,(%rsp)
  8004217aac:	41 89 f9             	mov    %edi,%r9d
  8004217aaf:	4d 89 d0             	mov    %r10,%r8
  8004217ab2:	89 c6                	mov    %eax,%esi
  8004217ab4:	48 bf 90 17 22 04 80 	movabs $0x8004221790,%rdi
  8004217abb:	00 00 00 
  8004217abe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ac3:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004217aca:	00 00 00 
  8004217acd:	41 ff d2             	callq  *%r10
  8004217ad0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217ad4:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217ad8:	0f b6 c0             	movzbl %al,%eax
  8004217adb:	83 e0 01             	and    $0x1,%eax
  8004217ade:	85 c0                	test   %eax,%eax
  8004217ae0:	74 57                	je     8004217b39 <mp_init+0x1fc>
  8004217ae2:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217ae9:	00 00 00 
  8004217aec:	8b 30                	mov    (%rax),%esi
  8004217aee:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217af5:	00 00 00 
  8004217af8:	8b 00                	mov    (%rax),%eax
  8004217afa:	89 c2                	mov    %eax,%edx
  8004217afc:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  8004217b03:	00 00 00 
  8004217b06:	48 63 c6             	movslq %esi,%rax
  8004217b09:	48 c1 e0 03          	shl    $0x3,%rax
  8004217b0d:	48 89 c6             	mov    %rax,%rsi
  8004217b10:	48 c1 e6 04          	shl    $0x4,%rsi
  8004217b14:	48 01 f0             	add    %rsi,%rax
  8004217b17:	48 01 c8             	add    %rcx,%rax
  8004217b1a:	88 10                	mov    %dl,(%rax)
  8004217b1c:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217b23:	00 00 00 
  8004217b26:	8b 00                	mov    (%rax),%eax
  8004217b28:	8d 50 01             	lea    0x1(%rax),%edx
  8004217b2b:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217b32:	00 00 00 
  8004217b35:	89 10                	mov    %edx,(%rax)
  8004217b37:	eb 45                	jmp    8004217b7e <mp_init+0x241>
  8004217b39:	48 bf e0 17 22 04 80 	movabs $0x80042217e0,%rdi
  8004217b40:	00 00 00 
  8004217b43:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b48:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217b4f:	00 00 00 
  8004217b52:	ff d2                	callq  *%rdx
  8004217b54:	eb 28                	jmp    8004217b7e <mp_init+0x241>
  8004217b56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217b5a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217b5e:	0f b6 c0             	movzbl %al,%eax
  8004217b61:	89 c6                	mov    %eax,%esi
  8004217b63:	48 bf 10 18 22 04 80 	movabs $0x8004221810,%rdi
  8004217b6a:	00 00 00 
  8004217b6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b72:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217b79:	00 00 00 
  8004217b7c:	ff d2                	callq  *%rdx
  8004217b7e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004217b83:	eb 4c                	jmp    8004217bd1 <mp_init+0x294>
  8004217b85:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004217b8a:	eb 45                	jmp    8004217bd1 <mp_init+0x294>
  8004217b8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217b90:	0f b6 00             	movzbl (%rax),%eax
  8004217b93:	0f b6 c0             	movzbl %al,%eax
  8004217b96:	89 c6                	mov    %eax,%esi
  8004217b98:	48 bf 38 18 22 04 80 	movabs $0x8004221838,%rdi
  8004217b9f:	00 00 00 
  8004217ba2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ba7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217bae:	00 00 00 
  8004217bb1:	ff d2                	callq  *%rdx
  8004217bb3:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  8004217bba:	00 00 00 
  8004217bbd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217bc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217bc7:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217bcb:	0f b7 c0             	movzwl %ax,%eax
  8004217bce:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217bd1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217bd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217bd9:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217bdd:	0f b7 c0             	movzwl %ax,%eax
  8004217be0:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004217be3:	0f 87 d5 fd ff ff    	ja     80042179be <mp_init+0x81>
  8004217be9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217bf0:	eb 53                	jmp    8004217c45 <mp_init+0x308>
  8004217bf2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217bf9:	00 00 00 
  8004217bfc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217bff:	48 c1 e0 03          	shl    $0x3,%rax
  8004217c03:	48 89 c1             	mov    %rax,%rcx
  8004217c06:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217c0a:	48 01 c8             	add    %rcx,%rax
  8004217c0d:	48 01 d0             	add    %rdx,%rax
  8004217c10:	48 83 c0 70          	add    $0x70,%rax
  8004217c14:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217c18:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217c1f:	00 00 00 
  8004217c22:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217c25:	48 c1 e0 03          	shl    $0x3,%rax
  8004217c29:	48 89 c1             	mov    %rax,%rcx
  8004217c2c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217c30:	48 01 c8             	add    %rcx,%rax
  8004217c33:	48 01 d0             	add    %rdx,%rax
  8004217c36:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004217c3a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217c41:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217c45:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217c49:	76 a7                	jbe    8004217bf2 <mp_init+0x2b5>
  8004217c4b:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217c52:	00 00 00 
  8004217c55:	48 8b 00             	mov    (%rax),%rax
  8004217c58:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004217c5f:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  8004217c66:	00 00 00 
  8004217c69:	8b 00                	mov    (%rax),%eax
  8004217c6b:	85 c0                	test   %eax,%eax
  8004217c6d:	75 41                	jne    8004217cb0 <mp_init+0x373>
  8004217c6f:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217c76:	00 00 00 
  8004217c79:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217c7f:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  8004217c86:	00 00 00 
  8004217c89:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217c90:	48 bf 58 18 22 04 80 	movabs $0x8004221858,%rdi
  8004217c97:	00 00 00 
  8004217c9a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c9f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217ca6:	00 00 00 
  8004217ca9:	ff d2                	callq  *%rdx
  8004217cab:	e9 a2 00 00 00       	jmpq   8004217d52 <mp_init+0x415>
  8004217cb0:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217cb7:	00 00 00 
  8004217cba:	8b 10                	mov    (%rax),%edx
  8004217cbc:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217cc3:	00 00 00 
  8004217cc6:	48 8b 00             	mov    (%rax),%rax
  8004217cc9:	0f b6 00             	movzbl (%rax),%eax
  8004217ccc:	0f b6 c0             	movzbl %al,%eax
  8004217ccf:	89 c6                	mov    %eax,%esi
  8004217cd1:	48 bf 84 18 22 04 80 	movabs $0x8004221884,%rdi
  8004217cd8:	00 00 00 
  8004217cdb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ce0:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004217ce7:	00 00 00 
  8004217cea:	ff d1                	callq  *%rcx
  8004217cec:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004217cf0:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217cf4:	84 c0                	test   %al,%al
  8004217cf6:	74 5a                	je     8004217d52 <mp_init+0x415>
  8004217cf8:	48 bf a8 18 22 04 80 	movabs $0x80042218a8,%rdi
  8004217cff:	00 00 00 
  8004217d02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d07:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217d0e:	00 00 00 
  8004217d11:	ff d2                	callq  *%rdx
  8004217d13:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004217d1a:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217d1e:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004217d22:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217d25:	ee                   	out    %al,(%dx)
  8004217d26:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217d2d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217d30:	89 c2                	mov    %eax,%edx
  8004217d32:	ec                   	in     (%dx),%al
  8004217d33:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004217d36:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004217d3a:	83 c8 01             	or     $0x1,%eax
  8004217d3d:	0f b6 c0             	movzbl %al,%eax
  8004217d40:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004217d47:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217d4a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004217d4e:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217d51:	ee                   	out    %al,(%dx)
  8004217d52:	48 83 c4 58          	add    $0x58,%rsp
  8004217d56:	5b                   	pop    %rbx
  8004217d57:	5d                   	pop    %rbp
  8004217d58:	c3                   	retq   

0000008004217d59 <lapicw>:
  8004217d59:	55                   	push   %rbp
  8004217d5a:	48 89 e5             	mov    %rsp,%rbp
  8004217d5d:	48 83 ec 08          	sub    $0x8,%rsp
  8004217d61:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217d64:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217d67:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217d6e:	00 00 00 
  8004217d71:	48 8b 00             	mov    (%rax),%rax
  8004217d74:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217d77:	48 63 d2             	movslq %edx,%rdx
  8004217d7a:	48 c1 e2 02          	shl    $0x2,%rdx
  8004217d7e:	48 01 c2             	add    %rax,%rdx
  8004217d81:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217d84:	89 02                	mov    %eax,(%rdx)
  8004217d86:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217d8d:	00 00 00 
  8004217d90:	48 8b 00             	mov    (%rax),%rax
  8004217d93:	48 83 c0 20          	add    $0x20,%rax
  8004217d97:	8b 00                	mov    (%rax),%eax
  8004217d99:	c9                   	leaveq 
  8004217d9a:	c3                   	retq   

0000008004217d9b <lapic_init>:
  8004217d9b:	55                   	push   %rbp
  8004217d9c:	48 89 e5             	mov    %rsp,%rbp
  8004217d9f:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  8004217da6:	00 00 00 
  8004217da9:	48 8b 00             	mov    (%rax),%rax
  8004217dac:	48 85 c0             	test   %rax,%rax
  8004217daf:	75 05                	jne    8004217db6 <lapic_init+0x1b>
  8004217db1:	e9 da 01 00 00       	jmpq   8004217f90 <lapic_init+0x1f5>
  8004217db6:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  8004217dbd:	00 00 00 
  8004217dc0:	48 8b 00             	mov    (%rax),%rax
  8004217dc3:	be 00 10 00 00       	mov    $0x1000,%esi
  8004217dc8:	48 89 c7             	mov    %rax,%rdi
  8004217dcb:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  8004217dd2:	00 00 00 
  8004217dd5:	ff d0                	callq  *%rax
  8004217dd7:	48 ba 08 00 72 04 80 	movabs $0x8004720008,%rdx
  8004217dde:	00 00 00 
  8004217de1:	48 89 02             	mov    %rax,(%rdx)
  8004217de4:	be 27 01 00 00       	mov    $0x127,%esi
  8004217de9:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004217dee:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217df5:	00 00 00 
  8004217df8:	ff d0                	callq  *%rax
  8004217dfa:	be 0b 00 00 00       	mov    $0xb,%esi
  8004217dff:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004217e04:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217e0b:	00 00 00 
  8004217e0e:	ff d0                	callq  *%rax
  8004217e10:	be 20 00 02 00       	mov    $0x20020,%esi
  8004217e15:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217e1a:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217e21:	00 00 00 
  8004217e24:	ff d0                	callq  *%rax
  8004217e26:	be 80 96 98 00       	mov    $0x989680,%esi
  8004217e2b:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217e30:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217e37:	00 00 00 
  8004217e3a:	ff d0                	callq  *%rax
  8004217e3c:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004217e43:	00 00 00 
  8004217e46:	ff d0                	callq  *%rax
  8004217e48:	48 98                	cltq   
  8004217e4a:	48 c1 e0 03          	shl    $0x3,%rax
  8004217e4e:	48 89 c2             	mov    %rax,%rdx
  8004217e51:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217e55:	48 01 d0             	add    %rdx,%rax
  8004217e58:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217e5f:	00 00 00 
  8004217e62:	48 01 c2             	add    %rax,%rdx
  8004217e65:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217e6c:	00 00 00 
  8004217e6f:	48 8b 00             	mov    (%rax),%rax
  8004217e72:	48 39 c2             	cmp    %rax,%rdx
  8004217e75:	74 16                	je     8004217e8d <lapic_init+0xf2>
  8004217e77:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217e7c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217e81:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217e88:	00 00 00 
  8004217e8b:	ff d0                	callq  *%rax
  8004217e8d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217e92:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217e97:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217e9e:	00 00 00 
  8004217ea1:	ff d0                	callq  *%rax
  8004217ea3:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217eaa:	00 00 00 
  8004217ead:	48 8b 00             	mov    (%rax),%rax
  8004217eb0:	48 83 c0 30          	add    $0x30,%rax
  8004217eb4:	8b 00                	mov    (%rax),%eax
  8004217eb6:	c1 e8 10             	shr    $0x10,%eax
  8004217eb9:	0f b6 c0             	movzbl %al,%eax
  8004217ebc:	83 f8 03             	cmp    $0x3,%eax
  8004217ebf:	76 16                	jbe    8004217ed7 <lapic_init+0x13c>
  8004217ec1:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217ec6:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004217ecb:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217ed2:	00 00 00 
  8004217ed5:	ff d0                	callq  *%rax
  8004217ed7:	be 33 00 00 00       	mov    $0x33,%esi
  8004217edc:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004217ee1:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217ee8:	00 00 00 
  8004217eeb:	ff d0                	callq  *%rax
  8004217eed:	be 00 00 00 00       	mov    $0x0,%esi
  8004217ef2:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217ef7:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217efe:	00 00 00 
  8004217f01:	ff d0                	callq  *%rax
  8004217f03:	be 00 00 00 00       	mov    $0x0,%esi
  8004217f08:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217f0d:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217f14:	00 00 00 
  8004217f17:	ff d0                	callq  *%rax
  8004217f19:	be 00 00 00 00       	mov    $0x0,%esi
  8004217f1e:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217f23:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217f2a:	00 00 00 
  8004217f2d:	ff d0                	callq  *%rax
  8004217f2f:	be 00 00 00 00       	mov    $0x0,%esi
  8004217f34:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217f39:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217f40:	00 00 00 
  8004217f43:	ff d0                	callq  *%rax
  8004217f45:	be 00 85 08 00       	mov    $0x88500,%esi
  8004217f4a:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217f4f:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217f56:	00 00 00 
  8004217f59:	ff d0                	callq  *%rax
  8004217f5b:	90                   	nop
  8004217f5c:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217f63:	00 00 00 
  8004217f66:	48 8b 00             	mov    (%rax),%rax
  8004217f69:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217f6f:	8b 00                	mov    (%rax),%eax
  8004217f71:	25 00 10 00 00       	and    $0x1000,%eax
  8004217f76:	85 c0                	test   %eax,%eax
  8004217f78:	75 e2                	jne    8004217f5c <lapic_init+0x1c1>
  8004217f7a:	be 00 00 00 00       	mov    $0x0,%esi
  8004217f7f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217f84:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217f8b:	00 00 00 
  8004217f8e:	ff d0                	callq  *%rax
  8004217f90:	5d                   	pop    %rbp
  8004217f91:	c3                   	retq   

0000008004217f92 <cpunum>:
  8004217f92:	55                   	push   %rbp
  8004217f93:	48 89 e5             	mov    %rsp,%rbp
  8004217f96:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217f9d:	00 00 00 
  8004217fa0:	48 8b 00             	mov    (%rax),%rax
  8004217fa3:	48 85 c0             	test   %rax,%rax
  8004217fa6:	74 18                	je     8004217fc0 <cpunum+0x2e>
  8004217fa8:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217faf:	00 00 00 
  8004217fb2:	48 8b 00             	mov    (%rax),%rax
  8004217fb5:	48 83 c0 20          	add    $0x20,%rax
  8004217fb9:	8b 00                	mov    (%rax),%eax
  8004217fbb:	c1 e8 18             	shr    $0x18,%eax
  8004217fbe:	eb 05                	jmp    8004217fc5 <cpunum+0x33>
  8004217fc0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217fc5:	5d                   	pop    %rbp
  8004217fc6:	c3                   	retq   

0000008004217fc7 <lapic_eoi>:
  8004217fc7:	55                   	push   %rbp
  8004217fc8:	48 89 e5             	mov    %rsp,%rbp
  8004217fcb:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217fd2:	00 00 00 
  8004217fd5:	48 8b 00             	mov    (%rax),%rax
  8004217fd8:	48 85 c0             	test   %rax,%rax
  8004217fdb:	74 16                	je     8004217ff3 <lapic_eoi+0x2c>
  8004217fdd:	be 00 00 00 00       	mov    $0x0,%esi
  8004217fe2:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217fe7:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004217fee:	00 00 00 
  8004217ff1:	ff d0                	callq  *%rax
  8004217ff3:	5d                   	pop    %rbp
  8004217ff4:	c3                   	retq   

0000008004217ff5 <microdelay>:
  8004217ff5:	55                   	push   %rbp
  8004217ff6:	48 89 e5             	mov    %rsp,%rbp
  8004217ff9:	48 83 ec 04          	sub    $0x4,%rsp
  8004217ffd:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004218000:	c9                   	leaveq 
  8004218001:	c3                   	retq   

0000008004218002 <lapic_startap>:
  8004218002:	55                   	push   %rbp
  8004218003:	48 89 e5             	mov    %rsp,%rbp
  8004218006:	48 83 ec 40          	sub    $0x40,%rsp
  800421800a:	89 f8                	mov    %edi,%eax
  800421800c:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800421800f:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004218012:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004218019:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  800421801d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004218021:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004218024:	ee                   	out    %al,(%dx)
  8004218025:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  800421802c:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004218030:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004218034:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004218037:	ee                   	out    %al,(%dx)
  8004218038:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  800421803f:	00 
  8004218040:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218044:	48 c1 e8 0c          	shr    $0xc,%rax
  8004218048:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421804b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421804e:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004218055:	00 00 00 
  8004218058:	48 8b 00             	mov    (%rax),%rax
  800421805b:	48 39 c2             	cmp    %rax,%rdx
  800421805e:	72 32                	jb     8004218092 <lapic_startap+0x90>
  8004218060:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218064:	48 89 c1             	mov    %rax,%rcx
  8004218067:	48 ba f0 18 22 04 80 	movabs $0x80042218f0,%rdx
  800421806e:	00 00 00 
  8004218071:	be 99 00 00 00       	mov    $0x99,%esi
  8004218076:	48 bf 13 19 22 04 80 	movabs $0x8004221913,%rdi
  800421807d:	00 00 00 
  8004218080:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218085:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421808c:	00 00 00 
  800421808f:	41 ff d0             	callq  *%r8
  8004218092:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004218099:	00 00 00 
  800421809c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042180a0:	48 01 d0             	add    %rdx,%rax
  80042180a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042180a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042180ab:	66 c7 00 00 00       	movw   $0x0,(%rax)
  80042180b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042180b4:	48 8d 50 02          	lea    0x2(%rax),%rdx
  80042180b8:	8b 45 c8             	mov    -0x38(%rbp),%eax
  80042180bb:	c1 e8 04             	shr    $0x4,%eax
  80042180be:	66 89 02             	mov    %ax,(%rdx)
  80042180c1:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042180c5:	c1 e0 18             	shl    $0x18,%eax
  80042180c8:	89 c6                	mov    %eax,%esi
  80042180ca:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042180cf:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  80042180d6:	00 00 00 
  80042180d9:	ff d0                	callq  *%rax
  80042180db:	be 00 c5 00 00       	mov    $0xc500,%esi
  80042180e0:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042180e5:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  80042180ec:	00 00 00 
  80042180ef:	ff d0                	callq  *%rax
  80042180f1:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042180f6:	48 b8 f5 7f 21 04 80 	movabs $0x8004217ff5,%rax
  80042180fd:	00 00 00 
  8004218100:	ff d0                	callq  *%rax
  8004218102:	be 00 85 00 00       	mov    $0x8500,%esi
  8004218107:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421810c:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004218113:	00 00 00 
  8004218116:	ff d0                	callq  *%rax
  8004218118:	bf 64 00 00 00       	mov    $0x64,%edi
  800421811d:	48 b8 f5 7f 21 04 80 	movabs $0x8004217ff5,%rax
  8004218124:	00 00 00 
  8004218127:	ff d0                	callq  *%rax
  8004218129:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218130:	eb 4b                	jmp    800421817d <lapic_startap+0x17b>
  8004218132:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004218136:	c1 e0 18             	shl    $0x18,%eax
  8004218139:	89 c6                	mov    %eax,%esi
  800421813b:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004218140:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004218147:	00 00 00 
  800421814a:	ff d0                	callq  *%rax
  800421814c:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421814f:	c1 e8 0c             	shr    $0xc,%eax
  8004218152:	80 cc 06             	or     $0x6,%ah
  8004218155:	89 c6                	mov    %eax,%esi
  8004218157:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421815c:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  8004218163:	00 00 00 
  8004218166:	ff d0                	callq  *%rax
  8004218168:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421816d:	48 b8 f5 7f 21 04 80 	movabs $0x8004217ff5,%rax
  8004218174:	00 00 00 
  8004218177:	ff d0                	callq  *%rax
  8004218179:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421817d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004218181:	7e af                	jle    8004218132 <lapic_startap+0x130>
  8004218183:	c9                   	leaveq 
  8004218184:	c3                   	retq   

0000008004218185 <lapic_ipi>:
  8004218185:	55                   	push   %rbp
  8004218186:	48 89 e5             	mov    %rsp,%rbp
  8004218189:	48 83 ec 08          	sub    $0x8,%rsp
  800421818d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004218190:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218193:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004218198:	89 c6                	mov    %eax,%esi
  800421819a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421819f:	48 b8 59 7d 21 04 80 	movabs $0x8004217d59,%rax
  80042181a6:	00 00 00 
  80042181a9:	ff d0                	callq  *%rax
  80042181ab:	90                   	nop
  80042181ac:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  80042181b3:	00 00 00 
  80042181b6:	48 8b 00             	mov    (%rax),%rax
  80042181b9:	48 05 00 03 00 00    	add    $0x300,%rax
  80042181bf:	8b 00                	mov    (%rax),%eax
  80042181c1:	25 00 10 00 00       	and    $0x1000,%eax
  80042181c6:	85 c0                	test   %eax,%eax
  80042181c8:	75 e2                	jne    80042181ac <lapic_ipi+0x27>
  80042181ca:	c9                   	leaveq 
  80042181cb:	c3                   	retq   

00000080042181cc <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042181cc:	55                   	push   %rbp
  80042181cd:	48 89 e5             	mov    %rsp,%rbp
  80042181d0:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042181d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042181d8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042181db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042181df:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042181e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042181e6:	f0 87 02             	lock xchg %eax,(%rdx)
  80042181e9:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042181ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042181ef:	c9                   	leaveq 
  80042181f0:	c3                   	retq   

00000080042181f1 <get_caller_pcs>:
  80042181f1:	55                   	push   %rbp
  80042181f2:	48 89 e5             	mov    %rsp,%rbp
  80042181f5:	48 83 ec 28          	sub    $0x28,%rsp
  80042181f9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042181fd:	48 89 e8             	mov    %rbp,%rax
  8004218200:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004218204:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218208:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421820c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004218213:	eb 45                	jmp    800421825a <get_caller_pcs+0x69>
  8004218215:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421821a:	74 44                	je     8004218260 <get_caller_pcs+0x6f>
  800421821c:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004218223:	00 00 00 
  8004218226:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421822a:	76 34                	jbe    8004218260 <get_caller_pcs+0x6f>
  800421822c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421822f:	48 98                	cltq   
  8004218231:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004218238:	00 
  8004218239:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421823d:	48 01 c2             	add    %rax,%rdx
  8004218240:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218244:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218248:	48 89 02             	mov    %rax,(%rdx)
  800421824b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421824f:	48 8b 00             	mov    (%rax),%rax
  8004218252:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218256:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421825a:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  800421825e:	7e b5                	jle    8004218215 <get_caller_pcs+0x24>
  8004218260:	eb 1f                	jmp    8004218281 <get_caller_pcs+0x90>
  8004218262:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218265:	48 98                	cltq   
  8004218267:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421826e:	00 
  800421826f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218273:	48 01 d0             	add    %rdx,%rax
  8004218276:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421827d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004218281:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004218285:	7e db                	jle    8004218262 <get_caller_pcs+0x71>
  8004218287:	c9                   	leaveq 
  8004218288:	c3                   	retq   

0000008004218289 <holding>:
  8004218289:	55                   	push   %rbp
  800421828a:	48 89 e5             	mov    %rsp,%rbp
  800421828d:	53                   	push   %rbx
  800421828e:	48 83 ec 18          	sub    $0x18,%rsp
  8004218292:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218296:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421829a:	8b 00                	mov    (%rax),%eax
  800421829c:	85 c0                	test   %eax,%eax
  800421829e:	74 3d                	je     80042182dd <holding+0x54>
  80042182a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042182a4:	48 8b 58 10          	mov    0x10(%rax),%rbx
  80042182a8:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042182af:	00 00 00 
  80042182b2:	ff d0                	callq  *%rax
  80042182b4:	48 98                	cltq   
  80042182b6:	48 c1 e0 03          	shl    $0x3,%rax
  80042182ba:	48 89 c2             	mov    %rax,%rdx
  80042182bd:	48 c1 e2 04          	shl    $0x4,%rdx
  80042182c1:	48 01 d0             	add    %rdx,%rax
  80042182c4:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042182cb:	00 00 00 
  80042182ce:	48 01 d0             	add    %rdx,%rax
  80042182d1:	48 39 c3             	cmp    %rax,%rbx
  80042182d4:	75 07                	jne    80042182dd <holding+0x54>
  80042182d6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042182db:	eb 05                	jmp    80042182e2 <holding+0x59>
  80042182dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042182e2:	48 83 c4 18          	add    $0x18,%rsp
  80042182e6:	5b                   	pop    %rbx
  80042182e7:	5d                   	pop    %rbp
  80042182e8:	c3                   	retq   

00000080042182e9 <__spin_initlock>:
  80042182e9:	55                   	push   %rbp
  80042182ea:	48 89 e5             	mov    %rsp,%rbp
  80042182ed:	48 83 ec 10          	sub    $0x10,%rsp
  80042182f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042182f5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042182f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042182fd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218303:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218307:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421830b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421830f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218313:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421831a:	00 
  800421831b:	c9                   	leaveq 
  800421831c:	c3                   	retq   

000000800421831d <spin_lock>:
  800421831d:	55                   	push   %rbp
  800421831e:	48 89 e5             	mov    %rsp,%rbp
  8004218321:	53                   	push   %rbx
  8004218322:	48 83 ec 18          	sub    $0x18,%rsp
  8004218326:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421832a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421832e:	48 89 c7             	mov    %rax,%rdi
  8004218331:	48 b8 89 82 21 04 80 	movabs $0x8004218289,%rax
  8004218338:	00 00 00 
  800421833b:	ff d0                	callq  *%rax
  800421833d:	85 c0                	test   %eax,%eax
  800421833f:	74 44                	je     8004218385 <spin_lock+0x68>
  8004218341:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218345:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004218349:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004218350:	00 00 00 
  8004218353:	ff d0                	callq  *%rax
  8004218355:	49 89 d8             	mov    %rbx,%r8
  8004218358:	89 c1                	mov    %eax,%ecx
  800421835a:	48 ba 38 19 22 04 80 	movabs $0x8004221938,%rdx
  8004218361:	00 00 00 
  8004218364:	be 42 00 00 00       	mov    $0x42,%esi
  8004218369:	48 bf 62 19 22 04 80 	movabs $0x8004221962,%rdi
  8004218370:	00 00 00 
  8004218373:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218378:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  800421837f:	00 00 00 
  8004218382:	41 ff d1             	callq  *%r9
  8004218385:	eb 02                	jmp    8004218389 <spin_lock+0x6c>
  8004218387:	f3 90                	pause  
  8004218389:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421838d:	be 01 00 00 00       	mov    $0x1,%esi
  8004218392:	48 89 c7             	mov    %rax,%rdi
  8004218395:	48 b8 cc 81 21 04 80 	movabs $0x80042181cc,%rax
  800421839c:	00 00 00 
  800421839f:	ff d0                	callq  *%rax
  80042183a1:	85 c0                	test   %eax,%eax
  80042183a3:	75 e2                	jne    8004218387 <spin_lock+0x6a>
  80042183a5:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042183ac:	00 00 00 
  80042183af:	ff d0                	callq  *%rax
  80042183b1:	48 98                	cltq   
  80042183b3:	48 c1 e0 03          	shl    $0x3,%rax
  80042183b7:	48 89 c2             	mov    %rax,%rdx
  80042183ba:	48 c1 e2 04          	shl    $0x4,%rdx
  80042183be:	48 01 d0             	add    %rdx,%rax
  80042183c1:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042183c8:	00 00 00 
  80042183cb:	48 01 c2             	add    %rax,%rdx
  80042183ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042183d2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042183d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042183da:	48 83 c0 18          	add    $0x18,%rax
  80042183de:	48 89 c7             	mov    %rax,%rdi
  80042183e1:	48 b8 f1 81 21 04 80 	movabs $0x80042181f1,%rax
  80042183e8:	00 00 00 
  80042183eb:	ff d0                	callq  *%rax
  80042183ed:	48 83 c4 18          	add    $0x18,%rsp
  80042183f1:	5b                   	pop    %rbx
  80042183f2:	5d                   	pop    %rbp
  80042183f3:	c3                   	retq   

00000080042183f4 <spin_unlock>:
  80042183f4:	55                   	push   %rbp
  80042183f5:	48 89 e5             	mov    %rsp,%rbp
  80042183f8:	41 54                	push   %r12
  80042183fa:	53                   	push   %rbx
  80042183fb:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004218402:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004218409:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218410:	48 89 c7             	mov    %rax,%rdi
  8004218413:	48 b8 89 82 21 04 80 	movabs $0x8004218289,%rax
  800421841a:	00 00 00 
  800421841d:	ff d0                	callq  *%rax
  800421841f:	85 c0                	test   %eax,%eax
  8004218421:	0f 85 d2 01 00 00    	jne    80042185f9 <spin_unlock+0x205>
  8004218427:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421842e:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004218432:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004218439:	ba 28 00 00 00       	mov    $0x28,%edx
  800421843e:	48 89 ce             	mov    %rcx,%rsi
  8004218441:	48 89 c7             	mov    %rax,%rdi
  8004218444:	48 b8 1d 10 21 04 80 	movabs $0x800421101d,%rax
  800421844b:	00 00 00 
  800421844e:	ff d0                	callq  *%rax
  8004218450:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218457:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421845b:	48 85 c0             	test   %rax,%rax
  800421845e:	75 39                	jne    8004218499 <spin_unlock+0xa5>
  8004218460:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218467:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421846b:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  8004218472:	00 00 00 
  8004218475:	ff d0                	callq  *%rax
  8004218477:	48 89 da             	mov    %rbx,%rdx
  800421847a:	89 c6                	mov    %eax,%esi
  800421847c:	48 bf 78 19 22 04 80 	movabs $0x8004221978,%rdi
  8004218483:	00 00 00 
  8004218486:	b8 00 00 00 00       	mov    $0x0,%eax
  800421848b:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004218492:	00 00 00 
  8004218495:	ff d1                	callq  *%rcx
  8004218497:	eb 4d                	jmp    80042184e6 <spin_unlock+0xf2>
  8004218499:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042184a0:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042184a4:	0f b6 00             	movzbl (%rax),%eax
  80042184a7:	44 0f b6 e0          	movzbl %al,%r12d
  80042184ab:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042184b2:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042184b6:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  80042184bd:	00 00 00 
  80042184c0:	ff d0                	callq  *%rax
  80042184c2:	44 89 e1             	mov    %r12d,%ecx
  80042184c5:	48 89 da             	mov    %rbx,%rdx
  80042184c8:	89 c6                	mov    %eax,%esi
  80042184ca:	48 bf b8 19 22 04 80 	movabs $0x80042219b8,%rdi
  80042184d1:	00 00 00 
  80042184d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184d9:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  80042184e0:	00 00 00 
  80042184e3:	41 ff d0             	callq  *%r8
  80042184e6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042184ed:	e9 c3 00 00 00       	jmpq   80042185b5 <spin_unlock+0x1c1>
  80042184f2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042184f5:	48 98                	cltq   
  80042184f7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042184fe:	89 c0                	mov    %eax,%eax
  8004218500:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  8004218507:	48 89 d6             	mov    %rdx,%rsi
  800421850a:	48 89 c7             	mov    %rax,%rdi
  800421850d:	48 b8 fe fb 20 04 80 	movabs $0x800420fbfe,%rax
  8004218514:	00 00 00 
  8004218517:	ff d0                	callq  *%rax
  8004218519:	85 c0                	test   %eax,%eax
  800421851b:	78 6b                	js     8004218588 <spin_unlock+0x194>
  800421851d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218520:	48 98                	cltq   
  8004218522:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218529:	89 c2                	mov    %eax,%edx
  800421852b:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004218532:	48 29 c2             	sub    %rax,%rdx
  8004218535:	49 89 d0             	mov    %rdx,%r8
  8004218538:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  800421853f:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004218545:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  800421854b:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004218552:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218555:	48 98                	cltq   
  8004218557:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421855e:	4c 89 04 24          	mov    %r8,(%rsp)
  8004218562:	49 89 f9             	mov    %rdi,%r9
  8004218565:	41 89 f0             	mov    %esi,%r8d
  8004218568:	89 c6                	mov    %eax,%esi
  800421856a:	48 bf ee 19 22 04 80 	movabs $0x80042219ee,%rdi
  8004218571:	00 00 00 
  8004218574:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218579:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004218580:	00 00 00 
  8004218583:	41 ff d2             	callq  *%r10
  8004218586:	eb 29                	jmp    80042185b1 <spin_unlock+0x1bd>
  8004218588:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421858b:	48 98                	cltq   
  800421858d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218594:	89 c6                	mov    %eax,%esi
  8004218596:	48 bf 05 1a 22 04 80 	movabs $0x8004221a05,%rdi
  800421859d:	00 00 00 
  80042185a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185a5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042185ac:	00 00 00 
  80042185af:	ff d2                	callq  *%rdx
  80042185b1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042185b5:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  80042185b9:	7f 14                	jg     80042185cf <spin_unlock+0x1db>
  80042185bb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042185be:	48 98                	cltq   
  80042185c0:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042185c7:	85 c0                	test   %eax,%eax
  80042185c9:	0f 85 23 ff ff ff    	jne    80042184f2 <spin_unlock+0xfe>
  80042185cf:	48 ba 0d 1a 22 04 80 	movabs $0x8004221a0d,%rdx
  80042185d6:	00 00 00 
  80042185d9:	be 6c 00 00 00       	mov    $0x6c,%esi
  80042185de:	48 bf 62 19 22 04 80 	movabs $0x8004221962,%rdi
  80042185e5:	00 00 00 
  80042185e8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185ed:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042185f4:	00 00 00 
  80042185f7:	ff d1                	callq  *%rcx
  80042185f9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218600:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  8004218607:	00 
  8004218608:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421860f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004218616:	00 
  8004218617:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421861e:	be 00 00 00 00       	mov    $0x0,%esi
  8004218623:	48 89 c7             	mov    %rax,%rdi
  8004218626:	48 b8 cc 81 21 04 80 	movabs $0x80042181cc,%rax
  800421862d:	00 00 00 
  8004218630:	ff d0                	callq  *%rax
  8004218632:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004218639:	5b                   	pop    %rbx
  800421863a:	41 5c                	pop    %r12
  800421863c:	5d                   	pop    %rbp
  800421863d:	c3                   	retq   

000000800421863e <e1000_attach>:
  800421863e:	55                   	push   %rbp
  800421863f:	48 89 e5             	mov    %rsp,%rbp
  8004218642:	48 83 ec 40          	sub    $0x40,%rsp
  8004218646:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421864a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421864e:	48 89 c7             	mov    %rax,%rdi
  8004218651:	48 b8 fb 94 21 04 80 	movabs $0x80042194fb,%rax
  8004218658:	00 00 00 
  800421865b:	ff d0                	callq  *%rax
  800421865d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218661:	8b 40 30             	mov    0x30(%rax),%eax
  8004218664:	89 c2                	mov    %eax,%edx
  8004218666:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421866a:	8b 40 18             	mov    0x18(%rax),%eax
  800421866d:	89 c0                	mov    %eax,%eax
  800421866f:	48 89 d6             	mov    %rdx,%rsi
  8004218672:	48 89 c7             	mov    %rax,%rdi
  8004218675:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  800421867c:	00 00 00 
  800421867f:	ff d0                	callq  *%rax
  8004218681:	48 ba 20 f7 4d 04 80 	movabs $0x80044df720,%rdx
  8004218688:	00 00 00 
  800421868b:	48 89 02             	mov    %rax,(%rdx)
  800421868e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218695:	e9 a9 00 00 00       	jmpq   8004218743 <e1000_attach+0x105>
  800421869a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421869d:	48 98                	cltq   
  800421869f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  80042186a6:	48 b8 40 f8 4d 04 80 	movabs $0x80044df840,%rax
  80042186ad:	00 00 00 
  80042186b0:	48 01 d0             	add    %rdx,%rax
  80042186b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042186b7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042186be:	00 00 00 
  80042186c1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042186c5:	77 32                	ja     80042186f9 <e1000_attach+0xbb>
  80042186c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042186cb:	48 89 c1             	mov    %rax,%rcx
  80042186ce:	48 ba 20 1a 22 04 80 	movabs $0x8004221a20,%rdx
  80042186d5:	00 00 00 
  80042186d8:	be 97 00 00 00       	mov    $0x97,%esi
  80042186dd:	48 bf 44 1a 22 04 80 	movabs $0x8004221a44,%rdi
  80042186e4:	00 00 00 
  80042186e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186ec:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042186f3:	00 00 00 
  80042186f6:	41 ff d0             	callq  *%r8
  80042186f9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218700:	ff ff ff 
  8004218703:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218707:	48 01 c2             	add    %rax,%rdx
  800421870a:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218711:	00 00 00 
  8004218714:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218717:	48 63 c9             	movslq %ecx,%rcx
  800421871a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421871e:	48 01 c8             	add    %rcx,%rax
  8004218721:	48 89 10             	mov    %rdx,(%rax)
  8004218724:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  800421872b:	00 00 00 
  800421872e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218731:	48 63 d2             	movslq %edx,%rdx
  8004218734:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218738:	48 01 d0             	add    %rdx,%rax
  800421873b:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  800421873f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218743:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004218747:	0f 8e 4d ff ff ff    	jle    800421869a <e1000_attach+0x5c>
  800421874d:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218754:	00 00 00 
  8004218757:	48 8b 00             	mov    (%rax),%rax
  800421875a:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218761:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218768:	00 00 00 
  800421876b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421876f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218776:	00 00 00 
  8004218779:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421877d:	77 32                	ja     80042187b1 <e1000_attach+0x173>
  800421877f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218783:	48 89 c1             	mov    %rax,%rcx
  8004218786:	48 ba 20 1a 22 04 80 	movabs $0x8004221a20,%rdx
  800421878d:	00 00 00 
  8004218790:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004218795:	48 bf 44 1a 22 04 80 	movabs $0x8004221a44,%rdi
  800421879c:	00 00 00 
  800421879f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187a4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042187ab:	00 00 00 
  80042187ae:	41 ff d0             	callq  *%r8
  80042187b1:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042187b8:	ff ff ff 
  80042187bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042187bf:	48 01 c8             	add    %rcx,%rax
  80042187c2:	89 02                	mov    %eax,(%rdx)
  80042187c4:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042187cb:	00 00 00 
  80042187ce:	48 8b 00             	mov    (%rax),%rax
  80042187d1:	48 05 08 38 00 00    	add    $0x3808,%rax
  80042187d7:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  80042187dd:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042187e4:	00 00 00 
  80042187e7:	48 8b 00             	mov    (%rax),%rax
  80042187ea:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  80042187f1:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042187f8:	00 00 00 
  80042187fb:	48 8b 00             	mov    (%rax),%rax
  80042187fe:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218805:	b8 00 00 00 00       	mov    $0x0,%eax
  800421880a:	89 01                	mov    %eax,(%rcx)
  800421880c:	89 02                	mov    %eax,(%rdx)
  800421880e:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218815:	00 00 00 
  8004218818:	48 8b 00             	mov    (%rax),%rax
  800421881b:	48 05 00 04 00 00    	add    $0x400,%rax
  8004218821:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004218827:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  800421882e:	00 00 00 
  8004218831:	48 8b 00             	mov    (%rax),%rax
  8004218834:	48 05 10 04 00 00    	add    $0x410,%rax
  800421883a:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004218840:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218847:	e9 8e 00 00 00       	jmpq   80042188da <e1000_attach+0x29c>
  800421884c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421884f:	48 98                	cltq   
  8004218851:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218855:	48 89 c2             	mov    %rax,%rdx
  8004218858:	48 b8 a0 95 4e 04 80 	movabs $0x80044e95a0,%rax
  800421885f:	00 00 00 
  8004218862:	48 01 d0             	add    %rdx,%rax
  8004218865:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218869:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218870:	00 00 00 
  8004218873:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004218877:	77 32                	ja     80042188ab <e1000_attach+0x26d>
  8004218879:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421887d:	48 89 c1             	mov    %rax,%rcx
  8004218880:	48 ba 20 1a 22 04 80 	movabs $0x8004221a20,%rdx
  8004218887:	00 00 00 
  800421888a:	be b8 00 00 00       	mov    $0xb8,%esi
  800421888f:	48 bf 44 1a 22 04 80 	movabs $0x8004221a44,%rdi
  8004218896:	00 00 00 
  8004218899:	b8 00 00 00 00       	mov    $0x0,%eax
  800421889e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042188a5:	00 00 00 
  80042188a8:	41 ff d0             	callq  *%r8
  80042188ab:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042188b2:	ff ff ff 
  80042188b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042188b9:	48 01 c2             	add    %rax,%rdx
  80042188bc:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  80042188c3:	00 00 00 
  80042188c6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042188c9:	48 63 c9             	movslq %ecx,%rcx
  80042188cc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042188d0:	48 01 c8             	add    %rcx,%rax
  80042188d3:	48 89 10             	mov    %rdx,(%rax)
  80042188d6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042188da:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  80042188e1:	0f 8e 65 ff ff ff    	jle    800421884c <e1000_attach+0x20e>
  80042188e7:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042188ee:	00 00 00 
  80042188f1:	48 8b 00             	mov    (%rax),%rax
  80042188f4:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  80042188fb:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  8004218902:	00 00 00 
  8004218905:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004218909:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218910:	00 00 00 
  8004218913:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004218917:	77 32                	ja     800421894b <e1000_attach+0x30d>
  8004218919:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421891d:	48 89 c1             	mov    %rax,%rcx
  8004218920:	48 ba 20 1a 22 04 80 	movabs $0x8004221a20,%rdx
  8004218927:	00 00 00 
  800421892a:	be ba 00 00 00       	mov    $0xba,%esi
  800421892f:	48 bf 44 1a 22 04 80 	movabs $0x8004221a44,%rdi
  8004218936:	00 00 00 
  8004218939:	b8 00 00 00 00       	mov    $0x0,%eax
  800421893e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218945:	00 00 00 
  8004218948:	41 ff d0             	callq  *%r8
  800421894b:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218952:	ff ff ff 
  8004218955:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218959:	48 01 c8             	add    %rcx,%rax
  800421895c:	89 02                	mov    %eax,(%rdx)
  800421895e:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218965:	00 00 00 
  8004218968:	48 8b 00             	mov    (%rax),%rax
  800421896b:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218971:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004218977:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  800421897e:	00 00 00 
  8004218981:	48 8b 00             	mov    (%rax),%rax
  8004218984:	48 05 10 28 00 00    	add    $0x2810,%rax
  800421898a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218990:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218997:	00 00 00 
  800421899a:	48 8b 00             	mov    (%rax),%rax
  800421899d:	48 05 18 28 00 00    	add    $0x2818,%rax
  80042189a3:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  80042189a9:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042189b0:	00 00 00 
  80042189b3:	48 8b 00             	mov    (%rax),%rax
  80042189b6:	48 05 00 01 00 00    	add    $0x100,%rax
  80042189bc:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  80042189c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189c7:	c9                   	leaveq 
  80042189c8:	c3                   	retq   

00000080042189c9 <e1000_transmit>:
  80042189c9:	55                   	push   %rbp
  80042189ca:	48 89 e5             	mov    %rsp,%rbp
  80042189cd:	48 83 ec 20          	sub    $0x20,%rsp
  80042189d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042189d5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042189d8:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042189df:	00 00 00 
  80042189e2:	48 8b 00             	mov    (%rax),%rax
  80042189e5:	48 85 c0             	test   %rax,%rax
  80042189e8:	74 09                	je     80042189f3 <e1000_transmit+0x2a>
  80042189ea:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  80042189f1:	76 0a                	jbe    80042189fd <e1000_transmit+0x34>
  80042189f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042189f8:	e9 39 01 00 00       	jmpq   8004218b36 <e1000_transmit+0x16d>
  80042189fd:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218a04:	00 00 00 
  8004218a07:	48 8b 00             	mov    (%rax),%rax
  8004218a0a:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004218a10:	8b 00                	mov    (%rax),%eax
  8004218a12:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218a15:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218a1c:	00 00 00 
  8004218a1f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218a22:	48 63 d2             	movslq %edx,%rdx
  8004218a25:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218a29:	48 01 d0             	add    %rdx,%rax
  8004218a2c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218a30:	0f b6 c0             	movzbl %al,%eax
  8004218a33:	83 e0 01             	and    $0x1,%eax
  8004218a36:	85 c0                	test   %eax,%eax
  8004218a38:	75 25                	jne    8004218a5f <e1000_transmit+0x96>
  8004218a3a:	48 bf 54 1a 22 04 80 	movabs $0x8004221a54,%rdi
  8004218a41:	00 00 00 
  8004218a44:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a49:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004218a50:	00 00 00 
  8004218a53:	ff d2                	callq  *%rdx
  8004218a55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a5a:	e9 d7 00 00 00       	jmpq   8004218b36 <e1000_transmit+0x16d>
  8004218a5f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218a62:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218a65:	48 98                	cltq   
  8004218a67:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004218a6e:	48 b8 40 f8 4d 04 80 	movabs $0x80044df840,%rax
  8004218a75:	00 00 00 
  8004218a78:	48 01 c1             	add    %rax,%rcx
  8004218a7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a7f:	48 89 c6             	mov    %rax,%rsi
  8004218a82:	48 89 cf             	mov    %rcx,%rdi
  8004218a85:	48 b8 1d 10 21 04 80 	movabs $0x800421101d,%rax
  8004218a8c:	00 00 00 
  8004218a8f:	ff d0                	callq  *%rax
  8004218a91:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218a94:	48 ba 30 f7 4d 04 80 	movabs $0x80044df730,%rdx
  8004218a9b:	00 00 00 
  8004218a9e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218aa1:	48 63 c9             	movslq %ecx,%rcx
  8004218aa4:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218aa8:	48 01 ca             	add    %rcx,%rdx
  8004218aab:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004218aaf:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218ab6:	00 00 00 
  8004218ab9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218abc:	48 63 d2             	movslq %edx,%rdx
  8004218abf:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218ac3:	48 01 d0             	add    %rdx,%rax
  8004218ac6:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218aca:	83 e0 fe             	and    $0xfffffffe,%eax
  8004218acd:	89 c2                	mov    %eax,%edx
  8004218acf:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218ad6:	00 00 00 
  8004218ad9:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218adc:	48 63 c9             	movslq %ecx,%rcx
  8004218adf:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218ae3:	48 01 c8             	add    %rcx,%rax
  8004218ae6:	88 50 0c             	mov    %dl,0xc(%rax)
  8004218ae9:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218af0:	00 00 00 
  8004218af3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218af6:	48 63 d2             	movslq %edx,%rdx
  8004218af9:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218afd:	48 01 d0             	add    %rdx,%rax
  8004218b00:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004218b04:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218b0b:	00 00 00 
  8004218b0e:	48 8b 00             	mov    (%rax),%rax
  8004218b11:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218b18:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b1b:	8d 50 01             	lea    0x1(%rax),%edx
  8004218b1e:	89 d0                	mov    %edx,%eax
  8004218b20:	c1 f8 1f             	sar    $0x1f,%eax
  8004218b23:	c1 e8 1c             	shr    $0x1c,%eax
  8004218b26:	01 c2                	add    %eax,%edx
  8004218b28:	83 e2 0f             	and    $0xf,%edx
  8004218b2b:	29 c2                	sub    %eax,%edx
  8004218b2d:	89 d0                	mov    %edx,%eax
  8004218b2f:	89 01                	mov    %eax,(%rcx)
  8004218b31:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b36:	c9                   	leaveq 
  8004218b37:	c3                   	retq   

0000008004218b38 <e1000_receive>:
  8004218b38:	55                   	push   %rbp
  8004218b39:	48 89 e5             	mov    %rsp,%rbp
  8004218b3c:	48 83 ec 20          	sub    $0x20,%rsp
  8004218b40:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218b44:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218b47:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218b4e:	00 00 00 
  8004218b51:	48 8b 00             	mov    (%rax),%rax
  8004218b54:	48 85 c0             	test   %rax,%rax
  8004218b57:	75 0a                	jne    8004218b63 <e1000_receive+0x2b>
  8004218b59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b5e:	e9 59 01 00 00       	jmpq   8004218cbc <e1000_receive+0x184>
  8004218b63:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218b6a:	00 00 00 
  8004218b6d:	48 8b 00             	mov    (%rax),%rax
  8004218b70:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218b76:	8b 00                	mov    (%rax),%eax
  8004218b78:	8d 48 01             	lea    0x1(%rax),%ecx
  8004218b7b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218b80:	89 c8                	mov    %ecx,%eax
  8004218b82:	f7 e2                	mul    %edx
  8004218b84:	89 d0                	mov    %edx,%eax
  8004218b86:	c1 e8 06             	shr    $0x6,%eax
  8004218b89:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004218b8f:	29 c1                	sub    %eax,%ecx
  8004218b91:	89 c8                	mov    %ecx,%eax
  8004218b93:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218b96:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  8004218b9d:	00 00 00 
  8004218ba0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218ba3:	48 63 d2             	movslq %edx,%rdx
  8004218ba6:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218baa:	48 01 d0             	add    %rdx,%rax
  8004218bad:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218bb1:	0f b6 c0             	movzbl %al,%eax
  8004218bb4:	83 e0 01             	and    $0x1,%eax
  8004218bb7:	85 c0                	test   %eax,%eax
  8004218bb9:	75 0a                	jne    8004218bc5 <e1000_receive+0x8d>
  8004218bbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bc0:	e9 f7 00 00 00       	jmpq   8004218cbc <e1000_receive+0x184>
  8004218bc5:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  8004218bcc:	00 00 00 
  8004218bcf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218bd2:	48 63 d2             	movslq %edx,%rdx
  8004218bd5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218bd9:	48 01 d0             	add    %rdx,%rax
  8004218bdc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218be0:	0f b6 c0             	movzbl %al,%eax
  8004218be3:	83 e0 02             	and    $0x2,%eax
  8004218be6:	85 c0                	test   %eax,%eax
  8004218be8:	75 35                	jne    8004218c1f <e1000_receive+0xe7>
  8004218bea:	48 b9 68 1a 22 04 80 	movabs $0x8004221a68,%rcx
  8004218bf1:	00 00 00 
  8004218bf4:	48 ba 92 1a 22 04 80 	movabs $0x8004221a92,%rdx
  8004218bfb:	00 00 00 
  8004218bfe:	be ef 00 00 00       	mov    $0xef,%esi
  8004218c03:	48 bf 44 1a 22 04 80 	movabs $0x8004221a44,%rdi
  8004218c0a:	00 00 00 
  8004218c0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218c19:	00 00 00 
  8004218c1c:	41 ff d0             	callq  *%r8
  8004218c1f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218c22:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218c25:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  8004218c2c:	00 00 00 
  8004218c2f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218c32:	48 63 d2             	movslq %edx,%rdx
  8004218c35:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218c39:	48 01 d0             	add    %rdx,%rax
  8004218c3c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218c40:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004218c44:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218c48:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218c4b:	39 c2                	cmp    %eax,%edx
  8004218c4d:	0f 46 c2             	cmovbe %edx,%eax
  8004218c50:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218c53:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218c56:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218c59:	48 98                	cltq   
  8004218c5b:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218c5f:	48 89 c1             	mov    %rax,%rcx
  8004218c62:	48 b8 a0 95 4e 04 80 	movabs $0x80044e95a0,%rax
  8004218c69:	00 00 00 
  8004218c6c:	48 01 c1             	add    %rax,%rcx
  8004218c6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c73:	48 89 ce             	mov    %rcx,%rsi
  8004218c76:	48 89 c7             	mov    %rax,%rdi
  8004218c79:	48 b8 1d 10 21 04 80 	movabs $0x800421101d,%rax
  8004218c80:	00 00 00 
  8004218c83:	ff d0                	callq  *%rax
  8004218c85:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  8004218c8c:	00 00 00 
  8004218c8f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218c92:	48 63 d2             	movslq %edx,%rdx
  8004218c95:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218c99:	48 01 d0             	add    %rdx,%rax
  8004218c9c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218ca0:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218ca7:	00 00 00 
  8004218caa:	48 8b 00             	mov    (%rax),%rax
  8004218cad:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004218cb4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218cb7:	89 02                	mov    %eax,(%rdx)
  8004218cb9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218cbc:	c9                   	leaveq 
  8004218cbd:	c3                   	retq   

0000008004218cbe <pci_conf1_set_addr>:
  8004218cbe:	55                   	push   %rbp
  8004218cbf:	48 89 e5             	mov    %rsp,%rbp
  8004218cc2:	48 83 ec 20          	sub    $0x20,%rsp
  8004218cc6:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218cc9:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218ccc:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004218ccf:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004218cd2:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004218cd9:	76 35                	jbe    8004218d10 <pci_conf1_set_addr+0x52>
  8004218cdb:	48 b9 a8 1a 22 04 80 	movabs $0x8004221aa8,%rcx
  8004218ce2:	00 00 00 
  8004218ce5:	48 ba b2 1a 22 04 80 	movabs $0x8004221ab2,%rdx
  8004218cec:	00 00 00 
  8004218cef:	be 31 00 00 00       	mov    $0x31,%esi
  8004218cf4:	48 bf c7 1a 22 04 80 	movabs $0x8004221ac7,%rdi
  8004218cfb:	00 00 00 
  8004218cfe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218d03:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218d0a:	00 00 00 
  8004218d0d:	41 ff d0             	callq  *%r8
  8004218d10:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004218d14:	76 35                	jbe    8004218d4b <pci_conf1_set_addr+0x8d>
  8004218d16:	48 b9 d5 1a 22 04 80 	movabs $0x8004221ad5,%rcx
  8004218d1d:	00 00 00 
  8004218d20:	48 ba b2 1a 22 04 80 	movabs $0x8004221ab2,%rdx
  8004218d27:	00 00 00 
  8004218d2a:	be 32 00 00 00       	mov    $0x32,%esi
  8004218d2f:	48 bf c7 1a 22 04 80 	movabs $0x8004221ac7,%rdi
  8004218d36:	00 00 00 
  8004218d39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218d3e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218d45:	00 00 00 
  8004218d48:	41 ff d0             	callq  *%r8
  8004218d4b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004218d4f:	76 35                	jbe    8004218d86 <pci_conf1_set_addr+0xc8>
  8004218d51:	48 b9 de 1a 22 04 80 	movabs $0x8004221ade,%rcx
  8004218d58:	00 00 00 
  8004218d5b:	48 ba b2 1a 22 04 80 	movabs $0x8004221ab2,%rdx
  8004218d62:	00 00 00 
  8004218d65:	be 33 00 00 00       	mov    $0x33,%esi
  8004218d6a:	48 bf c7 1a 22 04 80 	movabs $0x8004221ac7,%rdi
  8004218d71:	00 00 00 
  8004218d74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218d79:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218d80:	00 00 00 
  8004218d83:	41 ff d0             	callq  *%r8
  8004218d86:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004218d8d:	76 35                	jbe    8004218dc4 <pci_conf1_set_addr+0x106>
  8004218d8f:	48 b9 e7 1a 22 04 80 	movabs $0x8004221ae7,%rcx
  8004218d96:	00 00 00 
  8004218d99:	48 ba b2 1a 22 04 80 	movabs $0x8004221ab2,%rdx
  8004218da0:	00 00 00 
  8004218da3:	be 34 00 00 00       	mov    $0x34,%esi
  8004218da8:	48 bf c7 1a 22 04 80 	movabs $0x8004221ac7,%rdi
  8004218daf:	00 00 00 
  8004218db2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218db7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218dbe:	00 00 00 
  8004218dc1:	41 ff d0             	callq  *%r8
  8004218dc4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218dc7:	83 e0 03             	and    $0x3,%eax
  8004218dca:	85 c0                	test   %eax,%eax
  8004218dcc:	74 35                	je     8004218e03 <pci_conf1_set_addr+0x145>
  8004218dce:	48 b9 f4 1a 22 04 80 	movabs $0x8004221af4,%rcx
  8004218dd5:	00 00 00 
  8004218dd8:	48 ba b2 1a 22 04 80 	movabs $0x8004221ab2,%rdx
  8004218ddf:	00 00 00 
  8004218de2:	be 35 00 00 00       	mov    $0x35,%esi
  8004218de7:	48 bf c7 1a 22 04 80 	movabs $0x8004221ac7,%rdi
  8004218dee:	00 00 00 
  8004218df1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218df6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218dfd:	00 00 00 
  8004218e00:	41 ff d0             	callq  *%r8
  8004218e03:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218e06:	c1 e0 10             	shl    $0x10,%eax
  8004218e09:	89 c2                	mov    %eax,%edx
  8004218e0b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218e0e:	c1 e0 0b             	shl    $0xb,%eax
  8004218e11:	09 c2                	or     %eax,%edx
  8004218e13:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218e16:	c1 e0 08             	shl    $0x8,%eax
  8004218e19:	09 d0                	or     %edx,%eax
  8004218e1b:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004218e1e:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004218e23:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218e26:	48 b8 e4 67 23 04 80 	movabs $0x80042367e4,%rax
  8004218e2d:	00 00 00 
  8004218e30:	8b 00                	mov    (%rax),%eax
  8004218e32:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218e35:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218e38:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218e3b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218e3e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218e41:	ef                   	out    %eax,(%dx)
  8004218e42:	c9                   	leaveq 
  8004218e43:	c3                   	retq   

0000008004218e44 <pci_conf_read>:
  8004218e44:	55                   	push   %rbp
  8004218e45:	48 89 e5             	mov    %rsp,%rbp
  8004218e48:	48 83 ec 20          	sub    $0x20,%rsp
  8004218e4c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218e50:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218e53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218e57:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218e5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218e5e:	8b 70 08             	mov    0x8(%rax),%esi
  8004218e61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218e65:	48 8b 00             	mov    (%rax),%rax
  8004218e68:	8b 40 08             	mov    0x8(%rax),%eax
  8004218e6b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218e6e:	89 c7                	mov    %eax,%edi
  8004218e70:	48 b8 be 8c 21 04 80 	movabs $0x8004218cbe,%rax
  8004218e77:	00 00 00 
  8004218e7a:	ff d0                	callq  *%rax
  8004218e7c:	48 b8 e8 67 23 04 80 	movabs $0x80042367e8,%rax
  8004218e83:	00 00 00 
  8004218e86:	8b 00                	mov    (%rax),%eax
  8004218e88:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004218e8b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218e8e:	89 c2                	mov    %eax,%edx
  8004218e90:	ed                   	in     (%dx),%eax
  8004218e91:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218e94:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218e97:	c9                   	leaveq 
  8004218e98:	c3                   	retq   

0000008004218e99 <pci_conf_write>:
  8004218e99:	55                   	push   %rbp
  8004218e9a:	48 89 e5             	mov    %rsp,%rbp
  8004218e9d:	48 83 ec 20          	sub    $0x20,%rsp
  8004218ea1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218ea5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218ea8:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004218eab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218eaf:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218eb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218eb6:	8b 70 08             	mov    0x8(%rax),%esi
  8004218eb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ebd:	48 8b 00             	mov    (%rax),%rax
  8004218ec0:	8b 40 08             	mov    0x8(%rax),%eax
  8004218ec3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218ec6:	89 c7                	mov    %eax,%edi
  8004218ec8:	48 b8 be 8c 21 04 80 	movabs $0x8004218cbe,%rax
  8004218ecf:	00 00 00 
  8004218ed2:	ff d0                	callq  *%rax
  8004218ed4:	48 b8 e8 67 23 04 80 	movabs $0x80042367e8,%rax
  8004218edb:	00 00 00 
  8004218ede:	8b 00                	mov    (%rax),%eax
  8004218ee0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218ee3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218ee6:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218ee9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218eec:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218eef:	ef                   	out    %eax,(%dx)
  8004218ef0:	c9                   	leaveq 
  8004218ef1:	c3                   	retq   

0000008004218ef2 <pci_attach_match>:
  8004218ef2:	55                   	push   %rbp
  8004218ef3:	48 89 e5             	mov    %rsp,%rbp
  8004218ef6:	48 83 ec 30          	sub    $0x30,%rsp
  8004218efa:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218efd:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218f00:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004218f04:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218f08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218f0f:	e9 aa 00 00 00       	jmpq   8004218fbe <pci_attach_match+0xcc>
  8004218f14:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218f17:	48 c1 e0 04          	shl    $0x4,%rax
  8004218f1b:	48 89 c2             	mov    %rax,%rdx
  8004218f1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218f22:	48 01 d0             	add    %rdx,%rax
  8004218f25:	8b 00                	mov    (%rax),%eax
  8004218f27:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004218f2a:	0f 85 8a 00 00 00    	jne    8004218fba <pci_attach_match+0xc8>
  8004218f30:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218f33:	48 c1 e0 04          	shl    $0x4,%rax
  8004218f37:	48 89 c2             	mov    %rax,%rdx
  8004218f3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218f3e:	48 01 d0             	add    %rdx,%rax
  8004218f41:	8b 40 04             	mov    0x4(%rax),%eax
  8004218f44:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218f47:	75 71                	jne    8004218fba <pci_attach_match+0xc8>
  8004218f49:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218f4c:	48 c1 e0 04          	shl    $0x4,%rax
  8004218f50:	48 89 c2             	mov    %rax,%rdx
  8004218f53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218f57:	48 01 d0             	add    %rdx,%rax
  8004218f5a:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218f5e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218f62:	48 89 d7             	mov    %rdx,%rdi
  8004218f65:	ff d0                	callq  *%rax
  8004218f67:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218f6a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218f6e:	7e 05                	jle    8004218f75 <pci_attach_match+0x83>
  8004218f70:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218f73:	eb 6c                	jmp    8004218fe1 <pci_attach_match+0xef>
  8004218f75:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218f79:	79 3f                	jns    8004218fba <pci_attach_match+0xc8>
  8004218f7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218f7e:	48 c1 e0 04          	shl    $0x4,%rax
  8004218f82:	48 89 c2             	mov    %rax,%rdx
  8004218f85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218f89:	48 01 d0             	add    %rdx,%rax
  8004218f8c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218f90:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218f93:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218f96:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218f99:	41 89 f0             	mov    %esi,%r8d
  8004218f9c:	89 c6                	mov    %eax,%esi
  8004218f9e:	48 bf 08 1b 22 04 80 	movabs $0x8004221b08,%rdi
  8004218fa5:	00 00 00 
  8004218fa8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218fad:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004218fb4:	00 00 00 
  8004218fb7:	41 ff d1             	callq  *%r9
  8004218fba:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218fbe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218fc1:	48 c1 e0 04          	shl    $0x4,%rax
  8004218fc5:	48 89 c2             	mov    %rax,%rdx
  8004218fc8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218fcc:	48 01 d0             	add    %rdx,%rax
  8004218fcf:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218fd3:	48 85 c0             	test   %rax,%rax
  8004218fd6:	0f 85 38 ff ff ff    	jne    8004218f14 <pci_attach_match+0x22>
  8004218fdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218fe1:	c9                   	leaveq 
  8004218fe2:	c3                   	retq   

0000008004218fe3 <pci_attach>:
  8004218fe3:	55                   	push   %rbp
  8004218fe4:	48 89 e5             	mov    %rsp,%rbp
  8004218fe7:	48 83 ec 10          	sub    $0x10,%rsp
  8004218feb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218fef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218ff3:	8b 40 14             	mov    0x14(%rax),%eax
  8004218ff6:	c1 e8 10             	shr    $0x10,%eax
  8004218ff9:	0f b6 c0             	movzbl %al,%eax
  8004218ffc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219000:	8b 52 14             	mov    0x14(%rdx),%edx
  8004219003:	89 d7                	mov    %edx,%edi
  8004219005:	c1 ef 18             	shr    $0x18,%edi
  8004219008:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421900c:	48 89 d1             	mov    %rdx,%rcx
  800421900f:	48 ba 00 68 23 04 80 	movabs $0x8004236800,%rdx
  8004219016:	00 00 00 
  8004219019:	89 c6                	mov    %eax,%esi
  800421901b:	48 b8 f2 8e 21 04 80 	movabs $0x8004218ef2,%rax
  8004219022:	00 00 00 
  8004219025:	ff d0                	callq  *%rax
  8004219027:	85 c0                	test   %eax,%eax
  8004219029:	75 39                	jne    8004219064 <pci_attach+0x81>
  800421902b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421902f:	8b 40 10             	mov    0x10(%rax),%eax
  8004219032:	c1 e8 10             	shr    $0x10,%eax
  8004219035:	89 c6                	mov    %eax,%esi
  8004219037:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421903b:	8b 40 10             	mov    0x10(%rax),%eax
  800421903e:	0f b7 c0             	movzwl %ax,%eax
  8004219041:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219045:	48 89 d1             	mov    %rdx,%rcx
  8004219048:	48 ba 20 68 23 04 80 	movabs $0x8004236820,%rdx
  800421904f:	00 00 00 
  8004219052:	89 c7                	mov    %eax,%edi
  8004219054:	48 b8 f2 8e 21 04 80 	movabs $0x8004218ef2,%rax
  800421905b:	00 00 00 
  800421905e:	ff d0                	callq  *%rax
  8004219060:	85 c0                	test   %eax,%eax
  8004219062:	74 07                	je     800421906b <pci_attach+0x88>
  8004219064:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219069:	eb 05                	jmp    8004219070 <pci_attach+0x8d>
  800421906b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219070:	c9                   	leaveq 
  8004219071:	c3                   	retq   

0000008004219072 <pci_print_func>:
  8004219072:	55                   	push   %rbp
  8004219073:	48 89 e5             	mov    %rsp,%rbp
  8004219076:	48 83 ec 40          	sub    $0x40,%rsp
  800421907a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421907e:	48 b8 40 68 23 04 80 	movabs $0x8004236840,%rax
  8004219085:	00 00 00 
  8004219088:	48 8b 00             	mov    (%rax),%rax
  800421908b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421908f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219093:	8b 40 14             	mov    0x14(%rax),%eax
  8004219096:	c1 e8 18             	shr    $0x18,%eax
  8004219099:	83 f8 06             	cmp    $0x6,%eax
  800421909c:	77 20                	ja     80042190be <pci_print_func+0x4c>
  800421909e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190a2:	8b 40 14             	mov    0x14(%rax),%eax
  80042190a5:	c1 e8 18             	shr    $0x18,%eax
  80042190a8:	89 c2                	mov    %eax,%edx
  80042190aa:	48 b8 40 68 23 04 80 	movabs $0x8004236840,%rax
  80042190b1:	00 00 00 
  80042190b4:	89 d2                	mov    %edx,%edx
  80042190b6:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042190ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042190be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190c2:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  80042190c6:	0f b6 f8             	movzbl %al,%edi
  80042190c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190cd:	8b 40 14             	mov    0x14(%rax),%eax
  80042190d0:	c1 e8 10             	shr    $0x10,%eax
  80042190d3:	0f b6 f0             	movzbl %al,%esi
  80042190d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190da:	8b 40 14             	mov    0x14(%rax),%eax
  80042190dd:	c1 e8 18             	shr    $0x18,%eax
  80042190e0:	41 89 c1             	mov    %eax,%r9d
  80042190e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190e7:	8b 40 10             	mov    0x10(%rax),%eax
  80042190ea:	c1 e8 10             	shr    $0x10,%eax
  80042190ed:	41 89 c2             	mov    %eax,%r10d
  80042190f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190f4:	8b 40 10             	mov    0x10(%rax),%eax
  80042190f7:	44 0f b7 c0          	movzwl %ax,%r8d
  80042190fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042190ff:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219106:	8b 50 08             	mov    0x8(%rax),%edx
  8004219109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421910d:	48 8b 00             	mov    (%rax),%rax
  8004219110:	8b 40 08             	mov    0x8(%rax),%eax
  8004219113:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004219117:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  800421911b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004219120:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004219124:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004219128:	45 89 d1             	mov    %r10d,%r9d
  800421912b:	89 c6                	mov    %eax,%esi
  800421912d:	48 bf a8 1b 22 04 80 	movabs $0x8004221ba8,%rdi
  8004219134:	00 00 00 
  8004219137:	b8 00 00 00 00       	mov    $0x0,%eax
  800421913c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004219143:	00 00 00 
  8004219146:	41 ff d2             	callq  *%r10
  8004219149:	c9                   	leaveq 
  800421914a:	c3                   	retq   

000000800421914b <pci_scan_bus>:
  800421914b:	55                   	push   %rbp
  800421914c:	48 89 e5             	mov    %rsp,%rbp
  800421914f:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004219156:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421915d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219164:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004219168:	ba 50 00 00 00       	mov    $0x50,%edx
  800421916d:	be 00 00 00 00       	mov    $0x0,%esi
  8004219172:	48 89 c7             	mov    %rax,%rdi
  8004219175:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421917c:	00 00 00 
  800421917f:	ff d0                	callq  *%rax
  8004219181:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004219188:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421918c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004219193:	e9 22 02 00 00       	jmpq   80042193ba <pci_scan_bus+0x26f>
  8004219198:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421919c:	be 0c 00 00 00       	mov    $0xc,%esi
  80042191a1:	48 89 c7             	mov    %rax,%rdi
  80042191a4:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  80042191ab:	00 00 00 
  80042191ae:	ff d0                	callq  *%rax
  80042191b0:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042191b3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042191b6:	c1 e8 10             	shr    $0x10,%eax
  80042191b9:	83 e0 7f             	and    $0x7f,%eax
  80042191bc:	83 f8 01             	cmp    $0x1,%eax
  80042191bf:	0f 87 ec 01 00 00    	ja     80042193b1 <pci_scan_bus+0x266>
  80042191c5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042191c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042191cd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042191d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042191d8:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  80042191df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042191e3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042191ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042191ee:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  80042191f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042191f9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004219200:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219204:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421920b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421920f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004219216:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421921a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004219221:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219225:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421922c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219230:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004219237:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  800421923e:	00 00 00 
  8004219241:	e9 45 01 00 00       	jmpq   800421938b <pci_scan_bus+0x240>
  8004219246:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421924d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004219254:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421925b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004219262:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004219269:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004219270:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004219277:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421927e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004219285:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421928c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004219293:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421929a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  80042192a1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042192a5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042192ac:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042192b0:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042192b7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042192bb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042192c2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042192c6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  80042192cd:	be 00 00 00 00       	mov    $0x0,%esi
  80042192d2:	48 89 c7             	mov    %rax,%rdi
  80042192d5:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  80042192dc:	00 00 00 
  80042192df:	ff d0                	callq  *%rax
  80042192e1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  80042192e7:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  80042192ed:	0f b7 c0             	movzwl %ax,%eax
  80042192f0:	3d ff ff 00 00       	cmp    $0xffff,%eax
  80042192f5:	0f 84 81 00 00 00    	je     800421937c <pci_scan_bus+0x231>
  80042192fb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004219302:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004219307:	48 89 c7             	mov    %rax,%rdi
  800421930a:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  8004219311:	00 00 00 
  8004219314:	ff d0                	callq  *%rax
  8004219316:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219319:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421931c:	88 45 98             	mov    %al,-0x68(%rbp)
  800421931f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004219326:	be 08 00 00 00       	mov    $0x8,%esi
  800421932b:	48 89 c7             	mov    %rax,%rdi
  800421932e:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  8004219335:	00 00 00 
  8004219338:	ff d0                	callq  *%rax
  800421933a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004219340:	48 b8 e0 67 23 04 80 	movabs $0x80042367e0,%rax
  8004219347:	00 00 00 
  800421934a:	8b 00                	mov    (%rax),%eax
  800421934c:	85 c0                	test   %eax,%eax
  800421934e:	74 16                	je     8004219366 <pci_scan_bus+0x21b>
  8004219350:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004219357:	48 89 c7             	mov    %rax,%rdi
  800421935a:	48 b8 72 90 21 04 80 	movabs $0x8004219072,%rax
  8004219361:	00 00 00 
  8004219364:	ff d0                	callq  *%rax
  8004219366:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421936d:	48 89 c7             	mov    %rax,%rdi
  8004219370:	48 b8 e3 8f 21 04 80 	movabs $0x8004218fe3,%rax
  8004219377:	00 00 00 
  800421937a:	ff d0                	callq  *%rax
  800421937c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004219382:	83 c0 01             	add    $0x1,%eax
  8004219385:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421938b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004219391:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219394:	25 00 00 80 00       	and    $0x800000,%eax
  8004219399:	85 c0                	test   %eax,%eax
  800421939b:	74 07                	je     80042193a4 <pci_scan_bus+0x259>
  800421939d:	b8 08 00 00 00       	mov    $0x8,%eax
  80042193a2:	eb 05                	jmp    80042193a9 <pci_scan_bus+0x25e>
  80042193a4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042193a9:	39 c2                	cmp    %eax,%edx
  80042193ab:	0f 82 95 fe ff ff    	jb     8004219246 <pci_scan_bus+0xfb>
  80042193b1:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042193b4:	83 c0 01             	add    $0x1,%eax
  80042193b7:	89 45 a8             	mov    %eax,-0x58(%rbp)
  80042193ba:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042193bd:	83 f8 1f             	cmp    $0x1f,%eax
  80042193c0:	0f 86 d2 fd ff ff    	jbe    8004219198 <pci_scan_bus+0x4d>
  80042193c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042193c9:	c9                   	leaveq 
  80042193ca:	c3                   	retq   

00000080042193cb <pci_bridge_attach>:
  80042193cb:	55                   	push   %rbp
  80042193cc:	48 89 e5             	mov    %rsp,%rbp
  80042193cf:	48 83 ec 30          	sub    $0x30,%rsp
  80042193d3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042193d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193db:	be 1c 00 00 00       	mov    $0x1c,%esi
  80042193e0:	48 89 c7             	mov    %rax,%rdi
  80042193e3:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  80042193ea:	00 00 00 
  80042193ed:	ff d0                	callq  *%rax
  80042193ef:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042193f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193f6:	be 18 00 00 00       	mov    $0x18,%esi
  80042193fb:	48 89 c7             	mov    %rax,%rdi
  80042193fe:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  8004219405:	00 00 00 
  8004219408:	ff d0                	callq  *%rax
  800421940a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421940d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219410:	83 e0 0f             	and    $0xf,%eax
  8004219413:	83 f8 01             	cmp    $0x1,%eax
  8004219416:	75 40                	jne    8004219458 <pci_bridge_attach+0x8d>
  8004219418:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421941c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421941f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219423:	8b 50 08             	mov    0x8(%rax),%edx
  8004219426:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421942a:	48 8b 00             	mov    (%rax),%rax
  800421942d:	8b 40 08             	mov    0x8(%rax),%eax
  8004219430:	89 c6                	mov    %eax,%esi
  8004219432:	48 bf e8 1b 22 04 80 	movabs $0x8004221be8,%rdi
  8004219439:	00 00 00 
  800421943c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219441:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219448:	00 00 00 
  800421944b:	41 ff d0             	callq  *%r8
  800421944e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219453:	e9 a1 00 00 00       	jmpq   80042194f9 <pci_bridge_attach+0x12e>
  8004219458:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421945c:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219461:	be 00 00 00 00       	mov    $0x0,%esi
  8004219466:	48 89 c7             	mov    %rax,%rdi
  8004219469:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  8004219470:	00 00 00 
  8004219473:	ff d0                	callq  *%rax
  8004219475:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219479:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421947d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219480:	c1 e8 08             	shr    $0x8,%eax
  8004219483:	0f b6 c0             	movzbl %al,%eax
  8004219486:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004219489:	48 b8 e0 67 23 04 80 	movabs $0x80042367e0,%rax
  8004219490:	00 00 00 
  8004219493:	8b 00                	mov    (%rax),%eax
  8004219495:	85 c0                	test   %eax,%eax
  8004219497:	74 48                	je     80042194e1 <pci_bridge_attach+0x116>
  8004219499:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421949c:	c1 e8 10             	shr    $0x10,%eax
  800421949f:	0f b6 f8             	movzbl %al,%edi
  80042194a2:	8b 75 e8             	mov    -0x18(%rbp),%esi
  80042194a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194a9:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042194ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194b0:	8b 50 08             	mov    0x8(%rax),%edx
  80042194b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194b7:	48 8b 00             	mov    (%rax),%rax
  80042194ba:	8b 40 08             	mov    0x8(%rax),%eax
  80042194bd:	41 89 f9             	mov    %edi,%r9d
  80042194c0:	41 89 f0             	mov    %esi,%r8d
  80042194c3:	89 c6                	mov    %eax,%esi
  80042194c5:	48 bf 20 1c 22 04 80 	movabs $0x8004221c20,%rdi
  80042194cc:	00 00 00 
  80042194cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042194d4:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042194db:	00 00 00 
  80042194de:	41 ff d2             	callq  *%r10
  80042194e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042194e5:	48 89 c7             	mov    %rax,%rdi
  80042194e8:	48 b8 4b 91 21 04 80 	movabs $0x800421914b,%rax
  80042194ef:	00 00 00 
  80042194f2:	ff d0                	callq  *%rax
  80042194f4:	b8 01 00 00 00       	mov    $0x1,%eax
  80042194f9:	c9                   	leaveq 
  80042194fa:	c3                   	retq   

00000080042194fb <pci_func_enable>:
  80042194fb:	55                   	push   %rbp
  80042194fc:	48 89 e5             	mov    %rsp,%rbp
  80042194ff:	48 83 ec 40          	sub    $0x40,%rsp
  8004219503:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219507:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421950b:	ba 07 00 00 00       	mov    $0x7,%edx
  8004219510:	be 04 00 00 00       	mov    $0x4,%esi
  8004219515:	48 89 c7             	mov    %rax,%rdi
  8004219518:	48 b8 99 8e 21 04 80 	movabs $0x8004218e99,%rax
  800421951f:	00 00 00 
  8004219522:	ff d0                	callq  *%rax
  8004219524:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  800421952b:	e9 ee 01 00 00       	jmpq   800421971e <pci_func_enable+0x223>
  8004219530:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004219533:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219537:	89 d6                	mov    %edx,%esi
  8004219539:	48 89 c7             	mov    %rax,%rdi
  800421953c:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  8004219543:	00 00 00 
  8004219546:	ff d0                	callq  *%rax
  8004219548:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421954b:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  8004219552:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219555:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219559:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800421955e:	89 ce                	mov    %ecx,%esi
  8004219560:	48 89 c7             	mov    %rax,%rdi
  8004219563:	48 b8 99 8e 21 04 80 	movabs $0x8004218e99,%rax
  800421956a:	00 00 00 
  800421956d:	ff d0                	callq  *%rax
  800421956f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004219572:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219576:	89 d6                	mov    %edx,%esi
  8004219578:	48 89 c7             	mov    %rax,%rdi
  800421957b:	48 b8 44 8e 21 04 80 	movabs $0x8004218e44,%rax
  8004219582:	00 00 00 
  8004219585:	ff d0                	callq  *%rax
  8004219587:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421958a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421958e:	75 05                	jne    8004219595 <pci_func_enable+0x9a>
  8004219590:	e9 83 01 00 00       	jmpq   8004219718 <pci_func_enable+0x21d>
  8004219595:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219598:	83 e8 10             	sub    $0x10,%eax
  800421959b:	c1 e8 02             	shr    $0x2,%eax
  800421959e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042195a1:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042195a4:	83 e0 01             	and    $0x1,%eax
  80042195a7:	85 c0                	test   %eax,%eax
  80042195a9:	75 65                	jne    8004219610 <pci_func_enable+0x115>
  80042195ab:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042195ae:	83 e0 06             	and    $0x6,%eax
  80042195b1:	83 f8 04             	cmp    $0x4,%eax
  80042195b4:	75 07                	jne    80042195bd <pci_func_enable+0xc2>
  80042195b6:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  80042195bd:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042195c0:	83 e0 f0             	and    $0xfffffff0,%eax
  80042195c3:	f7 d8                	neg    %eax
  80042195c5:	23 45 e8             	and    -0x18(%rbp),%eax
  80042195c8:	83 e0 f0             	and    $0xfffffff0,%eax
  80042195cb:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042195ce:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042195d1:	83 e0 f0             	and    $0xfffffff0,%eax
  80042195d4:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042195d7:	48 b8 a0 d5 6d 04 80 	movabs $0x80046dd5a0,%rax
  80042195de:	00 00 00 
  80042195e1:	8b 00                	mov    (%rax),%eax
  80042195e3:	85 c0                	test   %eax,%eax
  80042195e5:	74 7a                	je     8004219661 <pci_func_enable+0x166>
  80042195e7:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042195ea:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042195ed:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042195f0:	89 c6                	mov    %eax,%esi
  80042195f2:	48 bf 50 1c 22 04 80 	movabs $0x8004221c50,%rdi
  80042195f9:	00 00 00 
  80042195fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219601:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219608:	00 00 00 
  800421960b:	41 ff d0             	callq  *%r8
  800421960e:	eb 51                	jmp    8004219661 <pci_func_enable+0x166>
  8004219610:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219613:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219616:	f7 d8                	neg    %eax
  8004219618:	23 45 e8             	and    -0x18(%rbp),%eax
  800421961b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421961e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219621:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219624:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219627:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421962a:	48 b8 a0 d5 6d 04 80 	movabs $0x80046dd5a0,%rax
  8004219631:	00 00 00 
  8004219634:	8b 00                	mov    (%rax),%eax
  8004219636:	85 c0                	test   %eax,%eax
  8004219638:	74 27                	je     8004219661 <pci_func_enable+0x166>
  800421963a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421963d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219640:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219643:	89 c6                	mov    %eax,%esi
  8004219645:	48 bf 78 1c 22 04 80 	movabs $0x8004221c78,%rdi
  800421964c:	00 00 00 
  800421964f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219654:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421965b:	00 00 00 
  800421965e:	41 ff d0             	callq  *%r8
  8004219661:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219664:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219667:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421966b:	89 ce                	mov    %ecx,%esi
  800421966d:	48 89 c7             	mov    %rax,%rdi
  8004219670:	48 b8 99 8e 21 04 80 	movabs $0x8004218e99,%rax
  8004219677:	00 00 00 
  800421967a:	ff d0                	callq  *%rax
  800421967c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219680:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219683:	48 63 d2             	movslq %edx,%rdx
  8004219686:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  800421968a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421968d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004219691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219695:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219698:	48 63 d2             	movslq %edx,%rdx
  800421969b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  800421969f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042196a2:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  80042196a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042196a9:	74 6d                	je     8004219718 <pci_func_enable+0x21d>
  80042196ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042196af:	75 67                	jne    8004219718 <pci_func_enable+0x21d>
  80042196b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196b5:	8b 40 10             	mov    0x10(%rax),%eax
  80042196b8:	c1 e8 10             	shr    $0x10,%eax
  80042196bb:	41 89 c0             	mov    %eax,%r8d
  80042196be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196c2:	8b 40 10             	mov    0x10(%rax),%eax
  80042196c5:	0f b7 f8             	movzwl %ax,%edi
  80042196c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196cc:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042196cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196d3:	8b 50 08             	mov    0x8(%rax),%edx
  80042196d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196da:	48 8b 00             	mov    (%rax),%rax
  80042196dd:	8b 40 08             	mov    0x8(%rax),%eax
  80042196e0:	8b 75 f0             	mov    -0x10(%rbp),%esi
  80042196e3:	89 74 24 10          	mov    %esi,0x10(%rsp)
  80042196e7:	8b 75 f4             	mov    -0xc(%rbp),%esi
  80042196ea:	89 74 24 08          	mov    %esi,0x8(%rsp)
  80042196ee:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  80042196f1:	89 34 24             	mov    %esi,(%rsp)
  80042196f4:	45 89 c1             	mov    %r8d,%r9d
  80042196f7:	41 89 f8             	mov    %edi,%r8d
  80042196fa:	89 c6                	mov    %eax,%esi
  80042196fc:	48 bf a0 1c 22 04 80 	movabs $0x8004221ca0,%rdi
  8004219703:	00 00 00 
  8004219706:	b8 00 00 00 00       	mov    $0x0,%eax
  800421970b:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004219712:	00 00 00 
  8004219715:	41 ff d2             	callq  *%r10
  8004219718:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421971b:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421971e:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  8004219722:	0f 86 08 fe ff ff    	jbe    8004219530 <pci_func_enable+0x35>
  8004219728:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421972c:	8b 40 10             	mov    0x10(%rax),%eax
  800421972f:	c1 e8 10             	shr    $0x10,%eax
  8004219732:	89 c7                	mov    %eax,%edi
  8004219734:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219738:	8b 40 10             	mov    0x10(%rax),%eax
  800421973b:	0f b7 f0             	movzwl %ax,%esi
  800421973e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219742:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219745:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219749:	8b 50 08             	mov    0x8(%rax),%edx
  800421974c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219750:	48 8b 00             	mov    (%rax),%rax
  8004219753:	8b 40 08             	mov    0x8(%rax),%eax
  8004219756:	41 89 f9             	mov    %edi,%r9d
  8004219759:	41 89 f0             	mov    %esi,%r8d
  800421975c:	89 c6                	mov    %eax,%esi
  800421975e:	48 bf 00 1d 22 04 80 	movabs $0x8004221d00,%rdi
  8004219765:	00 00 00 
  8004219768:	b8 00 00 00 00       	mov    $0x0,%eax
  800421976d:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004219774:	00 00 00 
  8004219777:	41 ff d2             	callq  *%r10
  800421977a:	c9                   	leaveq 
  800421977b:	c3                   	retq   

000000800421977c <pci_init>:
  800421977c:	55                   	push   %rbp
  800421977d:	48 89 e5             	mov    %rsp,%rbp
  8004219780:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219785:	be 00 00 00 00       	mov    $0x0,%esi
  800421978a:	48 bf b0 d5 6d 04 80 	movabs $0x80046dd5b0,%rdi
  8004219791:	00 00 00 
  8004219794:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421979b:	00 00 00 
  800421979e:	ff d0                	callq  *%rax
  80042197a0:	48 bf b0 d5 6d 04 80 	movabs $0x80046dd5b0,%rdi
  80042197a7:	00 00 00 
  80042197aa:	48 b8 4b 91 21 04 80 	movabs $0x800421914b,%rax
  80042197b1:	00 00 00 
  80042197b4:	ff d0                	callq  *%rax
  80042197b6:	5d                   	pop    %rbp
  80042197b7:	c3                   	retq   

00000080042197b8 <time_init>:
  80042197b8:	55                   	push   %rbp
  80042197b9:	48 89 e5             	mov    %rsp,%rbp
  80042197bc:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  80042197c3:	00 00 00 
  80042197c6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042197cc:	5d                   	pop    %rbp
  80042197cd:	c3                   	retq   

00000080042197ce <time_tick>:
  80042197ce:	55                   	push   %rbp
  80042197cf:	48 89 e5             	mov    %rsp,%rbp
  80042197d2:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  80042197d9:	00 00 00 
  80042197dc:	8b 00                	mov    (%rax),%eax
  80042197de:	8d 50 01             	lea    0x1(%rax),%edx
  80042197e1:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  80042197e8:	00 00 00 
  80042197eb:	89 10                	mov    %edx,(%rax)
  80042197ed:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  80042197f4:	00 00 00 
  80042197f7:	8b 10                	mov    (%rax),%edx
  80042197f9:	89 d0                	mov    %edx,%eax
  80042197fb:	c1 e0 02             	shl    $0x2,%eax
  80042197fe:	01 d0                	add    %edx,%eax
  8004219800:	01 c0                	add    %eax,%eax
  8004219802:	89 c2                	mov    %eax,%edx
  8004219804:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  800421980b:	00 00 00 
  800421980e:	8b 00                	mov    (%rax),%eax
  8004219810:	39 c2                	cmp    %eax,%edx
  8004219812:	73 2a                	jae    800421983e <time_tick+0x70>
  8004219814:	48 ba 2f 1d 22 04 80 	movabs $0x8004221d2f,%rdx
  800421981b:	00 00 00 
  800421981e:	be 14 00 00 00       	mov    $0x14,%esi
  8004219823:	48 bf 4a 1d 22 04 80 	movabs $0x8004221d4a,%rdi
  800421982a:	00 00 00 
  800421982d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219832:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219839:	00 00 00 
  800421983c:	ff d1                	callq  *%rcx
  800421983e:	5d                   	pop    %rbp
  800421983f:	c3                   	retq   

0000008004219840 <time_msec>:
  8004219840:	55                   	push   %rbp
  8004219841:	48 89 e5             	mov    %rsp,%rbp
  8004219844:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  800421984b:	00 00 00 
  800421984e:	8b 10                	mov    (%rax),%edx
  8004219850:	89 d0                	mov    %edx,%eax
  8004219852:	c1 e0 02             	shl    $0x2,%eax
  8004219855:	01 d0                	add    %edx,%eax
  8004219857:	01 c0                	add    %eax,%eax
  8004219859:	5d                   	pop    %rbp
  800421985a:	c3                   	retq   

000000800421985b <page2ppn>:
  800421985b:	55                   	push   %rbp
  800421985c:	48 89 e5             	mov    %rsp,%rbp
  800421985f:	48 83 ec 08          	sub    $0x8,%rsp
  8004219863:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219867:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421986b:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004219872:	00 00 00 
  8004219875:	48 8b 00             	mov    (%rax),%rax
  8004219878:	48 29 c2             	sub    %rax,%rdx
  800421987b:	48 89 d0             	mov    %rdx,%rax
  800421987e:	48 c1 f8 04          	sar    $0x4,%rax
  8004219882:	c9                   	leaveq 
  8004219883:	c3                   	retq   

0000008004219884 <page2pa>:
  8004219884:	55                   	push   %rbp
  8004219885:	48 89 e5             	mov    %rsp,%rbp
  8004219888:	48 83 ec 08          	sub    $0x8,%rsp
  800421988c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219890:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219894:	48 89 c7             	mov    %rax,%rdi
  8004219897:	48 b8 5b 98 21 04 80 	movabs $0x800421985b,%rax
  800421989e:	00 00 00 
  80042198a1:	ff d0                	callq  *%rax
  80042198a3:	48 c1 e0 0c          	shl    $0xc,%rax
  80042198a7:	c9                   	leaveq 
  80042198a8:	c3                   	retq   

00000080042198a9 <pa2page>:
  80042198a9:	55                   	push   %rbp
  80042198aa:	48 89 e5             	mov    %rsp,%rbp
  80042198ad:	48 83 ec 10          	sub    $0x10,%rsp
  80042198b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042198b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198b9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042198bd:	48 89 c2             	mov    %rax,%rdx
  80042198c0:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042198c7:	00 00 00 
  80042198ca:	48 8b 00             	mov    (%rax),%rax
  80042198cd:	48 39 c2             	cmp    %rax,%rdx
  80042198d0:	72 2a                	jb     80042198fc <pa2page+0x53>
  80042198d2:	48 ba 60 1d 22 04 80 	movabs $0x8004221d60,%rdx
  80042198d9:	00 00 00 
  80042198dc:	be 5b 00 00 00       	mov    $0x5b,%esi
  80042198e1:	48 bf 7f 1d 22 04 80 	movabs $0x8004221d7f,%rdi
  80042198e8:	00 00 00 
  80042198eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042198f0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042198f7:	00 00 00 
  80042198fa:	ff d1                	callq  *%rcx
  80042198fc:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004219903:	00 00 00 
  8004219906:	48 8b 00             	mov    (%rax),%rax
  8004219909:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421990d:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004219911:	48 c1 e2 04          	shl    $0x4,%rdx
  8004219915:	48 01 d0             	add    %rdx,%rax
  8004219918:	c9                   	leaveq 
  8004219919:	c3                   	retq   

000000800421991a <page2kva>:
  800421991a:	55                   	push   %rbp
  800421991b:	48 89 e5             	mov    %rsp,%rbp
  800421991e:	48 83 ec 20          	sub    $0x20,%rsp
  8004219922:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219926:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421992a:	48 89 c7             	mov    %rax,%rdi
  800421992d:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  8004219934:	00 00 00 
  8004219937:	ff d0                	callq  *%rax
  8004219939:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421993d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219941:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219945:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219948:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421994b:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004219952:	00 00 00 
  8004219955:	48 8b 00             	mov    (%rax),%rax
  8004219958:	48 39 c2             	cmp    %rax,%rdx
  800421995b:	72 32                	jb     800421998f <page2kva+0x75>
  800421995d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219961:	48 89 c1             	mov    %rax,%rcx
  8004219964:	48 ba 90 1d 22 04 80 	movabs $0x8004221d90,%rdx
  800421996b:	00 00 00 
  800421996e:	be 62 00 00 00       	mov    $0x62,%esi
  8004219973:	48 bf 7f 1d 22 04 80 	movabs $0x8004221d7f,%rdi
  800421997a:	00 00 00 
  800421997d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219982:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219989:	00 00 00 
  800421998c:	41 ff d0             	callq  *%r8
  800421998f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219996:	00 00 00 
  8004219999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421999d:	48 01 d0             	add    %rdx,%rax
  80042199a0:	c9                   	leaveq 
  80042199a1:	c3                   	retq   

00000080042199a2 <epte_addr>:
  80042199a2:	55                   	push   %rbp
  80042199a3:	48 89 e5             	mov    %rsp,%rbp
  80042199a6:	48 83 ec 08          	sub    $0x8,%rsp
  80042199aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042199ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042199b2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042199b8:	c9                   	leaveq 
  80042199b9:	c3                   	retq   

00000080042199ba <epte_page_vaddr>:
  80042199ba:	55                   	push   %rbp
  80042199bb:	48 89 e5             	mov    %rsp,%rbp
  80042199be:	48 83 ec 20          	sub    $0x20,%rsp
  80042199c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042199c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042199ca:	48 89 c7             	mov    %rax,%rdi
  80042199cd:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  80042199d4:	00 00 00 
  80042199d7:	ff d0                	callq  *%rax
  80042199d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042199dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042199e1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042199e5:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042199e8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042199eb:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042199f2:	00 00 00 
  80042199f5:	48 8b 00             	mov    (%rax),%rax
  80042199f8:	48 39 c2             	cmp    %rax,%rdx
  80042199fb:	72 32                	jb     8004219a2f <epte_page_vaddr+0x75>
  80042199fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219a01:	48 89 c1             	mov    %rax,%rcx
  8004219a04:	48 ba 90 1d 22 04 80 	movabs $0x8004221d90,%rdx
  8004219a0b:	00 00 00 
  8004219a0e:	be 13 00 00 00       	mov    $0x13,%esi
  8004219a13:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  8004219a1a:	00 00 00 
  8004219a1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219a29:	00 00 00 
  8004219a2c:	41 ff d0             	callq  *%r8
  8004219a2f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219a36:	00 00 00 
  8004219a39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219a3d:	48 01 d0             	add    %rdx,%rax
  8004219a40:	c9                   	leaveq 
  8004219a41:	c3                   	retq   

0000008004219a42 <epte_present>:
  8004219a42:	55                   	push   %rbp
  8004219a43:	48 89 e5             	mov    %rsp,%rbp
  8004219a46:	48 83 ec 08          	sub    $0x8,%rsp
  8004219a4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219a4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219a52:	83 e0 07             	and    $0x7,%eax
  8004219a55:	48 85 c0             	test   %rax,%rax
  8004219a58:	0f 95 c0             	setne  %al
  8004219a5b:	0f b6 c0             	movzbl %al,%eax
  8004219a5e:	c9                   	leaveq 
  8004219a5f:	c3                   	retq   

0000008004219a60 <ept_lookup_gpa>:
  8004219a60:	55                   	push   %rbp
  8004219a61:	48 89 e5             	mov    %rsp,%rbp
  8004219a64:	53                   	push   %rbx
  8004219a65:	48 83 ec 48          	sub    $0x48,%rsp
  8004219a69:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004219a6d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004219a71:	89 55 bc             	mov    %edx,-0x44(%rbp)
  8004219a74:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004219a78:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004219a7d:	75 0a                	jne    8004219a89 <ept_lookup_gpa+0x29>
  8004219a7f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004219a84:	e9 51 01 00 00       	jmpq   8004219bda <ept_lookup_gpa+0x17a>
  8004219a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219a8d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219a91:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
  8004219a98:	e9 04 01 00 00       	jmpq   8004219ba1 <ept_lookup_gpa+0x141>
  8004219a9d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004219aa1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219aa4:	89 d0                	mov    %edx,%eax
  8004219aa6:	c1 e0 03             	shl    $0x3,%eax
  8004219aa9:	01 d0                	add    %edx,%eax
  8004219aab:	83 c0 0c             	add    $0xc,%eax
  8004219aae:	89 c1                	mov    %eax,%ecx
  8004219ab0:	48 d3 ee             	shr    %cl,%rsi
  8004219ab3:	48 89 f0             	mov    %rsi,%rax
  8004219ab6:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219abb:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219abe:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219ac1:	48 98                	cltq   
  8004219ac3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219aca:	00 
  8004219acb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219acf:	48 01 d0             	add    %rdx,%rax
  8004219ad2:	48 8b 00             	mov    (%rax),%rax
  8004219ad5:	48 89 c7             	mov    %rax,%rdi
  8004219ad8:	48 b8 42 9a 21 04 80 	movabs $0x8004219a42,%rax
  8004219adf:	00 00 00 
  8004219ae2:	ff d0                	callq  *%rax
  8004219ae4:	85 c0                	test   %eax,%eax
  8004219ae6:	0f 85 87 00 00 00    	jne    8004219b73 <ept_lookup_gpa+0x113>
  8004219aec:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  8004219af0:	75 0a                	jne    8004219afc <ept_lookup_gpa+0x9c>
  8004219af2:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
  8004219af7:	e9 de 00 00 00       	jmpq   8004219bda <ept_lookup_gpa+0x17a>
  8004219afc:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219b01:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219b08:	00 00 00 
  8004219b0b:	ff d0                	callq  *%rax
  8004219b0d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219b11:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004219b16:	75 0a                	jne    8004219b22 <ept_lookup_gpa+0xc2>
  8004219b18:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004219b1d:	e9 b8 00 00 00       	jmpq   8004219bda <ept_lookup_gpa+0x17a>
  8004219b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219b26:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219b2a:	8d 50 01             	lea    0x1(%rax),%edx
  8004219b2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219b31:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219b35:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219b38:	48 98                	cltq   
  8004219b3a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219b41:	00 
  8004219b42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219b46:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004219b4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219b4e:	48 89 c7             	mov    %rax,%rdi
  8004219b51:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  8004219b58:	00 00 00 
  8004219b5b:	ff d0                	callq  *%rax
  8004219b5d:	48 89 c7             	mov    %rax,%rdi
  8004219b60:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  8004219b67:	00 00 00 
  8004219b6a:	ff d0                	callq  *%rax
  8004219b6c:	48 83 c8 07          	or     $0x7,%rax
  8004219b70:	48 89 03             	mov    %rax,(%rbx)
  8004219b73:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219b76:	48 98                	cltq   
  8004219b78:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219b7f:	00 
  8004219b80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219b84:	48 01 d0             	add    %rdx,%rax
  8004219b87:	48 8b 00             	mov    (%rax),%rax
  8004219b8a:	48 89 c7             	mov    %rax,%rdi
  8004219b8d:	48 b8 ba 99 21 04 80 	movabs $0x80042199ba,%rax
  8004219b94:	00 00 00 
  8004219b97:	ff d0                	callq  *%rax
  8004219b99:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219b9d:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  8004219ba1:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004219ba5:	0f 8f f2 fe ff ff    	jg     8004219a9d <ept_lookup_gpa+0x3d>
  8004219bab:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004219bb0:	74 23                	je     8004219bd5 <ept_lookup_gpa+0x175>
  8004219bb2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219bb6:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219bba:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219bbf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219bc6:	00 
  8004219bc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219bcb:	48 01 c2             	add    %rax,%rdx
  8004219bce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219bd2:	48 89 10             	mov    %rdx,(%rax)
  8004219bd5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219bda:	48 83 c4 48          	add    $0x48,%rsp
  8004219bde:	5b                   	pop    %rbx
  8004219bdf:	5d                   	pop    %rbp
  8004219be0:	c3                   	retq   

0000008004219be1 <alloc_intermediate_ept_page>:
  8004219be1:	55                   	push   %rbp
  8004219be2:	48 89 e5             	mov    %rsp,%rbp
  8004219be5:	48 83 ec 30          	sub    $0x30,%rsp
  8004219be9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219bed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004219bf1:	89 55 dc             	mov    %edx,-0x24(%rbp)
  8004219bf4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004219bfb:	00 
  8004219bfc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219c00:	75 07                	jne    8004219c09 <alloc_intermediate_ept_page+0x28>
  8004219c02:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
  8004219c07:	eb 7f                	jmp    8004219c88 <alloc_intermediate_ept_page+0xa7>
  8004219c09:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219c0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219c15:	00 00 00 
  8004219c18:	ff d0                	callq  *%rax
  8004219c1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219c1e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004219c23:	75 07                	jne    8004219c2c <alloc_intermediate_ept_page+0x4b>
  8004219c25:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004219c2a:	eb 5c                	jmp    8004219c88 <alloc_intermediate_ept_page+0xa7>
  8004219c2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c30:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219c34:	8d 50 01             	lea    0x1(%rax),%edx
  8004219c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c3b:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c43:	48 89 c7             	mov    %rax,%rdi
  8004219c46:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  8004219c4d:	00 00 00 
  8004219c50:	ff d0                	callq  *%rax
  8004219c52:	48 83 c8 07          	or     $0x7,%rax
  8004219c56:	48 89 c7             	mov    %rax,%rdi
  8004219c59:	48 b8 ba 99 21 04 80 	movabs $0x80042199ba,%rax
  8004219c60:	00 00 00 
  8004219c63:	ff d0                	callq  *%rax
  8004219c65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219c69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219c6d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219c74:	00 
  8004219c75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219c79:	48 01 c2             	add    %rax,%rdx
  8004219c7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219c80:	48 89 02             	mov    %rax,(%rdx)
  8004219c83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c88:	c9                   	leaveq 
  8004219c89:	c3                   	retq   

0000008004219c8a <ept_gpa2hva>:
  8004219c8a:	55                   	push   %rbp
  8004219c8b:	48 89 e5             	mov    %rsp,%rbp
  8004219c8e:	48 83 ec 40          	sub    $0x40,%rsp
  8004219c92:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219c96:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004219c9a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004219c9e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  8004219ca2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004219ca6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219caa:	48 89 d1             	mov    %rdx,%rcx
  8004219cad:	ba 00 00 00 00       	mov    $0x0,%edx
  8004219cb2:	48 89 c7             	mov    %rax,%rdi
  8004219cb5:	48 b8 60 9a 21 04 80 	movabs $0x8004219a60,%rax
  8004219cbc:	00 00 00 
  8004219cbf:	ff d0                	callq  *%rax
  8004219cc1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004219cc4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004219cc8:	79 10                	jns    8004219cda <ept_gpa2hva+0x50>
  8004219cca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219cce:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219cd5:	e9 b1 00 00 00       	jmpq   8004219d8b <ept_gpa2hva+0x101>
  8004219cda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219cde:	48 8b 00             	mov    (%rax),%rax
  8004219ce1:	48 89 c7             	mov    %rax,%rdi
  8004219ce4:	48 b8 42 9a 21 04 80 	movabs $0x8004219a42,%rax
  8004219ceb:	00 00 00 
  8004219cee:	ff d0                	callq  *%rax
  8004219cf0:	85 c0                	test   %eax,%eax
  8004219cf2:	75 10                	jne    8004219d04 <ept_gpa2hva+0x7a>
  8004219cf4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219cf8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219cff:	e9 87 00 00 00       	jmpq   8004219d8b <ept_gpa2hva+0x101>
  8004219d04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219d08:	48 8b 00             	mov    (%rax),%rax
  8004219d0b:	48 89 c7             	mov    %rax,%rdi
  8004219d0e:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  8004219d15:	00 00 00 
  8004219d18:	ff d0                	callq  *%rax
  8004219d1a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219d1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219d22:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219d26:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219d29:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219d2c:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004219d33:	00 00 00 
  8004219d36:	48 8b 00             	mov    (%rax),%rax
  8004219d39:	48 39 c2             	cmp    %rax,%rdx
  8004219d3c:	72 32                	jb     8004219d70 <ept_gpa2hva+0xe6>
  8004219d3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219d42:	48 89 c1             	mov    %rax,%rcx
  8004219d45:	48 ba 90 1d 22 04 80 	movabs $0x8004221d90,%rdx
  8004219d4c:	00 00 00 
  8004219d4f:	be 7b 00 00 00       	mov    $0x7b,%esi
  8004219d54:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  8004219d5b:	00 00 00 
  8004219d5e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d63:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219d6a:	00 00 00 
  8004219d6d:	41 ff d0             	callq  *%r8
  8004219d70:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219d77:	00 00 00 
  8004219d7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219d7e:	48 01 d0             	add    %rdx,%rax
  8004219d81:	48 89 c2             	mov    %rax,%rdx
  8004219d84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219d88:	48 89 10             	mov    %rdx,(%rax)
  8004219d8b:	c9                   	leaveq 
  8004219d8c:	c3                   	retq   

0000008004219d8d <free_ept_level>:
  8004219d8d:	55                   	push   %rbp
  8004219d8e:	48 89 e5             	mov    %rsp,%rbp
  8004219d91:	48 83 ec 40          	sub    $0x40,%rsp
  8004219d95:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004219d99:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004219d9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219da0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219da4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219dab:	e9 82 01 00 00       	jmpq   8004219f32 <free_ept_level+0x1a5>
  8004219db0:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004219db4:	0f 84 fe 00 00 00    	je     8004219eb8 <free_ept_level+0x12b>
  8004219dba:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219dbd:	48 98                	cltq   
  8004219dbf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219dc6:	00 
  8004219dc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219dcb:	48 01 d0             	add    %rdx,%rax
  8004219dce:	48 8b 00             	mov    (%rax),%rax
  8004219dd1:	48 89 c7             	mov    %rax,%rdi
  8004219dd4:	48 b8 42 9a 21 04 80 	movabs $0x8004219a42,%rax
  8004219ddb:	00 00 00 
  8004219dde:	ff d0                	callq  *%rax
  8004219de0:	85 c0                	test   %eax,%eax
  8004219de2:	0f 84 46 01 00 00    	je     8004219f2e <free_ept_level+0x1a1>
  8004219de8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219deb:	48 98                	cltq   
  8004219ded:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219df4:	00 
  8004219df5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219df9:	48 01 d0             	add    %rdx,%rax
  8004219dfc:	48 8b 00             	mov    (%rax),%rax
  8004219dff:	48 89 c7             	mov    %rax,%rdi
  8004219e02:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  8004219e09:	00 00 00 
  8004219e0c:	ff d0                	callq  *%rax
  8004219e0e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219e12:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004219e15:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004219e18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219e1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219e20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219e24:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219e28:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219e2b:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  8004219e2e:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004219e35:	00 00 00 
  8004219e38:	48 8b 00             	mov    (%rax),%rax
  8004219e3b:	48 39 c1             	cmp    %rax,%rcx
  8004219e3e:	72 32                	jb     8004219e72 <free_ept_level+0xe5>
  8004219e40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219e44:	48 89 c1             	mov    %rax,%rcx
  8004219e47:	48 ba 90 1d 22 04 80 	movabs $0x8004221d90,%rdx
  8004219e4e:	00 00 00 
  8004219e51:	be 88 00 00 00       	mov    $0x88,%esi
  8004219e56:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  8004219e5d:	00 00 00 
  8004219e60:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e65:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219e6c:	00 00 00 
  8004219e6f:	41 ff d0             	callq  *%r8
  8004219e72:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  8004219e79:	00 00 00 
  8004219e7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219e80:	48 01 c8             	add    %rcx,%rax
  8004219e83:	89 d6                	mov    %edx,%esi
  8004219e85:	48 89 c7             	mov    %rax,%rdi
  8004219e88:	48 b8 8d 9d 21 04 80 	movabs $0x8004219d8d,%rax
  8004219e8f:	00 00 00 
  8004219e92:	ff d0                	callq  *%rax
  8004219e94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219e98:	48 89 c7             	mov    %rax,%rdi
  8004219e9b:	48 b8 a9 98 21 04 80 	movabs $0x80042198a9,%rax
  8004219ea2:	00 00 00 
  8004219ea5:	ff d0                	callq  *%rax
  8004219ea7:	48 89 c7             	mov    %rax,%rdi
  8004219eaa:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219eb1:	00 00 00 
  8004219eb4:	ff d0                	callq  *%rax
  8004219eb6:	eb 76                	jmp    8004219f2e <free_ept_level+0x1a1>
  8004219eb8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219ebb:	48 98                	cltq   
  8004219ebd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219ec4:	00 
  8004219ec5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219ec9:	48 01 d0             	add    %rdx,%rax
  8004219ecc:	48 8b 00             	mov    (%rax),%rax
  8004219ecf:	48 89 c7             	mov    %rax,%rdi
  8004219ed2:	48 b8 42 9a 21 04 80 	movabs $0x8004219a42,%rax
  8004219ed9:	00 00 00 
  8004219edc:	ff d0                	callq  *%rax
  8004219ede:	85 c0                	test   %eax,%eax
  8004219ee0:	74 4c                	je     8004219f2e <free_ept_level+0x1a1>
  8004219ee2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219ee5:	48 98                	cltq   
  8004219ee7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219eee:	00 
  8004219eef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219ef3:	48 01 d0             	add    %rdx,%rax
  8004219ef6:	48 8b 00             	mov    (%rax),%rax
  8004219ef9:	48 89 c7             	mov    %rax,%rdi
  8004219efc:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  8004219f03:	00 00 00 
  8004219f06:	ff d0                	callq  *%rax
  8004219f08:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219f0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219f10:	48 89 c7             	mov    %rax,%rdi
  8004219f13:	48 b8 a9 98 21 04 80 	movabs $0x80042198a9,%rax
  8004219f1a:	00 00 00 
  8004219f1d:	ff d0                	callq  *%rax
  8004219f1f:	48 89 c7             	mov    %rax,%rdi
  8004219f22:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219f29:	00 00 00 
  8004219f2c:	ff d0                	callq  *%rax
  8004219f2e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219f32:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  8004219f39:	0f 8e 71 fe ff ff    	jle    8004219db0 <free_ept_level+0x23>
  8004219f3f:	90                   	nop
  8004219f40:	c9                   	leaveq 
  8004219f41:	c3                   	retq   

0000008004219f42 <free_guest_mem>:
  8004219f42:	55                   	push   %rbp
  8004219f43:	48 89 e5             	mov    %rsp,%rbp
  8004219f46:	48 83 ec 20          	sub    $0x20,%rsp
  8004219f4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219f4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219f52:	be 03 00 00 00       	mov    $0x3,%esi
  8004219f57:	48 89 c7             	mov    %rax,%rdi
  8004219f5a:	48 b8 8d 9d 21 04 80 	movabs $0x8004219d8d,%rax
  8004219f61:	00 00 00 
  8004219f64:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  8004219f66:	0f 20 d8             	mov    %cr3,%rax
  8004219f69:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  8004219f6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219f71:	0f 22 d8             	mov    %rax,%cr3
  8004219f74:	c9                   	leaveq 
  8004219f75:	c3                   	retq   

0000008004219f76 <ept_page_insert>:
  8004219f76:	55                   	push   %rbp
  8004219f77:	48 89 e5             	mov    %rsp,%rbp
  8004219f7a:	53                   	push   %rbx
  8004219f7b:	48 83 ec 38          	sub    $0x38,%rsp
  8004219f7f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219f83:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004219f87:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004219f8b:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004219f8e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004219f95:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004219f9c:	00 
  8004219f9d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  8004219fa1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  8004219fa5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219fa9:	48 89 d1             	mov    %rdx,%rcx
  8004219fac:	ba 01 00 00 00       	mov    $0x1,%edx
  8004219fb1:	48 89 c7             	mov    %rax,%rdi
  8004219fb4:	48 b8 60 9a 21 04 80 	movabs $0x8004219a60,%rax
  8004219fbb:	00 00 00 
  8004219fbe:	ff d0                	callq  *%rax
  8004219fc0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219fc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219fc7:	48 85 c0             	test   %rax,%rax
  8004219fca:	75 0a                	jne    8004219fd6 <ept_page_insert+0x60>
  8004219fcc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004219fd1:	e9 e3 00 00 00       	jmpq   800421a0b9 <ept_page_insert+0x143>
  8004219fd6:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004219fda:	79 08                	jns    8004219fe4 <ept_page_insert+0x6e>
  8004219fdc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219fdf:	e9 d5 00 00 00       	jmpq   800421a0b9 <ept_page_insert+0x143>
  8004219fe4:	83 4d c4 41          	orl    $0x41,-0x3c(%rbp)
  8004219fe8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219fec:	48 8b 00             	mov    (%rax),%rax
  8004219fef:	83 e0 01             	and    $0x1,%eax
  8004219ff2:	48 85 c0             	test   %rax,%rax
  8004219ff5:	0f 95 c0             	setne  %al
  8004219ff8:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004219ffb:	80 7d eb 00          	cmpb   $0x0,-0x15(%rbp)
  8004219fff:	74 50                	je     800421a051 <ept_page_insert+0xdb>
  800421a001:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a005:	48 8b 00             	mov    (%rax),%rax
  800421a008:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800421a00e:	48 89 c7             	mov    %rax,%rdi
  800421a011:	48 b8 a9 98 21 04 80 	movabs $0x80042198a9,%rax
  800421a018:	00 00 00 
  800421a01b:	ff d0                	callq  *%rax
  800421a01d:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421a021:	75 2e                	jne    800421a051 <ept_page_insert+0xdb>
  800421a023:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800421a027:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a02b:	48 89 c7             	mov    %rax,%rdi
  800421a02e:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  800421a035:	00 00 00 
  800421a038:	ff d0                	callq  *%rax
  800421a03a:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a03d:	48 63 d2             	movslq %edx,%rdx
  800421a040:	48 09 d0             	or     %rdx,%rax
  800421a043:	48 83 c8 40          	or     $0x40,%rax
  800421a047:	48 89 03             	mov    %rax,(%rbx)
  800421a04a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a04f:	eb 68                	jmp    800421a0b9 <ept_page_insert+0x143>
  800421a051:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a055:	48 8b 00             	mov    (%rax),%rax
  800421a058:	83 e0 01             	and    $0x1,%eax
  800421a05b:	48 85 c0             	test   %rax,%rax
  800421a05e:	74 1a                	je     800421a07a <ept_page_insert+0x104>
  800421a060:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421a064:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a068:	48 89 d6             	mov    %rdx,%rsi
  800421a06b:	48 89 c7             	mov    %rax,%rdi
  800421a06e:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800421a075:	00 00 00 
  800421a078:	ff d0                	callq  *%rax
  800421a07a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a07e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a082:	8d 50 01             	lea    0x1(%rax),%edx
  800421a085:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a089:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a08d:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800421a091:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a095:	48 89 c7             	mov    %rax,%rdi
  800421a098:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  800421a09f:	00 00 00 
  800421a0a2:	ff d0                	callq  *%rax
  800421a0a4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a0a7:	48 63 d2             	movslq %edx,%rdx
  800421a0aa:	48 09 d0             	or     %rdx,%rax
  800421a0ad:	48 83 c8 40          	or     $0x40,%rax
  800421a0b1:	48 89 03             	mov    %rax,(%rbx)
  800421a0b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0b9:	48 83 c4 38          	add    $0x38,%rsp
  800421a0bd:	5b                   	pop    %rbx
  800421a0be:	5d                   	pop    %rbp
  800421a0bf:	c3                   	retq   

000000800421a0c0 <ept_map_hva2gpa>:
  800421a0c0:	55                   	push   %rbp
  800421a0c1:	48 89 e5             	mov    %rsp,%rbp
  800421a0c4:	53                   	push   %rbx
  800421a0c5:	48 83 ec 48          	sub    $0x48,%rsp
  800421a0c9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421a0cd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421a0d1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421a0d5:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
  800421a0d8:	44 89 45 b0          	mov    %r8d,-0x50(%rbp)
  800421a0dc:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
  800421a0e0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421a0e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a0e8:	48 89 d1             	mov    %rdx,%rcx
  800421a0eb:	ba 01 00 00 00       	mov    $0x1,%edx
  800421a0f0:	48 89 c7             	mov    %rax,%rdi
  800421a0f3:	48 b8 60 9a 21 04 80 	movabs $0x8004219a60,%rax
  800421a0fa:	00 00 00 
  800421a0fd:	ff d0                	callq  *%rax
  800421a0ff:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421a102:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800421a106:	79 08                	jns    800421a110 <ept_map_hva2gpa+0x50>
  800421a108:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a10b:	e9 c7 00 00 00       	jmpq   800421a1d7 <ept_map_hva2gpa+0x117>
  800421a110:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a114:	48 8b 00             	mov    (%rax),%rax
  800421a117:	48 89 c7             	mov    %rax,%rdi
  800421a11a:	48 b8 42 9a 21 04 80 	movabs $0x8004219a42,%rax
  800421a121:	00 00 00 
  800421a124:	ff d0                	callq  *%rax
  800421a126:	85 c0                	test   %eax,%eax
  800421a128:	74 10                	je     800421a13a <ept_map_hva2gpa+0x7a>
  800421a12a:	83 7d b0 00          	cmpl   $0x0,-0x50(%rbp)
  800421a12e:	75 0a                	jne    800421a13a <ept_map_hva2gpa+0x7a>
  800421a130:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421a135:	e9 9d 00 00 00       	jmpq   800421a1d7 <ept_map_hva2gpa+0x117>
  800421a13a:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800421a13e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a142:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a146:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421a14d:	00 00 00 
  800421a150:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421a154:	77 32                	ja     800421a188 <ept_map_hva2gpa+0xc8>
  800421a156:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a15a:	48 89 c1             	mov    %rax,%rcx
  800421a15d:	48 ba c0 1d 22 04 80 	movabs $0x8004221dc0,%rdx
  800421a164:	00 00 00 
  800421a167:	be e1 00 00 00       	mov    $0xe1,%esi
  800421a16c:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a173:	00 00 00 
  800421a176:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a17b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a182:	00 00 00 
  800421a185:	41 ff d0             	callq  *%r8
  800421a188:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421a18f:	ff ff ff 
  800421a192:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a196:	48 01 d0             	add    %rdx,%rax
  800421a199:	48 89 c7             	mov    %rax,%rdi
  800421a19c:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  800421a1a3:	00 00 00 
  800421a1a6:	ff d0                	callq  *%rax
  800421a1a8:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  800421a1ab:	48 63 d2             	movslq %edx,%rdx
  800421a1ae:	48 09 d0             	or     %rdx,%rax
  800421a1b1:	48 83 c8 70          	or     $0x70,%rax
  800421a1b5:	48 89 03             	mov    %rax,(%rbx)
  800421a1b8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421a1bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a1c0:	48 89 d6             	mov    %rdx,%rsi
  800421a1c3:	48 89 c7             	mov    %rax,%rdi
  800421a1c6:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  800421a1cd:	00 00 00 
  800421a1d0:	ff d0                	callq  *%rax
  800421a1d2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a1d7:	48 83 c4 48          	add    $0x48,%rsp
  800421a1db:	5b                   	pop    %rbx
  800421a1dc:	5d                   	pop    %rbp
  800421a1dd:	c3                   	retq   

000000800421a1de <ept_alloc_static>:
  800421a1de:	55                   	push   %rbp
  800421a1df:	48 89 e5             	mov    %rsp,%rbp
  800421a1e2:	53                   	push   %rbx
  800421a1e3:	48 83 ec 48          	sub    $0x48,%rsp
  800421a1e7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421a1eb:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421a1ef:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421a1f6:	00 
  800421a1f7:	eb 6e                	jmp    800421a267 <ept_alloc_static+0x89>
  800421a1f9:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a1fe:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a205:	00 00 00 
  800421a208:	ff d0                	callq  *%rax
  800421a20a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a20e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a212:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a216:	8d 50 01             	lea    0x1(%rax),%edx
  800421a219:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a21d:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a221:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421a225:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a229:	48 89 c7             	mov    %rax,%rdi
  800421a22c:	48 b8 1a 99 21 04 80 	movabs $0x800421991a,%rax
  800421a233:	00 00 00 
  800421a236:	ff d0                	callq  *%rax
  800421a238:	48 89 c6             	mov    %rax,%rsi
  800421a23b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a23f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a245:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421a24a:	48 89 da             	mov    %rbx,%rdx
  800421a24d:	48 89 c7             	mov    %rax,%rdi
  800421a250:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421a257:	00 00 00 
  800421a25a:	ff d0                	callq  *%rax
  800421a25c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a25f:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a266:	00 
  800421a267:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421a26e:	00 
  800421a26f:	76 88                	jbe    800421a1f9 <ept_alloc_static+0x1b>
  800421a271:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  800421a278:	00 
  800421a279:	eb 6e                	jmp    800421a2e9 <ept_alloc_static+0x10b>
  800421a27b:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a280:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a287:	00 00 00 
  800421a28a:	ff d0                	callq  *%rax
  800421a28c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a290:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a294:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a298:	8d 50 01             	lea    0x1(%rax),%edx
  800421a29b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a29f:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a2a3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421a2a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a2ab:	48 89 c7             	mov    %rax,%rdi
  800421a2ae:	48 b8 1a 99 21 04 80 	movabs $0x800421991a,%rax
  800421a2b5:	00 00 00 
  800421a2b8:	ff d0                	callq  *%rax
  800421a2ba:	48 89 c6             	mov    %rax,%rsi
  800421a2bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a2c1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a2c7:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421a2cc:	48 89 da             	mov    %rbx,%rdx
  800421a2cf:	48 89 c7             	mov    %rax,%rdi
  800421a2d2:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421a2d9:	00 00 00 
  800421a2dc:	ff d0                	callq  *%rax
  800421a2de:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a2e1:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a2e8:	00 
  800421a2e9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a2ed:	48 8b 00             	mov    (%rax),%rax
  800421a2f0:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421a2f4:	77 85                	ja     800421a27b <ept_alloc_static+0x9d>
  800421a2f6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a2fb:	48 83 c4 48          	add    $0x48,%rsp
  800421a2ff:	5b                   	pop    %rbx
  800421a300:	5d                   	pop    %rbp
  800421a301:	c3                   	retq   

000000800421a302 <test_ept_map>:
  800421a302:	55                   	push   %rbp
  800421a303:	48 89 e5             	mov    %rsp,%rbp
  800421a306:	53                   	push   %rbx
  800421a307:	48 83 ec 48          	sub    $0x48,%rsp
  800421a30b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  800421a30f:	be 00 00 00 00       	mov    $0x0,%esi
  800421a314:	48 89 c7             	mov    %rax,%rdi
  800421a317:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800421a31e:	00 00 00 
  800421a321:	ff d0                	callq  *%rax
  800421a323:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a326:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a32a:	79 30                	jns    800421a35c <test_ept_map+0x5a>
  800421a32c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a32f:	89 c1                	mov    %eax,%ecx
  800421a331:	48 ba e4 1d 22 04 80 	movabs $0x8004221de4,%rdx
  800421a338:	00 00 00 
  800421a33b:	be 0a 01 00 00       	mov    $0x10a,%esi
  800421a340:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a347:	00 00 00 
  800421a34a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a34f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a356:	00 00 00 
  800421a359:	41 ff d0             	callq  *%r8
  800421a35c:	bf 01 00 00 00       	mov    $0x1,%edi
  800421a361:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a368:	00 00 00 
  800421a36b:	ff d0                	callq  *%rax
  800421a36d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a371:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421a376:	75 30                	jne    800421a3a8 <test_ept_map+0xa6>
  800421a378:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a37b:	89 c1                	mov    %eax,%ecx
  800421a37d:	48 ba 01 1e 22 04 80 	movabs $0x8004221e01,%rdx
  800421a384:	00 00 00 
  800421a387:	be 0c 01 00 00       	mov    $0x10c,%esi
  800421a38c:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a393:	00 00 00 
  800421a396:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a39b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a3a2:	00 00 00 
  800421a3a5:	41 ff d0             	callq  *%r8
  800421a3a8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a3ac:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a3b3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421a3b7:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421a3bc:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a3c1:	48 89 c7             	mov    %rax,%rdi
  800421a3c4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800421a3cb:	00 00 00 
  800421a3ce:	ff d0                	callq  *%rax
  800421a3d0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a3d3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a3d7:	79 30                	jns    800421a409 <test_ept_map+0x107>
  800421a3d9:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a3dc:	89 c1                	mov    %eax,%ecx
  800421a3de:	48 ba 1f 1e 22 04 80 	movabs $0x8004221e1f,%rdx
  800421a3e5:	00 00 00 
  800421a3e8:	be 0e 01 00 00       	mov    $0x10e,%esi
  800421a3ed:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a3f4:	00 00 00 
  800421a3f7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a3fc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a403:	00 00 00 
  800421a406:	41 ff d0             	callq  *%r8
  800421a409:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421a410:	00 00 00 
  800421a413:	ff d0                	callq  *%rax
  800421a415:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421a419:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  800421a420:	00 00 00 
  800421a423:	48 98                	cltq   
  800421a425:	48 c1 e0 03          	shl    $0x3,%rax
  800421a429:	48 89 c6             	mov    %rax,%rsi
  800421a42c:	48 c1 e6 04          	shl    $0x4,%rsi
  800421a430:	48 01 f0             	add    %rsi,%rax
  800421a433:	48 01 c8             	add    %rcx,%rax
  800421a436:	48 83 c0 08          	add    $0x8,%rax
  800421a43a:	48 89 10             	mov    %rdx,(%rax)
  800421a43d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a441:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a447:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421a44b:	89 d6                	mov    %edx,%esi
  800421a44d:	48 89 c7             	mov    %rax,%rdi
  800421a450:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800421a457:	00 00 00 
  800421a45a:	ff d0                	callq  *%rax
  800421a45c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a45f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a463:	79 30                	jns    800421a495 <test_ept_map+0x193>
  800421a465:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a468:	89 c1                	mov    %eax,%ecx
  800421a46a:	48 ba e4 1d 22 04 80 	movabs $0x8004221de4,%rdx
  800421a471:	00 00 00 
  800421a474:	be 13 01 00 00       	mov    $0x113,%esi
  800421a479:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a480:	00 00 00 
  800421a483:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a488:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a48f:	00 00 00 
  800421a492:	41 ff d0             	callq  *%r8
  800421a495:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a499:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a49f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a4a3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a4a9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a4af:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a4b4:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a4b9:	89 c7                	mov    %eax,%edi
  800421a4bb:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a4c2:	00 00 00 
  800421a4c5:	ff d0                	callq  *%rax
  800421a4c7:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a4ca:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a4ce:	79 4a                	jns    800421a51a <test_ept_map+0x218>
  800421a4d0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a4d3:	89 c6                	mov    %eax,%esi
  800421a4d5:	48 bf 40 1e 22 04 80 	movabs $0x8004221e40,%rdi
  800421a4dc:	00 00 00 
  800421a4df:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a4e4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a4eb:	00 00 00 
  800421a4ee:	ff d2                	callq  *%rdx
  800421a4f0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a4f4:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a4fa:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421a4fe:	89 d6                	mov    %edx,%esi
  800421a500:	48 89 c7             	mov    %rax,%rdi
  800421a503:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800421a50a:	00 00 00 
  800421a50d:	ff d0                	callq  *%rax
  800421a50f:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a512:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a516:	79 5c                	jns    800421a574 <test_ept_map+0x272>
  800421a518:	eb 2a                	jmp    800421a544 <test_ept_map+0x242>
  800421a51a:	48 ba 78 1e 22 04 80 	movabs $0x8004221e78,%rdx
  800421a521:	00 00 00 
  800421a524:	be 17 01 00 00       	mov    $0x117,%esi
  800421a529:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a530:	00 00 00 
  800421a533:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a538:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a53f:	00 00 00 
  800421a542:	ff d1                	callq  *%rcx
  800421a544:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a547:	89 c1                	mov    %eax,%ecx
  800421a549:	48 ba a0 1e 22 04 80 	movabs $0x8004221ea0,%rdx
  800421a550:	00 00 00 
  800421a553:	be 1c 01 00 00       	mov    $0x11c,%esi
  800421a558:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a55f:	00 00 00 
  800421a562:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a567:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a56e:	00 00 00 
  800421a571:	41 ff d0             	callq  *%r8
  800421a574:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a578:	48 c7 80 20 01 00 00 	movq   $0x401000,0x120(%rax)
  800421a57f:	00 10 40 00 
  800421a583:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a587:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a58d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a591:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a597:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a59d:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a5a2:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  800421a5a9:	00 00 00 
  800421a5ac:	89 c7                	mov    %eax,%edi
  800421a5ae:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a5b5:	00 00 00 
  800421a5b8:	ff d0                	callq  *%rax
  800421a5ba:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a5bd:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a5c1:	79 61                	jns    800421a624 <test_ept_map+0x322>
  800421a5c3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a5c6:	89 c6                	mov    %eax,%esi
  800421a5c8:	48 bf c8 1e 22 04 80 	movabs $0x8004221ec8,%rdi
  800421a5cf:	00 00 00 
  800421a5d2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5d7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a5de:	00 00 00 
  800421a5e1:	ff d2                	callq  *%rdx
  800421a5e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a5e7:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a5ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a5f1:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a5f7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a5fd:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a602:	be 01 00 40 00       	mov    $0x400001,%esi
  800421a607:	89 c7                	mov    %eax,%edi
  800421a609:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a610:	00 00 00 
  800421a613:	ff d0                	callq  *%rax
  800421a615:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a618:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a61c:	0f 89 8d 00 00 00    	jns    800421a6af <test_ept_map+0x3ad>
  800421a622:	eb 2a                	jmp    800421a64e <test_ept_map+0x34c>
  800421a624:	48 ba 00 1f 22 04 80 	movabs $0x8004221f00,%rdx
  800421a62b:	00 00 00 
  800421a62e:	be 23 01 00 00       	mov    $0x123,%esi
  800421a633:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a63a:	00 00 00 
  800421a63d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a642:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a649:	00 00 00 
  800421a64c:	ff d1                	callq  *%rcx
  800421a64e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a651:	89 c6                	mov    %eax,%esi
  800421a653:	48 bf 30 1f 22 04 80 	movabs $0x8004221f30,%rdi
  800421a65a:	00 00 00 
  800421a65d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a662:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a669:	00 00 00 
  800421a66c:	ff d2                	callq  *%rdx
  800421a66e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a672:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a678:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a67c:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a682:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a688:	b9 00 10 40 00       	mov    $0x401000,%ecx
  800421a68d:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a692:	89 c7                	mov    %eax,%edi
  800421a694:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a69b:	00 00 00 
  800421a69e:	ff d0                	callq  *%rax
  800421a6a0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a6a3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a6a7:	0f 89 8d 00 00 00    	jns    800421a73a <test_ept_map+0x438>
  800421a6ad:	eb 2a                	jmp    800421a6d9 <test_ept_map+0x3d7>
  800421a6af:	48 ba 68 1f 22 04 80 	movabs $0x8004221f68,%rdx
  800421a6b6:	00 00 00 
  800421a6b9:	be 27 01 00 00       	mov    $0x127,%esi
  800421a6be:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a6c5:	00 00 00 
  800421a6c8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6cd:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a6d4:	00 00 00 
  800421a6d7:	ff d1                	callq  *%rcx
  800421a6d9:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a6dc:	89 c6                	mov    %eax,%esi
  800421a6de:	48 bf 98 1f 22 04 80 	movabs $0x8004221f98,%rdi
  800421a6e5:	00 00 00 
  800421a6e8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6ed:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a6f4:	00 00 00 
  800421a6f7:	ff d2                	callq  *%rdx
  800421a6f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a6fd:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a703:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a707:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a70d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a713:	b9 ff ff 3f 00       	mov    $0x3fffff,%ecx
  800421a718:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a71d:	89 c7                	mov    %eax,%edi
  800421a71f:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a726:	00 00 00 
  800421a729:	ff d0                	callq  *%rax
  800421a72b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a72e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a732:	0f 89 8d 00 00 00    	jns    800421a7c5 <test_ept_map+0x4c3>
  800421a738:	eb 2a                	jmp    800421a764 <test_ept_map+0x462>
  800421a73a:	48 ba d8 1f 22 04 80 	movabs $0x8004221fd8,%rdx
  800421a741:	00 00 00 
  800421a744:	be 2d 01 00 00       	mov    $0x12d,%esi
  800421a749:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a750:	00 00 00 
  800421a753:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a758:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a75f:	00 00 00 
  800421a762:	ff d1                	callq  *%rcx
  800421a764:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a767:	89 c6                	mov    %eax,%esi
  800421a769:	48 bf 08 20 22 04 80 	movabs $0x8004222008,%rdi
  800421a770:	00 00 00 
  800421a773:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a778:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a77f:	00 00 00 
  800421a782:	ff d2                	callq  *%rdx
  800421a784:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a788:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a78e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a792:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a798:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a79e:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a7a3:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a7a8:	89 c7                	mov    %eax,%edi
  800421a7aa:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a7b1:	00 00 00 
  800421a7b4:	ff d0                	callq  *%rax
  800421a7b6:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a7b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a7bd:	0f 89 8d 00 00 00    	jns    800421a850 <test_ept_map+0x54e>
  800421a7c3:	eb 2a                	jmp    800421a7ef <test_ept_map+0x4ed>
  800421a7c5:	48 ba 40 20 22 04 80 	movabs $0x8004222040,%rdx
  800421a7cc:	00 00 00 
  800421a7cf:	be 31 01 00 00       	mov    $0x131,%esi
  800421a7d4:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a7db:	00 00 00 
  800421a7de:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a7e3:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a7ea:	00 00 00 
  800421a7ed:	ff d1                	callq  *%rcx
  800421a7ef:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a7f2:	89 c6                	mov    %eax,%esi
  800421a7f4:	48 bf 70 20 22 04 80 	movabs $0x8004222070,%rdi
  800421a7fb:	00 00 00 
  800421a7fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a803:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a80a:	00 00 00 
  800421a80d:	ff d2                	callq  *%rdx
  800421a80f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a813:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a819:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a81d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a823:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  800421a829:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a82e:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a833:	89 c7                	mov    %eax,%edi
  800421a835:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a83c:	00 00 00 
  800421a83f:	ff d0                	callq  *%rax
  800421a841:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a844:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a848:	0f 89 97 00 00 00    	jns    800421a8e5 <test_ept_map+0x5e3>
  800421a84e:	eb 2a                	jmp    800421a87a <test_ept_map+0x578>
  800421a850:	48 ba b0 20 22 04 80 	movabs $0x80042220b0,%rdx
  800421a857:	00 00 00 
  800421a85a:	be 37 01 00 00       	mov    $0x137,%esi
  800421a85f:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a866:	00 00 00 
  800421a869:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a86e:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a875:	00 00 00 
  800421a878:	ff d1                	callq  *%rcx
  800421a87a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a87d:	89 c6                	mov    %eax,%esi
  800421a87f:	48 bf d8 20 22 04 80 	movabs $0x80042220d8,%rdi
  800421a886:	00 00 00 
  800421a889:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a88e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a895:	00 00 00 
  800421a898:	ff d2                	callq  *%rdx
  800421a89a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a89e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a8a2:	0f b7 c0             	movzwl %ax,%eax
  800421a8a5:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a8a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a8ac:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a8b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a8b6:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a8bc:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a8c2:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a8c7:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a8cc:	89 c7                	mov    %eax,%edi
  800421a8ce:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a8d5:	00 00 00 
  800421a8d8:	ff d0                	callq  *%rax
  800421a8da:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a8dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a8e1:	79 5c                	jns    800421a93f <test_ept_map+0x63d>
  800421a8e3:	eb 2a                	jmp    800421a90f <test_ept_map+0x60d>
  800421a8e5:	48 ba 18 21 22 04 80 	movabs $0x8004222118,%rdx
  800421a8ec:	00 00 00 
  800421a8ef:	be 3b 01 00 00       	mov    $0x13b,%esi
  800421a8f4:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a8fb:	00 00 00 
  800421a8fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a903:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a90a:	00 00 00 
  800421a90d:	ff d1                	callq  *%rcx
  800421a90f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a912:	89 c1                	mov    %eax,%ecx
  800421a914:	48 ba 40 21 22 04 80 	movabs $0x8004222140,%rdx
  800421a91b:	00 00 00 
  800421a91e:	be 40 01 00 00       	mov    $0x140,%esi
  800421a923:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a92a:	00 00 00 
  800421a92d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a932:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a939:	00 00 00 
  800421a93c:	41 ff d0             	callq  *%r8
  800421a93f:	48 bf 60 21 22 04 80 	movabs $0x8004222160,%rdi
  800421a946:	00 00 00 
  800421a949:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a94e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a955:	00 00 00 
  800421a958:	ff d2                	callq  *%rdx
  800421a95a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a95e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a962:	0f b7 c0             	movzwl %ax,%eax
  800421a965:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421a968:	83 c2 01             	add    $0x1,%edx
  800421a96b:	39 d0                	cmp    %edx,%eax
  800421a96d:	74 2a                	je     800421a999 <test_ept_map+0x697>
  800421a96f:	48 ba 80 21 22 04 80 	movabs $0x8004222180,%rdx
  800421a976:	00 00 00 
  800421a979:	be 44 01 00 00       	mov    $0x144,%esi
  800421a97e:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421a985:	00 00 00 
  800421a988:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a98d:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a994:	00 00 00 
  800421a997:	ff d1                	callq  *%rcx
  800421a999:	48 bf 9b 21 22 04 80 	movabs $0x800422219b,%rdi
  800421a9a0:	00 00 00 
  800421a9a3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a9a8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a9af:	00 00 00 
  800421a9b2:	ff d2                	callq  *%rdx
  800421a9b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a9b8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a9bc:	0f b7 c0             	movzwl %ax,%eax
  800421a9bf:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a9c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a9c6:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a9cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a9d0:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a9d6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a9dc:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a9e1:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a9e6:	89 c7                	mov    %eax,%edi
  800421a9e8:	48 b8 5a f4 20 04 80 	movabs $0x800420f45a,%rax
  800421a9ef:	00 00 00 
  800421a9f2:	ff d0                	callq  *%rax
  800421a9f4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a9f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a9fb:	79 2d                	jns    800421aa2a <test_ept_map+0x728>
  800421a9fd:	48 bf 60 21 22 04 80 	movabs $0x8004222160,%rdi
  800421aa04:	00 00 00 
  800421aa07:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa0c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aa13:	00 00 00 
  800421aa16:	ff d2                	callq  *%rdx
  800421aa18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421aa1c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421aa20:	0f b7 c0             	movzwl %ax,%eax
  800421aa23:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421aa26:	75 74                	jne    800421aa9c <test_ept_map+0x79a>
  800421aa28:	eb 2a                	jmp    800421aa54 <test_ept_map+0x752>
  800421aa2a:	48 ba c0 21 22 04 80 	movabs $0x80042221c0,%rdx
  800421aa31:	00 00 00 
  800421aa34:	be 4d 01 00 00       	mov    $0x14d,%esi
  800421aa39:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421aa40:	00 00 00 
  800421aa43:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa48:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421aa4f:	00 00 00 
  800421aa52:	ff d1                	callq  *%rcx
  800421aa54:	48 bf f0 21 22 04 80 	movabs $0x80042221f0,%rdi
  800421aa5b:	00 00 00 
  800421aa5e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa63:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aa6a:	00 00 00 
  800421aa6d:	ff d2                	callq  *%rdx
  800421aa6f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  800421aa73:	48 89 c1             	mov    %rax,%rcx
  800421aa76:	ba 00 00 00 00       	mov    $0x0,%edx
  800421aa7b:	be 00 00 40 00       	mov    $0x400000,%esi
  800421aa80:	bf 00 00 00 00       	mov    $0x0,%edi
  800421aa85:	48 b8 60 9a 21 04 80 	movabs $0x8004219a60,%rax
  800421aa8c:	00 00 00 
  800421aa8f:	ff d0                	callq  *%rax
  800421aa91:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421aa94:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421aa98:	79 7d                	jns    800421ab17 <test_ept_map+0x815>
  800421aa9a:	eb 2a                	jmp    800421aac6 <test_ept_map+0x7c4>
  800421aa9c:	48 ba 18 22 22 04 80 	movabs $0x8004222218,%rdx
  800421aaa3:	00 00 00 
  800421aaa6:	be 52 01 00 00       	mov    $0x152,%esi
  800421aaab:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421aab2:	00 00 00 
  800421aab5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aaba:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421aac1:	00 00 00 
  800421aac4:	ff d1                	callq  *%rcx
  800421aac6:	48 bf 40 22 22 04 80 	movabs $0x8004222240,%rdi
  800421aacd:	00 00 00 
  800421aad0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aad5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aadc:	00 00 00 
  800421aadf:	ff d2                	callq  *%rdx
  800421aae1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421aae5:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421aaec:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421aaf0:	48 89 d1             	mov    %rdx,%rcx
  800421aaf3:	ba 00 00 00 00       	mov    $0x0,%edx
  800421aaf8:	be 00 00 40 00       	mov    $0x400000,%esi
  800421aafd:	48 89 c7             	mov    %rax,%rdi
  800421ab00:	48 b8 60 9a 21 04 80 	movabs $0x8004219a60,%rax
  800421ab07:	00 00 00 
  800421ab0a:	ff d0                	callq  *%rax
  800421ab0c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421ab0f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421ab13:	79 5c                	jns    800421ab71 <test_ept_map+0x86f>
  800421ab15:	eb 2a                	jmp    800421ab41 <test_ept_map+0x83f>
  800421ab17:	48 ba 78 22 22 04 80 	movabs $0x8004222278,%rdx
  800421ab1e:	00 00 00 
  800421ab21:	be 58 01 00 00       	mov    $0x158,%esi
  800421ab26:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421ab2d:	00 00 00 
  800421ab30:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab35:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ab3c:	00 00 00 
  800421ab3f:	ff d1                	callq  *%rcx
  800421ab41:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ab44:	89 c1                	mov    %eax,%ecx
  800421ab46:	48 ba a0 22 22 04 80 	movabs $0x80042222a0,%rdx
  800421ab4d:	00 00 00 
  800421ab50:	be 5d 01 00 00       	mov    $0x15d,%esi
  800421ab55:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421ab5c:	00 00 00 
  800421ab5f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab64:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ab6b:	00 00 00 
  800421ab6e:	41 ff d0             	callq  *%r8
  800421ab71:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ab75:	48 89 c7             	mov    %rax,%rdi
  800421ab78:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  800421ab7f:	00 00 00 
  800421ab82:	ff d0                	callq  *%rax
  800421ab84:	48 89 c3             	mov    %rax,%rbx
  800421ab87:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ab8b:	48 8b 00             	mov    (%rax),%rax
  800421ab8e:	48 89 c7             	mov    %rax,%rdi
  800421ab91:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  800421ab98:	00 00 00 
  800421ab9b:	ff d0                	callq  *%rax
  800421ab9d:	48 39 c3             	cmp    %rax,%rbx
  800421aba0:	74 5d                	je     800421abff <test_ept_map+0x8fd>
  800421aba2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421aba6:	48 8b 00             	mov    (%rax),%rax
  800421aba9:	48 89 c7             	mov    %rax,%rdi
  800421abac:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  800421abb3:	00 00 00 
  800421abb6:	ff d0                	callq  *%rax
  800421abb8:	48 89 c3             	mov    %rax,%rbx
  800421abbb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421abbf:	48 89 c7             	mov    %rax,%rdi
  800421abc2:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  800421abc9:	00 00 00 
  800421abcc:	ff d0                	callq  *%rax
  800421abce:	49 89 d8             	mov    %rbx,%r8
  800421abd1:	48 89 c1             	mov    %rax,%rcx
  800421abd4:	48 ba c0 22 22 04 80 	movabs $0x80042222c0,%rdx
  800421abdb:	00 00 00 
  800421abde:	be 60 01 00 00       	mov    $0x160,%esi
  800421abe3:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421abea:	00 00 00 
  800421abed:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abf2:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  800421abf9:	00 00 00 
  800421abfc:	41 ff d1             	callq  *%r9
  800421abff:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ac03:	48 8b 00             	mov    (%rax),%rax
  800421ac06:	48 89 c7             	mov    %rax,%rdi
  800421ac09:	48 b8 a2 99 21 04 80 	movabs $0x80042199a2,%rax
  800421ac10:	00 00 00 
  800421ac13:	ff d0                	callq  *%rax
  800421ac15:	48 89 c3             	mov    %rax,%rbx
  800421ac18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ac1c:	48 89 c7             	mov    %rax,%rdi
  800421ac1f:	48 b8 84 98 21 04 80 	movabs $0x8004219884,%rax
  800421ac26:	00 00 00 
  800421ac29:	ff d0                	callq  *%rax
  800421ac2b:	48 89 da             	mov    %rbx,%rdx
  800421ac2e:	48 89 c6             	mov    %rax,%rsi
  800421ac31:	48 bf f0 22 22 04 80 	movabs $0x80042222f0,%rdi
  800421ac38:	00 00 00 
  800421ac3b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac40:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421ac47:	00 00 00 
  800421ac4a:	ff d1                	callq  *%rcx
  800421ac4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ac50:	48 89 c7             	mov    %rax,%rdi
  800421ac53:	48 b8 1a 99 21 04 80 	movabs $0x800421991a,%rax
  800421ac5a:	00 00 00 
  800421ac5d:	ff d0                	callq  *%rax
  800421ac5f:	48 89 c6             	mov    %rax,%rsi
  800421ac62:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ac66:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421ac6d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421ac73:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421ac78:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421ac7d:	48 89 c7             	mov    %rax,%rdi
  800421ac80:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421ac87:	00 00 00 
  800421ac8a:	ff d0                	callq  *%rax
  800421ac8c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421ac8f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421ac93:	79 66                	jns    800421acfb <test_ept_map+0x9f9>
  800421ac95:	48 bf 20 23 22 04 80 	movabs $0x8004222320,%rdi
  800421ac9c:	00 00 00 
  800421ac9f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aca4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421acab:	00 00 00 
  800421acae:	ff d2                	callq  *%rdx
  800421acb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421acb4:	48 89 c7             	mov    %rax,%rdi
  800421acb7:	48 b8 1a 99 21 04 80 	movabs $0x800421991a,%rax
  800421acbe:	00 00 00 
  800421acc1:	ff d0                	callq  *%rax
  800421acc3:	48 89 c6             	mov    %rax,%rsi
  800421acc6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421acca:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421acd1:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421acd7:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421acdc:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421ace1:	48 89 c7             	mov    %rax,%rdi
  800421ace4:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421aceb:	00 00 00 
  800421acee:	ff d0                	callq  *%rax
  800421acf0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421acf3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421acf7:	79 56                	jns    800421ad4f <test_ept_map+0xa4d>
  800421acf9:	eb 2a                	jmp    800421ad25 <test_ept_map+0xa23>
  800421acfb:	48 ba 50 23 22 04 80 	movabs $0x8004222350,%rdx
  800421ad02:	00 00 00 
  800421ad05:	be 69 01 00 00       	mov    $0x169,%esi
  800421ad0a:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421ad11:	00 00 00 
  800421ad14:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad19:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ad20:	00 00 00 
  800421ad23:	ff d1                	callq  *%rcx
  800421ad25:	48 ba 98 23 22 04 80 	movabs $0x8004222398,%rdx
  800421ad2c:	00 00 00 
  800421ad2f:	be 6d 01 00 00       	mov    $0x16d,%esi
  800421ad34:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421ad3b:	00 00 00 
  800421ad3e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad43:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ad4a:	00 00 00 
  800421ad4d:	ff d1                	callq  *%rcx
  800421ad4f:	48 bf c8 23 22 04 80 	movabs $0x80042223c8,%rdi
  800421ad56:	00 00 00 
  800421ad59:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad5e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ad65:	00 00 00 
  800421ad68:	ff d2                	callq  *%rdx
  800421ad6a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ad6e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421ad75:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421ad79:	48 89 d1             	mov    %rdx,%rcx
  800421ad7c:	ba 00 00 00 00       	mov    $0x0,%edx
  800421ad81:	be 00 00 40 00       	mov    $0x400000,%esi
  800421ad86:	48 89 c7             	mov    %rax,%rdi
  800421ad89:	48 b8 60 9a 21 04 80 	movabs $0x8004219a60,%rax
  800421ad90:	00 00 00 
  800421ad93:	ff d0                	callq  *%rax
  800421ad95:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421ad98:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421ad9c:	79 30                	jns    800421adce <test_ept_map+0xacc>
  800421ad9e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ada1:	89 c1                	mov    %eax,%ecx
  800421ada3:	48 ba a0 22 22 04 80 	movabs $0x80042222a0,%rdx
  800421adaa:	00 00 00 
  800421adad:	be 73 01 00 00       	mov    $0x173,%esi
  800421adb2:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421adb9:	00 00 00 
  800421adbc:	b8 00 00 00 00       	mov    $0x0,%eax
  800421adc1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421adc8:	00 00 00 
  800421adcb:	41 ff d0             	callq  *%r8
  800421adce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421add2:	48 8b 00             	mov    (%rax),%rax
  800421add5:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421adda:	48 83 f8 71          	cmp    $0x71,%rax
  800421adde:	75 36                	jne    800421ae16 <test_ept_map+0xb14>
  800421ade0:	48 bf f0 23 22 04 80 	movabs $0x80042223f0,%rdi
  800421ade7:	00 00 00 
  800421adea:	b8 00 00 00 00       	mov    $0x0,%eax
  800421adef:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421adf6:	00 00 00 
  800421adf9:	ff d2                	callq  *%rdx
  800421adfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421adff:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421ae06:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ae0a:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
  800421ae11:	e9 23 01 00 00       	jmpq   800421af39 <test_ept_map+0xc37>
  800421ae16:	48 ba 18 24 22 04 80 	movabs $0x8004222418,%rdx
  800421ae1d:	00 00 00 
  800421ae20:	be 77 01 00 00       	mov    $0x177,%esi
  800421ae25:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421ae2c:	00 00 00 
  800421ae2f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ae34:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ae3b:	00 00 00 
  800421ae3e:	ff d1                	callq  *%rcx
  800421ae40:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421ae43:	89 d0                	mov    %edx,%eax
  800421ae45:	c1 e0 03             	shl    $0x3,%eax
  800421ae48:	01 d0                	add    %edx,%eax
  800421ae4a:	83 c0 0c             	add    $0xc,%eax
  800421ae4d:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421ae52:	89 c1                	mov    %eax,%ecx
  800421ae54:	48 d3 ea             	shr    %cl,%rdx
  800421ae57:	48 89 d0             	mov    %rdx,%rax
  800421ae5a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421ae5f:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421ae62:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421ae65:	48 98                	cltq   
  800421ae67:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421ae6e:	00 
  800421ae6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ae73:	48 01 d0             	add    %rdx,%rax
  800421ae76:	48 8b 00             	mov    (%rax),%rax
  800421ae79:	48 89 c7             	mov    %rax,%rdi
  800421ae7c:	48 b8 42 9a 21 04 80 	movabs $0x8004219a42,%rax
  800421ae83:	00 00 00 
  800421ae86:	ff d0                	callq  *%rax
  800421ae88:	85 c0                	test   %eax,%eax
  800421ae8a:	75 30                	jne    800421aebc <test_ept_map+0xbba>
  800421ae8c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421ae8f:	89 c1                	mov    %eax,%ecx
  800421ae91:	48 ba 48 24 22 04 80 	movabs $0x8004222448,%rdx
  800421ae98:	00 00 00 
  800421ae9b:	be 7d 01 00 00       	mov    $0x17d,%esi
  800421aea0:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421aea7:	00 00 00 
  800421aeaa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aeaf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421aeb6:	00 00 00 
  800421aeb9:	41 ff d0             	callq  *%r8
  800421aebc:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421aebf:	48 98                	cltq   
  800421aec1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421aec8:	00 
  800421aec9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421aecd:	48 01 d0             	add    %rdx,%rax
  800421aed0:	48 8b 00             	mov    (%rax),%rax
  800421aed3:	83 e0 07             	and    $0x7,%eax
  800421aed6:	48 85 c0             	test   %rax,%rax
  800421aed9:	75 30                	jne    800421af0b <test_ept_map+0xc09>
  800421aedb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aede:	89 c1                	mov    %eax,%ecx
  800421aee0:	48 ba 88 24 22 04 80 	movabs $0x8004222488,%rdx
  800421aee7:	00 00 00 
  800421aeea:	be 80 01 00 00       	mov    $0x180,%esi
  800421aeef:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421aef6:	00 00 00 
  800421aef9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aefe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421af05:	00 00 00 
  800421af08:	41 ff d0             	callq  *%r8
  800421af0b:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421af0e:	48 98                	cltq   
  800421af10:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421af17:	00 
  800421af18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421af1c:	48 01 d0             	add    %rdx,%rax
  800421af1f:	48 8b 00             	mov    (%rax),%rax
  800421af22:	48 89 c7             	mov    %rax,%rdi
  800421af25:	48 b8 ba 99 21 04 80 	movabs $0x80042199ba,%rax
  800421af2c:	00 00 00 
  800421af2f:	ff d0                	callq  *%rax
  800421af31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421af35:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  800421af39:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800421af3d:	0f 8f fd fe ff ff    	jg     800421ae40 <test_ept_map+0xb3e>
  800421af43:	48 bf b8 24 22 04 80 	movabs $0x80042224b8,%rdi
  800421af4a:	00 00 00 
  800421af4d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421af52:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421af59:	00 00 00 
  800421af5c:	ff d2                	callq  *%rdx
  800421af5e:	48 bf e0 24 22 04 80 	movabs $0x80042224e0,%rdi
  800421af65:	00 00 00 
  800421af68:	b8 00 00 00 00       	mov    $0x0,%eax
  800421af6d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421af74:	00 00 00 
  800421af77:	ff d2                	callq  *%rdx
  800421af79:	48 ba e0 24 22 04 80 	movabs $0x80042224e0,%rdx
  800421af80:	00 00 00 
  800421af83:	be 88 01 00 00       	mov    $0x188,%esi
  800421af88:	48 bf b3 1d 22 04 80 	movabs $0x8004221db3,%rdi
  800421af8f:	00 00 00 
  800421af92:	b8 00 00 00 00       	mov    $0x0,%eax
  800421af97:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421af9e:	00 00 00 
  800421afa1:	ff d1                	callq  *%rcx

000000800421afa3 <vmcs_writel>:
  800421afa3:	55                   	push   %rbp
  800421afa4:	48 89 e5             	mov    %rsp,%rbp
  800421afa7:	48 83 ec 20          	sub    $0x20,%rsp
  800421afab:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421afae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421afb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421afb6:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421afb9:	f8                   	clc    
  800421afba:	0f 79 d0             	vmwrite %rax,%rdx
  800421afbd:	0f 96 c0             	setbe  %al
  800421afc0:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421afc3:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421afc7:	c9                   	leaveq 
  800421afc8:	c3                   	retq   

000000800421afc9 <vmcs_readl>:
  800421afc9:	55                   	push   %rbp
  800421afca:	48 89 e5             	mov    %rsp,%rbp
  800421afcd:	48 83 ec 14          	sub    $0x14,%rsp
  800421afd1:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421afd4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421afd7:	89 c2                	mov    %eax,%edx
  800421afd9:	0f 78 d0             	vmread %rdx,%rax
  800421afdc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421afe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421afe4:	c9                   	leaveq 
  800421afe5:	c3                   	retq   

000000800421afe6 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  800421afe6:	55                   	push   %rbp
  800421afe7:	48 89 e5             	mov    %rsp,%rbp
  800421afea:	53                   	push   %rbx
  800421afeb:	48 83 ec 38          	sub    $0x38,%rsp
  800421afef:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421aff2:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421aff6:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421affa:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421affe:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  800421b002:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b005:	0f a2                	cpuid  
  800421b007:	89 de                	mov    %ebx,%esi
  800421b009:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b00c:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421b00f:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421b012:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  800421b015:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421b01a:	74 09                	je     800421b025 <cpuid+0x3f>
		*eaxp = eax;
  800421b01c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b020:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421b023:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421b025:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421b02a:	74 09                	je     800421b035 <cpuid+0x4f>
		*ebxp = ebx;
  800421b02c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b030:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421b033:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421b035:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421b03a:	74 09                	je     800421b045 <cpuid+0x5f>
		*ecxp = ecx;
  800421b03c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421b040:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421b043:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421b045:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421b04a:	74 09                	je     800421b055 <cpuid+0x6f>
		*edxp = edx;
  800421b04c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421b050:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421b053:	89 10                	mov    %edx,(%rax)
}
  800421b055:	48 83 c4 38          	add    $0x38,%rsp
  800421b059:	5b                   	pop    %rbx
  800421b05a:	5d                   	pop    %rbp
  800421b05b:	c3                   	retq   

000000800421b05c <page2ppn>:
  800421b05c:	55                   	push   %rbp
  800421b05d:	48 89 e5             	mov    %rsp,%rbp
  800421b060:	48 83 ec 08          	sub    $0x8,%rsp
  800421b064:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421b068:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421b06c:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800421b073:	00 00 00 
  800421b076:	48 8b 00             	mov    (%rax),%rax
  800421b079:	48 29 c2             	sub    %rax,%rdx
  800421b07c:	48 89 d0             	mov    %rdx,%rax
  800421b07f:	48 c1 f8 04          	sar    $0x4,%rax
  800421b083:	c9                   	leaveq 
  800421b084:	c3                   	retq   

000000800421b085 <page2pa>:
  800421b085:	55                   	push   %rbp
  800421b086:	48 89 e5             	mov    %rsp,%rbp
  800421b089:	48 83 ec 08          	sub    $0x8,%rsp
  800421b08d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421b091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b095:	48 89 c7             	mov    %rax,%rdi
  800421b098:	48 b8 5c b0 21 04 80 	movabs $0x800421b05c,%rax
  800421b09f:	00 00 00 
  800421b0a2:	ff d0                	callq  *%rax
  800421b0a4:	48 c1 e0 0c          	shl    $0xc,%rax
  800421b0a8:	c9                   	leaveq 
  800421b0a9:	c3                   	retq   

000000800421b0aa <page2kva>:
  800421b0aa:	55                   	push   %rbp
  800421b0ab:	48 89 e5             	mov    %rsp,%rbp
  800421b0ae:	48 83 ec 20          	sub    $0x20,%rsp
  800421b0b2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421b0b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b0ba:	48 89 c7             	mov    %rax,%rdi
  800421b0bd:	48 b8 85 b0 21 04 80 	movabs $0x800421b085,%rax
  800421b0c4:	00 00 00 
  800421b0c7:	ff d0                	callq  *%rax
  800421b0c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b0cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b0d1:	48 c1 e8 0c          	shr    $0xc,%rax
  800421b0d5:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b0d8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421b0db:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421b0e2:	00 00 00 
  800421b0e5:	48 8b 00             	mov    (%rax),%rax
  800421b0e8:	48 39 c2             	cmp    %rax,%rdx
  800421b0eb:	72 32                	jb     800421b11f <page2kva+0x75>
  800421b0ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b0f1:	48 89 c1             	mov    %rax,%rcx
  800421b0f4:	48 ba 10 25 22 04 80 	movabs $0x8004222510,%rdx
  800421b0fb:	00 00 00 
  800421b0fe:	be 62 00 00 00       	mov    $0x62,%esi
  800421b103:	48 bf 33 25 22 04 80 	movabs $0x8004222533,%rdi
  800421b10a:	00 00 00 
  800421b10d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b112:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b119:	00 00 00 
  800421b11c:	41 ff d0             	callq  *%r8
  800421b11f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421b126:	00 00 00 
  800421b129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b12d:	48 01 d0             	add    %rdx,%rax
  800421b130:	c9                   	leaveq 
  800421b131:	c3                   	retq   

000000800421b132 <lock_kernel>:
  800421b132:	55                   	push   %rbp
  800421b133:	48 89 e5             	mov    %rsp,%rbp
  800421b136:	48 bf 60 67 23 04 80 	movabs $0x8004236760,%rdi
  800421b13d:	00 00 00 
  800421b140:	48 b8 1d 83 21 04 80 	movabs $0x800421831d,%rax
  800421b147:	00 00 00 
  800421b14a:	ff d0                	callq  *%rax
  800421b14c:	5d                   	pop    %rbp
  800421b14d:	c3                   	retq   

000000800421b14e <unlock_kernel>:
  800421b14e:	55                   	push   %rbp
  800421b14f:	48 89 e5             	mov    %rsp,%rbp
  800421b152:	48 bf 60 67 23 04 80 	movabs $0x8004236760,%rdi
  800421b159:	00 00 00 
  800421b15c:	48 b8 f4 83 21 04 80 	movabs $0x80042183f4,%rax
  800421b163:	00 00 00 
  800421b166:	ff d0                	callq  *%rax
  800421b168:	f3 90                	pause  
  800421b16a:	5d                   	pop    %rbp
  800421b16b:	c3                   	retq   

000000800421b16c <vmx_list_vms>:
  800421b16c:	55                   	push   %rbp
  800421b16d:	48 89 e5             	mov    %rsp,%rbp
  800421b170:	48 83 ec 10          	sub    $0x10,%rsp
  800421b174:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421b17b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b182:	e9 96 00 00 00       	jmpq   800421b21d <vmx_list_vms+0xb1>
  800421b187:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421b18e:	00 00 00 
  800421b191:	48 8b 10             	mov    (%rax),%rdx
  800421b194:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b197:	48 98                	cltq   
  800421b199:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b1a0:	48 01 d0             	add    %rdx,%rax
  800421b1a3:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421b1a9:	83 f8 03             	cmp    $0x3,%eax
  800421b1ac:	75 6b                	jne    800421b219 <vmx_list_vms+0xad>
  800421b1ae:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421b1b2:	75 1b                	jne    800421b1cf <vmx_list_vms+0x63>
  800421b1b4:	48 bf 42 25 22 04 80 	movabs $0x8004222542,%rdi
  800421b1bb:	00 00 00 
  800421b1be:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b1c3:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b1ca:	00 00 00 
  800421b1cd:	ff d2                	callq  *%rdx
  800421b1cf:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421b1d3:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421b1da:	00 00 00 
  800421b1dd:	48 8b 10             	mov    (%rax),%rdx
  800421b1e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b1e3:	48 98                	cltq   
  800421b1e5:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b1ec:	48 01 d0             	add    %rdx,%rax
  800421b1ef:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421b1f5:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421b1f8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421b1fb:	89 c6                	mov    %eax,%esi
  800421b1fd:	48 bf 50 25 22 04 80 	movabs $0x8004222550,%rdi
  800421b204:	00 00 00 
  800421b207:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b20c:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421b213:	00 00 00 
  800421b216:	41 ff d0             	callq  *%r8
  800421b219:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b21d:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421b224:	0f 8e 5d ff ff ff    	jle    800421b187 <vmx_list_vms+0x1b>
  800421b22a:	c9                   	leaveq 
  800421b22b:	c3                   	retq   

000000800421b22c <vmx_sel_resume>:
  800421b22c:	55                   	push   %rbp
  800421b22d:	48 89 e5             	mov    %rsp,%rbp
  800421b230:	48 83 ec 20          	sub    $0x20,%rsp
  800421b234:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421b237:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421b23e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b245:	e9 84 00 00 00       	jmpq   800421b2ce <vmx_sel_resume+0xa2>
  800421b24a:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421b251:	00 00 00 
  800421b254:	48 8b 10             	mov    (%rax),%rdx
  800421b257:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b25a:	48 98                	cltq   
  800421b25c:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b263:	48 01 d0             	add    %rdx,%rax
  800421b266:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421b26c:	83 f8 03             	cmp    $0x3,%eax
  800421b26f:	75 59                	jne    800421b2ca <vmx_sel_resume+0x9e>
  800421b271:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421b275:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421b278:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421b27b:	75 4d                	jne    800421b2ca <vmx_sel_resume+0x9e>
  800421b27d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b280:	89 c6                	mov    %eax,%esi
  800421b282:	48 bf 5d 25 22 04 80 	movabs $0x800422255d,%rdi
  800421b289:	00 00 00 
  800421b28c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b291:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b298:	00 00 00 
  800421b29b:	ff d2                	callq  *%rdx
  800421b29d:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421b2a4:	00 00 00 
  800421b2a7:	48 8b 10             	mov    (%rax),%rdx
  800421b2aa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b2ad:	48 98                	cltq   
  800421b2af:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b2b6:	48 01 d0             	add    %rdx,%rax
  800421b2b9:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800421b2c0:	00 00 00 
  800421b2c3:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b2c8:	eb 36                	jmp    800421b300 <vmx_sel_resume+0xd4>
  800421b2ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b2ce:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421b2d5:	0f 8e 6f ff ff ff    	jle    800421b24a <vmx_sel_resume+0x1e>
  800421b2db:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b2de:	89 c6                	mov    %eax,%esi
  800421b2e0:	48 bf 70 25 22 04 80 	movabs $0x8004222570,%rdi
  800421b2e7:	00 00 00 
  800421b2ea:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b2ef:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b2f6:	00 00 00 
  800421b2f9:	ff d2                	callq  *%rdx
  800421b2fb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b300:	c9                   	leaveq 
  800421b301:	c3                   	retq   

000000800421b302 <vmx_check_support>:
  800421b302:	55                   	push   %rbp
  800421b303:	48 89 e5             	mov    %rsp,%rbp
  800421b306:	48 83 ec 20          	sub    $0x20,%rsp
  800421b30a:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  800421b30e:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800421b312:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  800421b316:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  800421b31a:	49 89 f0             	mov    %rsi,%r8
  800421b31d:	48 89 c6             	mov    %rax,%rsi
  800421b320:	bf 01 00 00 00       	mov    $0x1,%edi
  800421b325:	48 b8 e6 af 21 04 80 	movabs $0x800421afe6,%rax
  800421b32c:	00 00 00 
  800421b32f:	ff d0                	callq  *%rax
  800421b331:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421b334:	83 e0 20             	and    $0x20,%eax
  800421b337:	85 c0                	test   %eax,%eax
  800421b339:	0f 95 c0             	setne  %al
  800421b33c:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421b33f:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421b343:	74 1d                	je     800421b362 <vmx_check_support+0x60>
  800421b345:	48 bf 92 25 22 04 80 	movabs $0x8004222592,%rdi
  800421b34c:	00 00 00 
  800421b34f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b354:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b35b:	00 00 00 
  800421b35e:	ff d2                	callq  *%rdx
  800421b360:	eb 1b                	jmp    800421b37d <vmx_check_support+0x7b>
  800421b362:	48 bf b0 25 22 04 80 	movabs $0x80042225b0,%rdi
  800421b369:	00 00 00 
  800421b36c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b371:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b378:	00 00 00 
  800421b37b:	ff d2                	callq  *%rdx
  800421b37d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421b381:	c9                   	leaveq 
  800421b382:	c3                   	retq   

000000800421b383 <vmx_check_ept>:
  800421b383:	55                   	push   %rbp
  800421b384:	48 89 e5             	mov    %rsp,%rbp
  800421b387:	48 83 ec 50          	sub    $0x50,%rsp
  800421b38b:	c7 45 e0 82 04 00 00 	movl   $0x482,-0x20(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b392:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421b395:	89 c1                	mov    %eax,%ecx
  800421b397:	0f 32                	rdmsr  
  800421b399:	89 55 dc             	mov    %edx,-0x24(%rbp)
  800421b39c:	89 45 d8             	mov    %eax,-0x28(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b39f:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421b3a6:	00 
	ret = edx;
  800421b3a7:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b3aa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  800421b3ae:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  800421b3b3:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b3b6:	48 09 45 d0          	or     %rax,-0x30(%rbp)

	return ret;
  800421b3ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b3be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b3c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b3c6:	48 c1 e8 3f          	shr    $0x3f,%rax
  800421b3ca:	88 45 f7             	mov    %al,-0x9(%rbp)
  800421b3cd:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  800421b3d1:	74 76                	je     800421b449 <vmx_check_ept+0xc6>
  800421b3d3:	c7 45 cc 8b 04 00 00 	movl   $0x48b,-0x34(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b3da:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b3dd:	89 c1                	mov    %eax,%ecx
  800421b3df:	0f 32                	rdmsr  
  800421b3e1:	89 55 c8             	mov    %edx,-0x38(%rbp)
  800421b3e4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b3e7:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800421b3ee:	00 
	ret = edx;
  800421b3ef:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421b3f2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ret = ret << 32;
  800421b3f6:	48 c1 65 b8 20       	shlq   $0x20,-0x48(%rbp)
	ret |= eax;
  800421b3fb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b3fe:	48 09 45 b8          	or     %rax,-0x48(%rbp)

	return ret;
  800421b402:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b406:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b40a:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  800421b411:	00 00 00 
  800421b414:	48 23 45 e8          	and    -0x18(%rbp),%rax
  800421b418:	48 85 c0             	test   %rax,%rax
  800421b41b:	0f 95 c0             	setne  %al
  800421b41e:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421b421:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  800421b425:	74 22                	je     800421b449 <vmx_check_ept+0xc6>
  800421b427:	48 bf d0 25 22 04 80 	movabs $0x80042225d0,%rdi
  800421b42e:	00 00 00 
  800421b431:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b436:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b43d:	00 00 00 
  800421b440:	ff d2                	callq  *%rdx
  800421b442:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b447:	eb 05                	jmp    800421b44e <vmx_check_ept+0xcb>
  800421b449:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b44e:	c9                   	leaveq 
  800421b44f:	c3                   	retq   

000000800421b450 <check_fixed_bits>:
  800421b450:	55                   	push   %rbp
  800421b451:	48 89 e5             	mov    %rsp,%rbp
  800421b454:	48 83 ec 30          	sub    $0x30,%rsp
  800421b458:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421b45c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421b460:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421b464:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b46b:	e9 96 00 00 00       	jmpq   800421b506 <check_fixed_bits+0xb6>
  800421b470:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b473:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421b477:	89 c1                	mov    %eax,%ecx
  800421b479:	48 d3 ea             	shr    %cl,%rdx
  800421b47c:	48 89 d0             	mov    %rdx,%rax
  800421b47f:	83 e0 01             	and    $0x1,%eax
  800421b482:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421b485:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  800421b489:	75 1e                	jne    800421b4a9 <check_fixed_bits+0x59>
  800421b48b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b48e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b492:	89 c1                	mov    %eax,%ecx
  800421b494:	48 d3 ea             	shr    %cl,%rdx
  800421b497:	48 89 d0             	mov    %rdx,%rax
  800421b49a:	83 e0 01             	and    $0x1,%eax
  800421b49d:	48 85 c0             	test   %rax,%rax
  800421b4a0:	75 60                	jne    800421b502 <check_fixed_bits+0xb2>
  800421b4a2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b4a7:	eb 6e                	jmp    800421b517 <check_fixed_bits+0xc7>
  800421b4a9:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421b4ad:	75 1e                	jne    800421b4cd <check_fixed_bits+0x7d>
  800421b4af:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b4b2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421b4b6:	89 c1                	mov    %eax,%ecx
  800421b4b8:	48 d3 ea             	shr    %cl,%rdx
  800421b4bb:	48 89 d0             	mov    %rdx,%rax
  800421b4be:	83 e0 01             	and    $0x1,%eax
  800421b4c1:	48 85 c0             	test   %rax,%rax
  800421b4c4:	74 3c                	je     800421b502 <check_fixed_bits+0xb2>
  800421b4c6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b4cb:	eb 4a                	jmp    800421b517 <check_fixed_bits+0xc7>
  800421b4cd:	48 b9 e8 25 22 04 80 	movabs $0x80042225e8,%rcx
  800421b4d4:	00 00 00 
  800421b4d7:	48 ba ee 25 22 04 80 	movabs $0x80042225ee,%rdx
  800421b4de:	00 00 00 
  800421b4e1:	be 85 00 00 00       	mov    $0x85,%esi
  800421b4e6:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421b4ed:	00 00 00 
  800421b4f0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b4f5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b4fc:	00 00 00 
  800421b4ff:	41 ff d0             	callq  *%r8
  800421b502:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b506:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b509:	83 f8 3f             	cmp    $0x3f,%eax
  800421b50c:	0f 86 5e ff ff ff    	jbe    800421b470 <check_fixed_bits+0x20>
  800421b512:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b517:	c9                   	leaveq 
  800421b518:	c3                   	retq   

000000800421b519 <vmx_init_vmcs>:
  800421b519:	55                   	push   %rbp
  800421b51a:	48 89 e5             	mov    %rsp,%rbp
  800421b51d:	48 83 ec 40          	sub    $0x40,%rsp
  800421b521:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b528:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b52b:	89 c1                	mov    %eax,%ecx
  800421b52d:	0f 32                	rdmsr  
  800421b52f:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800421b532:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b535:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421b53c:	00 
	ret = edx;
  800421b53d:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b540:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  800421b544:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  800421b549:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b54c:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  800421b550:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421b554:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b558:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b55c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421b55f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b563:	48 c1 e8 20          	shr    $0x20,%rax
  800421b567:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421b56c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b56f:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  800421b576:	76 35                	jbe    800421b5ad <vmx_init_vmcs+0x94>
  800421b578:	48 b9 10 26 22 04 80 	movabs $0x8004222610,%rcx
  800421b57f:	00 00 00 
  800421b582:	48 ba ee 25 22 04 80 	movabs $0x80042225ee,%rdx
  800421b589:	00 00 00 
  800421b58c:	be 95 00 00 00       	mov    $0x95,%esi
  800421b591:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421b598:	00 00 00 
  800421b59b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b5a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b5a7:	00 00 00 
  800421b5aa:	41 ff d0             	callq  *%r8
  800421b5ad:	bf 01 00 00 00       	mov    $0x1,%edi
  800421b5b2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421b5b9:	00 00 00 
  800421b5bc:	ff d0                	callq  *%rax
  800421b5be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b5c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421b5c7:	75 07                	jne    800421b5d0 <vmx_init_vmcs+0xb7>
  800421b5c9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b5ce:	eb 4d                	jmp    800421b61d <vmx_init_vmcs+0x104>
  800421b5d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b5d4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421b5d8:	8d 50 01             	lea    0x1(%rax),%edx
  800421b5db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b5df:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421b5e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b5e7:	48 89 c7             	mov    %rax,%rdi
  800421b5ea:	48 b8 aa b0 21 04 80 	movabs $0x800421b0aa,%rax
  800421b5f1:	00 00 00 
  800421b5f4:	ff d0                	callq  *%rax
  800421b5f6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b5fa:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  800421b5fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b602:	ba 04 00 00 00       	mov    $0x4,%edx
  800421b607:	48 89 ce             	mov    %rcx,%rsi
  800421b60a:	48 89 c7             	mov    %rax,%rdi
  800421b60d:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800421b614:	00 00 00 
  800421b617:	ff d0                	callq  *%rax
  800421b619:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b61d:	c9                   	leaveq 
  800421b61e:	c3                   	retq   

000000800421b61f <vmx_init_vmxon>:
  800421b61f:	55                   	push   %rbp
  800421b620:	48 89 e5             	mov    %rsp,%rbp
  800421b623:	53                   	push   %rbx
  800421b624:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  800421b62b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b630:	48 ba 19 b5 21 04 80 	movabs $0x800421b519,%rdx
  800421b637:	00 00 00 
  800421b63a:	ff d2                	callq  *%rdx
  800421b63c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b640:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421b645:	75 0a                	jne    800421b651 <vmx_init_vmxon+0x32>
  800421b647:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421b64c:	e9 75 04 00 00       	jmpq   800421bac6 <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b651:	0f 20 c0             	mov    %cr0,%rax
  800421b654:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  800421b658:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421b65c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b660:	0f 20 e0             	mov    %cr4,%rax
  800421b663:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b667:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b66b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421b66f:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  800421b674:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b678:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  800421b67c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421b680:	0f 22 c0             	mov    %rax,%cr0
  800421b683:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b68a:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b68d:	89 c1                	mov    %eax,%ecx
  800421b68f:	0f 32                	rdmsr  
  800421b691:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800421b694:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b697:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421b69e:	00 
	ret = edx;
  800421b69f:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421b6a2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  800421b6a6:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  800421b6ab:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b6ae:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  800421b6b2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421b6b6:	48 89 c6             	mov    %rax,%rsi
  800421b6b9:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b6c0:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b6c3:	89 c1                	mov    %eax,%ecx
  800421b6c5:	0f 32                	rdmsr  
  800421b6c7:	89 55 90             	mov    %edx,-0x70(%rbp)
  800421b6ca:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b6cd:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421b6d4:	00 
	ret = edx;
  800421b6d5:	8b 45 90             	mov    -0x70(%rbp),%eax
  800421b6d8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  800421b6dc:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  800421b6e1:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b6e4:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  800421b6e8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421b6ec:	48 89 c1             	mov    %rax,%rcx
  800421b6ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b6f3:	48 89 f2             	mov    %rsi,%rdx
  800421b6f6:	48 89 ce             	mov    %rcx,%rsi
  800421b6f9:	48 89 c7             	mov    %rax,%rdi
  800421b6fc:	48 b8 50 b4 21 04 80 	movabs $0x800421b450,%rax
  800421b703:	00 00 00 
  800421b706:	ff d0                	callq  *%rax
  800421b708:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421b70b:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421b70f:	83 f0 01             	xor    $0x1,%eax
  800421b712:	84 c0                	test   %al,%al
  800421b714:	74 1d                	je     800421b733 <vmx_init_vmxon+0x114>
  800421b716:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b71a:	48 89 c7             	mov    %rax,%rdi
  800421b71d:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b724:	00 00 00 
  800421b727:	ff d0                	callq  *%rax
  800421b729:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b72e:	e9 93 03 00 00       	jmpq   800421bac6 <vmx_init_vmxon+0x4a7>
  800421b733:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421b73a:	00 
  800421b73b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b73f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421b746:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421b74d:	0f 22 e0             	mov    %rax,%cr4
  800421b750:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421b757:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b75a:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b760:	89 c1                	mov    %eax,%ecx
  800421b762:	0f 32                	rdmsr  
  800421b764:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421b76a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b770:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421b777:	00 00 00 00 
	ret = edx;
  800421b77b:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421b781:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421b788:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421b78f:	20 
	ret |= eax;
  800421b790:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b796:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  800421b79d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421b7a4:	48 89 c6             	mov    %rax,%rsi
  800421b7a7:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421b7ae:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b7b1:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b7b7:	89 c1                	mov    %eax,%ecx
  800421b7b9:	0f 32                	rdmsr  
  800421b7bb:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421b7c1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b7c7:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421b7ce:	00 00 00 00 
	ret = edx;
  800421b7d2:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421b7d8:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421b7df:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421b7e6:	20 
	ret |= eax;
  800421b7e7:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421b7ed:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  800421b7f4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421b7fb:	48 89 c1             	mov    %rax,%rcx
  800421b7fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b802:	48 89 f2             	mov    %rsi,%rdx
  800421b805:	48 89 ce             	mov    %rcx,%rsi
  800421b808:	48 89 c7             	mov    %rax,%rdi
  800421b80b:	48 b8 50 b4 21 04 80 	movabs $0x800421b450,%rax
  800421b812:	00 00 00 
  800421b815:	ff d0                	callq  *%rax
  800421b817:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421b81a:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421b81e:	83 f0 01             	xor    $0x1,%eax
  800421b821:	84 c0                	test   %al,%al
  800421b823:	74 1d                	je     800421b842 <vmx_init_vmxon+0x223>
  800421b825:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b829:	48 89 c7             	mov    %rax,%rdi
  800421b82c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b833:	00 00 00 
  800421b836:	ff d0                	callq  *%rax
  800421b838:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b83d:	e9 84 02 00 00       	jmpq   800421bac6 <vmx_init_vmxon+0x4a7>
  800421b842:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421b849:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b84c:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421b852:	89 c1                	mov    %eax,%ecx
  800421b854:	0f 32                	rdmsr  
  800421b856:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421b85c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b862:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b869:	00 00 00 00 
	ret = edx;
  800421b86d:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421b873:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421b87a:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421b881:	20 
	ret |= eax;
  800421b882:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b888:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421b88f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421b896:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b89a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b89e:	83 e0 04             	and    $0x4,%eax
  800421b8a1:	48 85 c0             	test   %rax,%rax
  800421b8a4:	0f 85 e8 00 00 00    	jne    800421b992 <vmx_init_vmxon+0x373>
  800421b8aa:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421b8af:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421b8b6:	00 00 00 
  800421b8b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b8bd:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b8c4:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b8cb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b8d1:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b8d8:	48 c1 e8 20          	shr    $0x20,%rax
  800421b8dc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421b8e2:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421b8e8:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b8ee:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b8f4:	0f 30                	wrmsr  
  800421b8f6:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421b8fd:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b900:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b906:	89 c1                	mov    %eax,%ecx
  800421b908:	0f 32                	rdmsr  
  800421b90a:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421b910:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b916:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421b91d:	00 00 00 00 
	ret = edx;
  800421b921:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b927:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421b92e:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421b935:	20 
	ret |= eax;
  800421b936:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b93c:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421b943:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421b94a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b94e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b952:	83 e0 04             	and    $0x4,%eax
  800421b955:	48 85 c0             	test   %rax,%rax
  800421b958:	75 38                	jne    800421b992 <vmx_init_vmxon+0x373>
  800421b95a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b95e:	48 89 c7             	mov    %rax,%rdi
  800421b961:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b968:	00 00 00 
  800421b96b:	ff d0                	callq  *%rax
  800421b96d:	48 bf 28 26 22 04 80 	movabs $0x8004222628,%rdi
  800421b974:	00 00 00 
  800421b977:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b97c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b983:	00 00 00 
  800421b986:	ff d2                	callq  *%rdx
  800421b988:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421b98d:	e9 34 01 00 00       	jmpq   800421bac6 <vmx_init_vmxon+0x4a7>
  800421b992:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b996:	83 e0 01             	and    $0x1,%eax
  800421b999:	48 85 c0             	test   %rax,%rax
  800421b99c:	75 4c                	jne    800421b9ea <vmx_init_vmxon+0x3cb>
  800421b99e:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421b9a3:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421b9aa:	00 00 00 
  800421b9ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b9b1:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b9b8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b9bf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b9c5:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b9cc:	48 c1 e8 20          	shr    $0x20,%rax
  800421b9d0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421b9d6:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421b9dc:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421b9e2:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421b9e8:	0f 30                	wrmsr  
  800421b9ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b9ee:	48 89 c7             	mov    %rax,%rdi
  800421b9f1:	48 b8 85 b0 21 04 80 	movabs $0x800421b085,%rax
  800421b9f8:	00 00 00 
  800421b9fb:	ff d0                	callq  *%rax
  800421b9fd:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421ba04:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421ba0b:	f8                   	clc    
  800421ba0c:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421ba13:	ff 
  800421ba14:	0f 96 c0             	setbe  %al
  800421ba17:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421ba1d:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421ba24:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421ba27:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421ba2b:	74 1a                	je     800421ba47 <vmx_init_vmxon+0x428>
  800421ba2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ba31:	48 89 c7             	mov    %rax,%rdi
  800421ba34:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421ba3b:	00 00 00 
  800421ba3e:	ff d0                	callq  *%rax
  800421ba40:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421ba45:	eb 7f                	jmp    800421bac6 <vmx_init_vmxon+0x4a7>
  800421ba47:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421ba4e:	00 00 00 
  800421ba51:	ff d0                	callq  *%rax
  800421ba53:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421ba5a:	00 00 00 
  800421ba5d:	48 98                	cltq   
  800421ba5f:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba63:	48 89 c1             	mov    %rax,%rcx
  800421ba66:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba6a:	48 01 c8             	add    %rcx,%rax
  800421ba6d:	48 01 d0             	add    %rdx,%rax
  800421ba70:	48 83 c0 70          	add    $0x70,%rax
  800421ba74:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421ba78:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421ba7f:	00 00 00 
  800421ba82:	ff d0                	callq  *%rax
  800421ba84:	89 c3                	mov    %eax,%ebx
  800421ba86:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ba8a:	48 89 c7             	mov    %rax,%rdi
  800421ba8d:	48 b8 aa b0 21 04 80 	movabs $0x800421b0aa,%rax
  800421ba94:	00 00 00 
  800421ba97:	ff d0                	callq  *%rax
  800421ba99:	48 89 c2             	mov    %rax,%rdx
  800421ba9c:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  800421baa3:	00 00 00 
  800421baa6:	48 63 c3             	movslq %ebx,%rax
  800421baa9:	48 c1 e0 03          	shl    $0x3,%rax
  800421baad:	48 89 c6             	mov    %rax,%rsi
  800421bab0:	48 c1 e6 04          	shl    $0x4,%rsi
  800421bab4:	48 01 f0             	add    %rsi,%rax
  800421bab7:	48 01 c8             	add    %rcx,%rax
  800421baba:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421babe:	48 89 10             	mov    %rdx,(%rax)
  800421bac1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bac6:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421bacd:	5b                   	pop    %rbx
  800421bace:	5d                   	pop    %rbp
  800421bacf:	c3                   	retq   

000000800421bad0 <vmcs_host_init>:
  800421bad0:	55                   	push   %rbp
  800421bad1:	48 89 e5             	mov    %rsp,%rbp
  800421bad4:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421badb:	0f 20 c0             	mov    %cr0,%rax
  800421bade:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421bae2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bae6:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421baed:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421baf1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421baf5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421baf8:	48 89 d6             	mov    %rdx,%rsi
  800421bafb:	89 c7                	mov    %eax,%edi
  800421bafd:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bb04:	00 00 00 
  800421bb07:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421bb09:	0f 20 d8             	mov    %cr3,%rax
  800421bb0c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421bb10:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421bb14:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421bb1b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421bb1f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421bb23:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bb26:	48 89 d6             	mov    %rdx,%rsi
  800421bb29:	89 c7                	mov    %eax,%edi
  800421bb2b:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bb32:	00 00 00 
  800421bb35:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421bb37:	0f 20 e0             	mov    %cr4,%rax
  800421bb3a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421bb3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bb42:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421bb49:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421bb4d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421bb51:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421bb54:	48 89 d6             	mov    %rdx,%rsi
  800421bb57:	89 c7                	mov    %eax,%edi
  800421bb59:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bb60:	00 00 00 
  800421bb63:	ff d0                	callq  *%rax
  800421bb65:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421bb6c:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421bb72:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421bb76:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421bb79:	48 89 d6             	mov    %rdx,%rsi
  800421bb7c:	89 c7                	mov    %eax,%edi
  800421bb7e:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bb85:	00 00 00 
  800421bb88:	ff d0                	callq  *%rax
  800421bb8a:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421bb91:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421bb97:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421bb9b:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421bb9e:	48 89 d6             	mov    %rdx,%rsi
  800421bba1:	89 c7                	mov    %eax,%edi
  800421bba3:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bbaa:	00 00 00 
  800421bbad:	ff d0                	callq  *%rax
  800421bbaf:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421bbb6:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421bbbc:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421bbc0:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421bbc3:	48 89 d6             	mov    %rdx,%rsi
  800421bbc6:	89 c7                	mov    %eax,%edi
  800421bbc8:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bbcf:	00 00 00 
  800421bbd2:	ff d0                	callq  *%rax
  800421bbd4:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421bbdb:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421bbe1:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421bbe5:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421bbe8:	48 89 d6             	mov    %rdx,%rsi
  800421bbeb:	89 c7                	mov    %eax,%edi
  800421bbed:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bbf4:	00 00 00 
  800421bbf7:	ff d0                	callq  *%rax
  800421bbf9:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421bc00:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421bc06:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421bc0a:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421bc0d:	48 89 d6             	mov    %rdx,%rsi
  800421bc10:	89 c7                	mov    %eax,%edi
  800421bc12:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bc19:	00 00 00 
  800421bc1c:	ff d0                	callq  *%rax
  800421bc1e:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421bc25:	0c 00 00 
  800421bc28:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421bc2f:	08 00 
  800421bc31:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421bc38:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421bc3e:	48 89 d6             	mov    %rdx,%rsi
  800421bc41:	89 c7                	mov    %eax,%edi
  800421bc43:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bc4a:	00 00 00 
  800421bc4d:	ff d0                	callq  *%rax
  800421bc4f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421bc56:	00 00 00 
  800421bc59:	ff d0                	callq  *%rax
  800421bc5b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421bc62:	00 00 00 
  800421bc65:	48 98                	cltq   
  800421bc67:	48 c1 e0 03          	shl    $0x3,%rax
  800421bc6b:	48 89 c1             	mov    %rax,%rcx
  800421bc6e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bc72:	48 01 c8             	add    %rcx,%rax
  800421bc75:	48 01 d0             	add    %rdx,%rax
  800421bc78:	0f b6 00             	movzbl (%rax),%eax
  800421bc7b:	0f b6 c0             	movzbl %al,%eax
  800421bc7e:	01 c0                	add    %eax,%eax
  800421bc80:	83 c0 05             	add    $0x5,%eax
  800421bc83:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421bc86:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bc89:	c1 e0 03             	shl    $0x3,%eax
  800421bc8c:	0f b7 c0             	movzwl %ax,%eax
  800421bc8f:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421bc96:	0c 00 00 
  800421bc99:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421bca0:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421bca7:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421bcad:	48 89 d6             	mov    %rdx,%rsi
  800421bcb0:	89 c7                	mov    %eax,%edi
  800421bcb2:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bcb9:	00 00 00 
  800421bcbc:	ff d0                	callq  *%rax
  800421bcbe:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421bcc5:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421bccc:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421bcd3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421bcda:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421bce1:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421bce8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421bcef:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421bcf2:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421bcf9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421bd00:	66 89 10             	mov    %dx,(%rax)
  800421bd03:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421bd0a:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421bd11:	6c 00 00 
  800421bd14:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421bd1b:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421bd22:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421bd28:	48 89 d6             	mov    %rdx,%rsi
  800421bd2b:	89 c7                	mov    %eax,%edi
  800421bd2d:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bd34:	00 00 00 
  800421bd37:	ff d0                	callq  *%rax
  800421bd39:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421bd40:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421bd47:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421bd4e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421bd55:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421bd5c:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421bd63:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421bd6a:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421bd6d:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421bd74:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421bd7b:	66 89 10             	mov    %dx,(%rax)
  800421bd7e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421bd85:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421bd8c:	6c 00 00 
  800421bd8f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421bd96:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421bd9d:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421bda3:	48 89 d6             	mov    %rdx,%rsi
  800421bda6:	89 c7                	mov    %eax,%edi
  800421bda8:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bdaf:	00 00 00 
  800421bdb2:	ff d0                	callq  *%rax
  800421bdb4:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421bdbb:	6c 00 00 
  800421bdbe:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421bdc5:	00 00 00 00 
  800421bdc9:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421bdd0:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421bdd6:	48 89 d6             	mov    %rdx,%rsi
  800421bdd9:	89 c7                	mov    %eax,%edi
  800421bddb:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bde2:	00 00 00 
  800421bde5:	ff d0                	callq  *%rax
  800421bde7:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421bdee:	6c 00 00 
  800421bdf1:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421bdf8:	00 00 00 00 
  800421bdfc:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421be03:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421be09:	48 89 d6             	mov    %rdx,%rsi
  800421be0c:	89 c7                	mov    %eax,%edi
  800421be0e:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421be15:	00 00 00 
  800421be18:	ff d0                	callq  *%rax
  800421be1a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421be21:	00 00 00 
  800421be24:	ff d0                	callq  *%rax
  800421be26:	48 98                	cltq   
  800421be28:	48 c1 e0 03          	shl    $0x3,%rax
  800421be2c:	48 89 c2             	mov    %rax,%rdx
  800421be2f:	48 c1 e2 04          	shl    $0x4,%rdx
  800421be33:	48 01 d0             	add    %rdx,%rax
  800421be36:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421be3a:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800421be41:	00 00 00 
  800421be44:	48 01 d0             	add    %rdx,%rax
  800421be47:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421be4e:	6c 00 00 
  800421be51:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421be58:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421be5f:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421be65:	48 89 d6             	mov    %rdx,%rsi
  800421be68:	89 c7                	mov    %eax,%edi
  800421be6a:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421be71:	00 00 00 
  800421be74:	ff d0                	callq  *%rax
  800421be76:	48 b8 8d d5 21 04 80 	movabs $0x800421d58d,%rax
  800421be7d:	00 00 00 
  800421be80:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421be84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421be88:	48 89 c6             	mov    %rax,%rsi
  800421be8b:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421be90:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421be97:	00 00 00 
  800421be9a:	ff d0                	callq  *%rax
  800421be9c:	c9                   	leaveq 
  800421be9d:	c3                   	retq   

000000800421be9e <vmcs_guest_init>:
  800421be9e:	55                   	push   %rbp
  800421be9f:	48 89 e5             	mov    %rsp,%rbp
  800421bea2:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421bea9:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421beb0:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421beb6:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421beba:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bebd:	48 89 d6             	mov    %rdx,%rsi
  800421bec0:	89 c7                	mov    %eax,%edi
  800421bec2:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bec9:	00 00 00 
  800421becc:	ff d0                	callq  *%rax
  800421bece:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421bed5:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421bedb:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421bedf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421bee2:	48 89 d6             	mov    %rdx,%rsi
  800421bee5:	89 c7                	mov    %eax,%edi
  800421bee7:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421beee:	00 00 00 
  800421bef1:	ff d0                	callq  *%rax
  800421bef3:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421befa:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421bf00:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421bf04:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421bf07:	48 89 d6             	mov    %rdx,%rsi
  800421bf0a:	89 c7                	mov    %eax,%edi
  800421bf0c:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bf13:	00 00 00 
  800421bf16:	ff d0                	callq  *%rax
  800421bf18:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421bf1f:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421bf25:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421bf29:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421bf2c:	48 89 d6             	mov    %rdx,%rsi
  800421bf2f:	89 c7                	mov    %eax,%edi
  800421bf31:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bf38:	00 00 00 
  800421bf3b:	ff d0                	callq  *%rax
  800421bf3d:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421bf44:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421bf4a:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421bf4e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421bf51:	48 89 d6             	mov    %rdx,%rsi
  800421bf54:	89 c7                	mov    %eax,%edi
  800421bf56:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bf5d:	00 00 00 
  800421bf60:	ff d0                	callq  *%rax
  800421bf62:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421bf69:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421bf6f:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421bf73:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421bf76:	48 89 d6             	mov    %rdx,%rsi
  800421bf79:	89 c7                	mov    %eax,%edi
  800421bf7b:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bf82:	00 00 00 
  800421bf85:	ff d0                	callq  *%rax
  800421bf87:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421bf8e:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421bf94:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421bf98:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bf9b:	48 89 d6             	mov    %rdx,%rsi
  800421bf9e:	89 c7                	mov    %eax,%edi
  800421bfa0:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bfa7:	00 00 00 
  800421bfaa:	ff d0                	callq  *%rax
  800421bfac:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421bfb3:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421bfb9:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421bfbd:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421bfc0:	48 89 d6             	mov    %rdx,%rsi
  800421bfc3:	89 c7                	mov    %eax,%edi
  800421bfc5:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bfcc:	00 00 00 
  800421bfcf:	ff d0                	callq  *%rax
  800421bfd1:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421bfd8:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421bfdf:	00 
  800421bfe0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421bfe4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421bfe7:	48 89 d6             	mov    %rdx,%rsi
  800421bfea:	89 c7                	mov    %eax,%edi
  800421bfec:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421bff3:	00 00 00 
  800421bff6:	ff d0                	callq  *%rax
  800421bff8:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421bfff:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421c006:	00 
  800421c007:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c00b:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c00e:	48 89 d6             	mov    %rdx,%rsi
  800421c011:	89 c7                	mov    %eax,%edi
  800421c013:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c01a:	00 00 00 
  800421c01d:	ff d0                	callq  *%rax
  800421c01f:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421c026:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421c02d:	00 
  800421c02e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421c032:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421c035:	48 89 d6             	mov    %rdx,%rsi
  800421c038:	89 c7                	mov    %eax,%edi
  800421c03a:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c041:	00 00 00 
  800421c044:	ff d0                	callq  *%rax
  800421c046:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421c04d:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421c054:	00 
  800421c055:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421c059:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421c05c:	48 89 d6             	mov    %rdx,%rsi
  800421c05f:	89 c7                	mov    %eax,%edi
  800421c061:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c068:	00 00 00 
  800421c06b:	ff d0                	callq  *%rax
  800421c06d:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421c074:	68 00 00 
  800421c077:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421c07e:	00 00 00 00 
  800421c082:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421c089:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421c08f:	48 89 d6             	mov    %rdx,%rsi
  800421c092:	89 c7                	mov    %eax,%edi
  800421c094:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c09b:	00 00 00 
  800421c09e:	ff d0                	callq  *%rax
  800421c0a0:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421c0a7:	68 00 00 
  800421c0aa:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421c0b1:	00 00 00 00 
  800421c0b5:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421c0bc:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421c0c2:	48 89 d6             	mov    %rdx,%rsi
  800421c0c5:	89 c7                	mov    %eax,%edi
  800421c0c7:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c0ce:	00 00 00 
  800421c0d1:	ff d0                	callq  *%rax
  800421c0d3:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421c0da:	68 00 00 
  800421c0dd:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421c0e4:	00 00 00 00 
  800421c0e8:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421c0ef:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421c0f5:	48 89 d6             	mov    %rdx,%rsi
  800421c0f8:	89 c7                	mov    %eax,%edi
  800421c0fa:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c101:	00 00 00 
  800421c104:	ff d0                	callq  *%rax
  800421c106:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421c10d:	68 00 00 
  800421c110:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421c117:	00 00 00 00 
  800421c11b:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421c122:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421c128:	48 89 d6             	mov    %rdx,%rsi
  800421c12b:	89 c7                	mov    %eax,%edi
  800421c12d:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c134:	00 00 00 
  800421c137:	ff d0                	callq  *%rax
  800421c139:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421c140:	68 00 00 
  800421c143:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421c14a:	00 00 00 00 
  800421c14e:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421c155:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421c15b:	48 89 d6             	mov    %rdx,%rsi
  800421c15e:	89 c7                	mov    %eax,%edi
  800421c160:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c167:	00 00 00 
  800421c16a:	ff d0                	callq  *%rax
  800421c16c:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421c173:	68 00 00 
  800421c176:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421c17d:	00 00 00 00 
  800421c181:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421c188:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421c18e:	48 89 d6             	mov    %rdx,%rsi
  800421c191:	89 c7                	mov    %eax,%edi
  800421c193:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c19a:	00 00 00 
  800421c19d:	ff d0                	callq  *%rax
  800421c19f:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421c1a6:	48 00 00 
  800421c1a9:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421c1b0:	ff 00 00 
  800421c1b3:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421c1b9:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c1bf:	48 89 d6             	mov    %rdx,%rsi
  800421c1c2:	89 c7                	mov    %eax,%edi
  800421c1c4:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c1cb:	00 00 00 
  800421c1ce:	ff d0                	callq  *%rax
  800421c1d0:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421c1d7:	48 00 00 
  800421c1da:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421c1e1:	ff 00 00 
  800421c1e4:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421c1ea:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c1f0:	48 89 d6             	mov    %rdx,%rsi
  800421c1f3:	89 c7                	mov    %eax,%edi
  800421c1f5:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c1fc:	00 00 00 
  800421c1ff:	ff d0                	callq  *%rax
  800421c201:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421c208:	48 00 00 
  800421c20b:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421c212:	ff 00 00 
  800421c215:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421c21b:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c221:	48 89 d6             	mov    %rdx,%rsi
  800421c224:	89 c7                	mov    %eax,%edi
  800421c226:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c22d:	00 00 00 
  800421c230:	ff d0                	callq  *%rax
  800421c232:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421c239:	48 00 00 
  800421c23c:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421c243:	ff 00 00 
  800421c246:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421c24c:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421c252:	48 89 d6             	mov    %rdx,%rsi
  800421c255:	89 c7                	mov    %eax,%edi
  800421c257:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c25e:	00 00 00 
  800421c261:	ff d0                	callq  *%rax
  800421c263:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421c26a:	48 00 00 
  800421c26d:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421c274:	ff 00 00 
  800421c277:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421c27d:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421c283:	48 89 d6             	mov    %rdx,%rsi
  800421c286:	89 c7                	mov    %eax,%edi
  800421c288:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c28f:	00 00 00 
  800421c292:	ff d0                	callq  *%rax
  800421c294:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421c29b:	48 00 00 
  800421c29e:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421c2a5:	ff 00 00 
  800421c2a8:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421c2ae:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421c2b4:	48 89 d6             	mov    %rdx,%rsi
  800421c2b7:	89 c7                	mov    %eax,%edi
  800421c2b9:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c2c0:	00 00 00 
  800421c2c3:	ff d0                	callq  *%rax
  800421c2c5:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421c2cc:	48 00 00 
  800421c2cf:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421c2d6:	ff 00 00 
  800421c2d9:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421c2df:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421c2e5:	48 89 d6             	mov    %rdx,%rsi
  800421c2e8:	89 c7                	mov    %eax,%edi
  800421c2ea:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c2f1:	00 00 00 
  800421c2f4:	ff d0                	callq  *%rax
  800421c2f6:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421c2fd:	48 00 00 
  800421c300:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421c307:	ff 0f 00 
  800421c30a:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421c310:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421c316:	48 89 d6             	mov    %rdx,%rsi
  800421c319:	89 c7                	mov    %eax,%edi
  800421c31b:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c322:	00 00 00 
  800421c325:	ff d0                	callq  *%rax
  800421c327:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421c32e:	48 00 00 
  800421c331:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421c338:	00 00 00 
  800421c33b:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421c341:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421c347:	48 89 d6             	mov    %rdx,%rsi
  800421c34a:	89 c7                	mov    %eax,%edi
  800421c34c:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c353:	00 00 00 
  800421c356:	ff d0                	callq  *%rax
  800421c358:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421c35f:	48 00 00 
  800421c362:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421c369:	03 00 00 
  800421c36c:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421c372:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421c378:	48 89 d6             	mov    %rdx,%rsi
  800421c37b:	89 c7                	mov    %eax,%edi
  800421c37d:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c384:	00 00 00 
  800421c387:	ff d0                	callq  *%rax
  800421c389:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421c390:	48 00 00 
  800421c393:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421c39a:	00 00 00 
  800421c39d:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421c3a3:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421c3a9:	48 89 d6             	mov    %rdx,%rsi
  800421c3ac:	89 c7                	mov    %eax,%edi
  800421c3ae:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c3b5:	00 00 00 
  800421c3b8:	ff d0                	callq  *%rax
  800421c3ba:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421c3c1:	48 00 00 
  800421c3c4:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421c3cb:	00 00 00 
  800421c3ce:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421c3d4:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421c3da:	48 89 d6             	mov    %rdx,%rsi
  800421c3dd:	89 c7                	mov    %eax,%edi
  800421c3df:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c3e6:	00 00 00 
  800421c3e9:	ff d0                	callq  *%rax
  800421c3eb:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421c3f2:	48 00 00 
  800421c3f5:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421c3fc:	00 00 00 
  800421c3ff:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421c405:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421c40b:	48 89 d6             	mov    %rdx,%rsi
  800421c40e:	89 c7                	mov    %eax,%edi
  800421c410:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c417:	00 00 00 
  800421c41a:	ff d0                	callq  *%rax
  800421c41c:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421c423:	48 00 00 
  800421c426:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421c42d:	00 00 00 
  800421c430:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421c436:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421c43c:	48 89 d6             	mov    %rdx,%rsi
  800421c43f:	89 c7                	mov    %eax,%edi
  800421c441:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c448:	00 00 00 
  800421c44b:	ff d0                	callq  *%rax
  800421c44d:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421c454:	48 00 00 
  800421c457:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421c45e:	00 00 00 
  800421c461:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421c467:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421c46d:	48 89 d6             	mov    %rdx,%rsi
  800421c470:	89 c7                	mov    %eax,%edi
  800421c472:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c479:	00 00 00 
  800421c47c:	ff d0                	callq  *%rax
  800421c47e:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421c485:	48 00 00 
  800421c488:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421c48f:	00 00 00 
  800421c492:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421c498:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421c49e:	48 89 d6             	mov    %rdx,%rsi
  800421c4a1:	89 c7                	mov    %eax,%edi
  800421c4a3:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c4aa:	00 00 00 
  800421c4ad:	ff d0                	callq  *%rax
  800421c4af:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421c4b6:	48 00 00 
  800421c4b9:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421c4c0:	00 00 00 
  800421c4c3:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421c4c9:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421c4cf:	48 89 d6             	mov    %rdx,%rsi
  800421c4d2:	89 c7                	mov    %eax,%edi
  800421c4d4:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c4db:	00 00 00 
  800421c4de:	ff d0                	callq  *%rax
  800421c4e0:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421c4e7:	48 00 00 
  800421c4ea:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421c4f1:	00 00 00 
  800421c4f4:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421c4fa:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421c500:	48 89 d6             	mov    %rdx,%rsi
  800421c503:	89 c7                	mov    %eax,%edi
  800421c505:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c50c:	00 00 00 
  800421c50f:	ff d0                	callq  *%rax
  800421c511:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421c518:	48 00 00 
  800421c51b:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421c522:	00 00 00 
  800421c525:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421c52b:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421c531:	48 89 d6             	mov    %rdx,%rsi
  800421c534:	89 c7                	mov    %eax,%edi
  800421c536:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c53d:	00 00 00 
  800421c540:	ff d0                	callq  *%rax
  800421c542:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421c549:	48 00 00 
  800421c54c:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421c553:	00 00 00 
  800421c556:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421c55c:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421c562:	48 89 d6             	mov    %rdx,%rsi
  800421c565:	89 c7                	mov    %eax,%edi
  800421c567:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c56e:	00 00 00 
  800421c571:	ff d0                	callq  *%rax
  800421c573:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421c57a:	68 00 00 
  800421c57d:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421c584:	00 00 00 00 
  800421c588:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421c58f:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421c595:	48 89 d6             	mov    %rdx,%rsi
  800421c598:	89 c7                	mov    %eax,%edi
  800421c59a:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c5a1:	00 00 00 
  800421c5a4:	ff d0                	callq  *%rax
  800421c5a6:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421c5ad:	68 00 00 
  800421c5b0:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421c5b7:	20 00 00 00 
  800421c5bb:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421c5c2:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421c5c8:	48 89 d6             	mov    %rdx,%rsi
  800421c5cb:	89 c7                	mov    %eax,%edi
  800421c5cd:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c5d4:	00 00 00 
  800421c5d7:	ff d0                	callq  *%rax
  800421c5d9:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421c5e0:	68 00 00 
  800421c5e3:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421c5ea:	00 20 00 00 
  800421c5ee:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421c5f5:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421c5fb:	48 89 d6             	mov    %rdx,%rsi
  800421c5fe:	89 c7                	mov    %eax,%edi
  800421c600:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c607:	00 00 00 
  800421c60a:	ff d0                	callq  *%rax
  800421c60c:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421c613:	28 00 00 
  800421c616:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421c61b:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421c622:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421c629:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421c62f:	48 89 d6             	mov    %rdx,%rsi
  800421c632:	89 c7                	mov    %eax,%edi
  800421c634:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c63b:	00 00 00 
  800421c63e:	ff d0                	callq  *%rax
  800421c640:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421c647:	28 00 00 
  800421c64a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421c64f:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421c656:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421c65d:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421c663:	48 89 d6             	mov    %rdx,%rsi
  800421c666:	89 c7                	mov    %eax,%edi
  800421c668:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c66f:	00 00 00 
  800421c672:	ff d0                	callq  *%rax
  800421c674:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421c67b:	68 00 00 
  800421c67e:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421c685:	00 00 00 00 
  800421c689:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421c690:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421c696:	48 89 d6             	mov    %rdx,%rsi
  800421c699:	89 c7                	mov    %eax,%edi
  800421c69b:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c6a2:	00 00 00 
  800421c6a5:	ff d0                	callq  *%rax
  800421c6a7:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421c6ae:	68 00 00 
  800421c6b1:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421c6b8:	02 00 00 00 
  800421c6bc:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421c6c3:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421c6c9:	48 89 d6             	mov    %rdx,%rsi
  800421c6cc:	89 c7                	mov    %eax,%edi
  800421c6ce:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c6d5:	00 00 00 
  800421c6d8:	ff d0                	callq  *%rax
  800421c6da:	c9                   	leaveq 
  800421c6db:	c3                   	retq   

000000800421c6dc <vmx_read_capability_msr>:
  800421c6dc:	55                   	push   %rbp
  800421c6dd:	48 89 e5             	mov    %rsp,%rbp
  800421c6e0:	48 83 ec 38          	sub    $0x38,%rsp
  800421c6e4:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421c6e7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421c6eb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421c6ef:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c6f2:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421c6f5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c6f8:	89 c1                	mov    %eax,%ecx
  800421c6fa:	0f 32                	rdmsr  
  800421c6fc:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421c6ff:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421c702:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421c709:	00 
	ret = edx;
  800421c70a:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421c70d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421c711:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421c716:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c719:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421c71d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c721:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c729:	48 c1 e8 20          	shr    $0x20,%rax
  800421c72d:	89 c2                	mov    %eax,%edx
  800421c72f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c733:	89 10                	mov    %edx,(%rax)
  800421c735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c739:	89 c2                	mov    %eax,%edx
  800421c73b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421c73f:	89 10                	mov    %edx,(%rax)
  800421c741:	c9                   	leaveq 
  800421c742:	c3                   	retq   

000000800421c743 <vmcs_ctls_init>:
  800421c743:	55                   	push   %rbp
  800421c744:	48 89 e5             	mov    %rsp,%rbp
  800421c747:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421c74e:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421c755:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421c75c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421c763:	48 89 c6             	mov    %rax,%rsi
  800421c766:	bf 81 04 00 00       	mov    $0x481,%edi
  800421c76b:	48 b8 dc c6 21 04 80 	movabs $0x800421c6dc,%rax
  800421c772:	00 00 00 
  800421c775:	ff d0                	callq  *%rax
  800421c777:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421c77d:	83 c8 01             	or     $0x1,%eax
  800421c780:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421c786:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421c78c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421c792:	21 d0                	and    %edx,%eax
  800421c794:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421c79b:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421c79e:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421c7a1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c7a4:	48 89 d6             	mov    %rdx,%rsi
  800421c7a7:	89 c7                	mov    %eax,%edi
  800421c7a9:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c7b0:	00 00 00 
  800421c7b3:	ff d0                	callq  *%rax
  800421c7b5:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421c7bc:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421c7c3:	48 89 c6             	mov    %rax,%rsi
  800421c7c6:	bf 82 04 00 00       	mov    $0x482,%edi
  800421c7cb:	48 b8 dc c6 21 04 80 	movabs $0x800421c6dc,%rax
  800421c7d2:	00 00 00 
  800421c7d5:	ff d0                	callq  *%rax
  800421c7d7:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421c7dd:	c1 e8 1f             	shr    $0x1f,%eax
  800421c7e0:	83 f8 01             	cmp    $0x1,%eax
  800421c7e3:	74 35                	je     800421c81a <vmcs_ctls_init+0xd7>
  800421c7e5:	48 b9 58 26 22 04 80 	movabs $0x8004222658,%rcx
  800421c7ec:	00 00 00 
  800421c7ef:	48 ba ee 25 22 04 80 	movabs $0x80042225ee,%rdx
  800421c7f6:	00 00 00 
  800421c7f9:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421c7fe:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421c805:	00 00 00 
  800421c808:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c80d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c814:	00 00 00 
  800421c817:	41 ff d0             	callq  *%r8
  800421c81a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c820:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421c825:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c82b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c831:	0c 80                	or     $0x80,%al
  800421c833:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c839:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c83f:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421c844:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c84a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c850:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421c855:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c85b:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421c861:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421c867:	21 d0                	and    %edx,%eax
  800421c869:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421c870:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421c873:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421c876:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c879:	48 89 d6             	mov    %rdx,%rsi
  800421c87c:	89 c7                	mov    %eax,%edi
  800421c87e:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c885:	00 00 00 
  800421c888:	ff d0                	callq  *%rax
  800421c88a:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421c891:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421c898:	48 89 c6             	mov    %rax,%rsi
  800421c89b:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421c8a0:	48 b8 dc c6 21 04 80 	movabs $0x800421c6dc,%rax
  800421c8a7:	00 00 00 
  800421c8aa:	ff d0                	callq  *%rax
  800421c8ac:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c8b2:	83 c8 02             	or     $0x2,%eax
  800421c8b5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c8bb:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c8c1:	0c 80                	or     $0x80,%al
  800421c8c3:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c8c9:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421c8cf:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421c8d5:	21 d0                	and    %edx,%eax
  800421c8d7:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421c8de:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421c8e1:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421c8e4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c8e7:	48 89 d6             	mov    %rdx,%rsi
  800421c8ea:	89 c7                	mov    %eax,%edi
  800421c8ec:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c8f3:	00 00 00 
  800421c8f6:	ff d0                	callq  *%rax
  800421c8f8:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421c8ff:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421c906:	48 89 c6             	mov    %rax,%rsi
  800421c909:	bf 83 04 00 00       	mov    $0x483,%edi
  800421c90e:	48 b8 dc c6 21 04 80 	movabs $0x800421c6dc,%rax
  800421c915:	00 00 00 
  800421c918:	ff d0                	callq  *%rax
  800421c91a:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c920:	80 cc 02             	or     $0x2,%ah
  800421c923:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c929:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c92f:	80 cc 80             	or     $0x80,%ah
  800421c932:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c938:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421c93e:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421c944:	21 d0                	and    %edx,%eax
  800421c946:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421c94d:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421c950:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421c953:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421c956:	48 89 d6             	mov    %rdx,%rsi
  800421c959:	89 c7                	mov    %eax,%edi
  800421c95b:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c962:	00 00 00 
  800421c965:	ff d0                	callq  *%rax
  800421c967:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c96e:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c975:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c979:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c980:	00 00 00 
  800421c983:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c987:	77 32                	ja     800421c9bb <vmcs_ctls_init+0x278>
  800421c989:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c98d:	48 89 c1             	mov    %rax,%rcx
  800421c990:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421c997:	00 00 00 
  800421c99a:	be 82 01 00 00       	mov    $0x182,%esi
  800421c99f:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421c9a6:	00 00 00 
  800421c9a9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c9ae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c9b5:	00 00 00 
  800421c9b8:	41 ff d0             	callq  *%r8
  800421c9bb:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c9c2:	ff ff ff 
  800421c9c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c9c9:	48 01 d0             	add    %rdx,%rax
  800421c9cc:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421c9d3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421c9d7:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c9db:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c9de:	48 89 d6             	mov    %rdx,%rsi
  800421c9e1:	89 c7                	mov    %eax,%edi
  800421c9e3:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421c9ea:	00 00 00 
  800421c9ed:	ff d0                	callq  *%rax
  800421c9ef:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c9f6:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c9fc:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421ca03:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421ca06:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421ca09:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421ca0c:	48 89 d6             	mov    %rdx,%rsi
  800421ca0f:	89 c7                	mov    %eax,%edi
  800421ca11:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421ca18:	00 00 00 
  800421ca1b:	ff d0                	callq  *%rax
  800421ca1d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ca24:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421ca2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421ca2f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421ca36:	00 00 00 
  800421ca39:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421ca3d:	77 32                	ja     800421ca71 <vmcs_ctls_init+0x32e>
  800421ca3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ca43:	48 89 c1             	mov    %rax,%rcx
  800421ca46:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421ca4d:	00 00 00 
  800421ca50:	be 86 01 00 00       	mov    $0x186,%esi
  800421ca55:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421ca5c:	00 00 00 
  800421ca5f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ca64:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ca6b:	00 00 00 
  800421ca6e:	41 ff d0             	callq  *%r8
  800421ca71:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421ca78:	ff ff ff 
  800421ca7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ca7f:	48 01 d0             	add    %rdx,%rax
  800421ca82:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421ca89:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421ca8d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421ca91:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421ca94:	48 89 d6             	mov    %rdx,%rsi
  800421ca97:	89 c7                	mov    %eax,%edi
  800421ca99:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421caa0:	00 00 00 
  800421caa3:	ff d0                	callq  *%rax
  800421caa5:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421caac:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421cab2:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421cab9:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421cabc:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421cabf:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421cac2:	48 89 d6             	mov    %rdx,%rsi
  800421cac5:	89 c7                	mov    %eax,%edi
  800421cac7:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cace:	00 00 00 
  800421cad1:	ff d0                	callq  *%rax
  800421cad3:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421cada:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421cae1:	48 89 c6             	mov    %rax,%rsi
  800421cae4:	bf 84 04 00 00       	mov    $0x484,%edi
  800421cae9:	48 b8 dc c6 21 04 80 	movabs $0x800421c6dc,%rax
  800421caf0:	00 00 00 
  800421caf3:	ff d0                	callq  *%rax
  800421caf5:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cafc:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421cb03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421cb07:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cb0e:	00 00 00 
  800421cb11:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421cb15:	77 32                	ja     800421cb49 <vmcs_ctls_init+0x406>
  800421cb17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421cb1b:	48 89 c1             	mov    %rax,%rcx
  800421cb1e:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421cb25:	00 00 00 
  800421cb28:	be 90 01 00 00       	mov    $0x190,%esi
  800421cb2d:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421cb34:	00 00 00 
  800421cb37:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb3c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cb43:	00 00 00 
  800421cb46:	41 ff d0             	callq  *%r8
  800421cb49:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421cb50:	ff ff ff 
  800421cb53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421cb57:	48 01 d0             	add    %rdx,%rax
  800421cb5a:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421cb61:	20 00 00 
  800421cb64:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421cb6b:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421cb72:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421cb78:	48 89 d6             	mov    %rdx,%rsi
  800421cb7b:	89 c7                	mov    %eax,%edi
  800421cb7d:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cb84:	00 00 00 
  800421cb87:	ff d0                	callq  *%rax
  800421cb89:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cb90:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421cb96:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421cb9d:	40 00 00 
  800421cba0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421cba6:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421cbac:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421cbb2:	48 89 d6             	mov    %rdx,%rsi
  800421cbb5:	89 c7                	mov    %eax,%edi
  800421cbb7:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cbbe:	00 00 00 
  800421cbc1:	ff d0                	callq  *%rax
  800421cbc3:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421cbc9:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421cbcf:	21 d0                	and    %edx,%eax
  800421cbd1:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421cbd8:	40 00 00 
  800421cbdb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421cbe1:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421cbe7:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421cbed:	48 89 d6             	mov    %rdx,%rsi
  800421cbf0:	89 c7                	mov    %eax,%edi
  800421cbf2:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cbf9:	00 00 00 
  800421cbfc:	ff d0                	callq  *%rax
  800421cbfe:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cc05:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421cc0c:	48 83 c8 18          	or     $0x18,%rax
  800421cc10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421cc14:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421cc1b:	20 00 00 
  800421cc1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421cc22:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421cc29:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421cc30:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421cc36:	48 89 d6             	mov    %rdx,%rsi
  800421cc39:	89 c7                	mov    %eax,%edi
  800421cc3b:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cc42:	00 00 00 
  800421cc45:	ff d0                	callq  *%rax
  800421cc47:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cc4e:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421cc54:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421cc5b:	40 00 00 
  800421cc5e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421cc64:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421cc6a:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421cc70:	48 89 d6             	mov    %rdx,%rsi
  800421cc73:	89 c7                	mov    %eax,%edi
  800421cc75:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cc7c:	00 00 00 
  800421cc7f:	ff d0                	callq  *%rax
  800421cc81:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cc88:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421cc8f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421cc93:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cc9a:	00 00 00 
  800421cc9d:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421cca1:	77 32                	ja     800421ccd5 <vmcs_ctls_init+0x592>
  800421cca3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cca7:	48 89 c1             	mov    %rax,%rcx
  800421ccaa:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421ccb1:	00 00 00 
  800421ccb4:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421ccb9:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421ccc0:	00 00 00 
  800421ccc3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ccc8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cccf:	00 00 00 
  800421ccd2:	41 ff d0             	callq  *%r8
  800421ccd5:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421ccdc:	ff ff ff 
  800421ccdf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cce3:	48 01 d0             	add    %rdx,%rax
  800421cce6:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421cced:	20 00 00 
  800421ccf0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421ccf7:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421ccfe:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421cd04:	48 89 d6             	mov    %rdx,%rsi
  800421cd07:	89 c7                	mov    %eax,%edi
  800421cd09:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cd10:	00 00 00 
  800421cd13:	ff d0                	callq  *%rax
  800421cd15:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cd1c:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421cd23:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421cd27:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cd2e:	00 00 00 
  800421cd31:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421cd35:	77 32                	ja     800421cd69 <vmcs_ctls_init+0x626>
  800421cd37:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421cd3b:	48 89 c1             	mov    %rax,%rcx
  800421cd3e:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421cd45:	00 00 00 
  800421cd48:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421cd4d:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421cd54:	00 00 00 
  800421cd57:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cd5c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cd63:	00 00 00 
  800421cd66:	41 ff d0             	callq  *%r8
  800421cd69:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421cd70:	ff ff ff 
  800421cd73:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421cd77:	48 01 d0             	add    %rdx,%rax
  800421cd7a:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421cd81:	20 00 00 
  800421cd84:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421cd8b:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421cd92:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421cd98:	48 89 d6             	mov    %rdx,%rsi
  800421cd9b:	89 c7                	mov    %eax,%edi
  800421cd9d:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421cda4:	00 00 00 
  800421cda7:	ff d0                	callq  *%rax
  800421cda9:	c9                   	leaveq 
  800421cdaa:	c3                   	retq   

000000800421cdab <vmcs_dump_cpu>:
  800421cdab:	55                   	push   %rbp
  800421cdac:	48 89 e5             	mov    %rsp,%rbp
  800421cdaf:	53                   	push   %rbx
  800421cdb0:	48 83 ec 28          	sub    $0x28,%rsp
  800421cdb4:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421cdb9:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421cdc0:	00 00 00 
  800421cdc3:	ff d0                	callq  *%rax
  800421cdc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421cdc9:	48 bf a4 26 22 04 80 	movabs $0x80042226a4,%rdi
  800421cdd0:	00 00 00 
  800421cdd3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cdd8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cddf:	00 00 00 
  800421cde2:	ff d2                	callq  *%rdx
  800421cde4:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421cdeb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421cdee:	89 c7                	mov    %eax,%edi
  800421cdf0:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421cdf7:	00 00 00 
  800421cdfa:	ff d0                	callq  *%rax
  800421cdfc:	48 89 c3             	mov    %rax,%rbx
  800421cdff:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421ce06:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421ce09:	89 c7                	mov    %eax,%edi
  800421ce0b:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421ce12:	00 00 00 
  800421ce15:	ff d0                	callq  *%rax
  800421ce17:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421ce1b:	48 89 d1             	mov    %rdx,%rcx
  800421ce1e:	48 89 da             	mov    %rbx,%rdx
  800421ce21:	48 89 c6             	mov    %rax,%rsi
  800421ce24:	48 bf c8 26 22 04 80 	movabs $0x80042226c8,%rdi
  800421ce2b:	00 00 00 
  800421ce2e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ce33:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421ce3a:	00 00 00 
  800421ce3d:	41 ff d0             	callq  *%r8
  800421ce40:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421ce47:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ce4a:	89 c7                	mov    %eax,%edi
  800421ce4c:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421ce53:	00 00 00 
  800421ce56:	ff d0                	callq  *%rax
  800421ce58:	48 89 c3             	mov    %rax,%rbx
  800421ce5b:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421ce62:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421ce65:	89 c7                	mov    %eax,%edi
  800421ce67:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421ce6e:	00 00 00 
  800421ce71:	ff d0                	callq  *%rax
  800421ce73:	48 89 da             	mov    %rbx,%rdx
  800421ce76:	48 89 c6             	mov    %rax,%rsi
  800421ce79:	48 bf 00 27 22 04 80 	movabs $0x8004222700,%rdi
  800421ce80:	00 00 00 
  800421ce83:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ce88:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421ce8f:	00 00 00 
  800421ce92:	ff d1                	callq  *%rcx
  800421ce94:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421ce9b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421ce9e:	89 c7                	mov    %eax,%edi
  800421cea0:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421cea7:	00 00 00 
  800421ceaa:	ff d0                	callq  *%rax
  800421ceac:	48 89 c6             	mov    %rax,%rsi
  800421ceaf:	48 bf 22 27 22 04 80 	movabs $0x8004222722,%rdi
  800421ceb6:	00 00 00 
  800421ceb9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cebe:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cec5:	00 00 00 
  800421cec8:	ff d2                	callq  *%rdx
  800421ceca:	48 bf 37 27 22 04 80 	movabs $0x8004222737,%rdi
  800421ced1:	00 00 00 
  800421ced4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ced9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cee0:	00 00 00 
  800421cee3:	ff d2                	callq  *%rdx
  800421cee5:	48 83 c4 28          	add    $0x28,%rsp
  800421cee9:	5b                   	pop    %rbx
  800421ceea:	5d                   	pop    %rbp
  800421ceeb:	c3                   	retq   

000000800421ceec <vmexit>:
  800421ceec:	55                   	push   %rbp
  800421ceed:	48 89 e5             	mov    %rsp,%rbp
  800421cef0:	41 54                	push   %r12
  800421cef2:	53                   	push   %rbx
  800421cef3:	48 83 ec 10          	sub    $0x10,%rsp
  800421cef7:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421cefe:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421cf02:	c7 45 e4 02 44 00 00 	movl   $0x4402,-0x1c(%rbp)
  800421cf09:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421cf0c:	89 c7                	mov    %eax,%edi
  800421cf0e:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421cf15:	00 00 00 
  800421cf18:	ff d0                	callq  *%rax
  800421cf1a:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421cf1d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421cf20:	0f b7 c0             	movzwl %ax,%eax
  800421cf23:	83 f8 30             	cmp    $0x30,%eax
  800421cf26:	0f 87 03 05 00 00    	ja     800421d42f <vmexit+0x543>
  800421cf2c:	89 c0                	mov    %eax,%eax
  800421cf2e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421cf35:	00 
  800421cf36:	48 b8 a0 27 22 04 80 	movabs $0x80042227a0,%rax
  800421cf3d:	00 00 00 
  800421cf40:	48 01 d0             	add    %rdx,%rax
  800421cf43:	48 8b 00             	mov    (%rax),%rax
  800421cf46:	ff e0                	jmpq   *%rax
  800421cf48:	c7 45 e0 04 44 00 00 	movl   $0x4404,-0x20(%rbp)
  800421cf4f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421cf52:	89 c7                	mov    %eax,%edi
  800421cf54:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421cf5b:	00 00 00 
  800421cf5e:	ff d0                	callq  *%rax
  800421cf60:	89 c2                	mov    %eax,%edx
  800421cf62:	48 b8 c4 d5 6d 04 80 	movabs $0x80046dd5c4,%rax
  800421cf69:	00 00 00 
  800421cf6c:	89 10                	mov    %edx,(%rax)
  800421cf6e:	48 b8 c4 d5 6d 04 80 	movabs $0x80046dd5c4,%rax
  800421cf75:	00 00 00 
  800421cf78:	8b 18                	mov    (%rax),%ebx
  800421cf7a:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421cf81:	00 00 00 
  800421cf84:	ff d0                	callq  *%rax
  800421cf86:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cf8d:	00 00 00 
  800421cf90:	48 98                	cltq   
  800421cf92:	48 c1 e0 03          	shl    $0x3,%rax
  800421cf96:	48 89 c1             	mov    %rax,%rcx
  800421cf99:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cf9d:	48 01 c8             	add    %rcx,%rax
  800421cfa0:	48 01 d0             	add    %rdx,%rax
  800421cfa3:	48 83 c0 08          	add    $0x8,%rax
  800421cfa7:	48 8b 00             	mov    (%rax),%rax
  800421cfaa:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421cfb1:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421cfb8:	00 00 00 
  800421cfbb:	ff d0                	callq  *%rax
  800421cfbd:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cfc4:	00 00 00 
  800421cfc7:	48 98                	cltq   
  800421cfc9:	48 c1 e0 03          	shl    $0x3,%rax
  800421cfcd:	48 89 c1             	mov    %rax,%rcx
  800421cfd0:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cfd4:	48 01 c8             	add    %rcx,%rax
  800421cfd7:	48 01 d0             	add    %rdx,%rax
  800421cfda:	48 83 c0 08          	add    $0x8,%rax
  800421cfde:	48 8b 00             	mov    (%rax),%rax
  800421cfe1:	89 da                	mov    %ebx,%edx
  800421cfe3:	4c 89 e6             	mov    %r12,%rsi
  800421cfe6:	48 89 c7             	mov    %rax,%rdi
  800421cfe9:	48 b8 8a de 21 04 80 	movabs $0x800421de8a,%rax
  800421cff0:	00 00 00 
  800421cff3:	ff d0                	callq  *%rax
  800421cff5:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cff8:	e9 32 04 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421cffd:	48 b8 c4 d5 6d 04 80 	movabs $0x80046dd5c4,%rax
  800421d004:	00 00 00 
  800421d007:	8b 18                	mov    (%rax),%ebx
  800421d009:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d010:	00 00 00 
  800421d013:	ff d0                	callq  *%rax
  800421d015:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d01c:	00 00 00 
  800421d01f:	48 98                	cltq   
  800421d021:	48 c1 e0 03          	shl    $0x3,%rax
  800421d025:	48 89 c1             	mov    %rax,%rcx
  800421d028:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d02c:	48 01 c8             	add    %rcx,%rax
  800421d02f:	48 01 d0             	add    %rdx,%rax
  800421d032:	48 83 c0 08          	add    $0x8,%rax
  800421d036:	48 8b 00             	mov    (%rax),%rax
  800421d039:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421d040:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d047:	00 00 00 
  800421d04a:	ff d0                	callq  *%rax
  800421d04c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d053:	00 00 00 
  800421d056:	48 98                	cltq   
  800421d058:	48 c1 e0 03          	shl    $0x3,%rax
  800421d05c:	48 89 c1             	mov    %rax,%rcx
  800421d05f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d063:	48 01 c8             	add    %rcx,%rax
  800421d066:	48 01 d0             	add    %rdx,%rax
  800421d069:	48 83 c0 08          	add    $0x8,%rax
  800421d06d:	48 8b 00             	mov    (%rax),%rax
  800421d070:	89 da                	mov    %ebx,%edx
  800421d072:	4c 89 e6             	mov    %r12,%rsi
  800421d075:	48 89 c7             	mov    %rax,%rdi
  800421d078:	48 b8 09 de 21 04 80 	movabs $0x800421de09,%rax
  800421d07f:	00 00 00 
  800421d082:	ff d0                	callq  *%rax
  800421d084:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d087:	e9 a3 03 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421d08c:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d093:	00 00 00 
  800421d096:	ff d0                	callq  *%rax
  800421d098:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d09f:	00 00 00 
  800421d0a2:	48 98                	cltq   
  800421d0a4:	48 c1 e0 03          	shl    $0x3,%rax
  800421d0a8:	48 89 c1             	mov    %rax,%rcx
  800421d0ab:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d0af:	48 01 c8             	add    %rcx,%rax
  800421d0b2:	48 01 d0             	add    %rdx,%rax
  800421d0b5:	48 83 c0 08          	add    $0x8,%rax
  800421d0b9:	48 8b 00             	mov    (%rax),%rax
  800421d0bc:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d0c3:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d0ca:	00 00 00 
  800421d0cd:	ff d0                	callq  *%rax
  800421d0cf:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d0d6:	00 00 00 
  800421d0d9:	48 98                	cltq   
  800421d0db:	48 c1 e0 03          	shl    $0x3,%rax
  800421d0df:	48 89 c1             	mov    %rax,%rcx
  800421d0e2:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d0e6:	48 01 c8             	add    %rcx,%rax
  800421d0e9:	48 01 d0             	add    %rdx,%rax
  800421d0ec:	48 83 c0 08          	add    $0x8,%rax
  800421d0f0:	48 8b 00             	mov    (%rax),%rax
  800421d0f3:	48 89 de             	mov    %rbx,%rsi
  800421d0f6:	48 89 c7             	mov    %rax,%rdi
  800421d0f9:	48 b8 37 df 21 04 80 	movabs $0x800421df37,%rax
  800421d100:	00 00 00 
  800421d103:	ff d0                	callq  *%rax
  800421d105:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d108:	e9 22 03 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421d10d:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d114:	00 00 00 
  800421d117:	ff d0                	callq  *%rax
  800421d119:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d120:	00 00 00 
  800421d123:	48 98                	cltq   
  800421d125:	48 c1 e0 03          	shl    $0x3,%rax
  800421d129:	48 89 c1             	mov    %rax,%rcx
  800421d12c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d130:	48 01 c8             	add    %rcx,%rax
  800421d133:	48 01 d0             	add    %rdx,%rax
  800421d136:	48 83 c0 08          	add    $0x8,%rax
  800421d13a:	48 8b 00             	mov    (%rax),%rax
  800421d13d:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d144:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d14b:	00 00 00 
  800421d14e:	ff d0                	callq  *%rax
  800421d150:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d157:	00 00 00 
  800421d15a:	48 98                	cltq   
  800421d15c:	48 c1 e0 03          	shl    $0x3,%rax
  800421d160:	48 89 c1             	mov    %rax,%rcx
  800421d163:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d167:	48 01 c8             	add    %rcx,%rax
  800421d16a:	48 01 d0             	add    %rdx,%rax
  800421d16d:	48 83 c0 08          	add    $0x8,%rax
  800421d171:	48 8b 00             	mov    (%rax),%rax
  800421d174:	48 89 de             	mov    %rbx,%rsi
  800421d177:	48 89 c7             	mov    %rax,%rdi
  800421d17a:	48 b8 3f e0 21 04 80 	movabs $0x800421e03f,%rax
  800421d181:	00 00 00 
  800421d184:	ff d0                	callq  *%rax
  800421d186:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d189:	e9 a1 02 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421d18e:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d195:	00 00 00 
  800421d198:	ff d0                	callq  *%rax
  800421d19a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d1a1:	00 00 00 
  800421d1a4:	48 98                	cltq   
  800421d1a6:	48 c1 e0 03          	shl    $0x3,%rax
  800421d1aa:	48 89 c1             	mov    %rax,%rcx
  800421d1ad:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d1b1:	48 01 c8             	add    %rcx,%rax
  800421d1b4:	48 01 d0             	add    %rdx,%rax
  800421d1b7:	48 83 c0 08          	add    $0x8,%rax
  800421d1bb:	48 8b 00             	mov    (%rax),%rax
  800421d1be:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d1c5:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d1cc:	00 00 00 
  800421d1cf:	ff d0                	callq  *%rax
  800421d1d1:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d1d8:	00 00 00 
  800421d1db:	48 98                	cltq   
  800421d1dd:	48 c1 e0 03          	shl    $0x3,%rax
  800421d1e1:	48 89 c1             	mov    %rax,%rcx
  800421d1e4:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d1e8:	48 01 c8             	add    %rcx,%rax
  800421d1eb:	48 01 d0             	add    %rdx,%rax
  800421d1ee:	48 83 c0 08          	add    $0x8,%rax
  800421d1f2:	48 8b 00             	mov    (%rax),%rax
  800421d1f5:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421d1fc:	48 89 de             	mov    %rbx,%rsi
  800421d1ff:	48 89 c7             	mov    %rax,%rdi
  800421d202:	48 b8 ab e1 21 04 80 	movabs $0x800421e1ab,%rax
  800421d209:	00 00 00 
  800421d20c:	ff d0                	callq  *%rax
  800421d20e:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d211:	e9 19 02 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421d216:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d21d:	00 00 00 
  800421d220:	ff d0                	callq  *%rax
  800421d222:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d229:	00 00 00 
  800421d22c:	48 98                	cltq   
  800421d22e:	48 c1 e0 03          	shl    $0x3,%rax
  800421d232:	48 89 c1             	mov    %rax,%rcx
  800421d235:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d239:	48 01 c8             	add    %rcx,%rax
  800421d23c:	48 01 d0             	add    %rdx,%rax
  800421d23f:	48 83 c0 08          	add    $0x8,%rax
  800421d243:	48 8b 00             	mov    (%rax),%rax
  800421d246:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d24d:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d254:	00 00 00 
  800421d257:	ff d0                	callq  *%rax
  800421d259:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d260:	00 00 00 
  800421d263:	48 98                	cltq   
  800421d265:	48 c1 e0 03          	shl    $0x3,%rax
  800421d269:	48 89 c1             	mov    %rax,%rcx
  800421d26c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d270:	48 01 c8             	add    %rcx,%rax
  800421d273:	48 01 d0             	add    %rdx,%rax
  800421d276:	48 83 c0 08          	add    $0x8,%rax
  800421d27a:	48 8b 00             	mov    (%rax),%rax
  800421d27d:	48 89 de             	mov    %rbx,%rsi
  800421d280:	48 89 c7             	mov    %rax,%rdi
  800421d283:	48 b8 9d e3 21 04 80 	movabs $0x800421e39d,%rax
  800421d28a:	00 00 00 
  800421d28d:	ff d0                	callq  *%rax
  800421d28f:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d292:	e9 98 01 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421d297:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d29e:	00 00 00 
  800421d2a1:	ff d0                	callq  *%rax
  800421d2a3:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d2aa:	00 00 00 
  800421d2ad:	48 98                	cltq   
  800421d2af:	48 c1 e0 03          	shl    $0x3,%rax
  800421d2b3:	48 89 c1             	mov    %rax,%rcx
  800421d2b6:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d2ba:	48 01 c8             	add    %rcx,%rax
  800421d2bd:	48 01 d0             	add    %rdx,%rax
  800421d2c0:	48 83 c0 08          	add    $0x8,%rax
  800421d2c4:	48 8b 00             	mov    (%rax),%rax
  800421d2c7:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d2ce:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d2d5:	00 00 00 
  800421d2d8:	ff d0                	callq  *%rax
  800421d2da:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d2e1:	00 00 00 
  800421d2e4:	48 98                	cltq   
  800421d2e6:	48 c1 e0 03          	shl    $0x3,%rax
  800421d2ea:	48 89 c1             	mov    %rax,%rcx
  800421d2ed:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d2f1:	48 01 c8             	add    %rcx,%rax
  800421d2f4:	48 01 d0             	add    %rdx,%rax
  800421d2f7:	48 83 c0 08          	add    $0x8,%rax
  800421d2fb:	48 8b 00             	mov    (%rax),%rax
  800421d2fe:	48 89 de             	mov    %rbx,%rsi
  800421d301:	48 89 c7             	mov    %rax,%rdi
  800421d304:	48 b8 7c e5 21 04 80 	movabs $0x800421e57c,%rax
  800421d30b:	00 00 00 
  800421d30e:	ff d0                	callq  *%rax
  800421d310:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d313:	e9 17 01 00 00       	jmpq   800421d42f <vmexit+0x543>
  800421d318:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d31f:	00 00 00 
  800421d322:	ff d0                	callq  *%rax
  800421d324:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d32b:	00 00 00 
  800421d32e:	48 98                	cltq   
  800421d330:	48 c1 e0 03          	shl    $0x3,%rax
  800421d334:	48 89 c1             	mov    %rax,%rcx
  800421d337:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d33b:	48 01 c8             	add    %rcx,%rax
  800421d33e:	48 01 d0             	add    %rdx,%rax
  800421d341:	48 83 c0 08          	add    $0x8,%rax
  800421d345:	48 8b 00             	mov    (%rax),%rax
  800421d348:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421d34f:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d356:	00 00 00 
  800421d359:	ff d0                	callq  *%rax
  800421d35b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d362:	00 00 00 
  800421d365:	48 98                	cltq   
  800421d367:	48 c1 e0 03          	shl    $0x3,%rax
  800421d36b:	48 89 c1             	mov    %rax,%rcx
  800421d36e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d372:	48 01 c8             	add    %rcx,%rax
  800421d375:	48 01 d0             	add    %rdx,%rax
  800421d378:	48 83 c0 08          	add    $0x8,%rax
  800421d37c:	48 8b 00             	mov    (%rax),%rax
  800421d37f:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421d386:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d38d:	00 00 00 
  800421d390:	ff d0                	callq  *%rax
  800421d392:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d399:	00 00 00 
  800421d39c:	48 98                	cltq   
  800421d39e:	48 c1 e0 03          	shl    $0x3,%rax
  800421d3a2:	48 89 c1             	mov    %rax,%rcx
  800421d3a5:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d3a9:	48 01 c8             	add    %rcx,%rax
  800421d3ac:	48 01 d0             	add    %rdx,%rax
  800421d3af:	48 83 c0 08          	add    $0x8,%rax
  800421d3b3:	48 8b 00             	mov    (%rax),%rax
  800421d3b6:	48 89 da             	mov    %rbx,%rdx
  800421d3b9:	4c 89 e6             	mov    %r12,%rsi
  800421d3bc:	48 89 c7             	mov    %rax,%rdi
  800421d3bf:	48 b8 3f e6 21 04 80 	movabs $0x800421e63f,%rax
  800421d3c6:	00 00 00 
  800421d3c9:	ff d0                	callq  *%rax
  800421d3cb:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d3ce:	eb 5f                	jmp    800421d42f <vmexit+0x543>
  800421d3d0:	48 bf 58 27 22 04 80 	movabs $0x8004222758,%rdi
  800421d3d7:	00 00 00 
  800421d3da:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d3df:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d3e6:	00 00 00 
  800421d3e9:	ff d2                	callq  *%rdx
  800421d3eb:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d3f2:	00 00 00 
  800421d3f5:	ff d0                	callq  *%rax
  800421d3f7:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d3fe:	00 00 00 
  800421d401:	48 98                	cltq   
  800421d403:	48 c1 e0 03          	shl    $0x3,%rax
  800421d407:	48 89 c1             	mov    %rax,%rcx
  800421d40a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d40e:	48 01 c8             	add    %rcx,%rax
  800421d411:	48 01 d0             	add    %rdx,%rax
  800421d414:	48 83 c0 08          	add    $0x8,%rax
  800421d418:	48 8b 00             	mov    (%rax),%rax
  800421d41b:	48 89 c7             	mov    %rax,%rdi
  800421d41e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421d425:	00 00 00 
  800421d428:	ff d0                	callq  *%rax
  800421d42a:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421d42e:	90                   	nop
  800421d42f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421d433:	83 f0 01             	xor    $0x1,%eax
  800421d436:	84 c0                	test   %al,%al
  800421d438:	74 6b                	je     800421d4a5 <vmexit+0x5b9>
  800421d43a:	48 bf 78 27 22 04 80 	movabs $0x8004222778,%rdi
  800421d441:	00 00 00 
  800421d444:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d449:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d450:	00 00 00 
  800421d453:	ff d2                	callq  *%rdx
  800421d455:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d45a:	48 ba ab cd 21 04 80 	movabs $0x800421cdab,%rdx
  800421d461:	00 00 00 
  800421d464:	ff d2                	callq  *%rdx
  800421d466:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d46d:	00 00 00 
  800421d470:	ff d0                	callq  *%rax
  800421d472:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d479:	00 00 00 
  800421d47c:	48 98                	cltq   
  800421d47e:	48 c1 e0 03          	shl    $0x3,%rax
  800421d482:	48 89 c1             	mov    %rax,%rcx
  800421d485:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d489:	48 01 c8             	add    %rcx,%rax
  800421d48c:	48 01 d0             	add    %rdx,%rax
  800421d48f:	48 83 c0 08          	add    $0x8,%rax
  800421d493:	48 8b 00             	mov    (%rax),%rax
  800421d496:	48 89 c7             	mov    %rax,%rdi
  800421d499:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421d4a0:	00 00 00 
  800421d4a3:	ff d0                	callq  *%rax
  800421d4a5:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800421d4ac:	00 00 00 
  800421d4af:	ff d0                	callq  *%rax

000000800421d4b1 <asm_vmrun>:
  800421d4b1:	55                   	push   %rbp
  800421d4b2:	48 89 e5             	mov    %rsp,%rbp
  800421d4b5:	41 57                	push   %r15
  800421d4b7:	41 56                	push   %r14
  800421d4b9:	41 55                	push   %r13
  800421d4bb:	41 54                	push   %r12
  800421d4bd:	53                   	push   %rbx
  800421d4be:	48 83 ec 28          	sub    $0x28,%rsp
  800421d4c2:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d4c6:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d4cd:	00 00 00 
  800421d4d0:	ff d0                	callq  *%rax
  800421d4d2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d4d9:	00 00 00 
  800421d4dc:	48 98                	cltq   
  800421d4de:	48 c1 e0 03          	shl    $0x3,%rax
  800421d4e2:	48 89 c1             	mov    %rax,%rcx
  800421d4e5:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d4e9:	48 01 c8             	add    %rcx,%rax
  800421d4ec:	48 01 d0             	add    %rdx,%rax
  800421d4ef:	48 83 c0 08          	add    $0x8,%rax
  800421d4f3:	48 8b 00             	mov    (%rax),%rax
  800421d4f6:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d4fc:	89 c2                	mov    %eax,%edx
  800421d4fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d502:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421d509:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d50d:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421d513:	48 b8 4e b1 21 04 80 	movabs $0x800421b14e,%rax
  800421d51a:	00 00 00 
  800421d51d:	ff d0                	callq  *%rax
  800421d51f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421d523:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421d528:	52                   	push   %rdx
  800421d529:	55                   	push   %rbp
  800421d52a:	51                   	push   %rcx
  800421d52b:	51                   	push   %rcx
  800421d52c:	0f 79 d4             	vmwrite %rsp,%rdx
  800421d52f:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421d536:	0f 20 d2             	mov    %cr2,%rdx
  800421d539:	48 39 c2             	cmp    %rax,%rdx
  800421d53c:	74 03                	je     800421d541 <asm_vmrun+0x90>
  800421d53e:	0f 22 d0             	mov    %rax,%cr2
  800421d541:	83 b9 80 00 00 00 01 	cmpl   $0x1,0x80(%rcx)
  800421d548:	48 8b 41 70          	mov    0x70(%rcx),%rax
  800421d54c:	48 8b 59 68          	mov    0x68(%rcx),%rbx
  800421d550:	48 8b 51 58          	mov    0x58(%rcx),%rdx
  800421d554:	48 8b 71 40          	mov    0x40(%rcx),%rsi
  800421d558:	48 8b 79 48          	mov    0x48(%rcx),%rdi
  800421d55c:	48 8b 69 50          	mov    0x50(%rcx),%rbp
  800421d560:	4c 8b 41 38          	mov    0x38(%rcx),%r8
  800421d564:	4c 8b 49 30          	mov    0x30(%rcx),%r9
  800421d568:	4c 8b 51 28          	mov    0x28(%rcx),%r10
  800421d56c:	4c 8b 59 20          	mov    0x20(%rcx),%r11
  800421d570:	4c 8b 61 18          	mov    0x18(%rcx),%r12
  800421d574:	4c 8b 69 10          	mov    0x10(%rcx),%r13
  800421d578:	4c 8b 71 08          	mov    0x8(%rcx),%r14
  800421d57c:	4c 8b 39             	mov    (%rcx),%r15
  800421d57f:	48 8b 49 60          	mov    0x60(%rcx),%rcx
  800421d583:	75 05                	jne    800421d58a <asm_vmrun+0xd9>
  800421d585:	0f 01 c2             	vmlaunch 
  800421d588:	eb 03                	jmp    800421d58d <asm_vmrun+0xdc>
  800421d58a:	0f 01 c3             	vmresume 
  800421d58d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421d592:	59                   	pop    %rcx
  800421d593:	48 89 41 70          	mov    %rax,0x70(%rcx)
  800421d597:	48 89 59 68          	mov    %rbx,0x68(%rcx)
  800421d59b:	8f 41 60             	popq   0x60(%rcx)
  800421d59e:	48 89 51 58          	mov    %rdx,0x58(%rcx)
  800421d5a2:	48 89 71 40          	mov    %rsi,0x40(%rcx)
  800421d5a6:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  800421d5aa:	48 89 69 50          	mov    %rbp,0x50(%rcx)
  800421d5ae:	4c 89 41 38          	mov    %r8,0x38(%rcx)
  800421d5b2:	4c 89 49 30          	mov    %r9,0x30(%rcx)
  800421d5b6:	4c 89 51 28          	mov    %r10,0x28(%rcx)
  800421d5ba:	4c 89 59 20          	mov    %r11,0x20(%rcx)
  800421d5be:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  800421d5c2:	4c 89 69 10          	mov    %r13,0x10(%rcx)
  800421d5c6:	4c 89 71 08          	mov    %r14,0x8(%rcx)
  800421d5ca:	4c 89 39             	mov    %r15,(%rcx)
  800421d5cd:	49 89 c2             	mov    %rax,%r10
  800421d5d0:	49 89 d3             	mov    %rdx,%r11
  800421d5d3:	0f 20 d0             	mov    %cr2,%rax
  800421d5d6:	48 89 81 90 00 00 00 	mov    %rax,0x90(%rcx)
  800421d5dd:	5d                   	pop    %rbp
  800421d5de:	5a                   	pop    %rdx
  800421d5df:	0f 96 41 78          	setbe  0x78(%rcx)
  800421d5e3:	48 b8 32 b1 21 04 80 	movabs $0x800421b132,%rax
  800421d5ea:	00 00 00 
  800421d5ed:	ff d0                	callq  *%rax
  800421d5ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d5f3:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421d5f7:	66 85 c0             	test   %ax,%ax
  800421d5fa:	74 20                	je     800421d61c <asm_vmrun+0x16b>
  800421d5fc:	48 bf 28 29 22 04 80 	movabs $0x8004222928,%rdi
  800421d603:	00 00 00 
  800421d606:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d60b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d612:	00 00 00 
  800421d615:	ff d2                	callq  *%rdx
  800421d617:	e9 af 00 00 00       	jmpq   800421d6cb <asm_vmrun+0x21a>
  800421d61c:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d623:	00 00 00 
  800421d626:	ff d0                	callq  *%rax
  800421d628:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d62f:	00 00 00 
  800421d632:	48 98                	cltq   
  800421d634:	48 c1 e0 03          	shl    $0x3,%rax
  800421d638:	48 89 c1             	mov    %rax,%rcx
  800421d63b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d63f:	48 01 c8             	add    %rcx,%rax
  800421d642:	48 01 d0             	add    %rdx,%rax
  800421d645:	48 83 c0 08          	add    $0x8,%rax
  800421d649:	48 8b 18             	mov    (%rax),%rbx
  800421d64c:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421d653:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d656:	89 c7                	mov    %eax,%edi
  800421d658:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421d65f:	00 00 00 
  800421d662:	ff d0                	callq  *%rax
  800421d664:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421d66b:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421d672:	00 00 00 
  800421d675:	ff d0                	callq  *%rax
  800421d677:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d67e:	00 00 00 
  800421d681:	48 98                	cltq   
  800421d683:	48 c1 e0 03          	shl    $0x3,%rax
  800421d687:	48 89 c1             	mov    %rax,%rcx
  800421d68a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d68e:	48 01 c8             	add    %rcx,%rax
  800421d691:	48 01 d0             	add    %rdx,%rax
  800421d694:	48 83 c0 08          	add    $0x8,%rax
  800421d698:	48 8b 18             	mov    (%rax),%rbx
  800421d69b:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421d6a2:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421d6a5:	89 c7                	mov    %eax,%edi
  800421d6a7:	48 b8 c9 af 21 04 80 	movabs $0x800421afc9,%rax
  800421d6ae:	00 00 00 
  800421d6b1:	ff d0                	callq  *%rax
  800421d6b3:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421d6ba:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d6bf:	48 ba ec ce 21 04 80 	movabs $0x800421ceec,%rdx
  800421d6c6:	00 00 00 
  800421d6c9:	ff d2                	callq  *%rdx
  800421d6cb:	48 83 c4 28          	add    $0x28,%rsp
  800421d6cf:	5b                   	pop    %rbx
  800421d6d0:	41 5c                	pop    %r12
  800421d6d2:	41 5d                	pop    %r13
  800421d6d4:	41 5e                	pop    %r14
  800421d6d6:	41 5f                	pop    %r15
  800421d6d8:	5d                   	pop    %rbp
  800421d6d9:	c3                   	retq   

000000800421d6da <msr_setup>:
  800421d6da:	55                   	push   %rbp
  800421d6db:	48 89 e5             	mov    %rsp,%rbp
  800421d6de:	48 83 ec 40          	sub    $0x40,%rsp
  800421d6e2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421d6e6:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421d6ed:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421d6f4:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421d6fb:	7e 35                	jle    800421d732 <msr_setup+0x58>
  800421d6fd:	48 b9 48 29 22 04 80 	movabs $0x8004222948,%rcx
  800421d704:	00 00 00 
  800421d707:	48 ba ee 25 22 04 80 	movabs $0x80042225ee,%rdx
  800421d70e:	00 00 00 
  800421d711:	be 84 02 00 00       	mov    $0x284,%esi
  800421d716:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421d71d:	00 00 00 
  800421d720:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d725:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d72c:	00 00 00 
  800421d72f:	41 ff d0             	callq  *%r8
  800421d732:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d736:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421d739:	89 50 28             	mov    %edx,0x28(%rax)
  800421d73c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d743:	e9 97 00 00 00       	jmpq   800421d7df <msr_setup+0x105>
  800421d748:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d74c:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421d750:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421d753:	48 63 d2             	movslq %edx,%rdx
  800421d756:	48 c1 e2 04          	shl    $0x4,%rdx
  800421d75a:	48 01 d0             	add    %rdx,%rax
  800421d75d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d761:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d764:	48 98                	cltq   
  800421d766:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421d76a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d76e:	89 10                	mov    %edx,(%rax)
  800421d770:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d773:	48 98                	cltq   
  800421d775:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421d779:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421d77c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d77f:	89 c1                	mov    %eax,%ecx
  800421d781:	0f 32                	rdmsr  
  800421d783:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421d786:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421d789:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421d790:	00 
	ret = edx;
  800421d791:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421d794:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421d798:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421d79d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421d7a0:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421d7a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d7a8:	48 89 c2             	mov    %rax,%rdx
  800421d7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d7af:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421d7b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d7b7:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421d7bb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421d7be:	48 63 d2             	movslq %edx,%rdx
  800421d7c1:	48 c1 e2 04          	shl    $0x4,%rdx
  800421d7c5:	48 01 d0             	add    %rdx,%rax
  800421d7c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d7cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d7cf:	48 98                	cltq   
  800421d7d1:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421d7d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d7d9:	89 10                	mov    %edx,(%rax)
  800421d7db:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d7df:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d7e2:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421d7e5:	0f 8c 5d ff ff ff    	jl     800421d748 <msr_setup+0x6e>
  800421d7eb:	c9                   	leaveq 
  800421d7ec:	c3                   	retq   

000000800421d7ed <bitmap_setup>:
  800421d7ed:	55                   	push   %rbp
  800421d7ee:	48 89 e5             	mov    %rsp,%rbp
  800421d7f1:	48 83 ec 30          	sub    $0x30,%rsp
  800421d7f5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421d7f9:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421d800:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421d807:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421d80e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d815:	e9 07 01 00 00       	jmpq   800421d921 <bitmap_setup+0x134>
  800421d81a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d81d:	48 98                	cltq   
  800421d81f:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d823:	c1 e8 06             	shr    $0x6,%eax
  800421d826:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d829:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d82c:	48 98                	cltq   
  800421d82e:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d832:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421d837:	77 51                	ja     800421d88a <bitmap_setup+0x9d>
  800421d839:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d83d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421d841:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d844:	48 63 d2             	movslq %edx,%rdx
  800421d847:	48 c1 e2 03          	shl    $0x3,%rdx
  800421d84b:	48 01 c2             	add    %rax,%rdx
  800421d84e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d852:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421d856:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421d859:	48 63 c9             	movslq %ecx,%rcx
  800421d85c:	48 c1 e1 03          	shl    $0x3,%rcx
  800421d860:	48 01 c8             	add    %rcx,%rax
  800421d863:	48 8b 30             	mov    (%rax),%rsi
  800421d866:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d869:	48 98                	cltq   
  800421d86b:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d86f:	83 e0 3f             	and    $0x3f,%eax
  800421d872:	bf 01 00 00 00       	mov    $0x1,%edi
  800421d877:	89 c1                	mov    %eax,%ecx
  800421d879:	48 d3 e7             	shl    %cl,%rdi
  800421d87c:	48 89 f8             	mov    %rdi,%rax
  800421d87f:	48 09 f0             	or     %rsi,%rax
  800421d882:	48 89 02             	mov    %rax,(%rdx)
  800421d885:	e9 93 00 00 00       	jmpq   800421d91d <bitmap_setup+0x130>
  800421d88a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d88d:	48 98                	cltq   
  800421d88f:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d893:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421d898:	77 4e                	ja     800421d8e8 <bitmap_setup+0xfb>
  800421d89a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d89e:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421d8a2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d8a5:	48 63 d2             	movslq %edx,%rdx
  800421d8a8:	48 c1 e2 03          	shl    $0x3,%rdx
  800421d8ac:	48 01 c2             	add    %rax,%rdx
  800421d8af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d8b3:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421d8b7:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421d8ba:	48 63 c9             	movslq %ecx,%rcx
  800421d8bd:	48 c1 e1 03          	shl    $0x3,%rcx
  800421d8c1:	48 01 c8             	add    %rcx,%rax
  800421d8c4:	48 8b 30             	mov    (%rax),%rsi
  800421d8c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d8ca:	48 98                	cltq   
  800421d8cc:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421d8d0:	83 e0 3f             	and    $0x3f,%eax
  800421d8d3:	bf 01 00 00 00       	mov    $0x1,%edi
  800421d8d8:	89 c1                	mov    %eax,%ecx
  800421d8da:	48 d3 e7             	shl    %cl,%rdi
  800421d8dd:	48 89 f8             	mov    %rdi,%rax
  800421d8e0:	48 09 f0             	or     %rsi,%rax
  800421d8e3:	48 89 02             	mov    %rax,(%rdx)
  800421d8e6:	eb 35                	jmp    800421d91d <bitmap_setup+0x130>
  800421d8e8:	48 b9 e8 25 22 04 80 	movabs $0x80042225e8,%rcx
  800421d8ef:	00 00 00 
  800421d8f2:	48 ba ee 25 22 04 80 	movabs $0x80042225ee,%rdx
  800421d8f9:	00 00 00 
  800421d8fc:	be 9d 02 00 00       	mov    $0x29d,%esi
  800421d901:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421d908:	00 00 00 
  800421d90b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d910:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d917:	00 00 00 
  800421d91a:	41 ff d0             	callq  *%r8
  800421d91d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d921:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d924:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421d927:	0f 8c ed fe ff ff    	jl     800421d81a <bitmap_setup+0x2d>
  800421d92d:	c9                   	leaveq 
  800421d92e:	c3                   	retq   

000000800421d92f <vmx_vmrun>:
  800421d92f:	55                   	push   %rbp
  800421d930:	48 89 e5             	mov    %rsp,%rbp
  800421d933:	48 83 ec 70          	sub    $0x70,%rsp
  800421d937:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421d93b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d93f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421d945:	83 f8 03             	cmp    $0x3,%eax
  800421d948:	74 0a                	je     800421d954 <vmx_vmrun+0x25>
  800421d94a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421d94f:	e9 9a 02 00 00       	jmpq   800421dbee <vmx_vmrun+0x2bf>
  800421d954:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d958:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d95e:	83 f8 01             	cmp    $0x1,%eax
  800421d961:	0f 85 2f 01 00 00    	jne    800421da96 <vmx_vmrun+0x167>
  800421d967:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d96b:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d972:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d976:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d97d:	00 00 00 
  800421d980:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421d984:	77 32                	ja     800421d9b8 <vmx_vmrun+0x89>
  800421d986:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d98a:	48 89 c1             	mov    %rax,%rcx
  800421d98d:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421d994:	00 00 00 
  800421d997:	be b0 02 00 00       	mov    $0x2b0,%esi
  800421d99c:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421d9a3:	00 00 00 
  800421d9a6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d9ab:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d9b2:	00 00 00 
  800421d9b5:	41 ff d0             	callq  *%r8
  800421d9b8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d9bf:	ff ff ff 
  800421d9c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d9c6:	48 01 d0             	add    %rdx,%rax
  800421d9c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d9cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d9d1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421d9d5:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421d9d9:	f8                   	clc    
  800421d9da:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421d9df:	0f 96 c0             	setbe  %al
  800421d9e2:	88 45 df             	mov    %al,-0x21(%rbp)
  800421d9e5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421d9e9:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d9ec:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d9f0:	74 0a                	je     800421d9fc <vmx_vmrun+0xcd>
  800421d9f2:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d9f7:	e9 f2 01 00 00       	jmpq   800421dbee <vmx_vmrun+0x2bf>
  800421d9fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421da00:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421da04:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421da08:	f8                   	clc    
  800421da09:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421da0d:	0f 96 c0             	setbe  %al
  800421da10:	88 45 de             	mov    %al,-0x22(%rbp)
  800421da13:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421da17:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421da1a:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421da1e:	74 0a                	je     800421da2a <vmx_vmrun+0xfb>
  800421da20:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421da25:	e9 c4 01 00 00       	jmpq   800421dbee <vmx_vmrun+0x2bf>
  800421da2a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421da2f:	48 ba d0 ba 21 04 80 	movabs $0x800421bad0,%rdx
  800421da36:	00 00 00 
  800421da39:	ff d2                	callq  *%rdx
  800421da3b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421da40:	48 ba 9e be 21 04 80 	movabs $0x800421be9e,%rdx
  800421da47:	00 00 00 
  800421da4a:	ff d2                	callq  *%rdx
  800421da4c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421da50:	48 05 20 01 00 00    	add    $0x120,%rax
  800421da56:	48 89 c7             	mov    %rax,%rdi
  800421da59:	48 b8 ed d7 21 04 80 	movabs $0x800421d7ed,%rax
  800421da60:	00 00 00 
  800421da63:	ff d0                	callq  *%rax
  800421da65:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421da69:	48 05 20 01 00 00    	add    $0x120,%rax
  800421da6f:	48 89 c7             	mov    %rax,%rdi
  800421da72:	48 b8 da d6 21 04 80 	movabs $0x800421d6da,%rax
  800421da79:	00 00 00 
  800421da7c:	ff d0                	callq  *%rax
  800421da7e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421da82:	48 89 c7             	mov    %rax,%rdi
  800421da85:	48 b8 43 c7 21 04 80 	movabs $0x800421c743,%rax
  800421da8c:	00 00 00 
  800421da8f:	ff d0                	callq  *%rax
  800421da91:	e9 8c 00 00 00       	jmpq   800421db22 <vmx_vmrun+0x1f3>
  800421da96:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421da9a:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421daa1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421daa5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421daac:	00 00 00 
  800421daaf:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421dab3:	77 32                	ja     800421dae7 <vmx_vmrun+0x1b8>
  800421dab5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dab9:	48 89 c1             	mov    %rax,%rcx
  800421dabc:	48 ba 80 26 22 04 80 	movabs $0x8004222680,%rdx
  800421dac3:	00 00 00 
  800421dac6:	be c9 02 00 00       	mov    $0x2c9,%esi
  800421dacb:	48 bf 03 26 22 04 80 	movabs $0x8004222603,%rdi
  800421dad2:	00 00 00 
  800421dad5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dada:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421dae1:	00 00 00 
  800421dae4:	41 ff d0             	callq  *%r8
  800421dae7:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421daee:	ff ff ff 
  800421daf1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421daf5:	48 01 d0             	add    %rdx,%rax
  800421daf8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421dafc:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421db00:	f8                   	clc    
  800421db01:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421db05:	0f 96 c0             	setbe  %al
  800421db08:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421db0b:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421db0f:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421db12:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421db16:	74 0a                	je     800421db22 <vmx_vmrun+0x1f3>
  800421db18:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421db1d:	e9 cc 00 00 00       	jmpq   800421dbee <vmx_vmrun+0x2bf>
  800421db22:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421db29:	00 00 00 
  800421db2c:	ff d0                	callq  *%rax
  800421db2e:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421db35:	00 00 00 
  800421db38:	48 98                	cltq   
  800421db3a:	48 c1 e0 03          	shl    $0x3,%rax
  800421db3e:	48 89 c1             	mov    %rax,%rcx
  800421db41:	48 c1 e1 04          	shl    $0x4,%rcx
  800421db45:	48 01 c8             	add    %rcx,%rax
  800421db48:	48 01 d0             	add    %rdx,%rax
  800421db4b:	48 83 c0 08          	add    $0x8,%rax
  800421db4f:	48 8b 00             	mov    (%rax),%rax
  800421db52:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421db59:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421db60:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421db64:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421db68:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421db6b:	48 89 d6             	mov    %rdx,%rsi
  800421db6e:	89 c7                	mov    %eax,%edi
  800421db70:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421db77:	00 00 00 
  800421db7a:	ff d0                	callq  *%rax
  800421db7c:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421db83:	00 00 00 
  800421db86:	ff d0                	callq  *%rax
  800421db88:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421db8f:	00 00 00 
  800421db92:	48 98                	cltq   
  800421db94:	48 c1 e0 03          	shl    $0x3,%rax
  800421db98:	48 89 c1             	mov    %rax,%rcx
  800421db9b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421db9f:	48 01 c8             	add    %rcx,%rax
  800421dba2:	48 01 d0             	add    %rdx,%rax
  800421dba5:	48 83 c0 08          	add    $0x8,%rax
  800421dba9:	48 8b 00             	mov    (%rax),%rax
  800421dbac:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421dbb3:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421dbba:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421dbbe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421dbc2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421dbc5:	48 89 d6             	mov    %rdx,%rsi
  800421dbc8:	89 c7                	mov    %eax,%edi
  800421dbca:	48 b8 a3 af 21 04 80 	movabs $0x800421afa3,%rax
  800421dbd1:	00 00 00 
  800421dbd4:	ff d0                	callq  *%rax
  800421dbd6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dbda:	48 89 c7             	mov    %rax,%rdi
  800421dbdd:	48 b8 b1 d4 21 04 80 	movabs $0x800421d4b1,%rax
  800421dbe4:	00 00 00 
  800421dbe7:	ff d0                	callq  *%rax
  800421dbe9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dbee:	c9                   	leaveq 
  800421dbef:	c3                   	retq   

000000800421dbf0 <vmcs_writel>:
  800421dbf0:	55                   	push   %rbp
  800421dbf1:	48 89 e5             	mov    %rsp,%rbp
  800421dbf4:	48 83 ec 20          	sub    $0x20,%rsp
  800421dbf8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421dbfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421dbff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dc03:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421dc06:	f8                   	clc    
  800421dc07:	0f 79 d0             	vmwrite %rax,%rdx
  800421dc0a:	0f 96 c0             	setbe  %al
  800421dc0d:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421dc10:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421dc14:	c9                   	leaveq 
  800421dc15:	c3                   	retq   

000000800421dc16 <vmcs_readl>:
  800421dc16:	55                   	push   %rbp
  800421dc17:	48 89 e5             	mov    %rsp,%rbp
  800421dc1a:	48 83 ec 14          	sub    $0x14,%rsp
  800421dc1e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421dc21:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421dc24:	89 c2                	mov    %eax,%edx
  800421dc26:	0f 78 d0             	vmread %rdx,%rax
  800421dc29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421dc2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dc31:	c9                   	leaveq 
  800421dc32:	c3                   	retq   

000000800421dc33 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  800421dc33:	55                   	push   %rbp
  800421dc34:	48 89 e5             	mov    %rsp,%rbp
  800421dc37:	53                   	push   %rbx
  800421dc38:	48 83 ec 38          	sub    $0x38,%rsp
  800421dc3c:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421dc3f:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421dc43:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421dc47:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421dc4b:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  800421dc4f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421dc52:	0f a2                	cpuid  
  800421dc54:	89 de                	mov    %ebx,%esi
  800421dc56:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421dc59:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421dc5c:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421dc5f:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  800421dc62:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421dc67:	74 09                	je     800421dc72 <cpuid+0x3f>
		*eaxp = eax;
  800421dc69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dc6d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421dc70:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421dc72:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421dc77:	74 09                	je     800421dc82 <cpuid+0x4f>
		*ebxp = ebx;
  800421dc79:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421dc7d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421dc80:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421dc82:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421dc87:	74 09                	je     800421dc92 <cpuid+0x5f>
		*ecxp = ecx;
  800421dc89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dc8d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421dc90:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421dc92:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421dc97:	74 09                	je     800421dca2 <cpuid+0x6f>
		*edxp = edx;
  800421dc99:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421dc9d:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421dca0:	89 10                	mov    %edx,(%rax)
}
  800421dca2:	48 83 c4 38          	add    $0x38,%rsp
  800421dca6:	5b                   	pop    %rbx
  800421dca7:	5d                   	pop    %rbp
  800421dca8:	c3                   	retq   

000000800421dca9 <page2ppn>:
  800421dca9:	55                   	push   %rbp
  800421dcaa:	48 89 e5             	mov    %rsp,%rbp
  800421dcad:	48 83 ec 08          	sub    $0x8,%rsp
  800421dcb1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421dcb5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421dcb9:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800421dcc0:	00 00 00 
  800421dcc3:	48 8b 00             	mov    (%rax),%rax
  800421dcc6:	48 29 c2             	sub    %rax,%rdx
  800421dcc9:	48 89 d0             	mov    %rdx,%rax
  800421dccc:	48 c1 f8 04          	sar    $0x4,%rax
  800421dcd0:	c9                   	leaveq 
  800421dcd1:	c3                   	retq   

000000800421dcd2 <page2pa>:
  800421dcd2:	55                   	push   %rbp
  800421dcd3:	48 89 e5             	mov    %rsp,%rbp
  800421dcd6:	48 83 ec 08          	sub    $0x8,%rsp
  800421dcda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421dcde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dce2:	48 89 c7             	mov    %rax,%rdi
  800421dce5:	48 b8 a9 dc 21 04 80 	movabs $0x800421dca9,%rax
  800421dcec:	00 00 00 
  800421dcef:	ff d0                	callq  *%rax
  800421dcf1:	48 c1 e0 0c          	shl    $0xc,%rax
  800421dcf5:	c9                   	leaveq 
  800421dcf6:	c3                   	retq   

000000800421dcf7 <page2kva>:
  800421dcf7:	55                   	push   %rbp
  800421dcf8:	48 89 e5             	mov    %rsp,%rbp
  800421dcfb:	48 83 ec 20          	sub    $0x20,%rsp
  800421dcff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421dd03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421dd07:	48 89 c7             	mov    %rax,%rdi
  800421dd0a:	48 b8 d2 dc 21 04 80 	movabs $0x800421dcd2,%rax
  800421dd11:	00 00 00 
  800421dd14:	ff d0                	callq  *%rax
  800421dd16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421dd1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dd1e:	48 c1 e8 0c          	shr    $0xc,%rax
  800421dd22:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421dd25:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421dd28:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421dd2f:	00 00 00 
  800421dd32:	48 8b 00             	mov    (%rax),%rax
  800421dd35:	48 39 c2             	cmp    %rax,%rdx
  800421dd38:	72 32                	jb     800421dd6c <page2kva+0x75>
  800421dd3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dd3e:	48 89 c1             	mov    %rax,%rcx
  800421dd41:	48 ba 60 29 22 04 80 	movabs $0x8004222960,%rdx
  800421dd48:	00 00 00 
  800421dd4b:	be 62 00 00 00       	mov    $0x62,%esi
  800421dd50:	48 bf 83 29 22 04 80 	movabs $0x8004222983,%rdi
  800421dd57:	00 00 00 
  800421dd5a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dd5f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421dd66:	00 00 00 
  800421dd69:	41 ff d0             	callq  *%r8
  800421dd6c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421dd73:	00 00 00 
  800421dd76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dd7a:	48 01 d0             	add    %rdx,%rax
  800421dd7d:	c9                   	leaveq 
  800421dd7e:	c3                   	retq   

000000800421dd7f <vmx_get_vmdisk_number>:
#include <kern/syscall.h>
#include <kern/env.h>
#include <kern/cpu.h>
static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421dd7f:	55                   	push   %rbp
  800421dd80:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421dd83:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421dd8a:	00 00 00 
  800421dd8d:	8b 00                	mov    (%rax),%eax
}
  800421dd8f:	5d                   	pop    %rbp
  800421dd90:	c3                   	retq   

000000800421dd91 <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421dd91:	55                   	push   %rbp
  800421dd92:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421dd95:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421dd9c:	00 00 00 
  800421dd9f:	8b 00                	mov    (%rax),%eax
  800421dda1:	8d 50 01             	lea    0x1(%rax),%edx
  800421dda4:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421ddab:	00 00 00 
  800421ddae:	89 10                	mov    %edx,(%rax)
}
  800421ddb0:	5d                   	pop    %rbp
  800421ddb1:	c3                   	retq   

000000800421ddb2 <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421ddb2:	55                   	push   %rbp
  800421ddb3:	48 89 e5             	mov    %rsp,%rbp
  800421ddb6:	48 83 ec 28          	sub    $0x28,%rsp
  800421ddba:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421ddbd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421ddc1:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421ddc4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421ddc8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ddcc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421ddd0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421ddd7:	eb 21                	jmp    800421ddfa <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421ddd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421dddd:	8b 00                	mov    (%rax),%eax
  800421dddf:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421dde2:	75 12                	jne    800421ddf6 <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421dde4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dde8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421ddec:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421ddef:	b8 01 00 00 00       	mov    $0x1,%eax
  800421ddf4:	eb 11                	jmp    800421de07 <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421ddf6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421ddfa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ddfd:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421de00:	7c d7                	jl     800421ddd9 <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421de02:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421de07:	c9                   	leaveq 
  800421de08:	c3                   	retq   

000000800421de09 <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421de09:	55                   	push   %rbp
  800421de0a:	48 89 e5             	mov    %rsp,%rbp
  800421de0d:	48 83 ec 38          	sub    $0x38,%rsp
  800421de11:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421de15:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421de19:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421de1c:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421de23:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421de26:	89 c7                	mov    %eax,%edi
  800421de28:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421de2f:	00 00 00 
  800421de32:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421de34:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421de37:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421de3b:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421de42:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421de45:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421de48:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421de4b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421de4e:	48 89 d6             	mov    %rdx,%rsi
  800421de51:	89 c7                	mov    %eax,%edi
  800421de53:	48 b8 f0 db 21 04 80 	movabs $0x800421dbf0,%rax
  800421de5a:	00 00 00 
  800421de5d:	ff d0                	callq  *%rax
  800421de5f:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421de66:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421de69:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421de6c:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421de6f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421de72:	48 89 d6             	mov    %rdx,%rsi
  800421de75:	89 c7                	mov    %eax,%edi
  800421de77:	48 b8 f0 db 21 04 80 	movabs $0x800421dbf0,%rax
  800421de7e:	00 00 00 
  800421de81:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421de83:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421de88:	c9                   	leaveq 
  800421de89:	c3                   	retq   

000000800421de8a <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421de8a:	55                   	push   %rbp
  800421de8b:	48 89 e5             	mov    %rsp,%rbp
  800421de8e:	48 83 ec 48          	sub    $0x48,%rsp
  800421de92:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421de96:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421de9a:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421de9d:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421dea4:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421dea7:	89 c7                	mov    %eax,%edi
  800421dea9:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421deb0:	00 00 00 
  800421deb3:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421deb5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421deb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421debd:	25 00 02 00 00       	and    $0x200,%eax
  800421dec2:	48 85 c0             	test   %rax,%rax
  800421dec5:	75 45                	jne    800421df0c <handle_interrupts+0x82>
  800421dec7:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421dece:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421ded1:	89 c7                	mov    %eax,%edi
  800421ded3:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421deda:	00 00 00 
  800421dedd:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421dedf:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421dee2:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421dee6:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421deed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421def0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421def3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421def6:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421def9:	48 89 d6             	mov    %rdx,%rsi
  800421defc:	89 c7                	mov    %eax,%edi
  800421defe:	48 b8 f0 db 21 04 80 	movabs $0x800421dbf0,%rax
  800421df05:	00 00 00 
  800421df08:	ff d0                	callq  *%rax
  800421df0a:	eb 24                	jmp    800421df30 <handle_interrupts+0xa6>
  800421df0c:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421df13:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421df16:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421df19:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421df1c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421df1f:	48 89 d6             	mov    %rdx,%rsi
  800421df22:	89 c7                	mov    %eax,%edi
  800421df24:	48 b8 f0 db 21 04 80 	movabs $0x800421dbf0,%rax
  800421df2b:	00 00 00 
  800421df2e:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421df30:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421df35:	c9                   	leaveq 
  800421df36:	c3                   	retq   

000000800421df37 <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421df37:	55                   	push   %rbp
  800421df38:	48 89 e5             	mov    %rsp,%rbp
  800421df3b:	53                   	push   %rbx
  800421df3c:	48 83 ec 48          	sub    $0x48,%rsp
  800421df40:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421df44:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421df48:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421df4c:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421df50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421df54:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421df59:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421df5d:	0f 85 d0 00 00 00    	jne    800421e033 <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421df63:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421df67:	8b 50 28             	mov    0x28(%rax),%edx
  800421df6a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421df6e:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421df72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421df76:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421df7a:	89 c7                	mov    %eax,%edi
  800421df7c:	48 b8 b2 dd 21 04 80 	movabs $0x800421ddb2,%rax
  800421df83:	00 00 00 
  800421df86:	ff d0                	callq  *%rax
  800421df88:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421df8b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421df8f:	83 f0 01             	xor    $0x1,%eax
  800421df92:	84 c0                	test   %al,%al
  800421df94:	74 35                	je     800421dfcb <handle_rdmsr+0x94>
  800421df96:	48 b9 92 29 22 04 80 	movabs $0x8004222992,%rcx
  800421df9d:	00 00 00 
  800421dfa0:	48 ba 94 29 22 04 80 	movabs $0x8004222994,%rdx
  800421dfa7:	00 00 00 
  800421dfaa:	be 58 00 00 00       	mov    $0x58,%esi
  800421dfaf:	48 bf a9 29 22 04 80 	movabs $0x80042229a9,%rdi
  800421dfb6:	00 00 00 
  800421dfb9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dfbe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421dfc5:	00 00 00 
  800421dfc8:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421dfcb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dfcf:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421dfd3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421dfd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dfdb:	48 c1 e0 20          	shl    $0x20,%rax
  800421dfdf:	48 89 c2             	mov    %rax,%rdx
  800421dfe2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dfe6:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421dfea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dfee:	89 c2                	mov    %eax,%edx
  800421dff0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dff4:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421dff8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421dffc:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e003:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421e00a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421e00d:	89 c7                	mov    %eax,%edi
  800421e00f:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e016:	00 00 00 
  800421e019:	ff d0                	callq  *%rax
  800421e01b:	89 c0                	mov    %eax,%eax
  800421e01d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e021:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e025:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e02c:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e031:	eb 05                	jmp    800421e038 <handle_rdmsr+0x101>
	}

	return false;
  800421e033:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e038:	48 83 c4 48          	add    $0x48,%rsp
  800421e03c:	5b                   	pop    %rbx
  800421e03d:	5d                   	pop    %rbp
  800421e03e:	c3                   	retq   

000000800421e03f <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421e03f:	55                   	push   %rbp
  800421e040:	48 89 e5             	mov    %rsp,%rbp
  800421e043:	53                   	push   %rbx
  800421e044:	48 83 ec 58          	sub    $0x58,%rsp
  800421e048:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421e04c:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421e050:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e054:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421e058:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421e05c:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421e061:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421e065:	0f 85 34 01 00 00    	jne    800421e19f <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421e06b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421e06f:	8b 50 28             	mov    0x28(%rax),%edx
  800421e072:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421e076:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421e07a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421e07e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421e082:	89 c7                	mov    %eax,%edi
  800421e084:	48 b8 b2 dd 21 04 80 	movabs $0x800421ddb2,%rax
  800421e08b:	00 00 00 
  800421e08e:	ff d0                	callq  *%rax
  800421e090:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421e093:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421e097:	83 f0 01             	xor    $0x1,%eax
  800421e09a:	84 c0                	test   %al,%al
  800421e09c:	74 35                	je     800421e0d3 <handle_wrmsr+0x94>
  800421e09e:	48 b9 92 29 22 04 80 	movabs $0x8004222992,%rcx
  800421e0a5:	00 00 00 
  800421e0a8:	48 ba 94 29 22 04 80 	movabs $0x8004222994,%rdx
  800421e0af:	00 00 00 
  800421e0b2:	be 6e 00 00 00       	mov    $0x6e,%esi
  800421e0b7:	48 bf a9 29 22 04 80 	movabs $0x80042229a9,%rdi
  800421e0be:	00 00 00 
  800421e0c1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e0c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e0cd:	00 00 00 
  800421e0d0:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421e0d3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e0d7:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421e0db:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421e0df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e0e3:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421e0e7:	48 c1 e0 20          	shl    $0x20,%rax
  800421e0eb:	48 89 c2             	mov    %rax,%rdx
  800421e0ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e0f2:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e0f6:	48 09 d0             	or     %rdx,%rax
  800421e0f9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421e0fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e101:	25 00 01 00 00       	and    $0x100,%eax
  800421e106:	48 85 c0             	test   %rax,%rax
  800421e109:	75 4d                	jne    800421e158 <handle_wrmsr+0x119>
  800421e10b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e10f:	25 00 01 00 00       	and    $0x100,%eax
  800421e114:	48 85 c0             	test   %rax,%rax
  800421e117:	74 3f                	je     800421e158 <handle_wrmsr+0x119>
  800421e119:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421e120:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421e123:	89 c7                	mov    %eax,%edi
  800421e125:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e12c:	00 00 00 
  800421e12f:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421e131:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421e134:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421e13b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421e13e:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421e141:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421e144:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421e147:	48 89 d6             	mov    %rdx,%rsi
  800421e14a:	89 c7                	mov    %eax,%edi
  800421e14c:	48 b8 f0 db 21 04 80 	movabs $0x800421dbf0,%rax
  800421e153:	00 00 00 
  800421e156:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421e158:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e15c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421e160:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e164:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e168:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e16f:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421e176:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421e179:	89 c7                	mov    %eax,%edi
  800421e17b:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e182:	00 00 00 
  800421e185:	ff d0                	callq  *%rax
  800421e187:	89 c0                	mov    %eax,%eax
  800421e189:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e18d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e191:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e198:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e19d:	eb 05                	jmp    800421e1a4 <handle_wrmsr+0x165>
	}

	return false;
  800421e19f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e1a4:	48 83 c4 58          	add    $0x58,%rsp
  800421e1a8:	5b                   	pop    %rbx
  800421e1a9:	5d                   	pop    %rbp
  800421e1aa:	c3                   	retq   

000000800421e1ab <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421e1ab:	55                   	push   %rbp
  800421e1ac:	48 89 e5             	mov    %rsp,%rbp
  800421e1af:	53                   	push   %rbx
  800421e1b0:	48 83 ec 48          	sub    $0x48,%rsp
  800421e1b4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421e1b8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421e1bc:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421e1c3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421e1c6:	89 c7                	mov    %eax,%edi
  800421e1c8:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e1cf:	00 00 00 
  800421e1d2:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421e1d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421e1d8:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421e1df:	00 
  800421e1e0:	76 1f                	jbe    800421e201 <handle_eptviolation+0x56>
  800421e1e2:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421e1e9:	00 
  800421e1ea:	0f 86 f9 00 00 00    	jbe    800421e2e9 <handle_eptviolation+0x13e>
  800421e1f0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e1f4:	48 8b 00             	mov    (%rax),%rax
  800421e1f7:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421e1fb:	0f 86 e8 00 00 00    	jbe    800421e2e9 <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421e201:	bf 00 00 00 00       	mov    $0x0,%edi
  800421e206:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421e20d:	00 00 00 
  800421e210:	ff d0                	callq  *%rax
  800421e212:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421e216:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421e21b:	75 25                	jne    800421e242 <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421e21d:	48 bf b8 29 22 04 80 	movabs $0x80042229b8,%rdi
  800421e224:	00 00 00 
  800421e227:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e22c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421e233:	00 00 00 
  800421e236:	ff d2                	callq  *%rdx
			return false;
  800421e238:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e23d:	e9 54 01 00 00       	jmpq   800421e396 <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421e242:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e246:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421e24a:	8d 50 01             	lea    0x1(%rax),%edx
  800421e24d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e251:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421e255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421e259:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421e25d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e261:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421e267:	48 89 c3             	mov    %rax,%rbx
  800421e26a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e26e:	48 89 c7             	mov    %rax,%rdi
  800421e271:	48 b8 f7 dc 21 04 80 	movabs $0x800421dcf7,%rax
  800421e278:	00 00 00 
  800421e27b:	ff d0                	callq  *%rax
  800421e27d:	48 89 c6             	mov    %rax,%rsi
  800421e280:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e284:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421e28a:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421e28f:	48 89 da             	mov    %rbx,%rdx
  800421e292:	48 89 c7             	mov    %rax,%rdi
  800421e295:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421e29c:	00 00 00 
  800421e29f:	ff d0                	callq  *%rax
  800421e2a1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421e2a4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421e2a8:	79 35                	jns    800421e2df <handle_eptviolation+0x134>
  800421e2aa:	48 b9 08 2a 22 04 80 	movabs $0x8004222a08,%rcx
  800421e2b1:	00 00 00 
  800421e2b4:	48 ba 94 29 22 04 80 	movabs $0x8004222994,%rdx
  800421e2bb:	00 00 00 
  800421e2be:	be 92 00 00 00       	mov    $0x92,%esi
  800421e2c3:	48 bf a9 29 22 04 80 	movabs $0x80042229a9,%rdi
  800421e2ca:	00 00 00 
  800421e2cd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e2d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e2d9:	00 00 00 
  800421e2dc:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421e2df:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e2e4:	e9 ad 00 00 00       	jmpq   800421e396 <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421e2e9:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421e2f0:	00 
  800421e2f1:	76 7c                	jbe    800421e36f <handle_eptviolation+0x1c4>
  800421e2f3:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421e2fa:	00 
  800421e2fb:	77 72                	ja     800421e36f <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421e2fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e301:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421e307:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421e30c:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421e311:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421e318:	00 00 00 
  800421e31b:	48 89 c7             	mov    %rax,%rdi
  800421e31e:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421e325:	00 00 00 
  800421e328:	ff d0                	callq  *%rax
  800421e32a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421e32d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421e331:	79 35                	jns    800421e368 <handle_eptviolation+0x1bd>
  800421e333:	48 b9 08 2a 22 04 80 	movabs $0x8004222a08,%rcx
  800421e33a:	00 00 00 
  800421e33d:	48 ba 94 29 22 04 80 	movabs $0x8004222994,%rdx
  800421e344:	00 00 00 
  800421e347:	be 99 00 00 00       	mov    $0x99,%esi
  800421e34c:	48 bf a9 29 22 04 80 	movabs $0x80042229a9,%rdi
  800421e353:	00 00 00 
  800421e356:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e35b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e362:	00 00 00 
  800421e365:	41 ff d0             	callq  *%r8
		return true;
  800421e368:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e36d:	eb 27                	jmp    800421e396 <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421e36f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421e373:	48 89 c6             	mov    %rax,%rsi
  800421e376:	48 bf 10 2a 22 04 80 	movabs $0x8004222a10,%rdi
  800421e37d:	00 00 00 
  800421e380:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e385:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421e38c:	00 00 00 
  800421e38f:	ff d2                	callq  *%rdx
	return false;
  800421e391:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e396:	48 83 c4 48          	add    $0x48,%rsp
  800421e39a:	5b                   	pop    %rbx
  800421e39b:	5d                   	pop    %rbp
  800421e39c:	c3                   	retq   

000000800421e39d <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421e39d:	55                   	push   %rbp
  800421e39e:	48 89 e5             	mov    %rsp,%rbp
  800421e3a1:	53                   	push   %rbx
  800421e3a2:	48 83 ec 38          	sub    $0x38,%rsp
  800421e3a6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421e3aa:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421e3ae:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421e3b5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421e3b8:	89 c7                	mov    %eax,%edi
  800421e3ba:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e3c1:	00 00 00 
  800421e3c4:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421e3c6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421e3ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e3ce:	48 c1 e8 10          	shr    $0x10,%rax
  800421e3d2:	25 ff ff 00 00       	and    $0xffff,%eax
  800421e3d7:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421e3da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e3de:	48 c1 e8 03          	shr    $0x3,%rax
  800421e3e2:	83 e0 01             	and    $0x1,%eax
  800421e3e5:	48 85 c0             	test   %rax,%rax
  800421e3e8:	0f 95 c0             	setne  %al
  800421e3eb:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421e3ee:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421e3f2:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421e3f6:	75 2e                	jne    800421e426 <handle_ioinstr+0x89>
		if(!is_in) {
  800421e3f8:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421e3fc:	83 f0 01             	xor    $0x1,%eax
  800421e3ff:	84 c0                	test   %al,%al
  800421e401:	0f 84 fa 00 00 00    	je     800421e501 <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421e407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e40b:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e40f:	89 c2                	mov    %eax,%edx
  800421e411:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421e418:	00 00 00 
  800421e41b:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421e41d:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e421:	e9 db 00 00 00       	jmpq   800421e501 <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421e426:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421e42a:	0f 85 d1 00 00 00    	jne    800421e501 <handle_ioinstr+0x164>
		if(is_in) {
  800421e430:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421e434:	0f 84 c7 00 00 00    	je     800421e501 <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421e43a:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421e441:	00 00 00 
  800421e444:	8b 00                	mov    (%rax),%eax
  800421e446:	83 f8 15             	cmp    $0x15,%eax
  800421e449:	75 15                	jne    800421e460 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421e44b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e44f:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421e456:	00 
				handled = true;
  800421e457:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e45b:	e9 a1 00 00 00       	jmpq   800421e501 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421e460:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421e467:	00 00 00 
  800421e46a:	8b 00                	mov    (%rax),%eax
  800421e46c:	83 f8 16             	cmp    $0x16,%eax
  800421e46f:	75 12                	jne    800421e483 <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421e471:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e475:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421e47c:	00 
				handled = true;
  800421e47d:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e481:	eb 7e                	jmp    800421e501 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421e483:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421e48a:	00 00 00 
  800421e48d:	8b 00                	mov    (%rax),%eax
  800421e48f:	83 f8 17             	cmp    $0x17,%eax
  800421e492:	75 2a                	jne    800421e4be <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421e494:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e498:	48 8b 00             	mov    (%rax),%rax
  800421e49b:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421e4a2:	48 85 c0             	test   %rax,%rax
  800421e4a5:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421e4a9:	48 c1 f8 0a          	sar    $0xa,%rax
  800421e4ad:	0f b6 d0             	movzbl %al,%edx
  800421e4b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e4b4:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421e4b8:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e4bc:	eb 43                	jmp    800421e501 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421e4be:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421e4c5:	00 00 00 
  800421e4c8:	8b 00                	mov    (%rax),%eax
  800421e4ca:	83 f8 18             	cmp    $0x18,%eax
  800421e4cd:	75 32                	jne    800421e501 <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421e4cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e4d3:	48 8b 00             	mov    (%rax),%rax
  800421e4d6:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421e4dd:	48 85 c0             	test   %rax,%rax
  800421e4e0:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421e4e4:	48 c1 f8 0a          	sar    $0xa,%rax
  800421e4e8:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421e4ee:	48 c1 f8 08          	sar    $0x8,%rax
  800421e4f2:	0f b6 d0             	movzbl %al,%edx
  800421e4f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e4f9:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421e4fd:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421e501:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421e505:	74 3b                	je     800421e542 <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e507:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e50b:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e512:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421e519:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421e51c:	89 c7                	mov    %eax,%edi
  800421e51e:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e525:	00 00 00 
  800421e528:	ff d0                	callq  *%rax
  800421e52a:	89 c0                	mov    %eax,%eax
  800421e52c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e530:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e534:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e53b:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e540:	eb 33                	jmp    800421e575 <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421e542:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421e549:	00 00 00 
  800421e54c:	8b 10                	mov    (%rax),%edx
  800421e54e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e552:	48 89 c6             	mov    %rax,%rsi
  800421e555:	48 bf 3a 2a 22 04 80 	movabs $0x8004222a3a,%rdi
  800421e55c:	00 00 00 
  800421e55f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e564:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421e56b:	00 00 00 
  800421e56e:	ff d1                	callq  *%rcx
		return false;
  800421e570:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421e575:	48 83 c4 38          	add    $0x38,%rsp
  800421e579:	5b                   	pop    %rbx
  800421e57a:	5d                   	pop    %rbp
  800421e57b:	c3                   	retq   

000000800421e57c <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421e57c:	55                   	push   %rbp
  800421e57d:	48 89 e5             	mov    %rsp,%rbp
  800421e580:	53                   	push   %rbx
  800421e581:	48 83 ec 30          	sub    $0x30,%rsp
  800421e585:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  800421e589:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
	// --- LAB 3 --- 
	uint32_t info, eax, ebx, ecx, edx;

	// determine the info value to use based on the value of rax in the trapframe
	info = tf->tf_regs.reg_rax;
  800421e58d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e591:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e595:	89 45 f4             	mov    %eax,-0xc(%rbp)
	cpuid(info, &eax, &ebx, &ecx, &edx);
  800421e598:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  800421e59c:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
  800421e5a0:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  800421e5a4:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  800421e5a8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421e5ab:	49 89 f8             	mov    %rdi,%r8
  800421e5ae:	89 c7                	mov    %eax,%edi
  800421e5b0:	48 b8 33 dc 21 04 80 	movabs $0x800421dc33,%rax
  800421e5b7:	00 00 00 
  800421e5ba:	ff d0                	callq  *%rax
	// if info == 1, processor features were requested. we want to hide the presence of vmx from 
	// the guest if this is the case
	// 0x20 is 100000. ~ it to set all bits but the 5th one to 0
	// then bitwise AND with ecx to zero out the 5th bit while keeping 
	// all other bits the same
	if (info) {
  800421e5bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421e5c0:	74 09                	je     800421e5cb <handle_cpuid+0x4f>
		ecx &= ~0x20U;
  800421e5c2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421e5c5:	83 e0 df             	and    $0xffffffdf,%eax
  800421e5c8:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	}

	// then store the output in the trapframe
	tf->tf_regs.reg_rax = eax;
  800421e5cb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421e5ce:	89 c2                	mov    %eax,%edx
  800421e5d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e5d4:	48 89 50 70          	mov    %rdx,0x70(%rax)
	tf->tf_regs.reg_rbx = ebx;
  800421e5d8:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421e5db:	89 c2                	mov    %eax,%edx
  800421e5dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e5e1:	48 89 50 68          	mov    %rdx,0x68(%rax)
	tf->tf_regs.reg_rcx = ecx;
  800421e5e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421e5e8:	89 c2                	mov    %eax,%edx
  800421e5ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e5ee:	48 89 50 60          	mov    %rdx,0x60(%rax)
	tf->tf_regs.reg_rdx = edx;
  800421e5f2:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421e5f5:	89 c2                	mov    %eax,%edx
  800421e5f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e5fb:	48 89 50 58          	mov    %rdx,0x58(%rax)

	// update the instruction pointer
    tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e5ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e603:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e60a:	c7 45 f0 0c 44 00 00 	movl   $0x440c,-0x10(%rbp)
  800421e611:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421e614:	89 c7                	mov    %eax,%edi
  800421e616:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421e61d:	00 00 00 
  800421e620:	ff d0                	callq  *%rax
  800421e622:	89 c0                	mov    %eax,%eax
  800421e624:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e628:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e62c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return true;
  800421e633:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421e638:	48 83 c4 30          	add    $0x30,%rsp
  800421e63c:	5b                   	pop    %rbx
  800421e63d:	5d                   	pop    %rbp
  800421e63e:	c3                   	retq   

000000800421e63f <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421e63f:	55                   	push   %rbp
  800421e640:	48 89 e5             	mov    %rsp,%rbp
  800421e643:	53                   	push   %rbx
  800421e644:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  800421e64b:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421e652:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
  800421e659:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
	bool handled = false;
  800421e660:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
	multiboot_info_t mbinfo;
	int perm, r=0, i;
  800421e664:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
 struct Env  * env_store = NULL;
  800421e66b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421e672:	00 
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000, des_env_type;
  800421e673:	48 c7 45 d0 00 60 00 	movq   $0x6000,-0x30(%rbp)
  800421e67a:	00 
	switch(tf->tf_regs.reg_rax) {
  800421e67b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421e682:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e686:	48 83 f8 06          	cmp    $0x6,%rax
  800421e68a:	0f 87 5e 05 00 00    	ja     800421ebee <handle_vmcall+0x5af>
  800421e690:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421e697:	00 
  800421e698:	48 b8 b8 2a 22 04 80 	movabs $0x8004222ab8,%rax
  800421e69f:	00 00 00 
  800421e6a2:	48 01 d0             	add    %rdx,%rax
  800421e6a5:	48 8b 00             	mov    (%rax),%rax
  800421e6a8:	ff e0                	jmpq   *%rax

		// -- LAB 3 --
		
		// this involves creating a "fake" memory map, stored in the mbinfo struct, to give to the guest
		// first wipe the mbinfo struct to make sure there is no garbage data there
		memset(&mbinfo, 0, sizeof(mbinfo));
  800421e6aa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421e6b1:	ba 34 00 00 00       	mov    $0x34,%edx
  800421e6b6:	be 00 00 00 00       	mov    $0x0,%esi
  800421e6bb:	48 89 c7             	mov    %rax,%rdi
  800421e6be:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421e6c5:	00 00 00 
  800421e6c8:	ff d0                	callq  *%rax
		// we are creating a memroy map, so set the flags appropriately
		mbinfo.flags |= MB_FLAG_MMAP;
  800421e6ca:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421e6d0:	83 c8 40             	or     $0x40,%eax
  800421e6d3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
		// we are going to create 3 memory mapping segments
		mbinfo.mmap_length = 3 * sizeof(memory_map_t);
  800421e6d9:	c7 45 9c 48 00 00 00 	movl   $0x48,-0x64(%rbp)
		// set the address of the location to copy the mapping segments. they will come just after 
		// the mbinfo struct
		mbinfo.mmap_addr = multiboot_map_addr + sizeof(mbinfo);
  800421e6e0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e6e4:	83 c0 34             	add    $0x34,%eax
  800421e6e7:	89 45 a0             	mov    %eax,-0x60(%rbp)
		// - low memory: 0
		// - IO hole: 640k (right after low memory)
		// - high memory: 1024k (right after the IO hole)

		// set up low mem
		memset(&lomap, 0, sizeof(lomap));
  800421e6ea:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421e6f1:	ba 18 00 00 00       	mov    $0x18,%edx
  800421e6f6:	be 00 00 00 00       	mov    $0x0,%esi
  800421e6fb:	48 89 c7             	mov    %rax,%rdi
  800421e6fe:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421e705:	00 00 00 
  800421e708:	ff d0                	callq  *%rax
		lomap.length_low = 640 * 1024; // 640k
  800421e70a:	c7 85 5c ff ff ff 00 	movl   $0xa0000,-0xa4(%rbp)
  800421e711:	00 0a 00 
		lomap.size = sizeof(memory_map_t);
  800421e714:	c7 85 50 ff ff ff 18 	movl   $0x18,-0xb0(%rbp)
  800421e71b:	00 00 00 
		lomap.type = MB_TYPE_USABLE;
  800421e71e:	c7 85 64 ff ff ff 01 	movl   $0x1,-0x9c(%rbp)
  800421e725:	00 00 00 

		// set up io hole
		memset(&iohole, 0, sizeof(iohole));
  800421e728:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  800421e72f:	ba 18 00 00 00       	mov    $0x18,%edx
  800421e734:	be 00 00 00 00       	mov    $0x0,%esi
  800421e739:	48 89 c7             	mov    %rax,%rdi
  800421e73c:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421e743:	00 00 00 
  800421e746:	ff d0                	callq  *%rax
		iohole.base_addr_low = 640 * 1024;
  800421e748:	c7 85 34 ff ff ff 00 	movl   $0xa0000,-0xcc(%rbp)
  800421e74f:	00 0a 00 
		iohole.length_low = (1024 * 1024) - (640 * 1024); // 1024k - 640k from the low memory
  800421e752:	c7 85 3c ff ff ff 00 	movl   $0x60000,-0xc4(%rbp)
  800421e759:	00 06 00 
		iohole.size = sizeof(memory_map_t); 
  800421e75c:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800421e763:	00 00 00 
		iohole.type = MB_TYPE_RESERVED; // unusable
  800421e766:	c7 85 44 ff ff ff 02 	movl   $0x2,-0xbc(%rbp)
  800421e76d:	00 00 00 

		// set up high mem
		memset(&himap, 0, sizeof(himap));
  800421e770:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421e777:	ba 18 00 00 00       	mov    $0x18,%edx
  800421e77c:	be 00 00 00 00       	mov    $0x0,%esi
  800421e781:	48 89 c7             	mov    %rax,%rdi
  800421e784:	48 b8 92 0f 21 04 80 	movabs $0x8004210f92,%rax
  800421e78b:	00 00 00 
  800421e78e:	ff d0                	callq  *%rax
		himap.size = sizeof(memory_map_t); 
  800421e790:	c7 85 10 ff ff ff 18 	movl   $0x18,-0xf0(%rbp)
  800421e797:	00 00 00 
		himap.type = MB_TYPE_USABLE;
  800421e79a:	c7 85 24 ff ff ff 01 	movl   $0x1,-0xdc(%rbp)
  800421e7a1:	00 00 00 
		himap.base_addr_low = 1024 * 1024; // 1024k
  800421e7a4:	c7 85 14 ff ff ff 00 	movl   $0x100000,-0xec(%rbp)
  800421e7ab:	00 10 00 
		uint64_t himap_addr = gInfo->phys_sz - (1024 * 1024); // get the offset for this region
  800421e7ae:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421e7b5:	48 8b 00             	mov    (%rax),%rax
  800421e7b8:	48 2d 00 00 10 00    	sub    $0x100000,%rax
  800421e7be:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		// then make sure to handle both the lower and upper 32 bits
		himap.length_low = (uint32_t) himap_addr;
  800421e7c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e7c6:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
		himap.length_high = (uint32_t) (himap_addr >> 32);
  800421e7cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e7d0:	48 c1 e8 20          	shr    $0x20,%rax
  800421e7d4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%rbp)

		// copy the maps to guest memory. we first have to look up the host kernel virtual address
		// corresponding to multiboot_map_addr (which is a physical address in the guest.)
		// and allocate the page there if it doesn't exist yet
		void* hva = NULL;
  800421e7da:	48 c7 85 08 ff ff ff 	movq   $0x0,-0xf8(%rbp)
  800421e7e1:	00 00 00 00 
		ept_gpa2hva(eptrt, (void*)multiboot_map_addr, &hva);
  800421e7e5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  800421e7e9:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
  800421e7f0:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  800421e7f7:	48 89 ce             	mov    %rcx,%rsi
  800421e7fa:	48 89 c7             	mov    %rax,%rdi
  800421e7fd:	48 b8 8a 9c 21 04 80 	movabs $0x8004219c8a,%rax
  800421e804:	00 00 00 
  800421e807:	ff d0                	callq  *%rax
		// if the hva doesn't exist, allocate and map it
		if (!hva) {
  800421e809:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e810:	48 85 c0             	test   %rax,%rax
  800421e813:	0f 85 83 00 00 00    	jne    800421e89c <handle_vmcall+0x25d>
			struct PageInfo* p = page_alloc(0);
  800421e819:	bf 00 00 00 00       	mov    $0x0,%edi
  800421e81e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421e825:	00 00 00 
  800421e828:	ff d0                	callq  *%rax
  800421e82a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			p->pp_ref += 1;
  800421e82e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e832:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421e836:	8d 50 01             	lea    0x1(%rax),%edx
  800421e839:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e83d:	66 89 50 08          	mov    %dx,0x8(%rax)
			hva = page2kva(p); // get the kernel virtual address for the page we just allocated
  800421e841:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e845:	48 89 c7             	mov    %rax,%rdi
  800421e848:	48 b8 f7 dc 21 04 80 	movabs $0x800421dcf7,%rax
  800421e84f:	00 00 00 
  800421e852:	ff d0                	callq  *%rax
  800421e854:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
			// map the hva to multiboot_map_addr in the guest
			r = ept_map_hva2gpa(eptrt, hva, (void*)multiboot_map_addr, __EPTE_FULL, 0); 
  800421e85b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421e85f:	48 8b b5 08 ff ff ff 	mov    -0xf8(%rbp),%rsi
  800421e866:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  800421e86d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421e873:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421e878:	48 89 c7             	mov    %rax,%rdi
  800421e87b:	48 b8 c0 a0 21 04 80 	movabs $0x800421a0c0,%rax
  800421e882:	00 00 00 
  800421e885:	ff d0                	callq  *%rax
  800421e887:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			if (r < 0) {
  800421e88a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421e88e:	79 0c                	jns    800421e89c <handle_vmcall+0x25d>
				return r; 
  800421e890:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421e894:	0f 95 c0             	setne  %al
  800421e897:	e9 96 03 00 00       	jmpq   800421ec32 <handle_vmcall+0x5f3>
			}
		}

		// then, copy the mapping structures into that page
		memcpy(hva, &mbinfo, sizeof(mbinfo));
  800421e89c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e8a3:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
  800421e8aa:	ba 34 00 00 00       	mov    $0x34,%edx
  800421e8af:	48 89 ce             	mov    %rcx,%rsi
  800421e8b2:	48 89 c7             	mov    %rax,%rdi
  800421e8b5:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800421e8bc:	00 00 00 
  800421e8bf:	ff d0                	callq  *%rax
		hva += sizeof(mbinfo);
  800421e8c1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e8c8:	48 83 c0 34          	add    $0x34,%rax
  800421e8cc:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
		memcpy(hva, &lomap, sizeof(memory_map_t));
  800421e8d3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e8da:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  800421e8e1:	ba 18 00 00 00       	mov    $0x18,%edx
  800421e8e6:	48 89 ce             	mov    %rcx,%rsi
  800421e8e9:	48 89 c7             	mov    %rax,%rdi
  800421e8ec:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800421e8f3:	00 00 00 
  800421e8f6:	ff d0                	callq  *%rax
		hva += sizeof(memory_map_t);
  800421e8f8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e8ff:	48 83 c0 18          	add    $0x18,%rax
  800421e903:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
		memcpy(hva, &iohole, sizeof(memory_map_t));
  800421e90a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e911:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
  800421e918:	ba 18 00 00 00       	mov    $0x18,%edx
  800421e91d:	48 89 ce             	mov    %rcx,%rsi
  800421e920:	48 89 c7             	mov    %rax,%rdi
  800421e923:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800421e92a:	00 00 00 
  800421e92d:	ff d0                	callq  *%rax
		hva += sizeof(memory_map_t);
  800421e92f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e936:	48 83 c0 18          	add    $0x18,%rax
  800421e93a:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
		memcpy(hva, &himap, sizeof(memory_map_t));
  800421e941:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421e948:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
  800421e94f:	ba 18 00 00 00       	mov    $0x18,%edx
  800421e954:	48 89 ce             	mov    %rcx,%rsi
  800421e957:	48 89 c7             	mov    %rax,%rdi
  800421e95a:	48 b8 34 11 21 04 80 	movabs $0x8004211134,%rax
  800421e961:	00 00 00 
  800421e964:	ff d0                	callq  *%rax

		// set rbx to the multiboot region
		tf->tf_regs.reg_rbx = multiboot_map_addr;
  800421e966:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421e96d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421e971:	48 89 50 68          	mov    %rdx,0x68(%rax)

		// and indicate that we've handled the exit
		handled = true;
  800421e975:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
		break;
  800421e979:	e9 70 02 00 00       	jmpq   800421ebee <handle_vmcall+0x5af>
		//
		// The input should be a guest physical address; you will need to convert
		//  this to a host virtual address for the IPC to work properly.
        //  Then you should call sys_ipc_try_send()
		/* Your code here */
		to_env = tf->tf_regs.reg_rdx;
  800421e97e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421e985:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421e989:	89 45 e8             	mov    %eax,-0x18(%rbp)
		if ( to_env == VMX_HOST_FS_ENV) {
  800421e98c:	83 7d e8 01          	cmpl   $0x1,-0x18(%rbp)
  800421e990:	75 68                	jne    800421e9fa <handle_vmcall+0x3bb>
			for (i = 0; i < NENV; i++)
  800421e992:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
  800421e999:	81 7d bc ff 03 00 00 	cmpl   $0x3ff,-0x44(%rbp)
  800421e9a0:	7f 58                	jg     800421e9fa <handle_vmcall+0x3bb>
			{
		    	if (envs[i].env_type == ENV_TYPE_FS)
  800421e9a2:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421e9a9:	00 00 00 
  800421e9ac:	48 8b 10             	mov    (%rax),%rdx
  800421e9af:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421e9b2:	48 98                	cltq   
  800421e9b4:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421e9bb:	48 01 d0             	add    %rdx,%rax
  800421e9be:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421e9c4:	83 f8 01             	cmp    $0x1,%eax
  800421e9c7:	75 27                	jne    800421e9f0 <handle_vmcall+0x3b1>
		    	{
				to_env = (uint64_t)( envs[i].env_id);
  800421e9c9:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421e9d0:	00 00 00 
  800421e9d3:	48 8b 10             	mov    (%rax),%rdx
  800421e9d6:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421e9d9:	48 98                	cltq   
  800421e9db:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421e9e2:	48 01 d0             	add    %rdx,%rax
  800421e9e5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421e9eb:	89 45 e8             	mov    %eax,-0x18(%rbp)
				break;
  800421e9ee:	eb 0a                	jmp    800421e9fa <handle_vmcall+0x3bb>
		    	}
		    	else
			return -E_INVAL;
  800421e9f0:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e9f5:	e9 38 02 00 00       	jmpq   800421ec32 <handle_vmcall+0x5f3>
			}
		}
		void* hva_h = NULL;
  800421e9fa:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421ea01:	00 00 00 00 
		ept_gpa2hva(eptrt, (void*)tf->tf_regs.reg_rdx, &hva_h);
  800421ea05:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ea0c:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421ea10:	48 89 c1             	mov    %rax,%rcx
  800421ea13:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
  800421ea1a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  800421ea21:	48 89 ce             	mov    %rcx,%rsi
  800421ea24:	48 89 c7             	mov    %rax,%rdi
  800421ea27:	48 b8 8a 9c 21 04 80 	movabs $0x8004219c8a,%rax
  800421ea2e:	00 00 00 
  800421ea31:	ff d0                	callq  *%rax
		unsigned perm = tf->tf_regs.reg_rsi;		
  800421ea33:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ea3a:	48 8b 40 40          	mov    0x40(%rax),%rax
  800421ea3e:	89 45 b8             	mov    %eax,-0x48(%rbp)
			
		r = syscall(SYS_ipc_try_send,(uint64_t) to_env, (uint64_t)tf->tf_regs.reg_rcx, (uint64_t)hva_h, perm, (uint64_t)0);
  800421ea41:	8b 75 b8             	mov    -0x48(%rbp),%esi
  800421ea44:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421ea4b:	48 89 c1             	mov    %rax,%rcx
  800421ea4e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ea55:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800421ea59:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421ea5c:	48 98                	cltq   
  800421ea5e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800421ea64:	49 89 f0             	mov    %rsi,%r8
  800421ea67:	48 89 c6             	mov    %rax,%rsi
  800421ea6a:	bf 0c 00 00 00       	mov    $0xc,%edi
  800421ea6f:	48 b8 60 f1 20 04 80 	movabs $0x800420f160,%rax
  800421ea76:	00 00 00 
  800421ea79:	ff d0                	callq  *%rax
  800421ea7b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
		tf->tf_regs.reg_rax = r;
  800421ea7e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421ea81:	48 63 d0             	movslq %eax,%rdx
  800421ea84:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ea8b:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421ea8f:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
		break;
  800421ea93:	e9 56 01 00 00       	jmpq   800421ebee <handle_vmcall+0x5af>
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		//	    cprintf("VTZ:%d:\n",__LINE__);
// RIP increment
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);  
  800421ea98:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ea9f:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421eaa6:	c7 45 b4 0c 44 00 00 	movl   $0x440c,-0x4c(%rbp)
  800421eaad:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421eab0:	89 c7                	mov    %eax,%edi
  800421eab2:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421eab9:	00 00 00 
  800421eabc:	ff d0                	callq  *%rax
  800421eabe:	89 c0                	mov    %eax,%eax
  800421eac0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421eac4:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421eacb:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		r = syscall(SYS_ipc_recv, (uint64_t)tf->tf_regs.reg_rdx, (uint64_t)0, (uint64_t)0, (uint64_t)0,(uint64_t)0);
  800421ead2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ead9:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421eadd:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800421eae3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421eae9:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421eaee:	ba 00 00 00 00       	mov    $0x0,%edx
  800421eaf3:	48 89 c6             	mov    %rax,%rsi
  800421eaf6:	bf 0d 00 00 00       	mov    $0xd,%edi
  800421eafb:	48 b8 60 f1 20 04 80 	movabs $0x800420f160,%rax
  800421eb02:	00 00 00 
  800421eb05:	ff d0                	callq  *%rax
  800421eb07:	89 45 e4             	mov    %eax,-0x1c(%rbp)
		tf->tf_regs.reg_rax = (uint64_t)r;
  800421eb0a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421eb0d:	48 63 d0             	movslq %eax,%rdx
  800421eb10:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421eb17:	48 89 50 70          	mov    %rdx,0x70(%rax)
		cprintf("sys ipc try receive : [%d] \n",r);
  800421eb1b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421eb1e:	89 c6                	mov    %eax,%esi
  800421eb20:	48 bf 41 2a 22 04 80 	movabs $0x8004222a41,%rdi
  800421eb27:	00 00 00 
  800421eb2a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421eb2f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421eb36:	00 00 00 
  800421eb39:	ff d2                	callq  *%rdx
		handled = true;
  800421eb3b:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
		break;
  800421eb3f:	e9 aa 00 00 00       	jmpq   800421ebee <handle_vmcall+0x5af>
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421eb44:	48 b8 c7 7f 21 04 80 	movabs $0x8004217fc7,%rax
  800421eb4b:	00 00 00 
  800421eb4e:	ff d0                	callq  *%rax
		handled = true;
  800421eb50:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
		break;
  800421eb54:	e9 95 00 00 00       	jmpq   800421ebee <handle_vmcall+0x5af>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421eb59:	48 bf 60 2a 22 04 80 	movabs $0x8004222a60,%rdi
  800421eb60:	00 00 00 
  800421eb63:	b8 00 00 00 00       	mov    $0x0,%eax
  800421eb68:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421eb6f:	00 00 00 
  800421eb72:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421eb74:	48 b8 92 7f 21 04 80 	movabs $0x8004217f92,%rax
  800421eb7b:	00 00 00 
  800421eb7e:	ff d0                	callq  *%rax
  800421eb80:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421eb87:	00 00 00 
  800421eb8a:	48 98                	cltq   
  800421eb8c:	48 c1 e0 03          	shl    $0x3,%rax
  800421eb90:	48 89 c1             	mov    %rax,%rcx
  800421eb93:	48 c1 e1 04          	shl    $0x4,%rcx
  800421eb97:	48 01 c8             	add    %rcx,%rax
  800421eb9a:	48 01 d0             	add    %rdx,%rax
  800421eb9d:	48 83 c0 08          	add    $0x8,%rax
  800421eba1:	48 8b 00             	mov    (%rax),%rax
  800421eba4:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421ebab:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421ebae:	be 00 00 00 00       	mov    $0x0,%esi
  800421ebb3:	48 bf e0 f4 4b 04 80 	movabs $0x80044bf4e0,%rdi
  800421ebba:	00 00 00 
  800421ebbd:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  800421ebc4:	00 00 00 
  800421ebc7:	ff d0                	callq  *%rax
		handled = true;
  800421ebc9:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
		break;	
  800421ebcd:	eb 1f                	jmp    800421ebee <handle_vmcall+0x5af>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421ebcf:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421ebd6:	00 00 00 
  800421ebd9:	8b 00                	mov    (%rax),%eax
  800421ebdb:	48 63 d0             	movslq %eax,%rdx
  800421ebde:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ebe5:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421ebe9:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
		break;
  800421ebed:	90                   	nop
         
	}
	if(handled) {
  800421ebee:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421ebf2:	74 3a                	je     800421ec2e <handle_vmcall+0x5ef>
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
		// --- LAB 3 --
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421ebf4:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ebfb:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421ec02:	c7 45 b0 0c 44 00 00 	movl   $0x440c,-0x50(%rbp)
  800421ec09:	8b 45 b0             	mov    -0x50(%rbp),%eax
  800421ec0c:	89 c7                	mov    %eax,%edi
  800421ec0e:	48 b8 16 dc 21 04 80 	movabs $0x800421dc16,%rax
  800421ec15:	00 00 00 
  800421ec18:	ff d0                	callq  *%rax
  800421ec1a:	89 c0                	mov    %eax,%eax
  800421ec1c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421ec20:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ec27:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	}
	return handled;
  800421ec2e:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
}
  800421ec32:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  800421ec39:	5b                   	pop    %rbx
  800421ec3a:	5d                   	pop    %rbp
  800421ec3b:	c3                   	retq   
