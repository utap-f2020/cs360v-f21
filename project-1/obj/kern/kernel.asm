
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 30 23 04 80 	movabs $0x8004233038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 30 23 04 80 	movabs $0x8004233000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 1d 7d 21 04 80 	movabs $0x8004217d1d,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 d0 71 04 80 	movabs $0x800471d010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 a0 a1 4d 04 80 	movabs $0x80044da1a0,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf a0 a1 4d 04 80 	movabs $0x80044da1a0,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 9a 11 20 04 80 	movabs $0x800420119a,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf a0 ce 21 04 80 	movabs $0x800421cea0,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 d0 71 04 80 	movabs $0x800471d010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 b3 63 21 04 80 	movabs $0x80042163b3,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 a5 6d 04 80 	movabs $0x80046da5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 31 26 20 04 80 	movabs $0x8004202631,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 61 7f 20 04 80 	movabs $0x8004207f61,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 ef 9d 20 04 80 	movabs $0x8004209def,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 3d 73 21 04 80 	movabs $0x800421733d,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 9b 77 21 04 80 	movabs $0x800421779b,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 77 99 20 04 80 	movabs $0x8004209977,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 b8 91 21 04 80 	movabs $0x80042191b8,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 7c 91 21 04 80 	movabs $0x800421917c,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 fc 01 20 04 80 	movabs $0x80042001fc,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf 48 d3 2b 04 80 	movabs $0x80042bd348,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ce:	48 bf 30 58 4a 04 80 	movabs $0x80044a5830,%rdi
  80042001d5:	00 00 00 
  80042001d8:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001df:	00 00 00 
  80042001e2:	ff d0                	callq  *%rax
  80042001e4:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax

00000080042001fc <boot_aps>:
  80042001fc:	55                   	push   %rbp
  80042001fd:	48 89 e5             	mov    %rsp,%rbp
  8004200200:	48 83 ec 30          	sub    $0x30,%rsp
  8004200204:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  800420020b:	00 
  800420020c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200210:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200214:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200217:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420021a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004200221:	00 00 00 
  8004200224:	48 8b 00             	mov    (%rax),%rax
  8004200227:	48 39 c2             	cmp    %rax,%rdx
  800420022a:	72 32                	jb     800420025e <boot_aps+0x62>
  800420022c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200230:	48 89 c1             	mov    %rax,%rcx
  8004200233:	48 ba c0 ce 21 04 80 	movabs $0x800421cec0,%rdx
  800420023a:	00 00 00 
  800420023d:	be 01 01 00 00       	mov    $0x101,%esi
  8004200242:	48 bf e3 ce 21 04 80 	movabs $0x800421cee3,%rdi
  8004200249:	00 00 00 
  800420024c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200251:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200258:	00 00 00 
  800420025b:	41 ff d0             	callq  *%r8
  800420025e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200265:	00 00 00 
  8004200268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420026c:	48 01 d0             	add    %rdx,%rax
  800420026f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200273:	48 ba 66 6e 21 04 80 	movabs $0x8004216e66,%rdx
  800420027a:	00 00 00 
  800420027d:	48 b8 80 6d 21 04 80 	movabs $0x8004216d80,%rax
  8004200284:	00 00 00 
  8004200287:	48 29 c2             	sub    %rax,%rdx
  800420028a:	48 89 d0             	mov    %rdx,%rax
  800420028d:	48 89 c2             	mov    %rax,%rdx
  8004200290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200294:	48 be 80 6d 21 04 80 	movabs $0x8004216d80,%rsi
  800420029b:	00 00 00 
  800420029e:	48 89 c7             	mov    %rax,%rdi
  80042002a1:	48 b8 1e 0a 21 04 80 	movabs $0x8004210a1e,%rax
  80042002a8:	00 00 00 
  80042002ab:	ff d0                	callq  *%rax
  80042002ad:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042002b4:	00 00 00 
  80042002b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002bb:	e9 0e 01 00 00       	jmpq   80042003ce <boot_aps+0x1d2>
  80042002c0:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042002c7:	00 00 00 
  80042002ca:	ff d0                	callq  *%rax
  80042002cc:	48 98                	cltq   
  80042002ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042002d2:	48 89 c2             	mov    %rax,%rdx
  80042002d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002d9:	48 01 c2             	add    %rax,%rdx
  80042002dc:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042002e3:	00 00 00 
  80042002e6:	48 01 d0             	add    %rdx,%rax
  80042002e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002ed:	75 05                	jne    80042002f4 <boot_aps+0xf8>
  80042002ef:	e9 d2 00 00 00       	jmpq   80042003c6 <boot_aps+0x1ca>
  80042002f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042002f8:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042002ff:	00 00 00 
  8004200302:	48 29 c2             	sub    %rax,%rdx
  8004200305:	48 89 d0             	mov    %rdx,%rax
  8004200308:	48 c1 f8 03          	sar    $0x3,%rax
  800420030c:	48 89 c2             	mov    %rax,%rdx
  800420030f:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200316:	f0 f0 f0 
  8004200319:	48 0f af c2          	imul   %rdx,%rax
  800420031d:	48 83 c0 01          	add    $0x1,%rax
  8004200321:	48 c1 e0 10          	shl    $0x10,%rax
  8004200325:	48 89 c2             	mov    %rax,%rdx
  8004200328:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  800420032f:	00 00 00 
  8004200332:	48 01 c2             	add    %rax,%rdx
  8004200335:	48 b8 e0 a5 6d 04 80 	movabs $0x80046da5e0,%rax
  800420033c:	00 00 00 
  800420033f:	48 89 10             	mov    %rdx,(%rax)
  8004200342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420034a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200351:	00 00 00 
  8004200354:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200358:	77 32                	ja     800420038c <boot_aps+0x190>
  800420035a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420035e:	48 89 c1             	mov    %rax,%rcx
  8004200361:	48 ba f8 ce 21 04 80 	movabs $0x800421cef8,%rdx
  8004200368:	00 00 00 
  800420036b:	be 0b 01 00 00       	mov    $0x10b,%esi
  8004200370:	48 bf e3 ce 21 04 80 	movabs $0x800421cee3,%rdi
  8004200377:	00 00 00 
  800420037a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420037f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200386:	00 00 00 
  8004200389:	41 ff d0             	callq  *%r8
  800420038c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004200393:	ff ff ff 
  8004200396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420039a:	48 01 d0             	add    %rdx,%rax
  800420039d:	89 c2                	mov    %eax,%edx
  800420039f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003a3:	0f b6 00             	movzbl (%rax),%eax
  80042003a6:	0f b6 c0             	movzbl %al,%eax
  80042003a9:	89 d6                	mov    %edx,%esi
  80042003ab:	89 c7                	mov    %eax,%edi
  80042003ad:	48 b8 02 7a 21 04 80 	movabs $0x8004217a02,%rax
  80042003b4:	00 00 00 
  80042003b7:	ff d0                	callq  *%rax
  80042003b9:	90                   	nop
  80042003ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003be:	8b 40 04             	mov    0x4(%rax),%eax
  80042003c1:	83 f8 01             	cmp    $0x1,%eax
  80042003c4:	75 f4                	jne    80042003ba <boot_aps+0x1be>
  80042003c6:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003cd:	00 
  80042003ce:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042003d5:	00 00 00 
  80042003d8:	8b 00                	mov    (%rax),%eax
  80042003da:	48 98                	cltq   
  80042003dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042003e0:	48 89 c2             	mov    %rax,%rdx
  80042003e3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003e7:	48 01 c2             	add    %rax,%rdx
  80042003ea:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042003f1:	00 00 00 
  80042003f4:	48 01 d0             	add    %rdx,%rax
  80042003f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042003fb:	0f 87 bf fe ff ff    	ja     80042002c0 <boot_aps+0xc4>
  8004200401:	c9                   	leaveq 
  8004200402:	c3                   	retq   

0000008004200403 <mp_main>:
  8004200403:	55                   	push   %rbp
  8004200404:	48 89 e5             	mov    %rsp,%rbp
  8004200407:	48 83 ec 10          	sub    $0x10,%rsp
  800420040b:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  8004200412:	00 00 00 
  8004200415:	48 8b 00             	mov    (%rax),%rax
  8004200418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200420:	0f 22 d8             	mov    %rax,%cr3
  8004200423:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420042a:	00 00 00 
  800420042d:	ff d0                	callq  *%rax
  800420042f:	89 c6                	mov    %eax,%esi
  8004200431:	48 bf 1c cf 21 04 80 	movabs $0x800421cf1c,%rdi
  8004200438:	00 00 00 
  800420043b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200440:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200447:	00 00 00 
  800420044a:	ff d2                	callq  *%rdx
  800420044c:	48 b8 9b 77 21 04 80 	movabs $0x800421779b,%rax
  8004200453:	00 00 00 
  8004200456:	ff d0                	callq  *%rax
  8004200458:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 98                	cltq   
  800420047e:	48 c1 e0 03          	shl    $0x3,%rax
  8004200482:	48 89 c2             	mov    %rax,%rdx
  8004200485:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200489:	48 01 d0             	add    %rdx,%rax
  800420048c:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004200493:	00 00 00 
  8004200496:	48 01 d0             	add    %rdx,%rax
  8004200499:	48 83 c0 04          	add    $0x4,%rax
  800420049d:	be 01 00 00 00       	mov    $0x1,%esi
  80042004a2:	48 89 c7             	mov    %rax,%rdi
  80042004a5:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004ac:	00 00 00 
  80042004af:	ff d0                	callq  *%rax
  80042004b1:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax

00000080042004c9 <_panic>:
  80042004c9:	55                   	push   %rbp
  80042004ca:	48 89 e5             	mov    %rsp,%rbp
  80042004cd:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004d4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004db:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004e8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004ef:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042004f6:	84 c0                	test   %al,%al
  80042004f8:	74 20                	je     800420051a <_panic+0x51>
  80042004fa:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042004fe:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200502:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200506:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420050a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420050e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200512:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200516:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420051a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200521:	48 b8 d8 a5 6d 04 80 	movabs $0x80046da5d8,%rax
  8004200528:	00 00 00 
  800420052b:	48 8b 00             	mov    (%rax),%rax
  800420052e:	48 85 c0             	test   %rax,%rax
  8004200531:	74 05                	je     8004200538 <_panic+0x6f>
  8004200533:	e9 b5 00 00 00       	jmpq   80042005ed <_panic+0x124>
  8004200538:	48 b8 d8 a5 6d 04 80 	movabs $0x80046da5d8,%rax
  800420053f:	00 00 00 
  8004200542:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200549:	48 89 10             	mov    %rdx,(%rax)
  800420054c:	fa                   	cli    
  800420054d:	fc                   	cld    
  800420054e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200555:	00 00 00 
  8004200558:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420055f:	00 00 00 
  8004200562:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420056d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200574:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420057b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  800420058d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004200594:	89 c6                	mov    %eax,%esi
  8004200596:	48 bf 38 cf 21 04 80 	movabs $0x800421cf38,%rdi
  800420059d:	00 00 00 
  80042005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005a5:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  80042005ac:	00 00 00 
  80042005af:	41 ff d0             	callq  *%r8
  80042005b2:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005c0:	48 89 d6             	mov    %rdx,%rsi
  80042005c3:	48 89 c7             	mov    %rax,%rdi
  80042005c6:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042005cd:	00 00 00 
  80042005d0:	ff d0                	callq  *%rax
  80042005d2:	48 bf 5a cf 21 04 80 	movabs $0x800421cf5a,%rdi
  80042005d9:	00 00 00 
  80042005dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005e1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042005e8:	00 00 00 
  80042005eb:	ff d2                	callq  *%rdx
  80042005ed:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005f2:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  80042005f9:	00 00 00 
  80042005fc:	ff d0                	callq  *%rax
  80042005fe:	eb ed                	jmp    80042005ed <_panic+0x124>

0000008004200600 <_warn>:
  8004200600:	55                   	push   %rbp
  8004200601:	48 89 e5             	mov    %rsp,%rbp
  8004200604:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420060b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200612:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200618:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420061f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200626:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420062d:	84 c0                	test   %al,%al
  800420062f:	74 20                	je     8004200651 <_warn+0x51>
  8004200631:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200635:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200639:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420063d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200641:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200645:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200649:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420064d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200651:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200658:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420065f:	00 00 00 
  8004200662:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200669:	00 00 00 
  800420066c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200670:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200677:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420067e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200685:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800420068b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004200692:	48 89 c6             	mov    %rax,%rsi
  8004200695:	48 bf 5c cf 21 04 80 	movabs $0x800421cf5c,%rdi
  800420069c:	00 00 00 
  800420069f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006a4:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042006ab:	00 00 00 
  80042006ae:	ff d1                	callq  *%rcx
  80042006b0:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006be:	48 89 d6             	mov    %rdx,%rsi
  80042006c1:	48 89 c7             	mov    %rax,%rdi
  80042006c4:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042006cb:	00 00 00 
  80042006ce:	ff d0                	callq  *%rax
  80042006d0:	48 bf 5a cf 21 04 80 	movabs $0x800421cf5a,%rdi
  80042006d7:	00 00 00 
  80042006da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006df:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042006e6:	00 00 00 
  80042006e9:	ff d2                	callq  *%rdx
  80042006eb:	c9                   	leaveq 
  80042006ec:	c3                   	retq   

00000080042006ed <delay>:
  80042006ed:	55                   	push   %rbp
  80042006ee:	48 89 e5             	mov    %rsp,%rbp
  80042006f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042006f5:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042006ff:	89 c2                	mov    %eax,%edx
  8004200701:	ec                   	in     (%dx),%al
  8004200702:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200705:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  800420070c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420070f:	89 c2                	mov    %eax,%edx
  8004200711:	ec                   	in     (%dx),%al
  8004200712:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200715:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  800420071c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420071f:	89 c2                	mov    %eax,%edx
  8004200721:	ec                   	in     (%dx),%al
  8004200722:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200725:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  800420072c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420072f:	89 c2                	mov    %eax,%edx
  8004200731:	ec                   	in     (%dx),%al
  8004200732:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200735:	c9                   	leaveq 
  8004200736:	c3                   	retq   

0000008004200737 <serial_proc_data>:
  8004200737:	55                   	push   %rbp
  8004200738:	48 89 e5             	mov    %rsp,%rbp
  800420073b:	48 83 ec 10          	sub    $0x10,%rsp
  800420073f:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200746:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200749:	89 c2                	mov    %eax,%edx
  800420074b:	ec                   	in     (%dx),%al
  800420074c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420074f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200753:	0f b6 c0             	movzbl %al,%eax
  8004200756:	83 e0 01             	and    $0x1,%eax
  8004200759:	85 c0                	test   %eax,%eax
  800420075b:	75 07                	jne    8004200764 <serial_proc_data+0x2d>
  800420075d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200762:	eb 17                	jmp    800420077b <serial_proc_data+0x44>
  8004200764:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420076b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420076e:	89 c2                	mov    %eax,%edx
  8004200770:	ec                   	in     (%dx),%al
  8004200771:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200774:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200778:	0f b6 c0             	movzbl %al,%eax
  800420077b:	c9                   	leaveq 
  800420077c:	c3                   	retq   

000000800420077d <serial_intr>:
  800420077d:	55                   	push   %rbp
  800420077e:	48 89 e5             	mov    %rsp,%rbp
  8004200781:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  8004200788:	00 00 00 
  800420078b:	0f b6 00             	movzbl (%rax),%eax
  800420078e:	84 c0                	test   %al,%al
  8004200790:	74 16                	je     80042007a8 <serial_intr+0x2b>
  8004200792:	48 bf 37 07 20 04 80 	movabs $0x8004200737,%rdi
  8004200799:	00 00 00 
  800420079c:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  80042007a3:	00 00 00 
  80042007a6:	ff d0                	callq  *%rax
  80042007a8:	5d                   	pop    %rbp
  80042007a9:	c3                   	retq   

00000080042007aa <serial_putc>:
  80042007aa:	55                   	push   %rbp
  80042007ab:	48 89 e5             	mov    %rsp,%rbp
  80042007ae:	48 83 ec 28          	sub    $0x28,%rsp
  80042007b2:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007bc:	eb 10                	jmp    80042007ce <serial_putc+0x24>
  80042007be:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  80042007c5:	00 00 00 
  80042007c8:	ff d0                	callq  *%rax
  80042007ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007ce:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007d8:	89 c2                	mov    %eax,%edx
  80042007da:	ec                   	in     (%dx),%al
  80042007db:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007de:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007e2:	0f b6 c0             	movzbl %al,%eax
  80042007e5:	83 e0 20             	and    $0x20,%eax
  80042007e8:	85 c0                	test   %eax,%eax
  80042007ea:	75 09                	jne    80042007f5 <serial_putc+0x4b>
  80042007ec:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007f3:	7e c9                	jle    80042007be <serial_putc+0x14>
  80042007f5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042007f8:	0f b6 c0             	movzbl %al,%eax
  80042007fb:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  8004200802:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200805:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200809:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420080c:	ee                   	out    %al,(%dx)
  800420080d:	c9                   	leaveq 
  800420080e:	c3                   	retq   

000000800420080f <serial_init>:
  800420080f:	55                   	push   %rbp
  8004200810:	48 89 e5             	mov    %rsp,%rbp
  8004200813:	48 83 ec 50          	sub    $0x50,%rsp
  8004200817:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420081e:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  8004200822:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200826:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200829:	ee                   	out    %al,(%dx)
  800420082a:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  8004200831:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200835:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200839:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420083c:	ee                   	out    %al,(%dx)
  800420083d:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200844:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200848:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420084c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420084f:	ee                   	out    %al,(%dx)
  8004200850:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200857:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  800420085b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420085f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200862:	ee                   	out    %al,(%dx)
  8004200863:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  800420086a:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420086e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200872:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200875:	ee                   	out    %al,(%dx)
  8004200876:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  800420087d:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  8004200881:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200885:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200888:	ee                   	out    %al,(%dx)
  8004200889:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  8004200890:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  8004200894:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200898:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420089b:	ee                   	out    %al,(%dx)
  800420089c:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008a6:	89 c2                	mov    %eax,%edx
  80042008a8:	ec                   	in     (%dx),%al
  80042008a9:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008ac:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008b0:	3c ff                	cmp    $0xff,%al
  80042008b2:	0f 95 c2             	setne  %dl
  80042008b5:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  80042008bc:	00 00 00 
  80042008bf:	88 10                	mov    %dl,(%rax)
  80042008c1:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008cb:	89 c2                	mov    %eax,%edx
  80042008cd:	ec                   	in     (%dx),%al
  80042008ce:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008d1:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008d8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008db:	89 c2                	mov    %eax,%edx
  80042008dd:	ec                   	in     (%dx),%al
  80042008de:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008e1:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  80042008e8:	00 00 00 
  80042008eb:	0f b6 00             	movzbl (%rax),%eax
  80042008ee:	84 c0                	test   %al,%al
  80042008f0:	74 23                	je     8004200915 <serial_init+0x106>
  80042008f2:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  80042008f9:	00 00 00 
  80042008fc:	0f b7 00             	movzwl (%rax),%eax
  80042008ff:	0f b7 c0             	movzwl %ax,%eax
  8004200902:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200907:	89 c7                	mov    %eax,%edi
  8004200909:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004200910:	00 00 00 
  8004200913:	ff d0                	callq  *%rax
  8004200915:	c9                   	leaveq 
  8004200916:	c3                   	retq   

0000008004200917 <lpt_putc>:
  8004200917:	55                   	push   %rbp
  8004200918:	48 89 e5             	mov    %rsp,%rbp
  800420091b:	48 83 ec 38          	sub    $0x38,%rsp
  800420091f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200922:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200929:	eb 10                	jmp    800420093b <lpt_putc+0x24>
  800420092b:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  8004200932:	00 00 00 
  8004200935:	ff d0                	callq  *%rax
  8004200937:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420093b:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200942:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200945:	89 c2                	mov    %eax,%edx
  8004200947:	ec                   	in     (%dx),%al
  8004200948:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  800420094b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420094f:	84 c0                	test   %al,%al
  8004200951:	78 09                	js     800420095c <lpt_putc+0x45>
  8004200953:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420095a:	7e cf                	jle    800420092b <lpt_putc+0x14>
  800420095c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420095f:	0f b6 c0             	movzbl %al,%eax
  8004200962:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200969:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420096c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200970:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200973:	ee                   	out    %al,(%dx)
  8004200974:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  800420097b:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420097f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200983:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200986:	ee                   	out    %al,(%dx)
  8004200987:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420098e:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200992:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200996:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200999:	ee                   	out    %al,(%dx)
  800420099a:	c9                   	leaveq 
  800420099b:	c3                   	retq   

000000800420099c <cga_init>:
  800420099c:	55                   	push   %rbp
  800420099d:	48 89 e5             	mov    %rsp,%rbp
  80042009a0:	48 83 ec 30          	sub    $0x30,%rsp
  80042009a4:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009ab:	00 00 00 
  80042009ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009b6:	0f b7 00             	movzwl (%rax),%eax
  80042009b9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c1:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009ca:	0f b7 00             	movzwl (%rax),%eax
  80042009cd:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009d1:	74 20                	je     80042009f3 <cga_init+0x57>
  80042009d3:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009da:	00 00 00 
  80042009dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009e1:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  80042009e8:	00 00 00 
  80042009eb:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009f1:	eb 1b                	jmp    8004200a0e <cga_init+0x72>
  80042009f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009f7:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042009fb:	66 89 10             	mov    %dx,(%rax)
  80042009fe:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a05:	00 00 00 
  8004200a08:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a0e:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a15:	00 00 00 
  8004200a18:	8b 00                	mov    (%rax),%eax
  8004200a1a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a1d:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a21:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a28:	ee                   	out    %al,(%dx)
  8004200a29:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a30:	00 00 00 
  8004200a33:	8b 00                	mov    (%rax),%eax
  8004200a35:	83 c0 01             	add    $0x1,%eax
  8004200a38:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a3e:	89 c2                	mov    %eax,%edx
  8004200a40:	ec                   	in     (%dx),%al
  8004200a41:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a44:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a48:	0f b6 c0             	movzbl %al,%eax
  8004200a4b:	c1 e0 08             	shl    $0x8,%eax
  8004200a4e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a51:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a58:	00 00 00 
  8004200a5b:	8b 00                	mov    (%rax),%eax
  8004200a5d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a60:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a64:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a68:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a6b:	ee                   	out    %al,(%dx)
  8004200a6c:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a73:	00 00 00 
  8004200a76:	8b 00                	mov    (%rax),%eax
  8004200a78:	83 c0 01             	add    $0x1,%eax
  8004200a7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a7e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a81:	89 c2                	mov    %eax,%edx
  8004200a83:	ec                   	in     (%dx),%al
  8004200a84:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a87:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a8b:	0f b6 c0             	movzbl %al,%eax
  8004200a8e:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a91:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200a98:	00 00 00 
  8004200a9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200a9f:	48 89 10             	mov    %rdx,(%rax)
  8004200aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200aa5:	89 c2                	mov    %eax,%edx
  8004200aa7:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200aae:	00 00 00 
  8004200ab1:	66 89 10             	mov    %dx,(%rax)
  8004200ab4:	c9                   	leaveq 
  8004200ab5:	c3                   	retq   

0000008004200ab6 <cga_putc>:
  8004200ab6:	55                   	push   %rbp
  8004200ab7:	48 89 e5             	mov    %rsp,%rbp
  8004200aba:	48 83 ec 40          	sub    $0x40,%rsp
  8004200abe:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200ac1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ac4:	b0 00                	mov    $0x0,%al
  8004200ac6:	85 c0                	test   %eax,%eax
  8004200ac8:	75 07                	jne    8004200ad1 <cga_putc+0x1b>
  8004200aca:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200ad1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad4:	0f b6 c0             	movzbl %al,%eax
  8004200ad7:	83 f8 09             	cmp    $0x9,%eax
  8004200ada:	0f 84 f6 00 00 00    	je     8004200bd6 <cga_putc+0x120>
  8004200ae0:	83 f8 09             	cmp    $0x9,%eax
  8004200ae3:	7f 0a                	jg     8004200aef <cga_putc+0x39>
  8004200ae5:	83 f8 08             	cmp    $0x8,%eax
  8004200ae8:	74 18                	je     8004200b02 <cga_putc+0x4c>
  8004200aea:	e9 3e 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200aef:	83 f8 0a             	cmp    $0xa,%eax
  8004200af2:	74 75                	je     8004200b69 <cga_putc+0xb3>
  8004200af4:	83 f8 0d             	cmp    $0xd,%eax
  8004200af7:	0f 84 89 00 00 00    	je     8004200b86 <cga_putc+0xd0>
  8004200afd:	e9 2b 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200b02:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b09:	00 00 00 
  8004200b0c:	0f b7 00             	movzwl (%rax),%eax
  8004200b0f:	66 85 c0             	test   %ax,%ax
  8004200b12:	74 50                	je     8004200b64 <cga_putc+0xae>
  8004200b14:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b1b:	00 00 00 
  8004200b1e:	0f b7 00             	movzwl (%rax),%eax
  8004200b21:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b24:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b2b:	00 00 00 
  8004200b2e:	66 89 10             	mov    %dx,(%rax)
  8004200b31:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200b38:	00 00 00 
  8004200b3b:	48 8b 10             	mov    (%rax),%rdx
  8004200b3e:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b45:	00 00 00 
  8004200b48:	0f b7 00             	movzwl (%rax),%eax
  8004200b4b:	0f b7 c0             	movzwl %ax,%eax
  8004200b4e:	48 01 c0             	add    %rax,%rax
  8004200b51:	48 01 c2             	add    %rax,%rdx
  8004200b54:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b57:	b0 00                	mov    $0x0,%al
  8004200b59:	83 c8 20             	or     $0x20,%eax
  8004200b5c:	66 89 02             	mov    %ax,(%rdx)
  8004200b5f:	e9 04 01 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b64:	e9 ff 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b69:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b70:	00 00 00 
  8004200b73:	0f b7 00             	movzwl (%rax),%eax
  8004200b76:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b79:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b80:	00 00 00 
  8004200b83:	66 89 10             	mov    %dx,(%rax)
  8004200b86:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b8d:	00 00 00 
  8004200b90:	0f b7 30             	movzwl (%rax),%esi
  8004200b93:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b9a:	00 00 00 
  8004200b9d:	0f b7 08             	movzwl (%rax),%ecx
  8004200ba0:	0f b7 c1             	movzwl %cx,%eax
  8004200ba3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200ba9:	c1 e8 10             	shr    $0x10,%eax
  8004200bac:	89 c2                	mov    %eax,%edx
  8004200bae:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bb2:	89 d0                	mov    %edx,%eax
  8004200bb4:	c1 e0 02             	shl    $0x2,%eax
  8004200bb7:	01 d0                	add    %edx,%eax
  8004200bb9:	c1 e0 04             	shl    $0x4,%eax
  8004200bbc:	29 c1                	sub    %eax,%ecx
  8004200bbe:	89 ca                	mov    %ecx,%edx
  8004200bc0:	29 d6                	sub    %edx,%esi
  8004200bc2:	89 f2                	mov    %esi,%edx
  8004200bc4:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200bcb:	00 00 00 
  8004200bce:	66 89 10             	mov    %dx,(%rax)
  8004200bd1:	e9 92 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200bd6:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bdb:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200be2:	00 00 00 
  8004200be5:	ff d0                	callq  *%rax
  8004200be7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bec:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200bf3:	00 00 00 
  8004200bf6:	ff d0                	callq  *%rax
  8004200bf8:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bfd:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c04:	00 00 00 
  8004200c07:	ff d0                	callq  *%rax
  8004200c09:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c0e:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c15:	00 00 00 
  8004200c18:	ff d0                	callq  *%rax
  8004200c1a:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1f:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c26:	00 00 00 
  8004200c29:	ff d0                	callq  *%rax
  8004200c2b:	eb 3b                	jmp    8004200c68 <cga_putc+0x1b2>
  8004200c2d:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200c34:	00 00 00 
  8004200c37:	48 8b 30             	mov    (%rax),%rsi
  8004200c3a:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200c41:	00 00 00 
  8004200c44:	0f b7 00             	movzwl (%rax),%eax
  8004200c47:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c4a:	48 ba 10 b0 4d 04 80 	movabs $0x80044db010,%rdx
  8004200c51:	00 00 00 
  8004200c54:	66 89 0a             	mov    %cx,(%rdx)
  8004200c57:	0f b7 c0             	movzwl %ax,%eax
  8004200c5a:	48 01 c0             	add    %rax,%rax
  8004200c5d:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c64:	66 89 02             	mov    %ax,(%rdx)
  8004200c67:	90                   	nop
  8004200c68:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200c6f:	00 00 00 
  8004200c72:	0f b7 00             	movzwl (%rax),%eax
  8004200c75:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c79:	0f 86 89 00 00 00    	jbe    8004200d08 <cga_putc+0x252>
  8004200c7f:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200c86:	00 00 00 
  8004200c89:	48 8b 00             	mov    (%rax),%rax
  8004200c8c:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c93:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200c9a:	00 00 00 
  8004200c9d:	48 8b 00             	mov    (%rax),%rax
  8004200ca0:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200ca5:	48 89 ce             	mov    %rcx,%rsi
  8004200ca8:	48 89 c7             	mov    %rax,%rdi
  8004200cab:	48 b8 1e 0a 21 04 80 	movabs $0x8004210a1e,%rax
  8004200cb2:	00 00 00 
  8004200cb5:	ff d0                	callq  *%rax
  8004200cb7:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cbe:	eb 22                	jmp    8004200ce2 <cga_putc+0x22c>
  8004200cc0:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200cc7:	00 00 00 
  8004200cca:	48 8b 00             	mov    (%rax),%rax
  8004200ccd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cd0:	48 63 d2             	movslq %edx,%rdx
  8004200cd3:	48 01 d2             	add    %rdx,%rdx
  8004200cd6:	48 01 d0             	add    %rdx,%rax
  8004200cd9:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cde:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ce2:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200ce9:	7e d5                	jle    8004200cc0 <cga_putc+0x20a>
  8004200ceb:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200cf2:	00 00 00 
  8004200cf5:	0f b7 00             	movzwl (%rax),%eax
  8004200cf8:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200cfb:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200d02:	00 00 00 
  8004200d05:	66 89 10             	mov    %dx,(%rax)
  8004200d08:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200d0f:	00 00 00 
  8004200d12:	8b 00                	mov    (%rax),%eax
  8004200d14:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d17:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d1b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d1f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d22:	ee                   	out    %al,(%dx)
  8004200d23:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200d2a:	00 00 00 
  8004200d2d:	0f b7 00             	movzwl (%rax),%eax
  8004200d30:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d34:	0f b6 c0             	movzbl %al,%eax
  8004200d37:	48 ba 04 b0 4d 04 80 	movabs $0x80044db004,%rdx
  8004200d3e:	00 00 00 
  8004200d41:	8b 12                	mov    (%rdx),%edx
  8004200d43:	83 c2 01             	add    $0x1,%edx
  8004200d46:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d49:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d4c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d50:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d53:	ee                   	out    %al,(%dx)
  8004200d54:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200d5b:	00 00 00 
  8004200d5e:	8b 00                	mov    (%rax),%eax
  8004200d60:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d63:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d67:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d6e:	ee                   	out    %al,(%dx)
  8004200d6f:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200d76:	00 00 00 
  8004200d79:	0f b7 00             	movzwl (%rax),%eax
  8004200d7c:	0f b6 c0             	movzbl %al,%eax
  8004200d7f:	48 ba 04 b0 4d 04 80 	movabs $0x80044db004,%rdx
  8004200d86:	00 00 00 
  8004200d89:	8b 12                	mov    (%rdx),%edx
  8004200d8b:	83 c2 01             	add    $0x1,%edx
  8004200d8e:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d91:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200d94:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200d98:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200d9b:	ee                   	out    %al,(%dx)
  8004200d9c:	c9                   	leaveq 
  8004200d9d:	c3                   	retq   

0000008004200d9e <kbd_proc_data>:
  8004200d9e:	55                   	push   %rbp
  8004200d9f:	48 89 e5             	mov    %rsp,%rbp
  8004200da2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200da6:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200db0:	89 c2                	mov    %eax,%edx
  8004200db2:	ec                   	in     (%dx),%al
  8004200db3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200db6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dba:	0f b6 c0             	movzbl %al,%eax
  8004200dbd:	83 e0 01             	and    $0x1,%eax
  8004200dc0:	85 c0                	test   %eax,%eax
  8004200dc2:	75 0a                	jne    8004200dce <kbd_proc_data+0x30>
  8004200dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dc9:	e9 fc 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200dce:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dd5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200dd8:	89 c2                	mov    %eax,%edx
  8004200dda:	ec                   	in     (%dx),%al
  8004200ddb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dde:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200de2:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200de5:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200de9:	75 27                	jne    8004200e12 <kbd_proc_data+0x74>
  8004200deb:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200df2:	00 00 00 
  8004200df5:	8b 00                	mov    (%rax),%eax
  8004200df7:	83 c8 40             	or     $0x40,%eax
  8004200dfa:	89 c2                	mov    %eax,%edx
  8004200dfc:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e03:	00 00 00 
  8004200e06:	89 10                	mov    %edx,(%rax)
  8004200e08:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e0d:	e9 b8 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e12:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e16:	84 c0                	test   %al,%al
  8004200e18:	79 65                	jns    8004200e7f <kbd_proc_data+0xe1>
  8004200e1a:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e21:	00 00 00 
  8004200e24:	8b 00                	mov    (%rax),%eax
  8004200e26:	83 e0 40             	and    $0x40,%eax
  8004200e29:	85 c0                	test   %eax,%eax
  8004200e2b:	75 09                	jne    8004200e36 <kbd_proc_data+0x98>
  8004200e2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e31:	83 e0 7f             	and    $0x7f,%eax
  8004200e34:	eb 04                	jmp    8004200e3a <kbd_proc_data+0x9c>
  8004200e36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e3d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e41:	48 ba 60 30 23 04 80 	movabs $0x8004233060,%rdx
  8004200e48:	00 00 00 
  8004200e4b:	48 98                	cltq   
  8004200e4d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e51:	83 c8 40             	or     $0x40,%eax
  8004200e54:	0f b6 c0             	movzbl %al,%eax
  8004200e57:	f7 d0                	not    %eax
  8004200e59:	89 c2                	mov    %eax,%edx
  8004200e5b:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e62:	00 00 00 
  8004200e65:	8b 00                	mov    (%rax),%eax
  8004200e67:	21 c2                	and    %eax,%edx
  8004200e69:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e70:	00 00 00 
  8004200e73:	89 10                	mov    %edx,(%rax)
  8004200e75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e7a:	e9 4b 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e7f:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e86:	00 00 00 
  8004200e89:	8b 00                	mov    (%rax),%eax
  8004200e8b:	83 e0 40             	and    $0x40,%eax
  8004200e8e:	85 c0                	test   %eax,%eax
  8004200e90:	74 21                	je     8004200eb3 <kbd_proc_data+0x115>
  8004200e92:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200e96:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e9d:	00 00 00 
  8004200ea0:	8b 00                	mov    (%rax),%eax
  8004200ea2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200ea5:	89 c2                	mov    %eax,%edx
  8004200ea7:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200eae:	00 00 00 
  8004200eb1:	89 10                	mov    %edx,(%rax)
  8004200eb3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200eb7:	48 ba 60 30 23 04 80 	movabs $0x8004233060,%rdx
  8004200ebe:	00 00 00 
  8004200ec1:	48 98                	cltq   
  8004200ec3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ec7:	0f b6 d0             	movzbl %al,%edx
  8004200eca:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200ed1:	00 00 00 
  8004200ed4:	8b 00                	mov    (%rax),%eax
  8004200ed6:	09 c2                	or     %eax,%edx
  8004200ed8:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200edf:	00 00 00 
  8004200ee2:	89 10                	mov    %edx,(%rax)
  8004200ee4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ee8:	48 ba 60 31 23 04 80 	movabs $0x8004233160,%rdx
  8004200eef:	00 00 00 
  8004200ef2:	48 98                	cltq   
  8004200ef4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ef8:	0f b6 d0             	movzbl %al,%edx
  8004200efb:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f02:	00 00 00 
  8004200f05:	8b 00                	mov    (%rax),%eax
  8004200f07:	31 c2                	xor    %eax,%edx
  8004200f09:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f10:	00 00 00 
  8004200f13:	89 10                	mov    %edx,(%rax)
  8004200f15:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	8b 00                	mov    (%rax),%eax
  8004200f21:	83 e0 03             	and    $0x3,%eax
  8004200f24:	89 c2                	mov    %eax,%edx
  8004200f26:	48 b8 60 35 23 04 80 	movabs $0x8004233560,%rax
  8004200f2d:	00 00 00 
  8004200f30:	89 d2                	mov    %edx,%edx
  8004200f32:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f3a:	48 01 d0             	add    %rdx,%rax
  8004200f3d:	0f b6 00             	movzbl (%rax),%eax
  8004200f40:	0f b6 c0             	movzbl %al,%eax
  8004200f43:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f46:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f4d:	00 00 00 
  8004200f50:	8b 00                	mov    (%rax),%eax
  8004200f52:	83 e0 08             	and    $0x8,%eax
  8004200f55:	85 c0                	test   %eax,%eax
  8004200f57:	74 22                	je     8004200f7b <kbd_proc_data+0x1dd>
  8004200f59:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f5d:	7e 0c                	jle    8004200f6b <kbd_proc_data+0x1cd>
  8004200f5f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f63:	7f 06                	jg     8004200f6b <kbd_proc_data+0x1cd>
  8004200f65:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f69:	eb 10                	jmp    8004200f7b <kbd_proc_data+0x1dd>
  8004200f6b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f6f:	7e 0a                	jle    8004200f7b <kbd_proc_data+0x1dd>
  8004200f71:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f75:	7f 04                	jg     8004200f7b <kbd_proc_data+0x1dd>
  8004200f77:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f7b:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f82:	00 00 00 
  8004200f85:	8b 00                	mov    (%rax),%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	83 e0 06             	and    $0x6,%eax
  8004200f8c:	85 c0                	test   %eax,%eax
  8004200f8e:	75 37                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f90:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200f97:	75 2e                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f99:	48 bf 76 cf 21 04 80 	movabs $0x800421cf76,%rdi
  8004200fa0:	00 00 00 
  8004200fa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fa8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200faf:	00 00 00 
  8004200fb2:	ff d2                	callq  *%rdx
  8004200fb4:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fbb:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fbf:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fc3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fc6:	ee                   	out    %al,(%dx)
  8004200fc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fca:	c9                   	leaveq 
  8004200fcb:	c3                   	retq   

0000008004200fcc <kbd_intr>:
  8004200fcc:	55                   	push   %rbp
  8004200fcd:	48 89 e5             	mov    %rsp,%rbp
  8004200fd0:	48 bf 9e 0d 20 04 80 	movabs $0x8004200d9e,%rdi
  8004200fd7:	00 00 00 
  8004200fda:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  8004200fe1:	00 00 00 
  8004200fe4:	ff d0                	callq  *%rax
  8004200fe6:	5d                   	pop    %rbp
  8004200fe7:	c3                   	retq   

0000008004200fe8 <kbd_init>:
  8004200fe8:	55                   	push   %rbp
  8004200fe9:	48 89 e5             	mov    %rsp,%rbp
  8004200fec:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  8004200ff3:	00 00 00 
  8004200ff6:	ff d0                	callq  *%rax
  8004200ff8:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004200fff:	00 00 00 
  8004201002:	0f b7 00             	movzwl (%rax),%eax
  8004201005:	0f b7 c0             	movzwl %ax,%eax
  8004201008:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420100d:	89 c7                	mov    %eax,%edi
  800420100f:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004201016:	00 00 00 
  8004201019:	ff d0                	callq  *%rax
  800420101b:	5d                   	pop    %rbp
  800420101c:	c3                   	retq   

000000800420101d <cons_intr>:
  800420101d:	55                   	push   %rbp
  800420101e:	48 89 e5             	mov    %rsp,%rbp
  8004201021:	48 83 ec 20          	sub    $0x20,%rsp
  8004201025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201029:	eb 6a                	jmp    8004201095 <cons_intr+0x78>
  800420102b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420102f:	75 02                	jne    8004201033 <cons_intr+0x16>
  8004201031:	eb 62                	jmp    8004201095 <cons_intr+0x78>
  8004201033:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  800420103a:	00 00 00 
  800420103d:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201043:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201046:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  800420104d:	00 00 00 
  8004201050:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201056:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201059:	89 d1                	mov    %edx,%ecx
  800420105b:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  8004201062:	00 00 00 
  8004201065:	89 c0                	mov    %eax,%eax
  8004201067:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420106a:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  8004201071:	00 00 00 
  8004201074:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420107a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420107f:	75 14                	jne    8004201095 <cons_intr+0x78>
  8004201081:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  8004201088:	00 00 00 
  800420108b:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004201092:	00 00 00 
  8004201095:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201099:	ff d0                	callq  *%rax
  800420109b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420109e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010a2:	75 87                	jne    800420102b <cons_intr+0xe>
  80042010a4:	c9                   	leaveq 
  80042010a5:	c3                   	retq   

00000080042010a6 <cons_getc>:
  80042010a6:	55                   	push   %rbp
  80042010a7:	48 89 e5             	mov    %rsp,%rbp
  80042010aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ae:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  80042010b5:	00 00 00 
  80042010b8:	ff d0                	callq  *%rax
  80042010ba:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  80042010cd:	00 00 00 
  80042010d0:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010d6:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  80042010dd:	00 00 00 
  80042010e0:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010e6:	39 c2                	cmp    %eax,%edx
  80042010e8:	74 69                	je     8004201153 <cons_getc+0xad>
  80042010ea:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  80042010f1:	00 00 00 
  80042010f4:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  80042010fa:	8d 48 01             	lea    0x1(%rax),%ecx
  80042010fd:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  8004201104:	00 00 00 
  8004201107:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420110d:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  8004201114:	00 00 00 
  8004201117:	89 c0                	mov    %eax,%eax
  8004201119:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420111d:	0f b6 c0             	movzbl %al,%eax
  8004201120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201123:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  800420112a:	00 00 00 
  800420112d:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201133:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201138:	75 14                	jne    800420114e <cons_getc+0xa8>
  800420113a:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  8004201141:	00 00 00 
  8004201144:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  800420114b:	00 00 00 
  800420114e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201151:	eb 05                	jmp    8004201158 <cons_getc+0xb2>
  8004201153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201158:	c9                   	leaveq 
  8004201159:	c3                   	retq   

000000800420115a <cons_putc>:
  800420115a:	55                   	push   %rbp
  800420115b:	48 89 e5             	mov    %rsp,%rbp
  800420115e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201162:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201165:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201168:	89 c7                	mov    %eax,%edi
  800420116a:	48 b8 aa 07 20 04 80 	movabs $0x80042007aa,%rax
  8004201171:	00 00 00 
  8004201174:	ff d0                	callq  *%rax
  8004201176:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201179:	89 c7                	mov    %eax,%edi
  800420117b:	48 b8 17 09 20 04 80 	movabs $0x8004200917,%rax
  8004201182:	00 00 00 
  8004201185:	ff d0                	callq  *%rax
  8004201187:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420118a:	89 c7                	mov    %eax,%edi
  800420118c:	48 b8 b6 0a 20 04 80 	movabs $0x8004200ab6,%rax
  8004201193:	00 00 00 
  8004201196:	ff d0                	callq  *%rax
  8004201198:	c9                   	leaveq 
  8004201199:	c3                   	retq   

000000800420119a <cons_init>:
  800420119a:	55                   	push   %rbp
  800420119b:	48 89 e5             	mov    %rsp,%rbp
  800420119e:	48 b8 9c 09 20 04 80 	movabs $0x800420099c,%rax
  80042011a5:	00 00 00 
  80042011a8:	ff d0                	callq  *%rax
  80042011aa:	48 b8 e8 0f 20 04 80 	movabs $0x8004200fe8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 0f 08 20 04 80 	movabs $0x800420080f,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  80042011c9:	00 00 00 
  80042011cc:	0f b6 00             	movzbl (%rax),%eax
  80042011cf:	83 f0 01             	xor    $0x1,%eax
  80042011d2:	84 c0                	test   %al,%al
  80042011d4:	74 1b                	je     80042011f1 <cons_init+0x57>
  80042011d6:	48 bf 82 cf 21 04 80 	movabs $0x800421cf82,%rdi
  80042011dd:	00 00 00 
  80042011e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042011ec:	00 00 00 
  80042011ef:	ff d2                	callq  *%rdx
  80042011f1:	5d                   	pop    %rbp
  80042011f2:	c3                   	retq   

00000080042011f3 <cputchar>:
  80042011f3:	55                   	push   %rbp
  80042011f4:	48 89 e5             	mov    %rsp,%rbp
  80042011f7:	48 83 ec 10          	sub    $0x10,%rsp
  80042011fb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042011fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201201:	89 c7                	mov    %eax,%edi
  8004201203:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  800420120a:	00 00 00 
  800420120d:	ff d0                	callq  *%rax
  800420120f:	c9                   	leaveq 
  8004201210:	c3                   	retq   

0000008004201211 <getchar>:
  8004201211:	55                   	push   %rbp
  8004201212:	48 89 e5             	mov    %rsp,%rbp
  8004201215:	48 83 ec 10          	sub    $0x10,%rsp
  8004201219:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201228:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420122c:	74 eb                	je     8004201219 <getchar+0x8>
  800420122e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201231:	c9                   	leaveq 
  8004201232:	c3                   	retq   

0000008004201233 <iscons>:
  8004201233:	55                   	push   %rbp
  8004201234:	48 89 e5             	mov    %rsp,%rbp
  8004201237:	48 83 ec 04          	sub    $0x4,%rsp
  800420123b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420123e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201243:	c9                   	leaveq 
  8004201244:	c3                   	retq   

0000008004201245 <mon_help>:
  8004201245:	55                   	push   %rbp
  8004201246:	48 89 e5             	mov    %rsp,%rbp
  8004201249:	48 83 ec 30          	sub    $0x30,%rsp
  800420124d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201250:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201254:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420125f:	eb 6c                	jmp    80042012cd <mon_help+0x88>
  8004201261:	48 b9 80 35 23 04 80 	movabs $0x8004233580,%rcx
  8004201268:	00 00 00 
  800420126b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420126e:	48 63 d0             	movslq %eax,%rdx
  8004201271:	48 89 d0             	mov    %rdx,%rax
  8004201274:	48 01 c0             	add    %rax,%rax
  8004201277:	48 01 d0             	add    %rdx,%rax
  800420127a:	48 c1 e0 03          	shl    $0x3,%rax
  800420127e:	48 01 c8             	add    %rcx,%rax
  8004201281:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201285:	48 be 80 35 23 04 80 	movabs $0x8004233580,%rsi
  800420128c:	00 00 00 
  800420128f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201292:	48 63 d0             	movslq %eax,%rdx
  8004201295:	48 89 d0             	mov    %rdx,%rax
  8004201298:	48 01 c0             	add    %rax,%rax
  800420129b:	48 01 d0             	add    %rdx,%rax
  800420129e:	48 c1 e0 03          	shl    $0x3,%rax
  80042012a2:	48 01 f0             	add    %rsi,%rax
  80042012a5:	48 8b 00             	mov    (%rax),%rax
  80042012a8:	48 89 ca             	mov    %rcx,%rdx
  80042012ab:	48 89 c6             	mov    %rax,%rsi
  80042012ae:	48 bf 36 d0 21 04 80 	movabs $0x800421d036,%rdi
  80042012b5:	00 00 00 
  80042012b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012bd:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042012c4:	00 00 00 
  80042012c7:	ff d1                	callq  *%rcx
  80042012c9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d0:	83 f8 03             	cmp    $0x3,%eax
  80042012d3:	76 8c                	jbe    8004201261 <mon_help+0x1c>
  80042012d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012da:	c9                   	leaveq 
  80042012db:	c3                   	retq   

00000080042012dc <mon_kerninfo>:
  80042012dc:	55                   	push   %rbp
  80042012dd:	48 89 e5             	mov    %rsp,%rbp
  80042012e0:	48 83 ec 30          	sub    $0x30,%rsp
  80042012e4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012ef:	48 bf 3f d0 21 04 80 	movabs $0x800421d03f,%rdi
  80042012f6:	00 00 00 
  80042012f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012fe:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201305:	00 00 00 
  8004201308:	ff d2                	callq  *%rdx
  800420130a:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201311:	00 00 00 
  8004201314:	48 bf 58 d0 21 04 80 	movabs $0x800421d058,%rdi
  800420131b:	00 00 00 
  800420131e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201323:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420132a:	00 00 00 
  800420132d:	ff d2                	callq  *%rdx
  800420132f:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201336:	00 00 00 
  8004201339:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201340:	00 00 00 
  8004201343:	48 bf 80 d0 21 04 80 	movabs $0x800421d080,%rdi
  800420134a:	00 00 00 
  800420134d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201352:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201359:	00 00 00 
  800420135c:	ff d1                	callq  *%rcx
  800420135e:	48 ba 98 ce 21 00 00 	movabs $0x21ce98,%rdx
  8004201365:	00 00 00 
  8004201368:	48 be 98 ce 21 04 80 	movabs $0x800421ce98,%rsi
  800420136f:	00 00 00 
  8004201372:	48 bf a8 d0 21 04 80 	movabs $0x800421d0a8,%rdi
  8004201379:	00 00 00 
  800420137c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201381:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201388:	00 00 00 
  800420138b:	ff d1                	callq  *%rcx
  800420138d:	48 ba a0 a1 4d 00 00 	movabs $0x4da1a0,%rdx
  8004201394:	00 00 00 
  8004201397:	48 be a0 a1 4d 04 80 	movabs $0x80044da1a0,%rsi
  800420139e:	00 00 00 
  80042013a1:	48 bf d0 d0 21 04 80 	movabs $0x800421d0d0,%rdi
  80042013a8:	00 00 00 
  80042013ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013b0:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013b7:	00 00 00 
  80042013ba:	ff d1                	callq  *%rcx
  80042013bc:	48 ba 10 d0 71 00 00 	movabs $0x71d010,%rdx
  80042013c3:	00 00 00 
  80042013c6:	48 be 10 d0 71 04 80 	movabs $0x800471d010,%rsi
  80042013cd:	00 00 00 
  80042013d0:	48 bf f8 d0 21 04 80 	movabs $0x800421d0f8,%rdi
  80042013d7:	00 00 00 
  80042013da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013df:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013e6:	00 00 00 
  80042013e9:	ff d1                	callq  *%rcx
  80042013eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013f2:	00 
  80042013f3:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  80042013fa:	00 00 00 
  80042013fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201401:	48 29 c2             	sub    %rax,%rdx
  8004201404:	48 b8 10 d0 71 04 80 	movabs $0x800471d010,%rax
  800420140b:	00 00 00 
  800420140e:	48 83 e8 01          	sub    $0x1,%rax
  8004201412:	48 01 d0             	add    %rdx,%rax
  8004201415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420141d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201422:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201426:	48 89 d0             	mov    %rdx,%rax
  8004201429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420142d:	48 29 c2             	sub    %rax,%rdx
  8004201430:	48 89 d0             	mov    %rdx,%rax
  8004201433:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800420143a:	48 85 c0             	test   %rax,%rax
  800420143d:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201441:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201445:	48 89 c6             	mov    %rax,%rsi
  8004201448:	48 bf 20 d1 21 04 80 	movabs $0x800421d120,%rdi
  800420144f:	00 00 00 
  8004201452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201457:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420145e:	00 00 00 
  8004201461:	ff d2                	callq  *%rdx
  8004201463:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201468:	c9                   	leaveq 
  8004201469:	c3                   	retq   

000000800420146a <mon_backtrace>:
  800420146a:	55                   	push   %rbp
  800420146b:	48 89 e5             	mov    %rsp,%rbp
  800420146e:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201475:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  800420147b:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  8004201482:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201489:	48 89 e8             	mov    %rbp,%rax
  800420148c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  8004201490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201494:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201498:	48 89 e0             	mov    %rsp,%rax
  800420149b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420149f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014a7:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ae:	00 
  80042014af:	74 21                	je     80042014d2 <mon_backtrace+0x68>
  80042014b1:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014b8:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014c0:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c7:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014d9 <mon_backtrace+0x6f>
  80042014d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014dd:	48 bf 4a d1 21 04 80 	movabs $0x800421d14a,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042014f3:	00 00 00 
  80042014f6:	ff d2                	callq  *%rdx
  80042014f8:	e9 17 03 00 00       	jmpq   8004201814 <mon_backtrace+0x3aa>
  80042014fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201505:	48 89 c6             	mov    %rax,%rsi
  8004201508:	48 bf 5c d1 21 04 80 	movabs $0x800421d15c,%rdi
  800420150f:	00 00 00 
  8004201512:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201517:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420151e:	00 00 00 
  8004201521:	ff d1                	callq  *%rcx
  8004201523:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  800420152a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420152e:	48 89 d6             	mov    %rdx,%rsi
  8004201531:	48 89 c7             	mov    %rax,%rdi
  8004201534:	48 b8 ff f5 20 04 80 	movabs $0x800420f5ff,%rax
  800420153b:	00 00 00 
  800420153e:	ff d0                	callq  *%rax
  8004201540:	85 c0                	test   %eax,%eax
  8004201542:	0f 88 9a 02 00 00    	js     80042017e2 <mon_backtrace+0x378>
  8004201548:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420154f:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201555:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201559:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  8004201560:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201564:	48 89 d7             	mov    %rdx,%rdi
  8004201567:	48 29 c7             	sub    %rax,%rdi
  800420156a:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  8004201571:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201577:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  800420157d:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201584:	49 89 f9             	mov    %rdi,%r9
  8004201587:	49 89 f0             	mov    %rsi,%r8
  800420158a:	48 89 c6             	mov    %rax,%rsi
  800420158d:	48 bf 78 d1 21 04 80 	movabs $0x800421d178,%rdi
  8004201594:	00 00 00 
  8004201597:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042015a3:	00 00 00 
  80042015a6:	41 ff d2             	callq  *%r10
  80042015a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ad:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015b1:	66 83 f8 06          	cmp    $0x6,%ax
  80042015b5:	75 15                	jne    80042015cc <mon_backtrace+0x162>
  80042015b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015bb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015c3:	48 01 d0             	add    %rdx,%rax
  80042015c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ca:	eb 28                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015d4:	66 83 f8 07          	cmp    $0x7,%ax
  80042015d8:	75 15                	jne    80042015ef <mon_backtrace+0x185>
  80042015da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015de:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015e6:	48 01 d0             	add    %rdx,%rax
  80042015e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ed:	eb 05                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015ef:	e9 ee 01 00 00       	jmpq   80042017e2 <mon_backtrace+0x378>
  80042015f4:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  80042015fa:	89 c6                	mov    %eax,%esi
  80042015fc:	48 bf 93 d1 21 04 80 	movabs $0x800421d193,%rdi
  8004201603:	00 00 00 
  8004201606:	b8 00 00 00 00       	mov    $0x0,%eax
  800420160b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201612:	00 00 00 
  8004201615:	ff d2                	callq  *%rdx
  8004201617:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420161e:	e9 f2 00 00 00       	jmpq   8004201715 <mon_backtrace+0x2ab>
  8004201623:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201626:	48 98                	cltq   
  8004201628:	48 83 c0 0a          	add    $0xa,%rax
  800420162c:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  8004201633:	ff 
  8004201634:	48 85 c0             	test   %rax,%rax
  8004201637:	75 35                	jne    800420166e <mon_backtrace+0x204>
  8004201639:	48 b9 9e d1 21 04 80 	movabs $0x800421d19e,%rcx
  8004201640:	00 00 00 
  8004201643:	48 ba b4 d1 21 04 80 	movabs $0x800421d1b4,%rdx
  800420164a:	00 00 00 
  800420164d:	be 78 00 00 00       	mov    $0x78,%esi
  8004201652:	48 bf c9 d1 21 04 80 	movabs $0x800421d1c9,%rdi
  8004201659:	00 00 00 
  800420165c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201661:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201668:	00 00 00 
  800420166b:	41 ff d0             	callq  *%r8
  800420166e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201671:	48 98                	cltq   
  8004201673:	48 83 c0 0a          	add    $0xa,%rax
  8004201677:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420167e:	ff 
  800420167f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201683:	48 01 d0             	add    %rdx,%rax
  8004201686:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420168a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420168d:	48 98                	cltq   
  800420168f:	48 83 c0 08          	add    $0x8,%rax
  8004201693:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  800420169a:	83 f8 02             	cmp    $0x2,%eax
  800420169d:	74 31                	je     80042016d0 <mon_backtrace+0x266>
  800420169f:	83 f8 02             	cmp    $0x2,%eax
  80042016a2:	7f 07                	jg     80042016ab <mon_backtrace+0x241>
  80042016a4:	83 f8 01             	cmp    $0x1,%eax
  80042016a7:	74 37                	je     80042016e0 <mon_backtrace+0x276>
  80042016a9:	eb 44                	jmp    80042016ef <mon_backtrace+0x285>
  80042016ab:	83 f8 04             	cmp    $0x4,%eax
  80042016ae:	74 12                	je     80042016c2 <mon_backtrace+0x258>
  80042016b0:	83 f8 08             	cmp    $0x8,%eax
  80042016b3:	75 3a                	jne    80042016ef <mon_backtrace+0x285>
  80042016b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b9:	48 8b 00             	mov    (%rax),%rax
  80042016bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016c0:	eb 2d                	jmp    80042016ef <mon_backtrace+0x285>
  80042016c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c6:	8b 00                	mov    (%rax),%eax
  80042016c8:	89 c0                	mov    %eax,%eax
  80042016ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ce:	eb 1f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d4:	0f b7 00             	movzwl (%rax),%eax
  80042016d7:	0f b7 c0             	movzwl %ax,%eax
  80042016da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016de:	eb 0f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e4:	0f b6 00             	movzbl (%rax),%eax
  80042016e7:	0f b6 c0             	movzbl %al,%eax
  80042016ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ee:	90                   	nop
  80042016ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016f3:	48 89 c6             	mov    %rax,%rsi
  80042016f6:	48 bf db d1 21 04 80 	movabs $0x800421d1db,%rdi
  80042016fd:	00 00 00 
  8004201700:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201705:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420170c:	00 00 00 
  800420170f:	ff d2                	callq  *%rdx
  8004201711:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201715:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  800420171b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420171e:	0f 8f ff fe ff ff    	jg     8004201623 <mon_backtrace+0x1b9>
  8004201724:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  800420172b:	0f b7 c0             	movzwl %ax,%eax
  800420172e:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201733:	74 48                	je     800420177d <mon_backtrace+0x313>
  8004201735:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  800420173a:	75 17                	jne    8004201753 <mon_backtrace+0x2e9>
  800420173c:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  8004201743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201747:	48 01 d0             	add    %rdx,%rax
  800420174a:	48 8b 00             	mov    (%rax),%rax
  800420174d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201751:	eb 2b                	jmp    800420177e <mon_backtrace+0x314>
  8004201753:	48 ba e2 d1 21 04 80 	movabs $0x800421d1e2,%rdx
  800420175a:	00 00 00 
  800420175d:	be 92 00 00 00       	mov    $0x92,%esi
  8004201762:	48 bf c9 d1 21 04 80 	movabs $0x800421d1c9,%rdi
  8004201769:	00 00 00 
  800420176c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201771:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201778:	00 00 00 
  800420177b:	ff d1                	callq  *%rcx
  800420177d:	90                   	nop
  800420177e:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201785:	0f b7 c0             	movzwl %ax,%eax
  8004201788:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420178d:	74 48                	je     80042017d7 <mon_backtrace+0x36d>
  800420178f:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201794:	75 17                	jne    80042017ad <mon_backtrace+0x343>
  8004201796:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  800420179d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017a1:	48 01 d0             	add    %rdx,%rax
  80042017a4:	48 8b 00             	mov    (%rax),%rax
  80042017a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ab:	eb 2b                	jmp    80042017d8 <mon_backtrace+0x36e>
  80042017ad:	48 ba e2 d1 21 04 80 	movabs $0x800421d1e2,%rdx
  80042017b4:	00 00 00 
  80042017b7:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017bc:	48 bf c9 d1 21 04 80 	movabs $0x800421d1c9,%rdi
  80042017c3:	00 00 00 
  80042017c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017cb:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042017d2:	00 00 00 
  80042017d5:	ff d1                	callq  *%rcx
  80042017d7:	90                   	nop
  80042017d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017e0:	eb 17                	jmp    80042017f9 <mon_backtrace+0x38f>
  80042017e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 00             	mov    (%rax),%rax
  80042017f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042017f9:	48 bf f3 d1 21 04 80 	movabs $0x800421d1f3,%rdi
  8004201800:	00 00 00 
  8004201803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201808:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420180f:	00 00 00 
  8004201812:	ff d2                	callq  *%rdx
  8004201814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201819:	0f 85 de fc ff ff    	jne    80042014fd <mon_backtrace+0x93>
  800420181f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201824:	c9                   	leaveq 
  8004201825:	c3                   	retq   

0000008004201826 <mon_exit>:
  8004201826:	55                   	push   %rbp
  8004201827:	48 89 e5             	mov    %rsp,%rbp
  800420182a:	48 83 ec 18          	sub    $0x18,%rsp
  800420182e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201831:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201835:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201839:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420183e:	c9                   	leaveq 
  800420183f:	c3                   	retq   

0000008004201840 <runcmd>:
  8004201840:	55                   	push   %rbp
  8004201841:	48 89 e5             	mov    %rsp,%rbp
  8004201844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420184b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004201852:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201860:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201863:	48 98                	cltq   
  8004201865:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  800420186c:	ff 00 00 00 00 
  8004201871:	eb 15                	jmp    8004201888 <runcmd+0x48>
  8004201873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420187a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420187e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201885:	c6 00 00             	movb   $0x0,(%rax)
  8004201888:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420188f:	0f b6 00             	movzbl (%rax),%eax
  8004201892:	84 c0                	test   %al,%al
  8004201894:	74 2a                	je     80042018c0 <runcmd+0x80>
  8004201896:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189d:	0f b6 00             	movzbl (%rax),%eax
  80042018a0:	0f be c0             	movsbl %al,%eax
  80042018a3:	89 c6                	mov    %eax,%esi
  80042018a5:	48 bf f5 d1 21 04 80 	movabs $0x800421d1f5,%rdi
  80042018ac:	00 00 00 
  80042018af:	48 b8 20 09 21 04 80 	movabs $0x8004210920,%rax
  80042018b6:	00 00 00 
  80042018b9:	ff d0                	callq  *%rax
  80042018bb:	48 85 c0             	test   %rax,%rax
  80042018be:	75 b3                	jne    8004201873 <runcmd+0x33>
  80042018c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018c7:	0f b6 00             	movzbl (%rax),%eax
  80042018ca:	84 c0                	test   %al,%al
  80042018cc:	75 21                	jne    80042018ef <runcmd+0xaf>
  80042018ce:	90                   	nop
  80042018cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018d2:	48 98                	cltq   
  80042018d4:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018db:	ff 00 00 00 00 
  80042018e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018e4:	0f 85 a1 00 00 00    	jne    800420198b <runcmd+0x14b>
  80042018ea:	e9 92 00 00 00       	jmpq   8004201981 <runcmd+0x141>
  80042018ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018f3:	75 2a                	jne    800420191f <runcmd+0xdf>
  80042018f5:	be 10 00 00 00       	mov    $0x10,%esi
  80042018fa:	48 bf fa d1 21 04 80 	movabs $0x800421d1fa,%rdi
  8004201901:	00 00 00 
  8004201904:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201909:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201910:	00 00 00 
  8004201913:	ff d2                	callq  *%rdx
  8004201915:	b8 00 00 00 00       	mov    $0x0,%eax
  800420191a:	e9 30 01 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420191f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201922:	8d 50 01             	lea    0x1(%rax),%edx
  8004201925:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201928:	48 98                	cltq   
  800420192a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201931:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201938:	ff 
  8004201939:	eb 08                	jmp    8004201943 <runcmd+0x103>
  800420193b:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201942:	01 
  8004201943:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420194a:	0f b6 00             	movzbl (%rax),%eax
  800420194d:	84 c0                	test   %al,%al
  800420194f:	74 2a                	je     800420197b <runcmd+0x13b>
  8004201951:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201958:	0f b6 00             	movzbl (%rax),%eax
  800420195b:	0f be c0             	movsbl %al,%eax
  800420195e:	89 c6                	mov    %eax,%esi
  8004201960:	48 bf f5 d1 21 04 80 	movabs $0x800421d1f5,%rdi
  8004201967:	00 00 00 
  800420196a:	48 b8 20 09 21 04 80 	movabs $0x8004210920,%rax
  8004201971:	00 00 00 
  8004201974:	ff d0                	callq  *%rax
  8004201976:	48 85 c0             	test   %rax,%rax
  8004201979:	74 c0                	je     800420193b <runcmd+0xfb>
  800420197b:	90                   	nop
  800420197c:	e9 07 ff ff ff       	jmpq   8004201888 <runcmd+0x48>
  8004201981:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201986:	e9 c4 00 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420198b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201992:	e9 82 00 00 00       	jmpq   8004201a19 <runcmd+0x1d9>
  8004201997:	48 b9 80 35 23 04 80 	movabs $0x8004233580,%rcx
  800420199e:	00 00 00 
  80042019a1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019a4:	48 63 d0             	movslq %eax,%rdx
  80042019a7:	48 89 d0             	mov    %rdx,%rax
  80042019aa:	48 01 c0             	add    %rax,%rax
  80042019ad:	48 01 d0             	add    %rdx,%rax
  80042019b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019b4:	48 01 c8             	add    %rcx,%rax
  80042019b7:	48 8b 10             	mov    (%rax),%rdx
  80042019ba:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019c1:	48 89 d6             	mov    %rdx,%rsi
  80042019c4:	48 89 c7             	mov    %rax,%rdi
  80042019c7:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  80042019ce:	00 00 00 
  80042019d1:	ff d0                	callq  *%rax
  80042019d3:	85 c0                	test   %eax,%eax
  80042019d5:	75 3e                	jne    8004201a15 <runcmd+0x1d5>
  80042019d7:	48 b9 80 35 23 04 80 	movabs $0x8004233580,%rcx
  80042019de:	00 00 00 
  80042019e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019e4:	48 63 d0             	movslq %eax,%rdx
  80042019e7:	48 89 d0             	mov    %rdx,%rax
  80042019ea:	48 01 c0             	add    %rax,%rax
  80042019ed:	48 01 d0             	add    %rdx,%rax
  80042019f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019f4:	48 01 c8             	add    %rcx,%rax
  80042019f7:	48 83 c0 10          	add    $0x10,%rax
  80042019fb:	48 8b 00             	mov    (%rax),%rax
  80042019fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a05:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a0c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a0f:	89 cf                	mov    %ecx,%edi
  8004201a11:	ff d0                	callq  *%rax
  8004201a13:	eb 3a                	jmp    8004201a4f <runcmd+0x20f>
  8004201a15:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a1c:	83 f8 03             	cmp    $0x3,%eax
  8004201a1f:	0f 86 72 ff ff ff    	jbe    8004201997 <runcmd+0x157>
  8004201a25:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a2c:	48 89 c6             	mov    %rax,%rsi
  8004201a2f:	48 bf 17 d2 21 04 80 	movabs $0x800421d217,%rdi
  8004201a36:	00 00 00 
  8004201a39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a3e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a45:	00 00 00 
  8004201a48:	ff d2                	callq  *%rdx
  8004201a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4f:	c9                   	leaveq 
  8004201a50:	c3                   	retq   

0000008004201a51 <monitor>:
  8004201a51:	55                   	push   %rbp
  8004201a52:	48 89 e5             	mov    %rsp,%rbp
  8004201a55:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a5d:	48 bf 30 d2 21 04 80 	movabs $0x800421d230,%rdi
  8004201a64:	00 00 00 
  8004201a67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a73:	00 00 00 
  8004201a76:	ff d2                	callq  *%rdx
  8004201a78:	48 bf 58 d2 21 04 80 	movabs $0x800421d258,%rdi
  8004201a7f:	00 00 00 
  8004201a82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a8e:	00 00 00 
  8004201a91:	ff d2                	callq  *%rdx
  8004201a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201a98:	74 13                	je     8004201aad <monitor+0x5c>
  8004201a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201a9e:	48 89 c7             	mov    %rax,%rdi
  8004201aa1:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  8004201aa8:	00 00 00 
  8004201aab:	ff d0                	callq  *%rax
  8004201aad:	48 bf 7d d2 21 04 80 	movabs $0x800421d27d,%rdi
  8004201ab4:	00 00 00 
  8004201ab7:	48 b8 39 05 21 04 80 	movabs $0x8004210539,%rax
  8004201abe:	00 00 00 
  8004201ac1:	ff d0                	callq  *%rax
  8004201ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ac7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201acc:	74 20                	je     8004201aee <monitor+0x9d>
  8004201ace:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ad6:	48 89 d6             	mov    %rdx,%rsi
  8004201ad9:	48 89 c7             	mov    %rax,%rdi
  8004201adc:	48 b8 40 18 20 04 80 	movabs $0x8004201840,%rax
  8004201ae3:	00 00 00 
  8004201ae6:	ff d0                	callq  *%rax
  8004201ae8:	85 c0                	test   %eax,%eax
  8004201aea:	79 02                	jns    8004201aee <monitor+0x9d>
  8004201aec:	eb 02                	jmp    8004201af0 <monitor+0x9f>
  8004201aee:	eb bd                	jmp    8004201aad <monitor+0x5c>
  8004201af0:	c9                   	leaveq 
  8004201af1:	c3                   	retq   

0000008004201af2 <page2ppn>:
  8004201af2:	55                   	push   %rbp
  8004201af3:	48 89 e5             	mov    %rsp,%rbp
  8004201af6:	48 83 ec 08          	sub    $0x8,%rsp
  8004201afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201afe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b02:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004201b09:	00 00 00 
  8004201b0c:	48 8b 00             	mov    (%rax),%rax
  8004201b0f:	48 29 c2             	sub    %rax,%rdx
  8004201b12:	48 89 d0             	mov    %rdx,%rax
  8004201b15:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b19:	c9                   	leaveq 
  8004201b1a:	c3                   	retq   

0000008004201b1b <page2pa>:
  8004201b1b:	55                   	push   %rbp
  8004201b1c:	48 89 e5             	mov    %rsp,%rbp
  8004201b1f:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b2b:	48 89 c7             	mov    %rax,%rdi
  8004201b2e:	48 b8 f2 1a 20 04 80 	movabs $0x8004201af2,%rax
  8004201b35:	00 00 00 
  8004201b38:	ff d0                	callq  *%rax
  8004201b3a:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b3e:	c9                   	leaveq 
  8004201b3f:	c3                   	retq   

0000008004201b40 <pa2page>:
  8004201b40:	55                   	push   %rbp
  8004201b41:	48 89 e5             	mov    %rsp,%rbp
  8004201b44:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b54:	48 89 c2             	mov    %rax,%rdx
  8004201b57:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004201b5e:	00 00 00 
  8004201b61:	48 8b 00             	mov    (%rax),%rax
  8004201b64:	48 39 c2             	cmp    %rax,%rdx
  8004201b67:	72 2a                	jb     8004201b93 <pa2page+0x53>
  8004201b69:	48 ba 88 d2 21 04 80 	movabs $0x800421d288,%rdx
  8004201b70:	00 00 00 
  8004201b73:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b78:	48 bf a7 d2 21 04 80 	movabs $0x800421d2a7,%rdi
  8004201b7f:	00 00 00 
  8004201b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b87:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201b8e:	00 00 00 
  8004201b91:	ff d1                	callq  *%rcx
  8004201b93:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	48 8b 00             	mov    (%rax),%rax
  8004201ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ba4:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201ba8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bac:	48 01 d0             	add    %rdx,%rax
  8004201baf:	c9                   	leaveq 
  8004201bb0:	c3                   	retq   

0000008004201bb1 <page2kva>:
  8004201bb1:	55                   	push   %rbp
  8004201bb2:	48 89 e5             	mov    %rsp,%rbp
  8004201bb5:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bc1:	48 89 c7             	mov    %rax,%rdi
  8004201bc4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004201bcb:	00 00 00 
  8004201bce:	ff d0                	callq  *%rax
  8004201bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bd8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bdc:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201bdf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201be2:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004201be9:	00 00 00 
  8004201bec:	48 8b 00             	mov    (%rax),%rax
  8004201bef:	48 39 c2             	cmp    %rax,%rdx
  8004201bf2:	72 32                	jb     8004201c26 <page2kva+0x75>
  8004201bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bf8:	48 89 c1             	mov    %rax,%rcx
  8004201bfb:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004201c02:	00 00 00 
  8004201c05:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c0a:	48 bf a7 d2 21 04 80 	movabs $0x800421d2a7,%rdi
  8004201c11:	00 00 00 
  8004201c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c19:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201c20:	00 00 00 
  8004201c23:	41 ff d0             	callq  *%r8
  8004201c26:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c2d:	00 00 00 
  8004201c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c34:	48 01 d0             	add    %rdx,%rax
  8004201c37:	c9                   	leaveq 
  8004201c38:	c3                   	retq   

0000008004201c39 <restrictive_type>:
  8004201c39:	55                   	push   %rbp
  8004201c3a:	48 89 e5             	mov    %rsp,%rbp
  8004201c3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c47:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c4b:	74 06                	je     8004201c53 <restrictive_type+0x1a>
  8004201c4d:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c51:	75 07                	jne    8004201c5a <restrictive_type+0x21>
  8004201c53:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c58:	eb 3e                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c5a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c5e:	74 06                	je     8004201c66 <restrictive_type+0x2d>
  8004201c60:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c64:	75 07                	jne    8004201c6d <restrictive_type+0x34>
  8004201c66:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c6b:	eb 2b                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c71:	74 06                	je     8004201c79 <restrictive_type+0x40>
  8004201c73:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c77:	75 07                	jne    8004201c80 <restrictive_type+0x47>
  8004201c79:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c7e:	eb 18                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c80:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c84:	74 06                	je     8004201c8c <restrictive_type+0x53>
  8004201c86:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c8a:	75 07                	jne    8004201c93 <restrictive_type+0x5a>
  8004201c8c:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c91:	eb 05                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c93:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201c98:	c9                   	leaveq 
  8004201c99:	c3                   	retq   

0000008004201c9a <nvram_read>:
  8004201c9a:	55                   	push   %rbp
  8004201c9b:	48 89 e5             	mov    %rsp,%rbp
  8004201c9e:	53                   	push   %rbx
  8004201c9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004201ca3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201ca6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ca9:	89 c7                	mov    %eax,%edi
  8004201cab:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cb2:	00 00 00 
  8004201cb5:	ff d0                	callq  *%rax
  8004201cb7:	89 c3                	mov    %eax,%ebx
  8004201cb9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cbc:	83 c0 01             	add    $0x1,%eax
  8004201cbf:	89 c7                	mov    %eax,%edi
  8004201cc1:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cc8:	00 00 00 
  8004201ccb:	ff d0                	callq  *%rax
  8004201ccd:	c1 e0 08             	shl    $0x8,%eax
  8004201cd0:	09 d8                	or     %ebx,%eax
  8004201cd2:	48 83 c4 18          	add    $0x18,%rsp
  8004201cd6:	5b                   	pop    %rbx
  8004201cd7:	5d                   	pop    %rbp
  8004201cd8:	c3                   	retq   

0000008004201cd9 <multiboot_read>:
  8004201cd9:	55                   	push   %rbp
  8004201cda:	48 89 e5             	mov    %rsp,%rbp
  8004201cdd:	41 54                	push   %r12
  8004201cdf:	53                   	push   %rbx
  8004201ce0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201ce7:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cee:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201cf5:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201cfc:	48 89 e0             	mov    %rsp,%rax
  8004201cff:	49 89 c4             	mov    %rax,%r12
  8004201d02:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d09:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d0c:	89 c0                	mov    %eax,%eax
  8004201d0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d19:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d1c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d21:	f7 e2                	mul    %edx
  8004201d23:	89 d0                	mov    %edx,%eax
  8004201d25:	c1 e8 04             	shr    $0x4,%eax
  8004201d28:	89 c0                	mov    %eax,%eax
  8004201d2a:	48 89 c2             	mov    %rax,%rdx
  8004201d2d:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d31:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d35:	49 89 c0             	mov    %rax,%r8
  8004201d38:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d3e:	48 89 c1             	mov    %rax,%rcx
  8004201d41:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d46:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d4a:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d4e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d53:	48 83 e8 01          	sub    $0x1,%rax
  8004201d57:	48 01 d0             	add    %rdx,%rax
  8004201d5a:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d5f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d64:	48 f7 f3             	div    %rbx
  8004201d67:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d6b:	48 29 c4             	sub    %rax,%rsp
  8004201d6e:	48 89 e0             	mov    %rsp,%rax
  8004201d71:	48 83 c0 07          	add    $0x7,%rax
  8004201d75:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d79:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d81:	48 bf db d2 21 04 80 	movabs $0x800421d2db,%rdi
  8004201d88:	00 00 00 
  8004201d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d90:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201d97:	00 00 00 
  8004201d9a:	ff d2                	callq  *%rdx
  8004201d9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201da3:	e9 6c 01 00 00       	jmpq   8004201f14 <multiboot_read+0x23b>
  8004201da8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201dab:	48 63 d0             	movslq %eax,%rdx
  8004201dae:	48 89 d0             	mov    %rdx,%rax
  8004201db1:	48 01 c0             	add    %rax,%rax
  8004201db4:	48 01 d0             	add    %rdx,%rax
  8004201db7:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dbb:	48 89 c2             	mov    %rax,%rdx
  8004201dbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dc2:	48 01 d0             	add    %rdx,%rax
  8004201dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004201dd0:	89 c0                	mov    %eax,%eax
  8004201dd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201dd6:	48 89 c2             	mov    %rax,%rdx
  8004201dd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ddd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201de0:	89 c0                	mov    %eax,%eax
  8004201de2:	48 01 d0             	add    %rdx,%rax
  8004201de5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201de9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ded:	8b 40 10             	mov    0x10(%rax),%eax
  8004201df0:	89 c0                	mov    %eax,%eax
  8004201df2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201df6:	48 89 c2             	mov    %rax,%rdx
  8004201df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dfd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e00:	89 c0                	mov    %eax,%eax
  8004201e02:	48 01 d0             	add    %rdx,%rax
  8004201e05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e0d:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e14:	8b 00                	mov    (%rax),%eax
  8004201e16:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e1a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e1e:	41 89 f0             	mov    %esi,%r8d
  8004201e21:	89 c6                	mov    %eax,%esi
  8004201e23:	48 bf f0 d2 21 04 80 	movabs $0x800421d2f0,%rdi
  8004201e2a:	00 00 00 
  8004201e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e32:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004201e39:	00 00 00 
  8004201e3c:	41 ff d1             	callq  *%r9
  8004201e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e43:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e46:	83 f8 05             	cmp    $0x5,%eax
  8004201e49:	77 0b                	ja     8004201e56 <multiboot_read+0x17d>
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	85 c0                	test   %eax,%eax
  8004201e54:	75 0b                	jne    8004201e61 <multiboot_read+0x188>
  8004201e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5a:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e68:	e9 85 00 00 00       	jmpq   8004201ef2 <multiboot_read+0x219>
  8004201e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e74:	48 63 d2             	movslq %edx,%rdx
  8004201e77:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e7b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e83:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e86:	89 c0                	mov    %eax,%eax
  8004201e88:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e8c:	48 89 c2             	mov    %rax,%rdx
  8004201e8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e93:	8b 40 04             	mov    0x4(%rax),%eax
  8004201e96:	89 c0                	mov    %eax,%eax
  8004201e98:	48 01 d0             	add    %rdx,%rax
  8004201e9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201e9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201ea3:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201ea7:	76 45                	jbe    8004201eee <multiboot_read+0x215>
  8004201ea9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eac:	83 c0 01             	add    $0x1,%eax
  8004201eaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201eb2:	eb 30                	jmp    8004201ee4 <multiboot_read+0x20b>
  8004201eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201eb8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ebb:	48 63 d2             	movslq %edx,%rdx
  8004201ebe:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ec2:	48 01 c2             	add    %rax,%rdx
  8004201ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ecc:	48 63 c9             	movslq %ecx,%rcx
  8004201ecf:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201ed3:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ed7:	48 01 c8             	add    %rcx,%rax
  8004201eda:	48 8b 00             	mov    (%rax),%rax
  8004201edd:	48 89 02             	mov    %rax,(%rdx)
  8004201ee0:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ee4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ee7:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201eea:	75 c8                	jne    8004201eb4 <multiboot_read+0x1db>
  8004201eec:	eb 10                	jmp    8004201efe <multiboot_read+0x225>
  8004201eee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201ef2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201ef5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201ef8:	0f 8c 6f ff ff ff    	jl     8004201e6d <multiboot_read+0x194>
  8004201efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f02:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f05:	48 63 d2             	movslq %edx,%rdx
  8004201f08:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f0c:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f10:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f14:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f17:	48 63 c8             	movslq %eax,%rcx
  8004201f1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f21:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f24:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f29:	f7 e2                	mul    %edx
  8004201f2b:	89 d0                	mov    %edx,%eax
  8004201f2d:	c1 e8 04             	shr    $0x4,%eax
  8004201f30:	89 c0                	mov    %eax,%eax
  8004201f32:	48 39 c1             	cmp    %rax,%rcx
  8004201f35:	0f 82 6d fe ff ff    	jb     8004201da8 <multiboot_read+0xcf>
  8004201f3b:	48 bf 27 d3 21 04 80 	movabs $0x800421d327,%rdi
  8004201f42:	00 00 00 
  8004201f45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f4a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201f51:	00 00 00 
  8004201f54:	ff d2                	callq  *%rdx
  8004201f56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f5d:	e9 93 01 00 00       	jmpq   80042020f5 <multiboot_read+0x41c>
  8004201f62:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f65:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f6c:	48 63 d2             	movslq %edx,%rdx
  8004201f6f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f73:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f7b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f7e:	48 63 d2             	movslq %edx,%rdx
  8004201f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f8d:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f90:	89 c0                	mov    %eax,%eax
  8004201f92:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f96:	48 89 c2             	mov    %rax,%rdx
  8004201f99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f9d:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fa0:	89 c0                	mov    %eax,%eax
  8004201fa2:	48 01 d0             	add    %rdx,%rax
  8004201fa5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fa9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fad:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fb0:	89 c0                	mov    %eax,%eax
  8004201fb2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fb6:	48 89 c2             	mov    %rax,%rdx
  8004201fb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fbd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fc0:	89 c0                	mov    %eax,%eax
  8004201fc2:	48 01 d0             	add    %rdx,%rax
  8004201fc5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fcd:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fd0:	89 c0                	mov    %eax,%eax
  8004201fd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd6:	48 89 c2             	mov    %rax,%rdx
  8004201fd9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fdd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fe0:	89 c0                	mov    %eax,%eax
  8004201fe2:	48 01 d0             	add    %rdx,%rax
  8004201fe5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201fec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ff0:	8b 40 10             	mov    0x10(%rax),%eax
  8004201ff3:	89 c0                	mov    %eax,%eax
  8004201ff5:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff9:	48 89 c2             	mov    %rax,%rdx
  8004201ffc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202000:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202003:	89 c0                	mov    %eax,%eax
  8004202005:	48 01 d0             	add    %rdx,%rax
  8004202008:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420200f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202016:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420201a:	48 01 d0             	add    %rdx,%rax
  800420201d:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202021:	75 7c                	jne    800420209f <multiboot_read+0x3c6>
  8004202023:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202027:	8b 50 14             	mov    0x14(%rax),%edx
  800420202a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420202e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202031:	39 c2                	cmp    %eax,%edx
  8004202033:	75 6a                	jne    800420209f <multiboot_read+0x3c6>
  8004202035:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420203c:	89 c2                	mov    %eax,%edx
  800420203e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202045:	01 c2                	add    %eax,%edx
  8004202047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420204b:	89 50 0c             	mov    %edx,0xc(%rax)
  800420204e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202055:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420205c:	48 01 d0             	add    %rdx,%rax
  800420205f:	48 c1 e8 20          	shr    $0x20,%rax
  8004202063:	89 c2                	mov    %eax,%edx
  8004202065:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202069:	89 50 10             	mov    %edx,0x10(%rax)
  800420206c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202070:	8b 50 04             	mov    0x4(%rax),%edx
  8004202073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202077:	89 50 04             	mov    %edx,0x4(%rax)
  800420207a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207e:	8b 50 08             	mov    0x8(%rax),%edx
  8004202081:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202085:	89 50 08             	mov    %edx,0x8(%rax)
  8004202088:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420208b:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420208e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202092:	48 63 d2             	movslq %edx,%rdx
  8004202095:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  800420209c:	00 
  800420209d:	eb 52                	jmp    80042020f1 <multiboot_read+0x418>
  800420209f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020a6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020aa:	48 01 d0             	add    %rdx,%rax
  80042020ad:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020b1:	76 3e                	jbe    80042020f1 <multiboot_read+0x418>
  80042020b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020b7:	8b 50 14             	mov    0x14(%rax),%edx
  80042020ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020be:	8b 40 14             	mov    0x14(%rax),%eax
  80042020c1:	89 d6                	mov    %edx,%esi
  80042020c3:	89 c7                	mov    %eax,%edi
  80042020c5:	48 b8 39 1c 20 04 80 	movabs $0x8004201c39,%rax
  80042020cc:	00 00 00 
  80042020cf:	ff d0                	callq  *%rax
  80042020d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020db:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020e1:	89 50 14             	mov    %edx,0x14(%rax)
  80042020e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ee:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042020f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020f8:	48 63 c8             	movslq %eax,%rcx
  80042020fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202102:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202105:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420210a:	f7 e2                	mul    %edx
  800420210c:	89 d0                	mov    %edx,%eax
  800420210e:	c1 e8 04             	shr    $0x4,%eax
  8004202111:	89 c0                	mov    %eax,%eax
  8004202113:	48 39 c1             	cmp    %rax,%rcx
  8004202116:	0f 82 46 fe ff ff    	jb     8004201f62 <multiboot_read+0x289>
  800420211c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004202123:	e9 dc 00 00 00       	jmpq   8004202204 <multiboot_read+0x52b>
  8004202128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420212c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420212f:	48 63 d2             	movslq %edx,%rdx
  8004202132:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202136:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  800420213d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202144:	00 
  8004202145:	0f 84 b5 00 00 00    	je     8004202200 <multiboot_read+0x527>
  800420214b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202152:	8b 40 14             	mov    0x14(%rax),%eax
  8004202155:	83 f8 01             	cmp    $0x1,%eax
  8004202158:	74 13                	je     800420216d <multiboot_read+0x494>
  800420215a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202161:	8b 40 14             	mov    0x14(%rax),%eax
  8004202164:	83 f8 03             	cmp    $0x3,%eax
  8004202167:	0f 85 93 00 00 00    	jne    8004202200 <multiboot_read+0x527>
  800420216d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202174:	8b 40 04             	mov    0x4(%rax),%eax
  8004202177:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  800420217c:	77 49                	ja     80042021c7 <multiboot_read+0x4ee>
  800420217e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202185:	8b 40 08             	mov    0x8(%rax),%eax
  8004202188:	85 c0                	test   %eax,%eax
  800420218a:	75 3b                	jne    80042021c7 <multiboot_read+0x4ee>
  800420218c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202193:	48 8b 10             	mov    (%rax),%rdx
  8004202196:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420219d:	8b 40 10             	mov    0x10(%rax),%eax
  80042021a0:	89 c0                	mov    %eax,%eax
  80042021a2:	48 c1 e0 20          	shl    $0x20,%rax
  80042021a6:	48 89 c1             	mov    %rax,%rcx
  80042021a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021b0:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021b3:	89 c0                	mov    %eax,%eax
  80042021b5:	48 01 c8             	add    %rcx,%rax
  80042021b8:	48 01 c2             	add    %rax,%rdx
  80042021bb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021c2:	48 89 10             	mov    %rdx,(%rax)
  80042021c5:	eb 39                	jmp    8004202200 <multiboot_read+0x527>
  80042021c7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021ce:	48 8b 10             	mov    (%rax),%rdx
  80042021d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042021db:	89 c0                	mov    %eax,%eax
  80042021dd:	48 c1 e0 20          	shl    $0x20,%rax
  80042021e1:	48 89 c1             	mov    %rax,%rcx
  80042021e4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021eb:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021ee:	89 c0                	mov    %eax,%eax
  80042021f0:	48 01 c8             	add    %rcx,%rax
  80042021f3:	48 01 c2             	add    %rax,%rdx
  80042021f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021fd:	48 89 10             	mov    %rdx,(%rax)
  8004202200:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202204:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202207:	48 63 c8             	movslq %eax,%rcx
  800420220a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202211:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202214:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202219:	f7 e2                	mul    %edx
  800420221b:	89 d0                	mov    %edx,%eax
  800420221d:	c1 e8 04             	shr    $0x4,%eax
  8004202220:	89 c0                	mov    %eax,%eax
  8004202222:	48 39 c1             	cmp    %rax,%rcx
  8004202225:	0f 82 fd fe ff ff    	jb     8004202128 <multiboot_read+0x44f>
  800420222b:	4c 89 e4             	mov    %r12,%rsp
  800420222e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004202232:	5b                   	pop    %rbx
  8004202233:	41 5c                	pop    %r12
  8004202235:	5d                   	pop    %rbp
  8004202236:	c3                   	retq   

0000008004202237 <i386_detect_memory>:
  8004202237:	55                   	push   %rbp
  8004202238:	48 89 e5             	mov    %rsp,%rbp
  800420223b:	48 83 ec 50          	sub    $0x50,%rsp
  800420223f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202246:	00 
  8004202247:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420224e:	00 
  800420224f:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202256:	00 00 00 
  8004202259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202261:	48 8b 00             	mov    (%rax),%rax
  8004202264:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202268:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420226d:	74 2d                	je     800420229c <i386_detect_memory+0x65>
  800420226f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202273:	8b 00                	mov    (%rax),%eax
  8004202275:	83 e0 40             	and    $0x40,%eax
  8004202278:	85 c0                	test   %eax,%eax
  800420227a:	74 20                	je     800420229c <i386_detect_memory+0x65>
  800420227c:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004202280:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202288:	48 89 ce             	mov    %rcx,%rsi
  800420228b:	48 89 c7             	mov    %rax,%rdi
  800420228e:	48 b8 d9 1c 20 04 80 	movabs $0x8004201cd9,%rax
  8004202295:	00 00 00 
  8004202298:	ff d0                	callq  *%rax
  800420229a:	eb 34                	jmp    80042022d0 <i386_detect_memory+0x99>
  800420229c:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022a1:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022a8:	00 00 00 
  80042022ab:	ff d0                	callq  *%rax
  80042022ad:	c1 e0 0a             	shl    $0xa,%eax
  80042022b0:	48 98                	cltq   
  80042022b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022b6:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022bb:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022c2:	00 00 00 
  80042022c5:	ff d0                	callq  *%rax
  80042022c7:	c1 e0 0a             	shl    $0xa,%eax
  80042022ca:	48 98                	cltq   
  80042022cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022d4:	48 85 c0             	test   %rax,%rax
  80042022d7:	75 35                	jne    800420230e <i386_detect_memory+0xd7>
  80042022d9:	48 b9 29 d3 21 04 80 	movabs $0x800421d329,%rcx
  80042022e0:	00 00 00 
  80042022e3:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042022ea:	00 00 00 
  80042022ed:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022f2:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042022f9:	00 00 00 
  80042022fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202301:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202308:	00 00 00 
  800420230b:	41 ff d0             	callq  *%r8
  800420230e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202312:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202316:	48 89 c2             	mov    %rax,%rdx
  8004202319:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  8004202320:	00 00 00 
  8004202323:	48 89 10             	mov    %rdx,(%rax)
  8004202326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420232a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420232e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202332:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202337:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  800420233e:	00 00 00 
  8004202341:	ff d0                	callq  *%rax
  8004202343:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202348:	75 2c                	jne    8004202376 <i386_detect_memory+0x13f>
  800420234a:	bf 34 00 00 00       	mov    $0x34,%edi
  800420234f:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  8004202356:	00 00 00 
  8004202359:	ff d0                	callq  *%rax
  800420235b:	c1 e0 10             	shl    $0x10,%eax
  800420235e:	48 98                	cltq   
  8004202360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202368:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420236e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202376:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420237b:	74 1a                	je     8004202397 <i386_detect_memory+0x160>
  800420237d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202381:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202388:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420238f:	00 00 00 
  8004202392:	48 89 10             	mov    %rdx,(%rax)
  8004202395:	eb 1a                	jmp    80042023b1 <i386_detect_memory+0x17a>
  8004202397:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  800420239e:	00 00 00 
  80042023a1:	48 8b 10             	mov    (%rax),%rdx
  80042023a4:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042023ab:	00 00 00 
  80042023ae:	48 89 10             	mov    %rdx,(%rax)
  80042023b1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042023b8:	00 00 00 
  80042023bb:	48 8b 30             	mov    (%rax),%rsi
  80042023be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023c2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023c6:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ca:	48 89 c1             	mov    %rax,%rcx
  80042023cd:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  80042023d4:	00 00 00 
  80042023d7:	48 8b 00             	mov    (%rax),%rax
  80042023da:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023de:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023e2:	48 89 c2             	mov    %rax,%rdx
  80042023e5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042023ec:	00 00 00 
  80042023ef:	48 8b 00             	mov    (%rax),%rax
  80042023f2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023f6:	48 c1 e8 14          	shr    $0x14,%rax
  80042023fa:	49 89 f0             	mov    %rsi,%r8
  80042023fd:	48 89 c6             	mov    %rax,%rsi
  8004202400:	48 bf 58 d3 21 04 80 	movabs $0x800421d358,%rdi
  8004202407:	00 00 00 
  800420240a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420240f:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202416:	00 00 00 
  8004202419:	41 ff d1             	callq  *%r9
  800420241c:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202423:	00 
  8004202424:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  800420242b:	07 
  800420242c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202430:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202434:	48 c1 e8 14          	shr    $0x14,%rax
  8004202438:	48 89 c1             	mov    %rax,%rcx
  800420243b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420243f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202443:	48 c1 e8 14          	shr    $0x14,%rax
  8004202447:	48 89 c6             	mov    %rax,%rsi
  800420244a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420244e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202452:	49 89 c8             	mov    %rcx,%r8
  8004202455:	48 89 d1             	mov    %rdx,%rcx
  8004202458:	48 89 f2             	mov    %rsi,%rdx
  800420245b:	48 89 c6             	mov    %rax,%rsi
  800420245e:	48 bf a8 d3 21 04 80 	movabs $0x800421d3a8,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202474:	00 00 00 
  8004202477:	41 ff d1             	callq  *%r9
  800420247a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420247e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004202482:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420248b:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202492:	00 00 00 
  8004202495:	48 8b 00             	mov    (%rax),%rax
  8004202498:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420249c:	76 3a                	jbe    80042024d8 <i386_detect_memory+0x2a1>
  800420249e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024a2:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024a9:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042024b0:	00 00 00 
  80042024b3:	48 89 10             	mov    %rdx,(%rax)
  80042024b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ba:	48 89 c6             	mov    %rax,%rsi
  80042024bd:	48 bf 10 d4 21 04 80 	movabs $0x800421d410,%rdi
  80042024c4:	00 00 00 
  80042024c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024cc:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042024d3:	00 00 00 
  80042024d6:	ff d2                	callq  *%rdx
  80042024d8:	c9                   	leaveq 
  80042024d9:	c3                   	retq   

00000080042024da <boot_alloc>:
  80042024da:	55                   	push   %rbp
  80042024db:	48 89 e5             	mov    %rsp,%rbp
  80042024de:	48 83 ec 40          	sub    $0x40,%rsp
  80042024e2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024e5:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  80042024ec:	00 00 00 
  80042024ef:	48 8b 00             	mov    (%rax),%rax
  80042024f2:	48 85 c0             	test   %rax,%rax
  80042024f5:	75 4e                	jne    8004202545 <boot_alloc+0x6b>
  80042024f7:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  80042024fe:	00 
  80042024ff:	48 b8 d0 a5 6d 04 80 	movabs $0x80046da5d0,%rax
  8004202506:	00 00 00 
  8004202509:	48 8b 10             	mov    (%rax),%rdx
  800420250c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202510:	48 01 d0             	add    %rdx,%rax
  8004202513:	48 83 e8 01          	sub    $0x1,%rax
  8004202517:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420251b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420251f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202524:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202528:	48 89 d0             	mov    %rdx,%rax
  800420252b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420252f:	48 29 c2             	sub    %rax,%rdx
  8004202532:	48 89 d0             	mov    %rdx,%rax
  8004202535:	48 89 c2             	mov    %rax,%rdx
  8004202538:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  800420253f:	00 00 00 
  8004202542:	48 89 10             	mov    %rdx,(%rax)
  8004202545:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202548:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  800420254f:	00 00 00 
  8004202552:	48 8b 00             	mov    (%rax),%rax
  8004202555:	48 01 c2             	add    %rax,%rdx
  8004202558:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  800420255f:	00 00 00 
  8004202562:	48 8b 00             	mov    (%rax),%rax
  8004202565:	48 39 c2             	cmp    %rax,%rdx
  8004202568:	72 2f                	jb     8004202599 <boot_alloc+0xbf>
  800420256a:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  8004202571:	00 00 00 
  8004202574:	48 8b 10             	mov    (%rax),%rdx
  8004202577:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420257a:	48 01 c2             	add    %rax,%rdx
  800420257d:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202584:	00 00 00 
  8004202587:	48 8b 00             	mov    (%rax),%rax
  800420258a:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202590:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202594:	48 39 c2             	cmp    %rax,%rdx
  8004202597:	76 2a                	jbe    80042025c3 <boot_alloc+0xe9>
  8004202599:	48 ba 40 d4 21 04 80 	movabs $0x800421d440,%rdx
  80042025a0:	00 00 00 
  80042025a3:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025a8:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042025af:	00 00 00 
  80042025b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042025be:	00 00 00 
  80042025c1:	ff d1                	callq  *%rcx
  80042025c3:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  80042025ca:	00 00 00 
  80042025cd:	48 8b 00             	mov    (%rax),%rax
  80042025d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025d4:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025db:	00 
  80042025dc:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  80042025e3:	00 00 00 
  80042025e6:	48 8b 10             	mov    (%rax),%rdx
  80042025e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025ec:	48 01 d0             	add    %rdx,%rax
  80042025ef:	48 89 c2             	mov    %rax,%rdx
  80042025f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042025f6:	48 01 d0             	add    %rdx,%rax
  80042025f9:	48 83 e8 01          	sub    $0x1,%rax
  80042025fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202605:	ba 00 00 00 00       	mov    $0x0,%edx
  800420260a:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420260e:	48 89 d0             	mov    %rdx,%rax
  8004202611:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202615:	48 29 c2             	sub    %rax,%rdx
  8004202618:	48 89 d0             	mov    %rdx,%rax
  800420261b:	48 89 c2             	mov    %rax,%rdx
  800420261e:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  8004202625:	00 00 00 
  8004202628:	48 89 10             	mov    %rdx,(%rax)
  800420262b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420262f:	c9                   	leaveq 
  8004202630:	c3                   	retq   

0000008004202631 <x64_vm_init>:
  8004202631:	55                   	push   %rbp
  8004202632:	48 89 e5             	mov    %rsp,%rbp
  8004202635:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202639:	48 b8 37 22 20 04 80 	movabs $0x8004202237,%rax
  8004202640:	00 00 00 
  8004202643:	ff d0                	callq  *%rax
  8004202645:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420264a:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202651:	00 00 00 
  8004202654:	ff d0                	callq  *%rax
  8004202656:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202663:	be 00 00 00 00       	mov    $0x0,%esi
  8004202668:	48 89 c7             	mov    %rax,%rdi
  800420266b:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004202672:	00 00 00 
  8004202675:	ff d0                	callq  *%rax
  8004202677:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420267e:	00 00 00 
  8004202681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202685:	48 89 10             	mov    %rdx,(%rax)
  8004202688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420268c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202690:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202697:	00 00 00 
  800420269a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420269e:	77 32                	ja     80042026d2 <x64_vm_init+0xa1>
  80042026a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026a4:	48 89 c1             	mov    %rax,%rcx
  80042026a7:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  80042026ae:	00 00 00 
  80042026b1:	be 18 01 00 00       	mov    $0x118,%esi
  80042026b6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042026bd:	00 00 00 
  80042026c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042026cc:	00 00 00 
  80042026cf:	41 ff d0             	callq  *%r8
  80042026d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026d9:	ff ff ff 
  80042026dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026e0:	48 01 c2             	add    %rax,%rdx
  80042026e3:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  80042026ea:	00 00 00 
  80042026ed:	48 89 10             	mov    %rdx,(%rax)
  80042026f0:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042026f7:	00 00 00 
  80042026fa:	48 8b 00             	mov    (%rax),%rax
  80042026fd:	48 c1 e0 04          	shl    $0x4,%rax
  8004202701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202709:	89 c7                	mov    %eax,%edi
  800420270b:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202712:	00 00 00 
  8004202715:	ff d0                	callq  *%rax
  8004202717:	48 ba 00 a6 6d 04 80 	movabs $0x80046da600,%rdx
  800420271e:	00 00 00 
  8004202721:	48 89 02             	mov    %rax,(%rdx)
  8004202724:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  800420272b:	00 00 00 
  800420272e:	48 8b 00             	mov    (%rax),%rax
  8004202731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202735:	be 00 00 00 00       	mov    $0x0,%esi
  800420273a:	48 89 c7             	mov    %rax,%rdi
  800420273d:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004202744:	00 00 00 
  8004202747:	ff d0                	callq  *%rax
  8004202749:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420274e:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202755:	00 00 00 
  8004202758:	ff d0                	callq  *%rax
  800420275a:	48 ba 58 b2 4d 04 80 	movabs $0x80044db258,%rdx
  8004202761:	00 00 00 
  8004202764:	48 89 02             	mov    %rax,(%rdx)
  8004202767:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420276e:	00 00 00 
  8004202771:	48 8b 00             	mov    (%rax),%rax
  8004202774:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202779:	be 00 00 00 00       	mov    $0x0,%esi
  800420277e:	48 89 c7             	mov    %rax,%rdi
  8004202781:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004202788:	00 00 00 
  800420278b:	ff d0                	callq  *%rax
  800420278d:	48 b8 eb 2b 20 04 80 	movabs $0x8004202beb,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042027a0:	00 00 00 
  80042027a3:	48 8b 00             	mov    (%rax),%rax
  80042027a6:	48 c1 e0 04          	shl    $0x4,%rax
  80042027aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ae:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042027b5:	00 00 00 
  80042027b8:	48 8b 00             	mov    (%rax),%rax
  80042027bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027bf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027c6:	00 00 00 
  80042027c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027cd:	77 32                	ja     8004202801 <x64_vm_init+0x1d0>
  80042027cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027d3:	48 89 c1             	mov    %rax,%rcx
  80042027d6:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  80042027dd:	00 00 00 
  80042027e0:	be 43 01 00 00       	mov    $0x143,%esi
  80042027e5:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042027ec:	00 00 00 
  80042027ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042027fb:	00 00 00 
  80042027fe:	41 ff d0             	callq  *%r8
  8004202801:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202808:	ff ff ff 
  800420280b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420280f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202813:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420281a:	00 00 00 
  800420281d:	48 8b 00             	mov    (%rax),%rax
  8004202820:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202824:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420282a:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202831:	00 00 00 
  8004202834:	48 89 c7             	mov    %rax,%rdi
  8004202837:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420283e:	00 00 00 
  8004202841:	ff d0                	callq  *%rax
  8004202843:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420284a:	00 
  800420284b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420284f:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202855:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420285d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202862:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202866:	48 89 d0             	mov    %rdx,%rax
  8004202869:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420286d:	48 29 c2             	sub    %rax,%rdx
  8004202870:	48 89 d0             	mov    %rdx,%rax
  8004202873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202877:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420287e:	00 00 00 
  8004202881:	48 8b 00             	mov    (%rax),%rax
  8004202884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202888:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420288f:	00 00 00 
  8004202892:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004202896:	77 32                	ja     80042028ca <x64_vm_init+0x299>
  8004202898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420289c:	48 89 c1             	mov    %rax,%rcx
  800420289f:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  80042028a6:	00 00 00 
  80042028a9:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ae:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042028b5:	00 00 00 
  80042028b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042028c4:	00 00 00 
  80042028c7:	41 ff d0             	callq  *%r8
  80042028ca:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028d1:	ff ff ff 
  80042028d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028d8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028dc:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042028e3:	00 00 00 
  80042028e6:	48 8b 00             	mov    (%rax),%rax
  80042028e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028ed:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028f3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042028fa:	00 00 00 
  80042028fd:	48 89 c7             	mov    %rax,%rdi
  8004202900:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202907:	00 00 00 
  800420290a:	ff d0                	callq  *%rax
  800420290c:	48 b8 00 30 22 04 80 	movabs $0x8004223000,%rax
  8004202913:	00 00 00 
  8004202916:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420291a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202921:	00 00 00 
  8004202924:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202928:	77 32                	ja     800420295c <x64_vm_init+0x32b>
  800420292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420292e:	48 89 c1             	mov    %rax,%rcx
  8004202931:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  8004202938:	00 00 00 
  800420293b:	be 62 01 00 00       	mov    $0x162,%esi
  8004202940:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202947:	00 00 00 
  800420294a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420294f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202956:	00 00 00 
  8004202959:	41 ff d0             	callq  *%r8
  800420295c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202963:	ff ff ff 
  8004202966:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420296a:	48 01 c2             	add    %rax,%rdx
  800420296d:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004202974:	00 00 00 
  8004202977:	48 8b 00             	mov    (%rax),%rax
  800420297a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202980:	48 89 d1             	mov    %rdx,%rcx
  8004202983:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202988:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420298f:	00 00 00 
  8004202992:	48 89 c7             	mov    %rax,%rdi
  8004202995:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420299c:	00 00 00 
  800420299f:	ff d0                	callq  *%rax
  80042029a1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042029a8:	00 00 00 
  80042029ab:	48 8b 00             	mov    (%rax),%rax
  80042029ae:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029b2:	48 89 c2             	mov    %rax,%rdx
  80042029b5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042029bc:	00 00 00 
  80042029bf:	48 8b 00             	mov    (%rax),%rax
  80042029c2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029c8:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029cd:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029d4:	00 00 00 
  80042029d7:	48 89 c7             	mov    %rax,%rdi
  80042029da:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  80042029e1:	00 00 00 
  80042029e4:	ff d0                	callq  *%rax
  80042029e6:	48 b8 00 2b 20 04 80 	movabs $0x8004202b00,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042029f6:	48 83 c0 08          	add    $0x8,%rax
  80042029fa:	48 8b 00             	mov    (%rax),%rax
  80042029fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a0b:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a0f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a12:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a15:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202a1c:	00 00 00 
  8004202a1f:	48 8b 00             	mov    (%rax),%rax
  8004202a22:	48 39 c2             	cmp    %rax,%rdx
  8004202a25:	72 32                	jb     8004202a59 <x64_vm_init+0x428>
  8004202a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a2b:	48 89 c1             	mov    %rax,%rcx
  8004202a2e:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004202a35:	00 00 00 
  8004202a38:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a3d:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202a44:	00 00 00 
  8004202a47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a4c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202a53:	00 00 00 
  8004202a56:	41 ff d0             	callq  *%r8
  8004202a59:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a60:	00 00 00 
  8004202a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a67:	48 01 d0             	add    %rdx,%rax
  8004202a6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a72:	48 8b 00             	mov    (%rax),%rax
  8004202a75:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a7b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a83:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a87:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a8a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a8d:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202a94:	00 00 00 
  8004202a97:	48 8b 00             	mov    (%rax),%rax
  8004202a9a:	48 39 c2             	cmp    %rax,%rdx
  8004202a9d:	72 32                	jb     8004202ad1 <x64_vm_init+0x4a0>
  8004202a9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aa3:	48 89 c1             	mov    %rax,%rcx
  8004202aa6:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004202aad:	00 00 00 
  8004202ab0:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ab5:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202abc:	00 00 00 
  8004202abf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202acb:	00 00 00 
  8004202ace:	41 ff d0             	callq  *%r8
  8004202ad1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ad8:	00 00 00 
  8004202adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202adf:	48 01 d0             	add    %rdx,%rax
  8004202ae2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202ae6:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202af7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202afb:	0f 22 d8             	mov    %rax,%cr3
  8004202afe:	c9                   	leaveq 
  8004202aff:	c3                   	retq   

0000008004202b00 <mem_init_mp>:
  8004202b00:	55                   	push   %rbp
  8004202b01:	48 89 e5             	mov    %rsp,%rbp
  8004202b04:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b0f:	e9 cb 00 00 00       	jmpq   8004202bdf <mem_init_mp+0xdf>
  8004202b14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b17:	89 d0                	mov    %edx,%eax
  8004202b19:	01 c0                	add    %eax,%eax
  8004202b1b:	01 d0                	add    %edx,%eax
  8004202b1d:	c1 e0 0f             	shl    $0xf,%eax
  8004202b20:	48 98                	cltq   
  8004202b22:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b29:	00 00 00 
  8004202b2c:	48 29 c2             	sub    %rax,%rdx
  8004202b2f:	48 89 d0             	mov    %rdx,%rax
  8004202b32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b39:	48 98                	cltq   
  8004202b3b:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b3f:	48 89 c2             	mov    %rax,%rdx
  8004202b42:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  8004202b49:	00 00 00 
  8004202b4c:	48 01 d0             	add    %rdx,%rax
  8004202b4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b53:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b5a:	00 00 00 
  8004202b5d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b61:	77 32                	ja     8004202b95 <mem_init_mp+0x95>
  8004202b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b67:	48 89 c1             	mov    %rax,%rcx
  8004202b6a:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  8004202b71:	00 00 00 
  8004202b74:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b79:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202b80:	00 00 00 
  8004202b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b88:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202b8f:	00 00 00 
  8004202b92:	41 ff d0             	callq  *%r8
  8004202b95:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202b9c:	ff ff ff 
  8004202b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ba3:	48 01 c2             	add    %rax,%rdx
  8004202ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202baa:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bb1:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004202bb8:	00 00 00 
  8004202bbb:	48 8b 00             	mov    (%rax),%rax
  8004202bbe:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bc4:	48 89 d1             	mov    %rdx,%rcx
  8004202bc7:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bcc:	48 89 c7             	mov    %rax,%rdi
  8004202bcf:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202bd6:	00 00 00 
  8004202bd9:	ff d0                	callq  *%rax
  8004202bdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202bdf:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202be3:	0f 8e 2b ff ff ff    	jle    8004202b14 <mem_init_mp+0x14>
  8004202be9:	c9                   	leaveq 
  8004202bea:	c3                   	retq   

0000008004202beb <page_init>:
  8004202beb:	55                   	push   %rbp
  8004202bec:	48 89 e5             	mov    %rsp,%rbp
  8004202bef:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bf3:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202bf8:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202bff:	00 00 00 
  8004202c02:	ff d0                	callq  *%rax
  8004202c04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c0f:	00 
  8004202c10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c17:	00 
  8004202c18:	e9 65 02 00 00       	jmpq   8004202e82 <page_init+0x297>
  8004202c1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c29:	74 1a                	je     8004202c45 <page_init+0x5a>
  8004202c2b:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c3c:	73 07                	jae    8004202c45 <page_init+0x5a>
  8004202c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c45:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c4a:	75 07                	jne    8004202c53 <page_init+0x68>
  8004202c4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c5b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c62:	00 00 00 
  8004202c65:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c69:	77 32                	ja     8004202c9d <page_init+0xb2>
  8004202c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c6f:	48 89 c1             	mov    %rax,%rcx
  8004202c72:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  8004202c79:	00 00 00 
  8004202c7c:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c81:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202c88:	00 00 00 
  8004202c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202c97:	00 00 00 
  8004202c9a:	41 ff d0             	callq  *%r8
  8004202c9d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ca4:	ff ff ff 
  8004202ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cab:	48 01 d0             	add    %rdx,%rax
  8004202cae:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cb6:	77 07                	ja     8004202cbf <page_init+0xd4>
  8004202cb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cc3:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cc9:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202ccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cd1:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202cd8:	00 00 00 
  8004202cdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ce3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ce7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202ced:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202cf4:	00 00 00 
  8004202cf7:	48 8b 00             	mov    (%rax),%rax
  8004202cfa:	48 39 c2             	cmp    %rax,%rdx
  8004202cfd:	72 32                	jb     8004202d31 <page_init+0x146>
  8004202cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d03:	48 89 c1             	mov    %rax,%rcx
  8004202d06:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004202d0d:	00 00 00 
  8004202d10:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d15:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202d1c:	00 00 00 
  8004202d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202d2b:	00 00 00 
  8004202d2e:	41 ff d0             	callq  *%r8
  8004202d31:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d38:	00 00 00 
  8004202d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d3f:	48 01 d0             	add    %rdx,%rax
  8004202d42:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d46:	0f 87 84 00 00 00    	ja     8004202dd0 <page_init+0x1e5>
  8004202d4c:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d53:	00 00 00 
  8004202d56:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d64:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d68:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d6b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d6e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202d75:	00 00 00 
  8004202d78:	48 8b 00             	mov    (%rax),%rax
  8004202d7b:	48 39 c2             	cmp    %rax,%rdx
  8004202d7e:	72 32                	jb     8004202db2 <page_init+0x1c7>
  8004202d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d84:	48 89 c1             	mov    %rax,%rcx
  8004202d87:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004202d8e:	00 00 00 
  8004202d91:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d96:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202d9d:	00 00 00 
  8004202da0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202da5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202dac:	00 00 00 
  8004202daf:	41 ff d0             	callq  *%r8
  8004202db2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202db9:	00 00 00 
  8004202dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dc0:	48 01 d0             	add    %rdx,%rax
  8004202dc3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dc7:	76 07                	jbe    8004202dd0 <page_init+0x1e5>
  8004202dc9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dd0:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202dd7:	00 00 00 
  8004202dda:	48 8b 00             	mov    (%rax),%rax
  8004202ddd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202de1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202de5:	48 01 c2             	add    %rax,%rdx
  8004202de8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202deb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202def:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202df6:	00 00 00 
  8004202df9:	48 8b 00             	mov    (%rax),%rax
  8004202dfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e00:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e12:	75 69                	jne    8004202e7d <page_init+0x292>
  8004202e14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e19:	74 21                	je     8004202e3c <page_init+0x251>
  8004202e1b:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202e22:	00 00 00 
  8004202e25:	48 8b 00             	mov    (%rax),%rax
  8004202e28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e2c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e30:	48 01 c2             	add    %rax,%rdx
  8004202e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e37:	48 89 10             	mov    %rdx,(%rax)
  8004202e3a:	eb 25                	jmp    8004202e61 <page_init+0x276>
  8004202e3c:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202e43:	00 00 00 
  8004202e46:	48 8b 00             	mov    (%rax),%rax
  8004202e49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e51:	48 01 c2             	add    %rax,%rdx
  8004202e54:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202e5b:	00 00 00 
  8004202e5e:	48 89 10             	mov    %rdx,(%rax)
  8004202e61:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202e68:	00 00 00 
  8004202e6b:	48 8b 00             	mov    (%rax),%rax
  8004202e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e72:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e76:	48 01 d0             	add    %rdx,%rax
  8004202e79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e7d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e82:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202e89:	00 00 00 
  8004202e8c:	48 8b 00             	mov    (%rax),%rax
  8004202e8f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e93:	0f 82 84 fd ff ff    	jb     8004202c1d <page_init+0x32>
  8004202e99:	c9                   	leaveq 
  8004202e9a:	c3                   	retq   

0000008004202e9b <page_alloc>:
  8004202e9b:	55                   	push   %rbp
  8004202e9c:	48 89 e5             	mov    %rsp,%rbp
  8004202e9f:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ea3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202ea6:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202ead:	00 00 00 
  8004202eb0:	48 8b 00             	mov    (%rax),%rax
  8004202eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202eb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ebc:	74 5e                	je     8004202f1c <page_alloc+0x81>
  8004202ebe:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202ec5:	00 00 00 
  8004202ec8:	48 8b 00             	mov    (%rax),%rax
  8004202ecb:	48 8b 10             	mov    (%rax),%rdx
  8004202ece:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202ed5:	00 00 00 
  8004202ed8:	48 89 10             	mov    %rdx,(%rax)
  8004202edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202edf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ee6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ee9:	83 e0 01             	and    $0x1,%eax
  8004202eec:	85 c0                	test   %eax,%eax
  8004202eee:	74 2c                	je     8004202f1c <page_alloc+0x81>
  8004202ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ef4:	48 89 c7             	mov    %rax,%rdi
  8004202ef7:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004202efe:	00 00 00 
  8004202f01:	ff d0                	callq  *%rax
  8004202f03:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f08:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f0d:	48 89 c7             	mov    %rax,%rdi
  8004202f10:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004202f17:	00 00 00 
  8004202f1a:	ff d0                	callq  *%rax
  8004202f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f20:	c9                   	leaveq 
  8004202f21:	c3                   	retq   

0000008004202f22 <page_initpp>:
  8004202f22:	55                   	push   %rbp
  8004202f23:	48 89 e5             	mov    %rsp,%rbp
  8004202f26:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f32:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f37:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f3c:	48 89 c7             	mov    %rax,%rdi
  8004202f3f:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004202f46:	00 00 00 
  8004202f49:	ff d0                	callq  *%rax
  8004202f4b:	c9                   	leaveq 
  8004202f4c:	c3                   	retq   

0000008004202f4d <page_free>:
  8004202f4d:	55                   	push   %rbp
  8004202f4e:	48 89 e5             	mov    %rsp,%rbp
  8004202f51:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f61:	66 85 c0             	test   %ax,%ax
  8004202f64:	75 0c                	jne    8004202f72 <page_free+0x25>
  8004202f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 85 c0             	test   %rax,%rax
  8004202f70:	74 2c                	je     8004202f9e <page_free+0x51>
  8004202f72:	48 ba 90 d4 21 04 80 	movabs $0x800421d490,%rdx
  8004202f79:	00 00 00 
  8004202f7c:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f81:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004202f88:	00 00 00 
  8004202f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f90:	48 b9 00 06 20 04 80 	movabs $0x8004200600,%rcx
  8004202f97:	00 00 00 
  8004202f9a:	ff d1                	callq  *%rcx
  8004202f9c:	eb 2f                	jmp    8004202fcd <page_free+0x80>
  8004202f9e:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202fa5:	00 00 00 
  8004202fa8:	48 8b 10             	mov    (%rax),%rdx
  8004202fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202faf:	48 89 10             	mov    %rdx,(%rax)
  8004202fb2:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202fb9:	00 00 00 
  8004202fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fc0:	48 89 10             	mov    %rdx,(%rax)
  8004202fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fc7:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fcd:	c9                   	leaveq 
  8004202fce:	c3                   	retq   

0000008004202fcf <page_decref>:
  8004202fcf:	55                   	push   %rbp
  8004202fd0:	48 89 e5             	mov    %rsp,%rbp
  8004202fd3:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fdf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fe3:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202ff6:	66 85 c0             	test   %ax,%ax
  8004202ff9:	75 13                	jne    800420300e <page_decref+0x3f>
  8004202ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fff:	48 89 c7             	mov    %rax,%rdi
  8004203002:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004203009:	00 00 00 
  800420300c:	ff d0                	callq  *%rax
  800420300e:	c9                   	leaveq 
  800420300f:	c3                   	retq   

0000008004203010 <pml4e_walk>:
  8004203010:	55                   	push   %rbp
  8004203011:	48 89 e5             	mov    %rsp,%rbp
  8004203014:	53                   	push   %rbx
  8004203015:	48 83 ec 68          	sub    $0x68,%rsp
  8004203019:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420301d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203021:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203024:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203029:	0f 84 4e 02 00 00    	je     800420327d <pml4e_walk+0x26d>
  800420302f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203033:	48 c1 e8 27          	shr    $0x27,%rax
  8004203037:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420303c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203043:	00 
  8004203044:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203048:	48 01 d0             	add    %rdx,%rax
  800420304b:	48 8b 00             	mov    (%rax),%rax
  800420304e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203056:	83 e0 01             	and    $0x1,%eax
  8004203059:	48 85 c0             	test   %rax,%rax
  800420305c:	0f 85 7f 01 00 00    	jne    80042031e1 <pml4e_walk+0x1d1>
  8004203062:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203066:	0f 84 75 01 00 00    	je     80042031e1 <pml4e_walk+0x1d1>
  800420306c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203073:	00 
  8004203074:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203079:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203080:	00 00 00 
  8004203083:	ff d0                	callq  *%rax
  8004203085:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203089:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420308e:	0f 84 43 01 00 00    	je     80042031d7 <pml4e_walk+0x1c7>
  8004203094:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203098:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420309c:	8d 50 01             	lea    0x1(%rax),%edx
  800420309f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ab:	48 c1 e8 27          	shr    $0x27,%rax
  80042030af:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030bb:	00 
  80042030bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030c0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030c8:	48 89 c7             	mov    %rax,%rdi
  80042030cb:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042030d2:	00 00 00 
  80042030d5:	ff d0                	callq  *%rax
  80042030d7:	48 83 c8 07          	or     $0x7,%rax
  80042030db:	48 89 03             	mov    %rax,(%rbx)
  80042030de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030e2:	48 c1 e8 27          	shr    $0x27,%rax
  80042030e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030f2:	00 
  80042030f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030f7:	48 01 d0             	add    %rdx,%rax
  80042030fa:	48 8b 00             	mov    (%rax),%rax
  80042030fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203103:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420310b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420310f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203112:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203115:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420311c:	00 00 00 
  800420311f:	48 8b 00             	mov    (%rax),%rax
  8004203122:	48 39 c2             	cmp    %rax,%rdx
  8004203125:	72 32                	jb     8004203159 <pml4e_walk+0x149>
  8004203127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420312b:	48 89 c1             	mov    %rax,%rcx
  800420312e:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004203135:	00 00 00 
  8004203138:	be 79 02 00 00       	mov    $0x279,%esi
  800420313d:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203144:	00 00 00 
  8004203147:	b8 00 00 00 00       	mov    $0x0,%eax
  800420314c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203153:	00 00 00 
  8004203156:	41 ff d0             	callq  *%r8
  8004203159:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203160:	00 00 00 
  8004203163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203167:	48 01 d0             	add    %rdx,%rax
  800420316a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420316d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203171:	48 89 ce             	mov    %rcx,%rsi
  8004203174:	48 89 c7             	mov    %rax,%rdi
  8004203177:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  800420317e:	00 00 00 
  8004203181:	ff d0                	callq  *%rax
  8004203183:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203187:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420318c:	74 09                	je     8004203197 <pml4e_walk+0x187>
  800420318e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203192:	e9 eb 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  8004203197:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420319b:	48 c1 e8 27          	shr    $0x27,%rax
  800420319f:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031ab:	00 
  80042031ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031b0:	48 01 d0             	add    %rdx,%rax
  80042031b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031be:	48 89 c7             	mov    %rax,%rdi
  80042031c1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042031c8:	00 00 00 
  80042031cb:	ff d0                	callq  *%rax
  80042031cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031d2:	e9 ab 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031dc:	e9 a1 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031e5:	83 e0 01             	and    $0x1,%eax
  80042031e8:	48 85 c0             	test   %rax,%rax
  80042031eb:	0f 84 8c 00 00 00    	je     800420327d <pml4e_walk+0x26d>
  80042031f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042031fb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042031ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203203:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203207:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420320a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420320d:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203214:	00 00 00 
  8004203217:	48 8b 00             	mov    (%rax),%rax
  800420321a:	48 39 c2             	cmp    %rax,%rdx
  800420321d:	72 32                	jb     8004203251 <pml4e_walk+0x241>
  800420321f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203223:	48 89 c1             	mov    %rax,%rcx
  8004203226:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  800420322d:	00 00 00 
  8004203230:	be 83 02 00 00       	mov    $0x283,%esi
  8004203235:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420323c:	00 00 00 
  800420323f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203244:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420324b:	00 00 00 
  800420324e:	41 ff d0             	callq  *%r8
  8004203251:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203258:	00 00 00 
  800420325b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420325f:	48 01 d0             	add    %rdx,%rax
  8004203262:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203265:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203269:	48 89 ce             	mov    %rcx,%rsi
  800420326c:	48 89 c7             	mov    %rax,%rdi
  800420326f:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  8004203276:	00 00 00 
  8004203279:	ff d0                	callq  *%rax
  800420327b:	eb 05                	jmp    8004203282 <pml4e_walk+0x272>
  800420327d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203282:	48 83 c4 68          	add    $0x68,%rsp
  8004203286:	5b                   	pop    %rbx
  8004203287:	5d                   	pop    %rbp
  8004203288:	c3                   	retq   

0000008004203289 <pdpe_walk>:
  8004203289:	55                   	push   %rbp
  800420328a:	48 89 e5             	mov    %rsp,%rbp
  800420328d:	53                   	push   %rbx
  800420328e:	48 83 ec 68          	sub    $0x68,%rsp
  8004203292:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203296:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420329a:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800420329d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032a2:	0f 84 4e 02 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  80042032a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032ac:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032b0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032bc:	00 
  80042032bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032c1:	48 01 d0             	add    %rdx,%rax
  80042032c4:	48 8b 00             	mov    (%rax),%rax
  80042032c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032cf:	83 e0 01             	and    $0x1,%eax
  80042032d2:	48 85 c0             	test   %rax,%rax
  80042032d5:	0f 85 7f 01 00 00    	jne    800420345a <pdpe_walk+0x1d1>
  80042032db:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032df:	0f 84 75 01 00 00    	je     800420345a <pdpe_walk+0x1d1>
  80042032e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032ec:	00 
  80042032ed:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032f2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042032f9:	00 00 00 
  80042032fc:	ff d0                	callq  *%rax
  80042032fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203302:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203307:	0f 84 43 01 00 00    	je     8004203450 <pdpe_walk+0x1c7>
  800420330d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203311:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203315:	8d 50 01             	lea    0x1(%rax),%edx
  8004203318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203320:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203324:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203328:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420332d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203334:	00 
  8004203335:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420333d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203341:	48 89 c7             	mov    %rax,%rdi
  8004203344:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420334b:	00 00 00 
  800420334e:	ff d0                	callq  *%rax
  8004203350:	48 83 c8 07          	or     $0x7,%rax
  8004203354:	48 89 03             	mov    %rax,(%rbx)
  8004203357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420335b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420335f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203364:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420336b:	00 
  800420336c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203370:	48 01 d0             	add    %rdx,%rax
  8004203373:	48 8b 00             	mov    (%rax),%rax
  8004203376:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420337c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203384:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203388:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420338b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420338e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203395:	00 00 00 
  8004203398:	48 8b 00             	mov    (%rax),%rax
  800420339b:	48 39 c2             	cmp    %rax,%rdx
  800420339e:	72 32                	jb     80042033d2 <pdpe_walk+0x149>
  80042033a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033a4:	48 89 c1             	mov    %rax,%rcx
  80042033a7:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042033ae:	00 00 00 
  80042033b1:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033b6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042033bd:	00 00 00 
  80042033c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042033cc:	00 00 00 
  80042033cf:	41 ff d0             	callq  *%r8
  80042033d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033d9:	00 00 00 
  80042033dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033e0:	48 01 d0             	add    %rdx,%rax
  80042033e3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033e6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ea:	48 89 ce             	mov    %rcx,%rsi
  80042033ed:	48 89 c7             	mov    %rax,%rdi
  80042033f0:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042033f7:	00 00 00 
  80042033fa:	ff d0                	callq  *%rax
  80042033fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203400:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203405:	74 09                	je     8004203410 <pdpe_walk+0x187>
  8004203407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420340b:	e9 eb 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203410:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203414:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203418:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420341d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203424:	00 
  8004203425:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203429:	48 01 d0             	add    %rdx,%rax
  800420342c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203437:	48 89 c7             	mov    %rax,%rdi
  800420343a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203441:	00 00 00 
  8004203444:	ff d0                	callq  *%rax
  8004203446:	b8 00 00 00 00       	mov    $0x0,%eax
  800420344b:	e9 ab 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203450:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203455:	e9 a1 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  800420345a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420345e:	83 e0 01             	and    $0x1,%eax
  8004203461:	48 85 c0             	test   %rax,%rax
  8004203464:	0f 84 8c 00 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  800420346a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203474:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420347c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203480:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203483:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203486:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420348d:	00 00 00 
  8004203490:	48 8b 00             	mov    (%rax),%rax
  8004203493:	48 39 c2             	cmp    %rax,%rdx
  8004203496:	72 32                	jb     80042034ca <pdpe_walk+0x241>
  8004203498:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420349c:	48 89 c1             	mov    %rax,%rcx
  800420349f:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042034a6:	00 00 00 
  80042034a9:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ae:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042034b5:	00 00 00 
  80042034b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042034c4:	00 00 00 
  80042034c7:	41 ff d0             	callq  *%r8
  80042034ca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034d1:	00 00 00 
  80042034d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034d8:	48 01 d0             	add    %rdx,%rax
  80042034db:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034de:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034e2:	48 89 ce             	mov    %rcx,%rsi
  80042034e5:	48 89 c7             	mov    %rax,%rdi
  80042034e8:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042034ef:	00 00 00 
  80042034f2:	ff d0                	callq  *%rax
  80042034f4:	eb 05                	jmp    80042034fb <pdpe_walk+0x272>
  80042034f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034fb:	48 83 c4 68          	add    $0x68,%rsp
  80042034ff:	5b                   	pop    %rbx
  8004203500:	5d                   	pop    %rbp
  8004203501:	c3                   	retq   

0000008004203502 <pgdir_walk>:
  8004203502:	55                   	push   %rbp
  8004203503:	48 89 e5             	mov    %rsp,%rbp
  8004203506:	53                   	push   %rbx
  8004203507:	48 83 ec 58          	sub    $0x58,%rsp
  800420350b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420350f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203513:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203516:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420351b:	0f 84 fd 01 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203521:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203525:	48 c1 e8 15          	shr    $0x15,%rax
  8004203529:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420352e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203535:	00 
  8004203536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420353a:	48 01 d0             	add    %rdx,%rax
  800420353d:	48 8b 00             	mov    (%rax),%rax
  8004203540:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203548:	83 e0 01             	and    $0x1,%eax
  800420354b:	48 85 c0             	test   %rax,%rax
  800420354e:	0f 85 2f 01 00 00    	jne    8004203683 <pgdir_walk+0x181>
  8004203554:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203558:	0f 84 25 01 00 00    	je     8004203683 <pgdir_walk+0x181>
  800420355e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203565:	00 
  8004203566:	bf 01 00 00 00       	mov    $0x1,%edi
  800420356b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203572:	00 00 00 
  8004203575:	ff d0                	callq  *%rax
  8004203577:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420357b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203580:	0f 84 f3 00 00 00    	je     8004203679 <pgdir_walk+0x177>
  8004203586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420358a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420358e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203595:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203599:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420359d:	48 c1 e8 15          	shr    $0x15,%rax
  80042035a1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035ad:	00 
  80042035ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035b2:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035ba:	48 89 c7             	mov    %rax,%rdi
  80042035bd:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042035c4:	00 00 00 
  80042035c7:	ff d0                	callq  *%rax
  80042035c9:	48 83 c8 07          	or     $0x7,%rax
  80042035cd:	48 89 03             	mov    %rax,(%rbx)
  80042035d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035d8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035e4:	00 
  80042035e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ed:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035f2:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  80042035f9:	00 
  80042035fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035fe:	48 01 c8             	add    %rcx,%rax
  8004203601:	48 8b 00             	mov    (%rax),%rax
  8004203604:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420360a:	48 01 d0             	add    %rdx,%rax
  800420360d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203615:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203619:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420361c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420361f:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203626:	00 00 00 
  8004203629:	48 8b 00             	mov    (%rax),%rax
  800420362c:	48 39 c2             	cmp    %rax,%rdx
  800420362f:	72 32                	jb     8004203663 <pgdir_walk+0x161>
  8004203631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203635:	48 89 c1             	mov    %rax,%rcx
  8004203638:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  800420363f:	00 00 00 
  8004203642:	be be 02 00 00       	mov    $0x2be,%esi
  8004203647:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420364e:	00 00 00 
  8004203651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203656:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420365d:	00 00 00 
  8004203660:	41 ff d0             	callq  *%r8
  8004203663:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420366a:	00 00 00 
  800420366d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203671:	48 01 d0             	add    %rdx,%rax
  8004203674:	e9 aa 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203679:	b8 00 00 00 00       	mov    $0x0,%eax
  800420367e:	e9 a0 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203687:	83 e0 01             	and    $0x1,%eax
  800420368a:	48 85 c0             	test   %rax,%rax
  800420368d:	0f 84 8b 00 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203693:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203697:	48 c1 e8 0c          	shr    $0xc,%rax
  800420369b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036a7:	00 
  80042036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036b2:	48 01 d0             	add    %rdx,%rax
  80042036b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036c4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036c7:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042036ce:	00 00 00 
  80042036d1:	48 8b 00             	mov    (%rax),%rax
  80042036d4:	48 39 c2             	cmp    %rax,%rdx
  80042036d7:	72 32                	jb     800420370b <pgdir_walk+0x209>
  80042036d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036dd:	48 89 c1             	mov    %rax,%rcx
  80042036e0:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042036e7:	00 00 00 
  80042036ea:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036ef:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042036f6:	00 00 00 
  80042036f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203705:	00 00 00 
  8004203708:	41 ff d0             	callq  *%r8
  800420370b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203712:	00 00 00 
  8004203715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203719:	48 01 d0             	add    %rdx,%rax
  800420371c:	eb 05                	jmp    8004203723 <pgdir_walk+0x221>
  800420371e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203723:	48 83 c4 58          	add    $0x58,%rsp
  8004203727:	5b                   	pop    %rbx
  8004203728:	5d                   	pop    %rbp
  8004203729:	c3                   	retq   

000000800420372a <boot_map_region>:
  800420372a:	55                   	push   %rbp
  800420372b:	48 89 e5             	mov    %rsp,%rbp
  800420372e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203732:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203736:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420373a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420373e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203742:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420374d:	00 
  800420374e:	e9 aa 02 00 00       	jmpq   80042039fd <boot_map_region+0x2d3>
  8004203753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203757:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420375b:	48 01 d0             	add    %rdx,%rax
  800420375e:	48 89 c1             	mov    %rax,%rcx
  8004203761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203765:	ba 01 00 00 00       	mov    $0x1,%edx
  800420376a:	48 89 ce             	mov    %rcx,%rsi
  800420376d:	48 89 c7             	mov    %rax,%rdi
  8004203770:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203777:	00 00 00 
  800420377a:	ff d0                	callq  *%rax
  800420377c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203784:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203788:	48 01 d0             	add    %rdx,%rax
  800420378b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420378f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004203794:	74 23                	je     80042037b9 <boot_map_region+0x8f>
  8004203796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420379a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037a0:	48 89 c2             	mov    %rax,%rdx
  80042037a3:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037a6:	48 98                	cltq   
  80042037a8:	48 09 d0             	or     %rdx,%rax
  80042037ab:	48 83 c8 01          	or     $0x1,%rax
  80042037af:	48 89 c2             	mov    %rax,%rdx
  80042037b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037b6:	48 89 10             	mov    %rdx,(%rax)
  80042037b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037c1:	48 01 d0             	add    %rdx,%rax
  80042037c4:	48 c1 e8 27          	shr    $0x27,%rax
  80042037c8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037d4:	00 
  80042037d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037e0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037e4:	48 01 ca             	add    %rcx,%rdx
  80042037e7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037eb:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037f1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042037f8:	00 
  80042037f9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042037fd:	48 01 ca             	add    %rcx,%rdx
  8004203800:	48 8b 0a             	mov    (%rdx),%rcx
  8004203803:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203806:	48 63 d2             	movslq %edx,%rdx
  8004203809:	48 09 ca             	or     %rcx,%rdx
  800420380c:	48 83 ca 01          	or     $0x1,%rdx
  8004203810:	48 89 10             	mov    %rdx,(%rax)
  8004203813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203817:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420381b:	48 01 d0             	add    %rdx,%rax
  800420381e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203822:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203827:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420382e:	00 
  800420382f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203833:	48 01 d0             	add    %rdx,%rax
  8004203836:	48 8b 00             	mov    (%rax),%rax
  8004203839:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420383f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203847:	48 c1 e8 0c          	shr    $0xc,%rax
  800420384b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420384e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203851:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203858:	00 00 00 
  800420385b:	48 8b 00             	mov    (%rax),%rax
  800420385e:	48 39 c2             	cmp    %rax,%rdx
  8004203861:	72 32                	jb     8004203895 <boot_map_region+0x16b>
  8004203863:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203867:	48 89 c1             	mov    %rax,%rcx
  800420386a:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004203871:	00 00 00 
  8004203874:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203879:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203880:	00 00 00 
  8004203883:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203888:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420388f:	00 00 00 
  8004203892:	41 ff d0             	callq  *%r8
  8004203895:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420389c:	00 00 00 
  800420389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a3:	48 01 d0             	add    %rdx,%rax
  80042038a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038b2:	48 01 d0             	add    %rdx,%rax
  80042038b5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038be:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038c5:	00 
  80042038c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038ca:	48 01 d0             	add    %rdx,%rax
  80042038cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038d1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038d5:	48 01 ca             	add    %rcx,%rdx
  80042038d8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038dc:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038e2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038e9:	00 
  80042038ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038ee:	48 01 ca             	add    %rcx,%rdx
  80042038f1:	48 8b 0a             	mov    (%rdx),%rcx
  80042038f4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042038f7:	48 63 d2             	movslq %edx,%rdx
  80042038fa:	48 09 ca             	or     %rcx,%rdx
  80042038fd:	48 83 ca 01          	or     $0x1,%rdx
  8004203901:	48 89 10             	mov    %rdx,(%rax)
  8004203904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420390c:	48 01 d0             	add    %rdx,%rax
  800420390f:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203913:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420391f:	00 
  8004203920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203924:	48 01 d0             	add    %rdx,%rax
  8004203927:	48 8b 00             	mov    (%rax),%rax
  800420392a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203930:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203938:	48 c1 e8 0c          	shr    $0xc,%rax
  800420393c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420393f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203942:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203949:	00 00 00 
  800420394c:	48 8b 00             	mov    (%rax),%rax
  800420394f:	48 39 c2             	cmp    %rax,%rdx
  8004203952:	72 32                	jb     8004203986 <boot_map_region+0x25c>
  8004203954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203958:	48 89 c1             	mov    %rax,%rcx
  800420395b:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004203962:	00 00 00 
  8004203965:	be e8 02 00 00       	mov    $0x2e8,%esi
  800420396a:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203971:	00 00 00 
  8004203974:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203979:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203980:	00 00 00 
  8004203983:	41 ff d0             	callq  *%r8
  8004203986:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420398d:	00 00 00 
  8004203990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203994:	48 01 d0             	add    %rdx,%rax
  8004203997:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420399f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039a3:	48 01 d0             	add    %rdx,%rax
  80042039a6:	48 c1 e8 15          	shr    $0x15,%rax
  80042039aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039b6:	00 
  80042039b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039bb:	48 01 d0             	add    %rdx,%rax
  80042039be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039c2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039c6:	48 01 ca             	add    %rcx,%rdx
  80042039c9:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039cd:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039d3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039da:	00 
  80042039db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039df:	48 01 ca             	add    %rcx,%rdx
  80042039e2:	48 8b 0a             	mov    (%rdx),%rcx
  80042039e5:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039e8:	48 63 d2             	movslq %edx,%rdx
  80042039eb:	48 09 ca             	or     %rcx,%rdx
  80042039ee:	48 83 ca 01          	or     $0x1,%rdx
  80042039f2:	48 89 10             	mov    %rdx,(%rax)
  80042039f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042039fc:	00 
  80042039fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a01:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a05:	0f 82 48 fd ff ff    	jb     8004203753 <boot_map_region+0x29>
  8004203a0b:	c9                   	leaveq 
  8004203a0c:	c3                   	retq   

0000008004203a0d <page_insert>:
  8004203a0d:	55                   	push   %rbp
  8004203a0e:	48 89 e5             	mov    %rsp,%rbp
  8004203a11:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a19:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a1d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a21:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a29:	0f 84 47 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a2f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a34:	0f 84 3c 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a42:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a47:	48 89 ce             	mov    %rcx,%rsi
  8004203a4a:	48 89 c7             	mov    %rax,%rdi
  8004203a4d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203a54:	00 00 00 
  8004203a57:	ff d0                	callq  *%rax
  8004203a59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a62:	0f 84 07 03 00 00    	je     8004203d6f <page_insert+0x362>
  8004203a68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a6c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a70:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a7c:	00 
  8004203a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a81:	48 01 d0             	add    %rdx,%rax
  8004203a84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a88:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a8c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a92:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a99:	00 
  8004203a9a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203a9e:	48 01 ca             	add    %rcx,%rdx
  8004203aa1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203aa4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203aa7:	80 e6 f1             	and    $0xf1,%dh
  8004203aaa:	48 63 d2             	movslq %edx,%rdx
  8004203aad:	48 09 ca             	or     %rcx,%rdx
  8004203ab0:	48 89 10             	mov    %rdx,(%rax)
  8004203ab3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ab7:	48 c1 e8 27          	shr    $0x27,%rax
  8004203abb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ac0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ac7:	00 
  8004203ac8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203acc:	48 01 d0             	add    %rdx,%rax
  8004203acf:	48 8b 00             	mov    (%rax),%rax
  8004203ad2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ad8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ae0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203ae4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203ae7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203aea:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203af1:	00 00 00 
  8004203af4:	48 8b 00             	mov    (%rax),%rax
  8004203af7:	48 39 c2             	cmp    %rax,%rdx
  8004203afa:	72 32                	jb     8004203b2e <page_insert+0x121>
  8004203afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b00:	48 89 c1             	mov    %rax,%rcx
  8004203b03:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004203b0a:	00 00 00 
  8004203b0d:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b12:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203b19:	00 00 00 
  8004203b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203b28:	00 00 00 
  8004203b2b:	41 ff d0             	callq  *%r8
  8004203b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b35:	00 00 00 
  8004203b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b3c:	48 01 d0             	add    %rdx,%rax
  8004203b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b57:	00 
  8004203b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b5c:	48 01 d0             	add    %rdx,%rax
  8004203b5f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b63:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b67:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b6d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b74:	00 
  8004203b75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b79:	48 01 ca             	add    %rcx,%rdx
  8004203b7c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b7f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b82:	80 e6 f1             	and    $0xf1,%dh
  8004203b85:	48 63 d2             	movslq %edx,%rdx
  8004203b88:	48 09 ca             	or     %rcx,%rdx
  8004203b8b:	48 89 10             	mov    %rdx,(%rax)
  8004203b8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b92:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b96:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ba2:	00 
  8004203ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ba7:	48 01 d0             	add    %rdx,%rax
  8004203baa:	48 8b 00             	mov    (%rax),%rax
  8004203bad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bbb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bbf:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bc2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bc5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203bcc:	00 00 00 
  8004203bcf:	48 8b 00             	mov    (%rax),%rax
  8004203bd2:	48 39 c2             	cmp    %rax,%rdx
  8004203bd5:	72 32                	jb     8004203c09 <page_insert+0x1fc>
  8004203bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bdb:	48 89 c1             	mov    %rax,%rcx
  8004203bde:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004203be5:	00 00 00 
  8004203be8:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bed:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203bf4:	00 00 00 
  8004203bf7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bfc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203c03:	00 00 00 
  8004203c06:	41 ff d0             	callq  *%r8
  8004203c09:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c10:	00 00 00 
  8004203c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c17:	48 01 d0             	add    %rdx,%rax
  8004203c1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c22:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c26:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c32:	00 
  8004203c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c37:	48 01 d0             	add    %rdx,%rax
  8004203c3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c3e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c42:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c48:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c4f:	00 
  8004203c50:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c54:	48 01 ca             	add    %rcx,%rdx
  8004203c57:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c5a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c5d:	80 e6 f1             	and    $0xf1,%dh
  8004203c60:	48 63 d2             	movslq %edx,%rdx
  8004203c63:	48 09 ca             	or     %rcx,%rdx
  8004203c66:	48 89 10             	mov    %rdx,(%rax)
  8004203c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c6d:	48 8b 00             	mov    (%rax),%rax
  8004203c70:	83 e0 01             	and    $0x1,%eax
  8004203c73:	48 85 c0             	test   %rax,%rax
  8004203c76:	74 70                	je     8004203ce8 <page_insert+0x2db>
  8004203c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c7c:	48 89 c7             	mov    %rax,%rdi
  8004203c7f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203c86:	00 00 00 
  8004203c89:	ff d0                	callq  *%rax
  8004203c8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c8f:	48 8b 12             	mov    (%rdx),%rdx
  8004203c92:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203c99:	48 39 d0             	cmp    %rdx,%rax
  8004203c9c:	75 4a                	jne    8004203ce8 <page_insert+0x2db>
  8004203c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ca2:	48 8b 00             	mov    (%rax),%rax
  8004203ca5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cab:	48 89 c2             	mov    %rax,%rdx
  8004203cae:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cb1:	48 98                	cltq   
  8004203cb3:	48 09 d0             	or     %rdx,%rax
  8004203cb6:	48 83 c8 01          	or     $0x1,%rax
  8004203cba:	48 89 c2             	mov    %rax,%rdx
  8004203cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cc1:	48 89 10             	mov    %rdx,(%rax)
  8004203cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ccc:	48 89 d6             	mov    %rdx,%rsi
  8004203ccf:	48 89 c7             	mov    %rax,%rdi
  8004203cd2:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203cd9:	00 00 00 
  8004203cdc:	ff d0                	callq  *%rax
  8004203cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ce3:	e9 93 00 00 00       	jmpq   8004203d7b <page_insert+0x36e>
  8004203ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cec:	48 8b 00             	mov    (%rax),%rax
  8004203cef:	83 e0 01             	and    $0x1,%eax
  8004203cf2:	48 85 c0             	test   %rax,%rax
  8004203cf5:	74 1a                	je     8004203d11 <page_insert+0x304>
  8004203cf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cff:	48 89 d6             	mov    %rdx,%rsi
  8004203d02:	48 89 c7             	mov    %rax,%rdi
  8004203d05:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004203d0c:	00 00 00 
  8004203d0f:	ff d0                	callq  *%rax
  8004203d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d19:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d20:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d28:	48 89 c7             	mov    %rax,%rdi
  8004203d2b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203d32:	00 00 00 
  8004203d35:	ff d0                	callq  *%rax
  8004203d37:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d3a:	48 63 d2             	movslq %edx,%rdx
  8004203d3d:	48 09 d0             	or     %rdx,%rax
  8004203d40:	48 83 c8 01          	or     $0x1,%rax
  8004203d44:	48 89 c2             	mov    %rax,%rdx
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 10             	mov    %rdx,(%rax)
  8004203d4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d56:	48 89 d6             	mov    %rdx,%rsi
  8004203d59:	48 89 c7             	mov    %rax,%rdi
  8004203d5c:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203d63:	00 00 00 
  8004203d66:	ff d0                	callq  *%rax
  8004203d68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d6d:	eb 0c                	jmp    8004203d7b <page_insert+0x36e>
  8004203d6f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d74:	eb 05                	jmp    8004203d7b <page_insert+0x36e>
  8004203d76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d7b:	c9                   	leaveq 
  8004203d7c:	c3                   	retq   

0000008004203d7d <page_lookup>:
  8004203d7d:	55                   	push   %rbp
  8004203d7e:	48 89 e5             	mov    %rsp,%rbp
  8004203d81:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d8d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203d96:	74 69                	je     8004203e01 <page_lookup+0x84>
  8004203d98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203da0:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203da5:	48 89 ce             	mov    %rcx,%rsi
  8004203da8:	48 89 c7             	mov    %rax,%rdi
  8004203dab:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203db2:	00 00 00 
  8004203db5:	ff d0                	callq  *%rax
  8004203db7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dc0:	74 3f                	je     8004203e01 <page_lookup+0x84>
  8004203dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dc6:	48 8b 00             	mov    (%rax),%rax
  8004203dc9:	83 e0 01             	and    $0x1,%eax
  8004203dcc:	48 85 c0             	test   %rax,%rax
  8004203dcf:	74 30                	je     8004203e01 <page_lookup+0x84>
  8004203dd1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203dd6:	74 0b                	je     8004203de3 <page_lookup+0x66>
  8004203dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203ddc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203de0:	48 89 10             	mov    %rdx,(%rax)
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c7             	mov    %rax,%rdi
  8004203df3:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004203dfa:	00 00 00 
  8004203dfd:	ff d0                	callq  *%rax
  8004203dff:	eb 05                	jmp    8004203e06 <page_lookup+0x89>
  8004203e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e06:	c9                   	leaveq 
  8004203e07:	c3                   	retq   

0000008004203e08 <page_remove>:
  8004203e08:	55                   	push   %rbp
  8004203e09:	48 89 e5             	mov    %rsp,%rbp
  8004203e0c:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e18:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e24:	48 89 ce             	mov    %rcx,%rsi
  8004203e27:	48 89 c7             	mov    %rax,%rdi
  8004203e2a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004203e31:	00 00 00 
  8004203e34:	ff d0                	callq  *%rax
  8004203e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e3f:	74 38                	je     8004203e79 <page_remove+0x71>
  8004203e41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e49:	48 89 d6             	mov    %rdx,%rsi
  8004203e4c:	48 89 c7             	mov    %rax,%rdi
  8004203e4f:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203e56:	00 00 00 
  8004203e59:	ff d0                	callq  *%rax
  8004203e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e5f:	48 89 c7             	mov    %rax,%rdi
  8004203e62:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203e69:	00 00 00 
  8004203e6c:	ff d0                	callq  *%rax
  8004203e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e79:	c9                   	leaveq 
  8004203e7a:	c3                   	retq   

0000008004203e7b <tlb_invalidate>:
  8004203e7b:	55                   	push   %rbp
  8004203e7c:	48 89 e5             	mov    %rsp,%rbp
  8004203e7f:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e90:	75 35                	jne    8004203ec7 <tlb_invalidate+0x4c>
  8004203e92:	48 b9 b7 d4 21 04 80 	movabs $0x800421d4b7,%rcx
  8004203e99:	00 00 00 
  8004203e9c:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004203ea3:	00 00 00 
  8004203ea6:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eab:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203eb2:	00 00 00 
  8004203eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203ec1:	00 00 00 
  8004203ec4:	41 ff d0             	callq  *%r8
  8004203ec7:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004203ece:	00 00 00 
  8004203ed1:	ff d0                	callq  *%rax
  8004203ed3:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004203eda:	00 00 00 
  8004203edd:	48 98                	cltq   
  8004203edf:	48 c1 e0 03          	shl    $0x3,%rax
  8004203ee3:	48 89 c1             	mov    %rax,%rcx
  8004203ee6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203eea:	48 01 c8             	add    %rcx,%rax
  8004203eed:	48 01 d0             	add    %rdx,%rax
  8004203ef0:	48 83 c0 08          	add    $0x8,%rax
  8004203ef4:	48 8b 00             	mov    (%rax),%rax
  8004203ef7:	48 85 c0             	test   %rax,%rax
  8004203efa:	74 3d                	je     8004203f39 <tlb_invalidate+0xbe>
  8004203efc:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004203f03:	00 00 00 
  8004203f06:	ff d0                	callq  *%rax
  8004203f08:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004203f0f:	00 00 00 
  8004203f12:	48 98                	cltq   
  8004203f14:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f18:	48 89 c1             	mov    %rax,%rcx
  8004203f1b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f1f:	48 01 c8             	add    %rcx,%rax
  8004203f22:	48 01 d0             	add    %rdx,%rax
  8004203f25:	48 83 c0 08          	add    $0x8,%rax
  8004203f29:	48 8b 00             	mov    (%rax),%rax
  8004203f2c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f33:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f37:	75 0f                	jne    8004203f48 <tlb_invalidate+0xcd>
  8004203f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f45:	0f 01 38             	invlpg (%rax)
  8004203f48:	c9                   	leaveq 
  8004203f49:	c3                   	retq   

0000008004203f4a <mmio_map_region>:
  8004203f4a:	55                   	push   %rbp
  8004203f4b:	48 89 e5             	mov    %rsp,%rbp
  8004203f4e:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f5a:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203f61:	00 00 00 
  8004203f64:	48 8b 00             	mov    (%rax),%rax
  8004203f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f6b:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f72:	00 
  8004203f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f7b:	48 01 d0             	add    %rdx,%rax
  8004203f7e:	48 83 e8 01          	sub    $0x1,%rax
  8004203f82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f8f:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f93:	48 89 d0             	mov    %rdx,%rax
  8004203f96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203f9a:	48 29 c2             	sub    %rax,%rdx
  8004203f9d:	48 89 d0             	mov    %rdx,%rax
  8004203fa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fa4:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203fab:	00 00 00 
  8004203fae:	48 8b 10             	mov    (%rax),%rdx
  8004203fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fb5:	48 01 c2             	add    %rax,%rdx
  8004203fb8:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203fbf:	00 00 00 
  8004203fc2:	48 89 10             	mov    %rdx,(%rax)
  8004203fc5:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203fcc:	00 00 00 
  8004203fcf:	48 8b 10             	mov    (%rax),%rdx
  8004203fd2:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fd9:	00 00 00 
  8004203fdc:	48 39 c2             	cmp    %rax,%rdx
  8004203fdf:	76 2a                	jbe    800420400b <mmio_map_region+0xc1>
  8004203fe1:	48 ba c8 d4 21 04 80 	movabs $0x800421d4c8,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ff0:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004204006:	00 00 00 
  8004204009:	ff d1                	callq  *%rcx
  800420400b:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004204012:	00 00 00 
  8004204015:	48 8b 00             	mov    (%rax),%rax
  8004204018:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420401c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204020:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204024:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420402a:	48 89 c7             	mov    %rax,%rdi
  800420402d:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004204034:	00 00 00 
  8004204037:	ff d0                	callq  *%rax
  8004204039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420403d:	c9                   	leaveq 
  800420403e:	c3                   	retq   

000000800420403f <user_mem_check>:
  800420403f:	55                   	push   %rbp
  8004204040:	48 89 e5             	mov    %rsp,%rbp
  8004204043:	48 83 ec 40          	sub    $0x40,%rsp
  8004204047:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420404b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420404f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204053:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204056:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420405a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420405e:	48 01 d0             	add    %rdx,%rax
  8004204061:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204069:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004204070:	00 00 00 
  8004204073:	48 39 c2             	cmp    %rax,%rdx
  8004204076:	77 0a                	ja     8004204082 <user_mem_check+0x43>
  8004204078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420407c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204080:	76 1b                	jbe    800420409d <user_mem_check+0x5e>
  8004204082:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204086:	48 b8 40 b2 4d 04 80 	movabs $0x80044db240,%rax
  800420408d:	00 00 00 
  8004204090:	48 89 10             	mov    %rdx,(%rax)
  8004204093:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204098:	e9 c0 00 00 00       	jmpq   800420415d <user_mem_check+0x11e>
  800420409d:	e9 a8 00 00 00       	jmpq   800420414a <user_mem_check+0x10b>
  80042040a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040a6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040b1:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040b6:	48 89 ce             	mov    %rcx,%rsi
  80042040b9:	48 89 c7             	mov    %rax,%rdi
  80042040bc:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042040c3:	00 00 00 
  80042040c6:	ff d0                	callq  *%rax
  80042040c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040d1:	74 1f                	je     80042040f2 <user_mem_check+0xb3>
  80042040d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040d7:	48 8b 10             	mov    (%rax),%rdx
  80042040da:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040dd:	83 c8 01             	or     $0x1,%eax
  80042040e0:	48 98                	cltq   
  80042040e2:	48 21 c2             	and    %rax,%rdx
  80042040e5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e8:	83 c8 01             	or     $0x1,%eax
  80042040eb:	48 98                	cltq   
  80042040ed:	48 39 c2             	cmp    %rax,%rdx
  80042040f0:	74 18                	je     800420410a <user_mem_check+0xcb>
  80042040f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040f6:	48 b8 40 b2 4d 04 80 	movabs $0x80044db240,%rax
  80042040fd:	00 00 00 
  8004204100:	48 89 10             	mov    %rdx,(%rax)
  8004204103:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204108:	eb 53                	jmp    800420415d <user_mem_check+0x11e>
  800420410a:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204111:	00 
  8004204112:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204116:	48 83 c0 01          	add    $0x1,%rax
  800420411a:	48 89 c2             	mov    %rax,%rdx
  800420411d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204121:	48 01 d0             	add    %rdx,%rax
  8004204124:	48 83 e8 01          	sub    $0x1,%rax
  8004204128:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420412c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204130:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204135:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204139:	48 89 d0             	mov    %rdx,%rax
  800420413c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204140:	48 29 c2             	sub    %rax,%rdx
  8004204143:	48 89 d0             	mov    %rdx,%rax
  8004204146:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420414a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420414e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204152:	0f 82 4a ff ff ff    	jb     80042040a2 <user_mem_check+0x63>
  8004204158:	b8 00 00 00 00       	mov    $0x0,%eax
  800420415d:	c9                   	leaveq 
  800420415e:	c3                   	retq   

000000800420415f <user_mem_assert>:
  800420415f:	55                   	push   %rbp
  8004204160:	48 89 e5             	mov    %rsp,%rbp
  8004204163:	48 83 ec 20          	sub    $0x20,%rsp
  8004204167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420416b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420416f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004204173:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204179:	83 c8 04             	or     $0x4,%eax
  800420417c:	89 c1                	mov    %eax,%ecx
  800420417e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204182:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420418a:	48 89 c7             	mov    %rax,%rdi
  800420418d:	48 b8 3f 40 20 04 80 	movabs $0x800420403f,%rax
  8004204194:	00 00 00 
  8004204197:	ff d0                	callq  *%rax
  8004204199:	85 c0                	test   %eax,%eax
  800420419b:	79 47                	jns    80042041e4 <user_mem_assert+0x85>
  800420419d:	48 b8 40 b2 4d 04 80 	movabs $0x80044db240,%rax
  80042041a4:	00 00 00 
  80042041a7:	48 8b 10             	mov    (%rax),%rdx
  80042041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ae:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041b4:	89 c6                	mov    %eax,%esi
  80042041b6:	48 bf e8 d4 21 04 80 	movabs $0x800421d4e8,%rdi
  80042041bd:	00 00 00 
  80042041c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041c5:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042041cc:	00 00 00 
  80042041cf:	ff d1                	callq  *%rcx
  80042041d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041d5:	48 89 c7             	mov    %rax,%rdi
  80042041d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  80042041df:	00 00 00 
  80042041e2:	ff d0                	callq  *%rax
  80042041e4:	c9                   	leaveq 
  80042041e5:	c3                   	retq   

00000080042041e6 <check_page_free_list>:
  80042041e6:	55                   	push   %rbp
  80042041e7:	48 89 e5             	mov    %rsp,%rbp
  80042041ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042041ee:	89 f8                	mov    %edi,%eax
  80042041f0:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041f3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042041f7:	74 07                	je     8004204200 <check_page_free_list+0x1a>
  80042041f9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042041fe:	eb 05                	jmp    8004204205 <check_page_free_list+0x1f>
  8004204200:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204205:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204208:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420420f:	00 
  8004204210:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204217:	00 
  8004204218:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420421f:	00 00 00 
  8004204222:	48 8b 00             	mov    (%rax),%rax
  8004204225:	48 85 c0             	test   %rax,%rax
  8004204228:	75 2a                	jne    8004204254 <check_page_free_list+0x6e>
  800420422a:	48 ba 20 d5 21 04 80 	movabs $0x800421d520,%rdx
  8004204231:	00 00 00 
  8004204234:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204239:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204240:	00 00 00 
  8004204243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204248:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420424f:	00 00 00 
  8004204252:	ff d1                	callq  *%rcx
  8004204254:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204258:	0f 84 a9 00 00 00    	je     8004204307 <check_page_free_list+0x121>
  800420425e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004204262:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204266:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  800420426a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420426e:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204275:	00 00 00 
  8004204278:	48 8b 00             	mov    (%rax),%rax
  800420427b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420427f:	eb 58                	jmp    80042042d9 <check_page_free_list+0xf3>
  8004204281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204285:	48 89 c7             	mov    %rax,%rdi
  8004204288:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420428f:	00 00 00 
  8004204292:	ff d0                	callq  *%rax
  8004204294:	48 c1 e8 15          	shr    $0x15,%rax
  8004204298:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420429d:	48 89 c2             	mov    %rax,%rdx
  80042042a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042a3:	48 39 c2             	cmp    %rax,%rdx
  80042042a6:	0f 93 c0             	setae  %al
  80042042a9:	0f b6 c0             	movzbl %al,%eax
  80042042ac:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042af:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042b2:	48 98                	cltq   
  80042042b4:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042bd:	48 89 10             	mov    %rdx,(%rax)
  80042042c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042c7:	48 98                	cltq   
  80042042c9:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042d2:	48 8b 00             	mov    (%rax),%rax
  80042042d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042de:	75 a1                	jne    8004204281 <check_page_free_list+0x9b>
  80042042e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042e4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042f3:	48 89 10             	mov    %rdx,(%rax)
  80042042f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042042fa:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204301:	00 00 00 
  8004204304:	48 89 10             	mov    %rdx,(%rax)
  8004204307:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420430e:	00 00 00 
  8004204311:	48 8b 00             	mov    (%rax),%rax
  8004204314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204318:	eb 5e                	jmp    8004204378 <check_page_free_list+0x192>
  800420431a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431e:	48 89 c7             	mov    %rax,%rdi
  8004204321:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204328:	00 00 00 
  800420432b:	ff d0                	callq  *%rax
  800420432d:	48 c1 e8 15          	shr    $0x15,%rax
  8004204331:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204336:	48 89 c2             	mov    %rax,%rdx
  8004204339:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420433c:	48 39 c2             	cmp    %rax,%rdx
  800420433f:	73 2c                	jae    800420436d <check_page_free_list+0x187>
  8004204341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204345:	48 89 c7             	mov    %rax,%rdi
  8004204348:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  800420434f:	00 00 00 
  8004204352:	ff d0                	callq  *%rax
  8004204354:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204359:	be 97 00 00 00       	mov    $0x97,%esi
  800420435e:	48 89 c7             	mov    %rax,%rdi
  8004204361:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004204368:	00 00 00 
  800420436b:	ff d0                	callq  *%rax
  800420436d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204371:	48 8b 00             	mov    (%rax),%rax
  8004204374:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204378:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420437d:	75 9b                	jne    800420431a <check_page_free_list+0x134>
  800420437f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204384:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  800420438b:	00 00 00 
  800420438e:	ff d0                	callq  *%rax
  8004204390:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204394:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420439b:	00 00 00 
  800420439e:	48 8b 00             	mov    (%rax),%rax
  80042043a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043a5:	e9 20 03 00 00       	jmpq   80042046ca <check_page_free_list+0x4e4>
  80042043aa:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042043b1:	00 00 00 
  80042043b4:	48 8b 00             	mov    (%rax),%rax
  80042043b7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043bb:	73 35                	jae    80042043f2 <check_page_free_list+0x20c>
  80042043bd:	48 b9 44 d5 21 04 80 	movabs $0x800421d544,%rcx
  80042043c4:	00 00 00 
  80042043c7:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042043ce:	00 00 00 
  80042043d1:	be 17 04 00 00       	mov    $0x417,%esi
  80042043d6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042043dd:	00 00 00 
  80042043e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042043ec:	00 00 00 
  80042043ef:	41 ff d0             	callq  *%r8
  80042043f2:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042043f9:	00 00 00 
  80042043fc:	48 8b 10             	mov    (%rax),%rdx
  80042043ff:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004204406:	00 00 00 
  8004204409:	48 8b 00             	mov    (%rax),%rax
  800420440c:	48 c1 e0 04          	shl    $0x4,%rax
  8004204410:	48 01 d0             	add    %rdx,%rax
  8004204413:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204417:	77 35                	ja     800420444e <check_page_free_list+0x268>
  8004204419:	48 b9 50 d5 21 04 80 	movabs $0x800421d550,%rcx
  8004204420:	00 00 00 
  8004204423:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420442a:	00 00 00 
  800420442d:	be 18 04 00 00       	mov    $0x418,%esi
  8004204432:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204439:	00 00 00 
  800420443c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204441:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204448:	00 00 00 
  800420444b:	41 ff d0             	callq  *%r8
  800420444e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204452:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004204459:	00 00 00 
  800420445c:	48 8b 00             	mov    (%rax),%rax
  800420445f:	48 29 c2             	sub    %rax,%rdx
  8004204462:	48 89 d0             	mov    %rdx,%rax
  8004204465:	83 e0 0f             	and    $0xf,%eax
  8004204468:	48 85 c0             	test   %rax,%rax
  800420446b:	74 35                	je     80042044a2 <check_page_free_list+0x2bc>
  800420446d:	48 b9 68 d5 21 04 80 	movabs $0x800421d568,%rcx
  8004204474:	00 00 00 
  8004204477:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420447e:	00 00 00 
  8004204481:	be 19 04 00 00       	mov    $0x419,%esi
  8004204486:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420448d:	00 00 00 
  8004204490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204495:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420449c:	00 00 00 
  800420449f:	41 ff d0             	callq  *%r8
  80042044a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a6:	48 89 c7             	mov    %rax,%rdi
  80042044a9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044b0:	00 00 00 
  80042044b3:	ff d0                	callq  *%rax
  80042044b5:	48 85 c0             	test   %rax,%rax
  80042044b8:	75 35                	jne    80042044ef <check_page_free_list+0x309>
  80042044ba:	48 b9 9a d5 21 04 80 	movabs $0x800421d59a,%rcx
  80042044c1:	00 00 00 
  80042044c4:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042044cb:	00 00 00 
  80042044ce:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044d3:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042044da:	00 00 00 
  80042044dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042044e9:	00 00 00 
  80042044ec:	41 ff d0             	callq  *%r8
  80042044ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044f3:	48 89 c7             	mov    %rax,%rdi
  80042044f6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044fd:	00 00 00 
  8004204500:	ff d0                	callq  *%rax
  8004204502:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204508:	75 35                	jne    800420453f <check_page_free_list+0x359>
  800420450a:	48 b9 ab d5 21 04 80 	movabs $0x800421d5ab,%rcx
  8004204511:	00 00 00 
  8004204514:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420451b:	00 00 00 
  800420451e:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204523:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420452a:	00 00 00 
  800420452d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204532:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204539:	00 00 00 
  800420453c:	41 ff d0             	callq  *%r8
  800420453f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204543:	48 89 c7             	mov    %rax,%rdi
  8004204546:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420454d:	00 00 00 
  8004204550:	ff d0                	callq  *%rax
  8004204552:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204558:	75 35                	jne    800420458f <check_page_free_list+0x3a9>
  800420455a:	48 b9 c8 d5 21 04 80 	movabs $0x800421d5c8,%rcx
  8004204561:	00 00 00 
  8004204564:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420456b:	00 00 00 
  800420456e:	be 1e 04 00 00       	mov    $0x41e,%esi
  8004204573:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420457a:	00 00 00 
  800420457d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204582:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204589:	00 00 00 
  800420458c:	41 ff d0             	callq  *%r8
  800420458f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204593:	48 89 c7             	mov    %rax,%rdi
  8004204596:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420459d:	00 00 00 
  80042045a0:	ff d0                	callq  *%rax
  80042045a2:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045a8:	75 35                	jne    80042045df <check_page_free_list+0x3f9>
  80042045aa:	48 b9 eb d5 21 04 80 	movabs $0x800421d5eb,%rcx
  80042045b1:	00 00 00 
  80042045b4:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042045bb:	00 00 00 
  80042045be:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045c3:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042045ca:	00 00 00 
  80042045cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042045d9:	00 00 00 
  80042045dc:	41 ff d0             	callq  *%r8
  80042045df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045e3:	48 89 c7             	mov    %rax,%rdi
  80042045e6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042045ed:	00 00 00 
  80042045f0:	ff d0                	callq  *%rax
  80042045f2:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042045f8:	76 4e                	jbe    8004204648 <check_page_free_list+0x462>
  80042045fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045fe:	48 89 c7             	mov    %rax,%rdi
  8004204601:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204608:	00 00 00 
  800420460b:	ff d0                	callq  *%rax
  800420460d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204611:	73 35                	jae    8004204648 <check_page_free_list+0x462>
  8004204613:	48 b9 08 d6 21 04 80 	movabs $0x800421d608,%rcx
  800420461a:	00 00 00 
  800420461d:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204624:	00 00 00 
  8004204627:	be 20 04 00 00       	mov    $0x420,%esi
  800420462c:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204633:	00 00 00 
  8004204636:	b8 00 00 00 00       	mov    $0x0,%eax
  800420463b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204642:	00 00 00 
  8004204645:	41 ff d0             	callq  *%r8
  8004204648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420464c:	48 89 c7             	mov    %rax,%rdi
  800420464f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204656:	00 00 00 
  8004204659:	ff d0                	callq  *%rax
  800420465b:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  8004204661:	75 35                	jne    8004204698 <check_page_free_list+0x4b2>
  8004204663:	48 b9 4d d6 21 04 80 	movabs $0x800421d64d,%rcx
  800420466a:	00 00 00 
  800420466d:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204674:	00 00 00 
  8004204677:	be 23 04 00 00       	mov    $0x423,%esi
  800420467c:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204683:	00 00 00 
  8004204686:	b8 00 00 00 00       	mov    $0x0,%eax
  800420468b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204692:	00 00 00 
  8004204695:	41 ff d0             	callq  *%r8
  8004204698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420469c:	48 89 c7             	mov    %rax,%rdi
  800420469f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042046a6:	00 00 00 
  80042046a9:	ff d0                	callq  *%rax
  80042046ab:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046b1:	77 07                	ja     80042046ba <check_page_free_list+0x4d4>
  80042046b3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046b8:	eb 05                	jmp    80042046bf <check_page_free_list+0x4d9>
  80042046ba:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046c3:	48 8b 00             	mov    (%rax),%rax
  80042046c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046ca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046cf:	0f 85 d5 fc ff ff    	jne    80042043aa <check_page_free_list+0x1c4>
  80042046d5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046da:	75 35                	jne    8004204711 <check_page_free_list+0x52b>
  80042046dc:	48 b9 6a d6 21 04 80 	movabs $0x800421d66a,%rcx
  80042046e3:	00 00 00 
  80042046e6:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042046ed:	00 00 00 
  80042046f0:	be 2c 04 00 00       	mov    $0x42c,%esi
  80042046f5:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042046fc:	00 00 00 
  80042046ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204704:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420470b:	00 00 00 
  800420470e:	41 ff d0             	callq  *%r8
  8004204711:	c9                   	leaveq 
  8004204712:	c3                   	retq   

0000008004204713 <check_page_alloc>:
  8004204713:	55                   	push   %rbp
  8004204714:	48 89 e5             	mov    %rsp,%rbp
  8004204717:	48 83 ec 40          	sub    $0x40,%rsp
  800420471b:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204722:	00 00 00 
  8004204725:	48 8b 00             	mov    (%rax),%rax
  8004204728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420472c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204733:	eb 37                	jmp    800420476c <check_page_alloc+0x59>
  8004204735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204739:	48 89 c7             	mov    %rax,%rdi
  800420473c:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204743:	00 00 00 
  8004204746:	ff d0                	callq  *%rax
  8004204748:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420474d:	be 97 00 00 00       	mov    $0x97,%esi
  8004204752:	48 89 c7             	mov    %rax,%rdi
  8004204755:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  800420475c:	00 00 00 
  800420475f:	ff d0                	callq  *%rax
  8004204761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420476c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204771:	75 c2                	jne    8004204735 <check_page_alloc+0x22>
  8004204773:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420477a:	00 00 00 
  800420477d:	48 8b 00             	mov    (%rax),%rax
  8004204780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420478b:	e9 ec 01 00 00       	jmpq   800420497c <check_page_alloc+0x269>
  8004204790:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004204797:	00 00 00 
  800420479a:	48 8b 00             	mov    (%rax),%rax
  800420479d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047a1:	73 35                	jae    80042047d8 <check_page_alloc+0xc5>
  80042047a3:	48 b9 7b d6 21 04 80 	movabs $0x800421d67b,%rcx
  80042047aa:	00 00 00 
  80042047ad:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042047b4:	00 00 00 
  80042047b7:	be 46 04 00 00       	mov    $0x446,%esi
  80042047bc:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042047c3:	00 00 00 
  80042047c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047cb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042047d2:	00 00 00 
  80042047d5:	41 ff d0             	callq  *%r8
  80042047d8:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042047df:	00 00 00 
  80042047e2:	48 8b 10             	mov    (%rax),%rdx
  80042047e5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042047ec:	00 00 00 
  80042047ef:	48 8b 00             	mov    (%rax),%rax
  80042047f2:	48 c1 e0 04          	shl    $0x4,%rax
  80042047f6:	48 01 d0             	add    %rdx,%rax
  80042047f9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042047fd:	77 35                	ja     8004204834 <check_page_alloc+0x121>
  80042047ff:	48 b9 88 d6 21 04 80 	movabs $0x800421d688,%rcx
  8004204806:	00 00 00 
  8004204809:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204810:	00 00 00 
  8004204813:	be 47 04 00 00       	mov    $0x447,%esi
  8004204818:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420481f:	00 00 00 
  8004204822:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204827:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420482e:	00 00 00 
  8004204831:	41 ff d0             	callq  *%r8
  8004204834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204838:	48 89 c7             	mov    %rax,%rdi
  800420483b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204842:	00 00 00 
  8004204845:	ff d0                	callq  *%rax
  8004204847:	48 85 c0             	test   %rax,%rax
  800420484a:	75 35                	jne    8004204881 <check_page_alloc+0x16e>
  800420484c:	48 b9 9d d6 21 04 80 	movabs $0x800421d69d,%rcx
  8004204853:	00 00 00 
  8004204856:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420485d:	00 00 00 
  8004204860:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204865:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420486c:	00 00 00 
  800420486f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204874:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420487b:	00 00 00 
  800420487e:	41 ff d0             	callq  *%r8
  8004204881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204885:	48 89 c7             	mov    %rax,%rdi
  8004204888:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420488f:	00 00 00 
  8004204892:	ff d0                	callq  *%rax
  8004204894:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420489a:	75 35                	jne    80042048d1 <check_page_alloc+0x1be>
  800420489c:	48 b9 af d6 21 04 80 	movabs $0x800421d6af,%rcx
  80042048a3:	00 00 00 
  80042048a6:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042048ad:	00 00 00 
  80042048b0:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048b5:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042048bc:	00 00 00 
  80042048bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042048cb:	00 00 00 
  80042048ce:	41 ff d0             	callq  *%r8
  80042048d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048d5:	48 89 c7             	mov    %rax,%rdi
  80042048d8:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042048df:	00 00 00 
  80042048e2:	ff d0                	callq  *%rax
  80042048e4:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048ea:	75 35                	jne    8004204921 <check_page_alloc+0x20e>
  80042048ec:	48 b9 d0 d6 21 04 80 	movabs $0x800421d6d0,%rcx
  80042048f3:	00 00 00 
  80042048f6:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042048fd:	00 00 00 
  8004204900:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204905:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420490c:	00 00 00 
  800420490f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204914:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420491b:	00 00 00 
  800420491e:	41 ff d0             	callq  *%r8
  8004204921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204925:	48 89 c7             	mov    %rax,%rdi
  8004204928:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420492f:	00 00 00 
  8004204932:	ff d0                	callq  *%rax
  8004204934:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420493a:	75 35                	jne    8004204971 <check_page_alloc+0x25e>
  800420493c:	48 b9 f4 d6 21 04 80 	movabs $0x800421d6f4,%rcx
  8004204943:	00 00 00 
  8004204946:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420494d:	00 00 00 
  8004204950:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204955:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420495c:	00 00 00 
  800420495f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420496b:	00 00 00 
  800420496e:	41 ff d0             	callq  *%r8
  8004204971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204975:	48 8b 00             	mov    (%rax),%rax
  8004204978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420497c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204981:	0f 85 09 fe ff ff    	jne    8004204790 <check_page_alloc+0x7d>
  8004204987:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420498e:	00 
  800420498f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204993:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204997:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420499b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420499f:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049a4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049ab:	00 00 00 
  80042049ae:	ff d0                	callq  *%rax
  80042049b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049b9:	75 35                	jne    80042049f0 <check_page_alloc+0x2dd>
  80042049bb:	48 b9 0f d7 21 04 80 	movabs $0x800421d70f,%rcx
  80042049c2:	00 00 00 
  80042049c5:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042049cc:	00 00 00 
  80042049cf:	be 51 04 00 00       	mov    $0x451,%esi
  80042049d4:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042049db:	00 00 00 
  80042049de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042049ea:	00 00 00 
  80042049ed:	41 ff d0             	callq  *%r8
  80042049f0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049fc:	00 00 00 
  80042049ff:	ff d0                	callq  *%rax
  8004204a01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a05:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a0a:	75 35                	jne    8004204a41 <check_page_alloc+0x32e>
  8004204a0c:	48 b9 25 d7 21 04 80 	movabs $0x800421d725,%rcx
  8004204a13:	00 00 00 
  8004204a16:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204a1d:	00 00 00 
  8004204a20:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a25:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204a2c:	00 00 00 
  8004204a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a34:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a3b:	00 00 00 
  8004204a3e:	41 ff d0             	callq  *%r8
  8004204a41:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a46:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204a4d:	00 00 00 
  8004204a50:	ff d0                	callq  *%rax
  8004204a52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a56:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a5b:	75 35                	jne    8004204a92 <check_page_alloc+0x37f>
  8004204a5d:	48 b9 3b d7 21 04 80 	movabs $0x800421d73b,%rcx
  8004204a64:	00 00 00 
  8004204a67:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204a6e:	00 00 00 
  8004204a71:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a76:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204a7d:	00 00 00 
  8004204a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a8c:	00 00 00 
  8004204a8f:	41 ff d0             	callq  *%r8
  8004204a92:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204a97:	75 35                	jne    8004204ace <check_page_alloc+0x3bb>
  8004204a99:	48 b9 51 d7 21 04 80 	movabs $0x800421d751,%rcx
  8004204aa0:	00 00 00 
  8004204aa3:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204aaa:	00 00 00 
  8004204aad:	be 54 04 00 00       	mov    $0x454,%esi
  8004204ab2:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204ab9:	00 00 00 
  8004204abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ac8:	00 00 00 
  8004204acb:	41 ff d0             	callq  *%r8
  8004204ace:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204ad3:	74 0a                	je     8004204adf <check_page_alloc+0x3cc>
  8004204ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ad9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204add:	75 35                	jne    8004204b14 <check_page_alloc+0x401>
  8004204adf:	48 b9 55 d7 21 04 80 	movabs $0x800421d755,%rcx
  8004204ae6:	00 00 00 
  8004204ae9:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204af0:	00 00 00 
  8004204af3:	be 55 04 00 00       	mov    $0x455,%esi
  8004204af8:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204aff:	00 00 00 
  8004204b02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b0e:	00 00 00 
  8004204b11:	41 ff d0             	callq  *%r8
  8004204b14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b19:	74 14                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b1f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b23:	74 0a                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b2d:	75 35                	jne    8004204b64 <check_page_alloc+0x451>
  8004204b2f:	48 b9 68 d7 21 04 80 	movabs $0x800421d768,%rcx
  8004204b36:	00 00 00 
  8004204b39:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204b40:	00 00 00 
  8004204b43:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b48:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204b4f:	00 00 00 
  8004204b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b5e:	00 00 00 
  8004204b61:	41 ff d0             	callq  *%r8
  8004204b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b68:	48 89 c7             	mov    %rax,%rdi
  8004204b6b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204b72:	00 00 00 
  8004204b75:	ff d0                	callq  *%rax
  8004204b77:	48 ba f8 a5 6d 04 80 	movabs $0x80046da5f8,%rdx
  8004204b7e:	00 00 00 
  8004204b81:	48 8b 12             	mov    (%rdx),%rdx
  8004204b84:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b88:	48 39 d0             	cmp    %rdx,%rax
  8004204b8b:	72 35                	jb     8004204bc2 <check_page_alloc+0x4af>
  8004204b8d:	48 b9 88 d7 21 04 80 	movabs $0x800421d788,%rcx
  8004204b94:	00 00 00 
  8004204b97:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204b9e:	00 00 00 
  8004204ba1:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ba6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204bad:	00 00 00 
  8004204bb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204bbc:	00 00 00 
  8004204bbf:	41 ff d0             	callq  *%r8
  8004204bc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bc6:	48 89 c7             	mov    %rax,%rdi
  8004204bc9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204bd0:	00 00 00 
  8004204bd3:	ff d0                	callq  *%rax
  8004204bd5:	48 ba f8 a5 6d 04 80 	movabs $0x80046da5f8,%rdx
  8004204bdc:	00 00 00 
  8004204bdf:	48 8b 12             	mov    (%rdx),%rdx
  8004204be2:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204be6:	48 39 d0             	cmp    %rdx,%rax
  8004204be9:	72 35                	jb     8004204c20 <check_page_alloc+0x50d>
  8004204beb:	48 b9 a5 d7 21 04 80 	movabs $0x800421d7a5,%rcx
  8004204bf2:	00 00 00 
  8004204bf5:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204bfc:	00 00 00 
  8004204bff:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c04:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204c0b:	00 00 00 
  8004204c0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c1a:	00 00 00 
  8004204c1d:	41 ff d0             	callq  *%r8
  8004204c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c24:	48 89 c7             	mov    %rax,%rdi
  8004204c27:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204c2e:	00 00 00 
  8004204c31:	ff d0                	callq  *%rax
  8004204c33:	48 ba f8 a5 6d 04 80 	movabs $0x80046da5f8,%rdx
  8004204c3a:	00 00 00 
  8004204c3d:	48 8b 12             	mov    (%rdx),%rdx
  8004204c40:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c44:	48 39 d0             	cmp    %rdx,%rax
  8004204c47:	72 35                	jb     8004204c7e <check_page_alloc+0x56b>
  8004204c49:	48 b9 c2 d7 21 04 80 	movabs $0x800421d7c2,%rcx
  8004204c50:	00 00 00 
  8004204c53:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204c5a:	00 00 00 
  8004204c5d:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c62:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204c69:	00 00 00 
  8004204c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c78:	00 00 00 
  8004204c7b:	41 ff d0             	callq  *%r8
  8004204c7e:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204c85:	00 00 00 
  8004204c88:	48 8b 00             	mov    (%rax),%rax
  8004204c8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c8f:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204c96:	00 00 00 
  8004204c99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204ca0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ca5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204cac:	00 00 00 
  8004204caf:	ff d0                	callq  *%rax
  8004204cb1:	48 85 c0             	test   %rax,%rax
  8004204cb4:	74 35                	je     8004204ceb <check_page_alloc+0x5d8>
  8004204cb6:	48 b9 df d7 21 04 80 	movabs $0x800421d7df,%rcx
  8004204cbd:	00 00 00 
  8004204cc0:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204cc7:	00 00 00 
  8004204cca:	be 60 04 00 00       	mov    $0x460,%esi
  8004204ccf:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204cd6:	00 00 00 
  8004204cd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cde:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ce5:	00 00 00 
  8004204ce8:	41 ff d0             	callq  *%r8
  8004204ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cef:	48 89 c7             	mov    %rax,%rdi
  8004204cf2:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204cf9:	00 00 00 
  8004204cfc:	ff d0                	callq  *%rax
  8004204cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d02:	48 89 c7             	mov    %rax,%rdi
  8004204d05:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d0c:	00 00 00 
  8004204d0f:	ff d0                	callq  *%rax
  8004204d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d15:	48 89 c7             	mov    %rax,%rdi
  8004204d18:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d1f:	00 00 00 
  8004204d22:	ff d0                	callq  *%rax
  8004204d24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d2b:	00 
  8004204d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d3c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d41:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d48:	00 00 00 
  8004204d4b:	ff d0                	callq  *%rax
  8004204d4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d51:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d56:	75 35                	jne    8004204d8d <check_page_alloc+0x67a>
  8004204d58:	48 b9 0f d7 21 04 80 	movabs $0x800421d70f,%rcx
  8004204d5f:	00 00 00 
  8004204d62:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204d69:	00 00 00 
  8004204d6c:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d71:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204d78:	00 00 00 
  8004204d7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204d87:	00 00 00 
  8004204d8a:	41 ff d0             	callq  *%r8
  8004204d8d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d92:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d99:	00 00 00 
  8004204d9c:	ff d0                	callq  *%rax
  8004204d9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204da2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204da7:	75 35                	jne    8004204dde <check_page_alloc+0x6cb>
  8004204da9:	48 b9 25 d7 21 04 80 	movabs $0x800421d725,%rcx
  8004204db0:	00 00 00 
  8004204db3:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204dba:	00 00 00 
  8004204dbd:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dc2:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204dc9:	00 00 00 
  8004204dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dd1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204dd8:	00 00 00 
  8004204ddb:	41 ff d0             	callq  *%r8
  8004204dde:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204de3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204dea:	00 00 00 
  8004204ded:	ff d0                	callq  *%rax
  8004204def:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204df3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204df8:	75 35                	jne    8004204e2f <check_page_alloc+0x71c>
  8004204dfa:	48 b9 3b d7 21 04 80 	movabs $0x800421d73b,%rcx
  8004204e01:	00 00 00 
  8004204e04:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204e0b:	00 00 00 
  8004204e0e:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e13:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204e1a:	00 00 00 
  8004204e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e29:	00 00 00 
  8004204e2c:	41 ff d0             	callq  *%r8
  8004204e2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e34:	75 35                	jne    8004204e6b <check_page_alloc+0x758>
  8004204e36:	48 b9 51 d7 21 04 80 	movabs $0x800421d751,%rcx
  8004204e3d:	00 00 00 
  8004204e40:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204e47:	00 00 00 
  8004204e4a:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e4f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204e56:	00 00 00 
  8004204e59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e65:	00 00 00 
  8004204e68:	41 ff d0             	callq  *%r8
  8004204e6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e70:	74 0a                	je     8004204e7c <check_page_alloc+0x769>
  8004204e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e76:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e7a:	75 35                	jne    8004204eb1 <check_page_alloc+0x79e>
  8004204e7c:	48 b9 55 d7 21 04 80 	movabs $0x800421d755,%rcx
  8004204e83:	00 00 00 
  8004204e86:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204e8d:	00 00 00 
  8004204e90:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204e95:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204e9c:	00 00 00 
  8004204e9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ea4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204eab:	00 00 00 
  8004204eae:	41 ff d0             	callq  *%r8
  8004204eb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204eb6:	74 14                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ec0:	74 0a                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204eca:	75 35                	jne    8004204f01 <check_page_alloc+0x7ee>
  8004204ecc:	48 b9 68 d7 21 04 80 	movabs $0x800421d768,%rcx
  8004204ed3:	00 00 00 
  8004204ed6:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204edd:	00 00 00 
  8004204ee0:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ee5:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204eec:	00 00 00 
  8004204eef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ef4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204efb:	00 00 00 
  8004204efe:	41 ff d0             	callq  *%r8
  8004204f01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f06:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f0d:	00 00 00 
  8004204f10:	ff d0                	callq  *%rax
  8004204f12:	48 85 c0             	test   %rax,%rax
  8004204f15:	74 35                	je     8004204f4c <check_page_alloc+0x839>
  8004204f17:	48 b9 df d7 21 04 80 	movabs $0x800421d7df,%rcx
  8004204f1e:	00 00 00 
  8004204f21:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204f28:	00 00 00 
  8004204f2b:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f30:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204f37:	00 00 00 
  8004204f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204f46:	00 00 00 
  8004204f49:	41 ff d0             	callq  *%r8
  8004204f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f50:	48 89 c7             	mov    %rax,%rdi
  8004204f53:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204f5a:	00 00 00 
  8004204f5d:	ff d0                	callq  *%rax
  8004204f5f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f64:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f69:	48 89 c7             	mov    %rax,%rdi
  8004204f6c:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004204f73:	00 00 00 
  8004204f76:	ff d0                	callq  *%rax
  8004204f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f7c:	48 89 c7             	mov    %rax,%rdi
  8004204f7f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204f86:	00 00 00 
  8004204f89:	ff d0                	callq  *%rax
  8004204f8b:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f90:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f97:	00 00 00 
  8004204f9a:	ff d0                	callq  *%rax
  8004204f9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fa0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fa5:	75 35                	jne    8004204fdc <check_page_alloc+0x8c9>
  8004204fa7:	48 b9 ee d7 21 04 80 	movabs $0x800421d7ee,%rcx
  8004204fae:	00 00 00 
  8004204fb1:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204fb8:	00 00 00 
  8004204fbb:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fc0:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004204fc7:	00 00 00 
  8004204fca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204fd6:	00 00 00 
  8004204fd9:	41 ff d0             	callq  *%r8
  8004204fdc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fe1:	74 0a                	je     8004204fed <check_page_alloc+0x8da>
  8004204fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204fe7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204feb:	74 35                	je     8004205022 <check_page_alloc+0x90f>
  8004204fed:	48 b9 0c d8 21 04 80 	movabs $0x800421d80c,%rcx
  8004204ff4:	00 00 00 
  8004204ff7:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004204ffe:	00 00 00 
  8004205001:	be 73 04 00 00       	mov    $0x473,%esi
  8004205006:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420500d:	00 00 00 
  8004205010:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205015:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420501c:	00 00 00 
  800420501f:	41 ff d0             	callq  *%r8
  8004205022:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205026:	48 89 c7             	mov    %rax,%rdi
  8004205029:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004205030:	00 00 00 
  8004205033:	ff d0                	callq  *%rax
  8004205035:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205040:	eb 4d                	jmp    800420508f <check_page_alloc+0x97c>
  8004205042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205045:	48 63 d0             	movslq %eax,%rdx
  8004205048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420504c:	48 01 d0             	add    %rdx,%rax
  800420504f:	0f b6 00             	movzbl (%rax),%eax
  8004205052:	84 c0                	test   %al,%al
  8004205054:	74 35                	je     800420508b <check_page_alloc+0x978>
  8004205056:	48 b9 1c d8 21 04 80 	movabs $0x800421d81c,%rcx
  800420505d:	00 00 00 
  8004205060:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205067:	00 00 00 
  800420506a:	be 76 04 00 00       	mov    $0x476,%esi
  800420506f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205076:	00 00 00 
  8004205079:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205085:	00 00 00 
  8004205088:	41 ff d0             	callq  *%r8
  800420508b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420508f:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205096:	7e aa                	jle    8004205042 <check_page_alloc+0x92f>
  8004205098:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420509f:	00 00 00 
  80042050a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050a6:	48 89 10             	mov    %rdx,(%rax)
  80042050a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050ad:	48 89 c7             	mov    %rax,%rdi
  80042050b0:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050b7:	00 00 00 
  80042050ba:	ff d0                	callq  *%rax
  80042050bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050c0:	48 89 c7             	mov    %rax,%rdi
  80042050c3:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050ca:	00 00 00 
  80042050cd:	ff d0                	callq  *%rax
  80042050cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050d3:	48 89 c7             	mov    %rax,%rdi
  80042050d6:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050dd:	00 00 00 
  80042050e0:	ff d0                	callq  *%rax
  80042050e2:	48 bf 28 d8 21 04 80 	movabs $0x800421d828,%rdi
  80042050e9:	00 00 00 
  80042050ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050f1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042050f8:	00 00 00 
  80042050fb:	ff d2                	callq  *%rdx
  80042050fd:	c9                   	leaveq 
  80042050fe:	c3                   	retq   

00000080042050ff <check_boot_pml4e>:
  80042050ff:	55                   	push   %rbp
  8004205100:	48 89 e5             	mov    %rsp,%rbp
  8004205103:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420510a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205111:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004205118:	00 00 00 
  800420511b:	48 8b 00             	mov    (%rax),%rax
  800420511e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205122:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205129:	00 
  800420512a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205131:	00 00 00 
  8004205134:	48 8b 00             	mov    (%rax),%rax
  8004205137:	48 c1 e0 04          	shl    $0x4,%rax
  800420513b:	48 89 c2             	mov    %rax,%rdx
  800420513e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205142:	48 01 d0             	add    %rdx,%rax
  8004205145:	48 83 e8 01          	sub    $0x1,%rax
  8004205149:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420514d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205151:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205156:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420515a:	48 89 d0             	mov    %rdx,%rax
  800420515d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205161:	48 29 c2             	sub    %rax,%rdx
  8004205164:	48 89 d0             	mov    %rdx,%rax
  8004205167:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420516b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205172:	00 
  8004205173:	e9 d4 00 00 00       	jmpq   800420524c <check_boot_pml4e+0x14d>
  8004205178:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420517f:	00 00 00 
  8004205182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205186:	48 01 c2             	add    %rax,%rdx
  8004205189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420518d:	48 89 d6             	mov    %rdx,%rsi
  8004205190:	48 89 c7             	mov    %rax,%rdi
  8004205193:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420519a:	00 00 00 
  800420519d:	ff d0                	callq  *%rax
  800420519f:	48 ba 00 a6 6d 04 80 	movabs $0x80046da600,%rdx
  80042051a6:	00 00 00 
  80042051a9:	48 8b 12             	mov    (%rdx),%rdx
  80042051ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051b0:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051b7:	00 00 00 
  80042051ba:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051be:	77 32                	ja     80042051f2 <check_boot_pml4e+0xf3>
  80042051c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051c4:	48 89 c1             	mov    %rax,%rcx
  80042051c7:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  80042051ce:	00 00 00 
  80042051d1:	be 96 04 00 00       	mov    $0x496,%esi
  80042051d6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042051dd:	00 00 00 
  80042051e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042051ec:	00 00 00 
  80042051ef:	41 ff d0             	callq  *%r8
  80042051f2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042051f9:	ff ff ff 
  80042051fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205200:	48 01 d1             	add    %rdx,%rcx
  8004205203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205207:	48 01 ca             	add    %rcx,%rdx
  800420520a:	48 39 d0             	cmp    %rdx,%rax
  800420520d:	74 35                	je     8004205244 <check_boot_pml4e+0x145>
  800420520f:	48 b9 48 d8 21 04 80 	movabs $0x800421d848,%rcx
  8004205216:	00 00 00 
  8004205219:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205220:	00 00 00 
  8004205223:	be 96 04 00 00       	mov    $0x496,%esi
  8004205228:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420522f:	00 00 00 
  8004205232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205237:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420523e:	00 00 00 
  8004205241:	41 ff d0             	callq  *%r8
  8004205244:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420524b:	00 
  800420524c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205250:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205254:	0f 82 1e ff ff ff    	jb     8004205178 <check_boot_pml4e+0x79>
  800420525a:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  8004205261:	00 
  8004205262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205266:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420526c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205270:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205274:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205279:	48 f7 75 c8          	divq   -0x38(%rbp)
  800420527d:	48 89 d0             	mov    %rdx,%rax
  8004205280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205284:	48 29 c2             	sub    %rax,%rdx
  8004205287:	48 89 d0             	mov    %rdx,%rax
  800420528a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420528e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205295:	00 
  8004205296:	e9 d4 00 00 00       	jmpq   800420536f <check_boot_pml4e+0x270>
  800420529b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052a2:	00 00 00 
  80042052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052a9:	48 01 c2             	add    %rax,%rdx
  80042052ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b0:	48 89 d6             	mov    %rdx,%rsi
  80042052b3:	48 89 c7             	mov    %rax,%rdi
  80042052b6:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042052bd:	00 00 00 
  80042052c0:	ff d0                	callq  *%rax
  80042052c2:	48 ba 58 b2 4d 04 80 	movabs $0x80044db258,%rdx
  80042052c9:	00 00 00 
  80042052cc:	48 8b 12             	mov    (%rdx),%rdx
  80042052cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052d3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052da:	00 00 00 
  80042052dd:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052e1:	77 32                	ja     8004205315 <check_boot_pml4e+0x216>
  80042052e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052e7:	48 89 c1             	mov    %rax,%rcx
  80042052ea:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  80042052f1:	00 00 00 
  80042052f4:	be 9d 04 00 00       	mov    $0x49d,%esi
  80042052f9:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205300:	00 00 00 
  8004205303:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205308:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420530f:	00 00 00 
  8004205312:	41 ff d0             	callq  *%r8
  8004205315:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420531c:	ff ff ff 
  800420531f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205323:	48 01 d1             	add    %rdx,%rcx
  8004205326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420532a:	48 01 ca             	add    %rcx,%rdx
  800420532d:	48 39 d0             	cmp    %rdx,%rax
  8004205330:	74 35                	je     8004205367 <check_boot_pml4e+0x268>
  8004205332:	48 b9 80 d8 21 04 80 	movabs $0x800421d880,%rcx
  8004205339:	00 00 00 
  800420533c:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205343:	00 00 00 
  8004205346:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420534b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205352:	00 00 00 
  8004205355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420535a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205361:	00 00 00 
  8004205364:	41 ff d0             	callq  *%r8
  8004205367:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420536e:	00 
  800420536f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205373:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205377:	0f 82 1e ff ff ff    	jb     800420529b <check_boot_pml4e+0x19c>
  800420537d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205384:	00 
  8004205385:	eb 6a                	jmp    80042053f1 <check_boot_pml4e+0x2f2>
  8004205387:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420538e:	00 00 00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 01 c2             	add    %rax,%rdx
  8004205398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420539c:	48 89 d6             	mov    %rdx,%rsi
  800420539f:	48 89 c7             	mov    %rax,%rdi
  80042053a2:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042053a9:	00 00 00 
  80042053ac:	ff d0                	callq  *%rax
  80042053ae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053b2:	74 35                	je     80042053e9 <check_boot_pml4e+0x2ea>
  80042053b4:	48 b9 b8 d8 21 04 80 	movabs $0x800421d8b8,%rcx
  80042053bb:	00 00 00 
  80042053be:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042053c5:	00 00 00 
  80042053c8:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053cd:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042053d4:	00 00 00 
  80042053d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042053e3:	00 00 00 
  80042053e6:	41 ff d0             	callq  *%r8
  80042053e9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053f0:	00 
  80042053f1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042053f8:	00 00 00 
  80042053fb:	48 8b 00             	mov    (%rax),%rax
  80042053fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205402:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205406:	0f 87 7b ff ff ff    	ja     8004205387 <check_boot_pml4e+0x288>
  800420540c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205413:	00 
  8004205414:	e9 a1 01 00 00       	jmpq   80042055ba <check_boot_pml4e+0x4bb>
  8004205419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420541d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205421:	48 89 d0             	mov    %rdx,%rax
  8004205424:	48 01 c0             	add    %rax,%rax
  8004205427:	48 01 d0             	add    %rdx,%rax
  800420542a:	48 c1 e0 0f          	shl    $0xf,%rax
  800420542e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205435:	00 00 00 
  8004205438:	48 29 c2             	sub    %rax,%rdx
  800420543b:	48 89 d0             	mov    %rdx,%rax
  800420543e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205442:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205449:	00 
  800420544a:	e9 e0 00 00 00       	jmpq   800420552f <check_boot_pml4e+0x430>
  800420544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205453:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205457:	48 01 d0             	add    %rdx,%rax
  800420545a:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  8004205461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205465:	48 89 d6             	mov    %rdx,%rsi
  8004205468:	48 89 c7             	mov    %rax,%rdi
  800420546b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205472:	00 00 00 
  8004205475:	ff d0                	callq  *%rax
  8004205477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420547b:	48 89 d1             	mov    %rdx,%rcx
  800420547e:	48 c1 e1 10          	shl    $0x10,%rcx
  8004205482:	48 ba 00 d0 6d 04 80 	movabs $0x80046dd000,%rdx
  8004205489:	00 00 00 
  800420548c:	48 01 ca             	add    %rcx,%rdx
  800420548f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004205493:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420549a:	00 00 00 
  800420549d:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054a1:	77 32                	ja     80042054d5 <check_boot_pml4e+0x3d6>
  80042054a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054a7:	48 89 c1             	mov    %rax,%rcx
  80042054aa:	48 ba 68 d4 21 04 80 	movabs $0x800421d468,%rdx
  80042054b1:	00 00 00 
  80042054b4:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054b9:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042054c0:	00 00 00 
  80042054c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054c8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042054cf:	00 00 00 
  80042054d2:	41 ff d0             	callq  *%r8
  80042054d5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054dc:	ff ff ff 
  80042054df:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054e3:	48 01 d1             	add    %rdx,%rcx
  80042054e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054ea:	48 01 ca             	add    %rcx,%rdx
  80042054ed:	48 39 d0             	cmp    %rdx,%rax
  80042054f0:	74 35                	je     8004205527 <check_boot_pml4e+0x428>
  80042054f2:	48 b9 e0 d8 21 04 80 	movabs $0x800421d8e0,%rcx
  80042054f9:	00 00 00 
  80042054fc:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205503:	00 00 00 
  8004205506:	be ab 04 00 00       	mov    $0x4ab,%esi
  800420550b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205512:	00 00 00 
  8004205515:	b8 00 00 00 00       	mov    $0x0,%eax
  800420551a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205521:	00 00 00 
  8004205524:	41 ff d0             	callq  *%r8
  8004205527:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420552e:	00 
  800420552f:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205536:	00 
  8004205537:	0f 86 12 ff ff ff    	jbe    800420544f <check_boot_pml4e+0x350>
  800420553d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205544:	00 
  8004205545:	eb 64                	jmp    80042055ab <check_boot_pml4e+0x4ac>
  8004205547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420554b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420554f:	48 01 c2             	add    %rax,%rdx
  8004205552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205556:	48 89 d6             	mov    %rdx,%rsi
  8004205559:	48 89 c7             	mov    %rax,%rdi
  800420555c:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205563:	00 00 00 
  8004205566:	ff d0                	callq  *%rax
  8004205568:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  800420556c:	74 35                	je     80042055a3 <check_boot_pml4e+0x4a4>
  800420556e:	48 b9 28 d9 21 04 80 	movabs $0x800421d928,%rcx
  8004205575:	00 00 00 
  8004205578:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420557f:	00 00 00 
  8004205582:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205587:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420558e:	00 00 00 
  8004205591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205596:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420559d:	00 00 00 
  80042055a0:	41 ff d0             	callq  *%r8
  80042055a3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055aa:	00 
  80042055ab:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055b2:	00 
  80042055b3:	76 92                	jbe    8004205547 <check_boot_pml4e+0x448>
  80042055b5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055ba:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055bf:	0f 86 54 fe ff ff    	jbe    8004205419 <check_boot_pml4e+0x31a>
  80042055c5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042055cc:	00 00 00 
  80042055cf:	48 8b 00             	mov    (%rax),%rax
  80042055d2:	48 83 c0 08          	add    $0x8,%rax
  80042055d6:	48 8b 00             	mov    (%rax),%rax
  80042055d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055eb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055ee:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055f1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042055f8:	00 00 00 
  80042055fb:	48 8b 00             	mov    (%rax),%rax
  80042055fe:	48 39 c2             	cmp    %rax,%rdx
  8004205601:	72 32                	jb     8004205635 <check_boot_pml4e+0x536>
  8004205603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205607:	48 89 c1             	mov    %rax,%rcx
  800420560a:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004205611:	00 00 00 
  8004205614:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205619:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205620:	00 00 00 
  8004205623:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205628:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420562f:	00 00 00 
  8004205632:	41 ff d0             	callq  *%r8
  8004205635:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420563c:	00 00 00 
  800420563f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205643:	48 01 d0             	add    %rdx,%rax
  8004205646:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420564a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420564e:	48 8b 00             	mov    (%rax),%rax
  8004205651:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205657:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800420565b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420565f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205663:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205666:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205669:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205670:	00 00 00 
  8004205673:	48 8b 00             	mov    (%rax),%rax
  8004205676:	48 39 c2             	cmp    %rax,%rdx
  8004205679:	72 32                	jb     80042056ad <check_boot_pml4e+0x5ae>
  800420567b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420567f:	48 89 c1             	mov    %rax,%rcx
  8004205682:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004205689:	00 00 00 
  800420568c:	be b8 04 00 00       	mov    $0x4b8,%esi
  8004205691:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205698:	00 00 00 
  800420569b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042056a7:	00 00 00 
  80042056aa:	41 ff d0             	callq  *%r8
  80042056ad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056b4:	00 00 00 
  80042056b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056bb:	48 01 d0             	add    %rdx,%rax
  80042056be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056cc:	00 
  80042056cd:	e9 50 01 00 00       	jmpq   8004205822 <check_boot_pml4e+0x723>
  80042056d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056d6:	48 83 f8 04          	cmp    $0x4,%rax
  80042056da:	72 67                	jb     8004205743 <check_boot_pml4e+0x644>
  80042056dc:	48 83 f8 05          	cmp    $0x5,%rax
  80042056e0:	76 06                	jbe    80042056e8 <check_boot_pml4e+0x5e9>
  80042056e2:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056e6:	75 5b                	jne    8004205743 <check_boot_pml4e+0x644>
  80042056e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056ec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056f3:	00 
  80042056f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056fb:	48 01 d0             	add    %rdx,%rax
  80042056fe:	48 8b 00             	mov    (%rax),%rax
  8004205701:	83 e0 01             	and    $0x1,%eax
  8004205704:	48 85 c0             	test   %rax,%rax
  8004205707:	75 35                	jne    800420573e <check_boot_pml4e+0x63f>
  8004205709:	48 b9 4b d9 21 04 80 	movabs $0x800421d94b,%rcx
  8004205710:	00 00 00 
  8004205713:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420571a:	00 00 00 
  800420571d:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205722:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205729:	00 00 00 
  800420572c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205731:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205738:	00 00 00 
  800420573b:	41 ff d0             	callq  *%r8
  800420573e:	e9 da 00 00 00       	jmpq   800420581d <check_boot_pml4e+0x71e>
  8004205743:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205748:	0f 86 ce 00 00 00    	jbe    800420581c <check_boot_pml4e+0x71d>
  800420574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205752:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205759:	00 
  800420575a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205761:	48 01 d0             	add    %rdx,%rax
  8004205764:	48 8b 00             	mov    (%rax),%rax
  8004205767:	83 e0 01             	and    $0x1,%eax
  800420576a:	48 85 c0             	test   %rax,%rax
  800420576d:	74 5a                	je     80042057c9 <check_boot_pml4e+0x6ca>
  800420576f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205773:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420577a:	00 
  800420577b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205782:	48 01 d0             	add    %rdx,%rax
  8004205785:	48 8b 00             	mov    (%rax),%rax
  8004205788:	83 e0 02             	and    $0x2,%eax
  800420578b:	48 85 c0             	test   %rax,%rax
  800420578e:	0f 85 88 00 00 00    	jne    800420581c <check_boot_pml4e+0x71d>
  8004205794:	48 b9 5c d9 21 04 80 	movabs $0x800421d95c,%rcx
  800420579b:	00 00 00 
  800420579e:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042057a5:	00 00 00 
  80042057a8:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057ad:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042057b4:	00 00 00 
  80042057b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042057c3:	00 00 00 
  80042057c6:	41 ff d0             	callq  *%r8
  80042057c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057d4:	00 
  80042057d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057dc:	48 01 d0             	add    %rdx,%rax
  80042057df:	48 8b 00             	mov    (%rax),%rax
  80042057e2:	48 85 c0             	test   %rax,%rax
  80042057e5:	74 35                	je     800420581c <check_boot_pml4e+0x71d>
  80042057e7:	48 b9 6d d9 21 04 80 	movabs $0x800421d96d,%rcx
  80042057ee:	00 00 00 
  80042057f1:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042057f8:	00 00 00 
  80042057fb:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205800:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205807:	00 00 00 
  800420580a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420580f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205816:	00 00 00 
  8004205819:	41 ff d0             	callq  *%r8
  800420581c:	90                   	nop
  800420581d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205822:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205829:	00 
  800420582a:	0f 86 a2 fe ff ff    	jbe    80042056d2 <check_boot_pml4e+0x5d3>
  8004205830:	48 bf 80 d9 21 04 80 	movabs $0x800421d980,%rdi
  8004205837:	00 00 00 
  800420583a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420583f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004205846:	00 00 00 
  8004205849:	ff d2                	callq  *%rdx
  800420584b:	c9                   	leaveq 
  800420584c:	c3                   	retq   

000000800420584d <check_va2pa>:
  800420584d:	55                   	push   %rbp
  800420584e:	48 89 e5             	mov    %rsp,%rbp
  8004205851:	48 83 ec 60          	sub    $0x60,%rsp
  8004205855:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205859:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420585d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205861:	48 c1 e8 27          	shr    $0x27,%rax
  8004205865:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420586a:	48 c1 e0 03          	shl    $0x3,%rax
  800420586e:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  8004205872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205876:	48 8b 00             	mov    (%rax),%rax
  8004205879:	83 e0 01             	and    $0x1,%eax
  800420587c:	48 85 c0             	test   %rax,%rax
  800420587f:	75 0c                	jne    800420588d <check_va2pa+0x40>
  8004205881:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205888:	e9 38 02 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  800420588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205891:	48 8b 00             	mov    (%rax),%rax
  8004205894:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420589a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420589e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058a2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058ac:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042058b3:	00 00 00 
  80042058b6:	48 8b 00             	mov    (%rax),%rax
  80042058b9:	48 39 c2             	cmp    %rax,%rdx
  80042058bc:	72 32                	jb     80042058f0 <check_va2pa+0xa3>
  80042058be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c2:	48 89 c1             	mov    %rax,%rcx
  80042058c5:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042058cc:	00 00 00 
  80042058cf:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058d4:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042058db:	00 00 00 
  80042058de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042058ea:	00 00 00 
  80042058ed:	41 ff d0             	callq  *%r8
  80042058f0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042058f7:	00 00 00 
  80042058fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058fe:	48 01 d0             	add    %rdx,%rax
  8004205901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205905:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205909:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420590d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420591e:	48 01 d0             	add    %rdx,%rax
  8004205921:	48 8b 00             	mov    (%rax),%rax
  8004205924:	83 e0 01             	and    $0x1,%eax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	75 0c                	jne    8004205938 <check_va2pa+0xeb>
  800420592c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205933:	e9 8d 01 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  8004205938:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420593c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205940:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205945:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420594c:	00 
  800420594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205951:	48 01 d0             	add    %rdx,%rax
  8004205954:	48 8b 00             	mov    (%rax),%rax
  8004205957:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420595d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205965:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205969:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420596c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420596f:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205976:	00 00 00 
  8004205979:	48 8b 00             	mov    (%rax),%rax
  800420597c:	48 39 c2             	cmp    %rax,%rdx
  800420597f:	72 32                	jb     80042059b3 <check_va2pa+0x166>
  8004205981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205985:	48 89 c1             	mov    %rax,%rcx
  8004205988:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  800420598f:	00 00 00 
  8004205992:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205997:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420599e:	00 00 00 
  80042059a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059a6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042059ad:	00 00 00 
  80042059b0:	41 ff d0             	callq  *%r8
  80042059b3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059ba:	00 00 00 
  80042059bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059c1:	48 01 d0             	add    %rdx,%rax
  80042059c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059cc:	48 c1 e8 15          	shr    $0x15,%rax
  80042059d0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042059d9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059e1:	48 8b 00             	mov    (%rax),%rax
  80042059e4:	83 e0 01             	and    $0x1,%eax
  80042059e7:	48 85 c0             	test   %rax,%rax
  80042059ea:	75 0c                	jne    80042059f8 <check_va2pa+0x1ab>
  80042059ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f3:	e9 cd 00 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  80042059f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059fc:	48 8b 00             	mov    (%rax),%rax
  80042059ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a0d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a11:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a14:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a17:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	48 39 c2             	cmp    %rax,%rdx
  8004205a27:	72 32                	jb     8004205a5b <check_va2pa+0x20e>
  8004205a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a2d:	48 89 c1             	mov    %rax,%rcx
  8004205a30:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004205a37:	00 00 00 
  8004205a3a:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a3f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205a46:	00 00 00 
  8004205a49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205a55:	00 00 00 
  8004205a58:	41 ff d0             	callq  *%r8
  8004205a5b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a62:	00 00 00 
  8004205a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a69:	48 01 d0             	add    %rdx,%rax
  8004205a6c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a74:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a78:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a84:	00 
  8004205a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a89:	48 01 d0             	add    %rdx,%rax
  8004205a8c:	48 8b 00             	mov    (%rax),%rax
  8004205a8f:	83 e0 01             	and    $0x1,%eax
  8004205a92:	48 85 c0             	test   %rax,%rax
  8004205a95:	75 09                	jne    8004205aa0 <check_va2pa+0x253>
  8004205a97:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a9e:	eb 25                	jmp    8004205ac5 <check_va2pa+0x278>
  8004205aa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aa4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aa8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205aad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ab4:	00 
  8004205ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ab9:	48 01 d0             	add    %rdx,%rax
  8004205abc:	48 8b 00             	mov    (%rax),%rax
  8004205abf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ac5:	c9                   	leaveq 
  8004205ac6:	c3                   	retq   

0000008004205ac7 <page_check>:
  8004205ac7:	55                   	push   %rbp
  8004205ac8:	48 89 e5             	mov    %rsp,%rbp
  8004205acb:	53                   	push   %rbx
  8004205acc:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205ad3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ada:	00 
  8004205adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205afb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b08:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b0f:	00 00 00 
  8004205b12:	ff d0                	callq  *%rax
  8004205b14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b18:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b1d:	75 35                	jne    8004205b54 <page_check+0x8d>
  8004205b1f:	48 b9 9f d9 21 04 80 	movabs $0x800421d99f,%rcx
  8004205b26:	00 00 00 
  8004205b29:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205b30:	00 00 00 
  8004205b33:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b38:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205b3f:	00 00 00 
  8004205b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b4e:	00 00 00 
  8004205b51:	41 ff d0             	callq  *%r8
  8004205b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b59:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b60:	00 00 00 
  8004205b63:	ff d0                	callq  *%rax
  8004205b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b69:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b6e:	75 35                	jne    8004205ba5 <page_check+0xde>
  8004205b70:	48 b9 b3 d9 21 04 80 	movabs $0x800421d9b3,%rcx
  8004205b77:	00 00 00 
  8004205b7a:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205b81:	00 00 00 
  8004205b84:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b89:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205b90:	00 00 00 
  8004205b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b9f:	00 00 00 
  8004205ba2:	41 ff d0             	callq  *%r8
  8004205ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205baa:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205bb1:	00 00 00 
  8004205bb4:	ff d0                	callq  *%rax
  8004205bb6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bbf:	75 35                	jne    8004205bf6 <page_check+0x12f>
  8004205bc1:	48 b9 c7 d9 21 04 80 	movabs $0x800421d9c7,%rcx
  8004205bc8:	00 00 00 
  8004205bcb:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205bd2:	00 00 00 
  8004205bd5:	be 04 05 00 00       	mov    $0x504,%esi
  8004205bda:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205be1:	00 00 00 
  8004205be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205bf0:	00 00 00 
  8004205bf3:	41 ff d0             	callq  *%r8
  8004205bf6:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bfb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c02:	00 00 00 
  8004205c05:	ff d0                	callq  *%rax
  8004205c07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c10:	75 35                	jne    8004205c47 <page_check+0x180>
  8004205c12:	48 b9 db d9 21 04 80 	movabs $0x800421d9db,%rcx
  8004205c19:	00 00 00 
  8004205c1c:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205c23:	00 00 00 
  8004205c26:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c2b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205c32:	00 00 00 
  8004205c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c41:	00 00 00 
  8004205c44:	41 ff d0             	callq  *%r8
  8004205c47:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c53:	00 00 00 
  8004205c56:	ff d0                	callq  *%rax
  8004205c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c61:	75 35                	jne    8004205c98 <page_check+0x1d1>
  8004205c63:	48 b9 ef d9 21 04 80 	movabs $0x800421d9ef,%rcx
  8004205c6a:	00 00 00 
  8004205c6d:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205c74:	00 00 00 
  8004205c77:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c7c:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205c83:	00 00 00 
  8004205c86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c92:	00 00 00 
  8004205c95:	41 ff d0             	callq  *%r8
  8004205c98:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9d:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205ca4:	00 00 00 
  8004205ca7:	ff d0                	callq  *%rax
  8004205ca9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cb2:	75 35                	jne    8004205ce9 <page_check+0x222>
  8004205cb4:	48 b9 03 da 21 04 80 	movabs $0x800421da03,%rcx
  8004205cbb:	00 00 00 
  8004205cbe:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205cc5:	00 00 00 
  8004205cc8:	be 07 05 00 00       	mov    $0x507,%esi
  8004205ccd:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205cd4:	00 00 00 
  8004205cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ce3:	00 00 00 
  8004205ce6:	41 ff d0             	callq  *%r8
  8004205ce9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cee:	75 35                	jne    8004205d25 <page_check+0x25e>
  8004205cf0:	48 b9 51 d7 21 04 80 	movabs $0x800421d751,%rcx
  8004205cf7:	00 00 00 
  8004205cfa:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205d01:	00 00 00 
  8004205d04:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d09:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205d10:	00 00 00 
  8004205d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d1f:	00 00 00 
  8004205d22:	41 ff d0             	callq  *%r8
  8004205d25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d2a:	74 0a                	je     8004205d36 <page_check+0x26f>
  8004205d2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d30:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d34:	75 35                	jne    8004205d6b <page_check+0x2a4>
  8004205d36:	48 b9 55 d7 21 04 80 	movabs $0x800421d755,%rcx
  8004205d3d:	00 00 00 
  8004205d40:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205d47:	00 00 00 
  8004205d4a:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d4f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205d56:	00 00 00 
  8004205d59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d65:	00 00 00 
  8004205d68:	41 ff d0             	callq  *%r8
  8004205d6b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d70:	74 14                	je     8004205d86 <page_check+0x2bf>
  8004205d72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d76:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d7a:	74 0a                	je     8004205d86 <page_check+0x2bf>
  8004205d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d80:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d84:	75 35                	jne    8004205dbb <page_check+0x2f4>
  8004205d86:	48 b9 68 d7 21 04 80 	movabs $0x800421d768,%rcx
  8004205d8d:	00 00 00 
  8004205d90:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205d97:	00 00 00 
  8004205d9a:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205d9f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205da6:	00 00 00 
  8004205da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205db5:	00 00 00 
  8004205db8:	41 ff d0             	callq  *%r8
  8004205dbb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dc0:	74 1e                	je     8004205de0 <page_check+0x319>
  8004205dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dc6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dca:	74 14                	je     8004205de0 <page_check+0x319>
  8004205dcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205dd4:	74 0a                	je     8004205de0 <page_check+0x319>
  8004205dd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dda:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dde:	75 35                	jne    8004205e15 <page_check+0x34e>
  8004205de0:	48 b9 18 da 21 04 80 	movabs $0x800421da18,%rcx
  8004205de7:	00 00 00 
  8004205dea:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205df1:	00 00 00 
  8004205df4:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205df9:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205e00:	00 00 00 
  8004205e03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e0f:	00 00 00 
  8004205e12:	41 ff d0             	callq  *%r8
  8004205e15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e1a:	74 28                	je     8004205e44 <page_check+0x37d>
  8004205e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e24:	74 1e                	je     8004205e44 <page_check+0x37d>
  8004205e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e2e:	74 14                	je     8004205e44 <page_check+0x37d>
  8004205e30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e34:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e38:	74 0a                	je     8004205e44 <page_check+0x37d>
  8004205e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e3e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e42:	75 35                	jne    8004205e79 <page_check+0x3b2>
  8004205e44:	48 b9 48 da 21 04 80 	movabs $0x800421da48,%rcx
  8004205e4b:	00 00 00 
  8004205e4e:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205e55:	00 00 00 
  8004205e58:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e5d:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205e64:	00 00 00 
  8004205e67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e73:	00 00 00 
  8004205e76:	41 ff d0             	callq  *%r8
  8004205e79:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e7e:	74 32                	je     8004205eb2 <page_check+0x3eb>
  8004205e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e88:	74 28                	je     8004205eb2 <page_check+0x3eb>
  8004205e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e8e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e92:	74 1e                	je     8004205eb2 <page_check+0x3eb>
  8004205e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e98:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e9c:	74 14                	je     8004205eb2 <page_check+0x3eb>
  8004205e9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea2:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ea6:	74 0a                	je     8004205eb2 <page_check+0x3eb>
  8004205ea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eac:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205eb0:	75 35                	jne    8004205ee7 <page_check+0x420>
  8004205eb2:	48 b9 88 da 21 04 80 	movabs $0x800421da88,%rcx
  8004205eb9:	00 00 00 
  8004205ebc:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205ec3:	00 00 00 
  8004205ec6:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ecb:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205ed2:	00 00 00 
  8004205ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205eda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ee1:	00 00 00 
  8004205ee4:	41 ff d0             	callq  *%r8
  8004205ee7:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004205eee:	00 00 00 
  8004205ef1:	48 8b 00             	mov    (%rax),%rax
  8004205ef4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205ef8:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004205eff:	00 00 00 
  8004205f02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205f15:	00 00 00 
  8004205f18:	ff d0                	callq  *%rax
  8004205f1a:	48 85 c0             	test   %rax,%rax
  8004205f1d:	74 35                	je     8004205f54 <page_check+0x48d>
  8004205f1f:	48 b9 df d7 21 04 80 	movabs $0x800421d7df,%rcx
  8004205f26:	00 00 00 
  8004205f29:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205f30:	00 00 00 
  8004205f33:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f38:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205f3f:	00 00 00 
  8004205f42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205f4e:	00 00 00 
  8004205f51:	41 ff d0             	callq  *%r8
  8004205f54:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004205f5b:	00 00 00 
  8004205f5e:	48 8b 00             	mov    (%rax),%rax
  8004205f61:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f68:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f6d:	48 89 c7             	mov    %rax,%rdi
  8004205f70:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004205f77:	00 00 00 
  8004205f7a:	ff d0                	callq  *%rax
  8004205f7c:	48 85 c0             	test   %rax,%rax
  8004205f7f:	74 35                	je     8004205fb6 <page_check+0x4ef>
  8004205f81:	48 b9 d8 da 21 04 80 	movabs $0x800421dad8,%rcx
  8004205f88:	00 00 00 
  8004205f8b:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205f92:	00 00 00 
  8004205f95:	be 18 05 00 00       	mov    $0x518,%esi
  8004205f9a:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004205fa1:	00 00 00 
  8004205fa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fa9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205fb0:	00 00 00 
  8004205fb3:	41 ff d0             	callq  *%r8
  8004205fb6:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004205fbd:	00 00 00 
  8004205fc0:	48 8b 00             	mov    (%rax),%rax
  8004205fc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fcc:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fd1:	48 89 c7             	mov    %rax,%rdi
  8004205fd4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004205fdb:	00 00 00 
  8004205fde:	ff d0                	callq  *%rax
  8004205fe0:	85 c0                	test   %eax,%eax
  8004205fe2:	78 35                	js     8004206019 <page_check+0x552>
  8004205fe4:	48 b9 10 db 21 04 80 	movabs $0x800421db10,%rcx
  8004205feb:	00 00 00 
  8004205fee:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004205ff5:	00 00 00 
  8004205ff8:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004205ffd:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206004:	00 00 00 
  8004206007:	b8 00 00 00 00       	mov    $0x0,%eax
  800420600c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206013:	00 00 00 
  8004206016:	41 ff d0             	callq  *%r8
  8004206019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420601d:	48 89 c7             	mov    %rax,%rdi
  8004206020:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004206027:	00 00 00 
  800420602a:	ff d0                	callq  *%rax
  800420602c:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420603d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206042:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206047:	48 89 c7             	mov    %rax,%rdi
  800420604a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206051:	00 00 00 
  8004206054:	ff d0                	callq  *%rax
  8004206056:	85 c0                	test   %eax,%eax
  8004206058:	78 35                	js     800420608f <page_check+0x5c8>
  800420605a:	48 b9 10 db 21 04 80 	movabs $0x800421db10,%rcx
  8004206061:	00 00 00 
  8004206064:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420606b:	00 00 00 
  800420606e:	be 1f 05 00 00       	mov    $0x51f,%esi
  8004206073:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420607a:	00 00 00 
  800420607d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206082:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206089:	00 00 00 
  800420608c:	41 ff d0             	callq  *%r8
  800420608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206093:	48 89 c7             	mov    %rax,%rdi
  8004206096:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420609d:	00 00 00 
  80042060a0:	ff d0                	callq  *%rax
  80042060a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060a6:	48 89 c7             	mov    %rax,%rdi
  80042060a9:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042060b0:	00 00 00 
  80042060b3:	ff d0                	callq  *%rax
  80042060b5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042060bc:	00 00 00 
  80042060bf:	48 8b 00             	mov    (%rax),%rax
  80042060c2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060cb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060d0:	48 89 c7             	mov    %rax,%rdi
  80042060d3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042060da:	00 00 00 
  80042060dd:	ff d0                	callq  *%rax
  80042060df:	85 c0                	test   %eax,%eax
  80042060e1:	74 35                	je     8004206118 <page_check+0x651>
  80042060e3:	48 b9 40 db 21 04 80 	movabs $0x800421db40,%rcx
  80042060ea:	00 00 00 
  80042060ed:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042060f4:	00 00 00 
  80042060f7:	be 25 05 00 00       	mov    $0x525,%esi
  80042060fc:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206103:	00 00 00 
  8004206106:	b8 00 00 00 00       	mov    $0x0,%eax
  800420610b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206112:	00 00 00 
  8004206115:	41 ff d0             	callq  *%r8
  8004206118:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420611f:	00 00 00 
  8004206122:	48 8b 00             	mov    (%rax),%rax
  8004206125:	48 8b 00             	mov    (%rax),%rax
  8004206128:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420612e:	48 89 c3             	mov    %rax,%rbx
  8004206131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206135:	48 89 c7             	mov    %rax,%rdi
  8004206138:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420613f:	00 00 00 
  8004206142:	ff d0                	callq  *%rax
  8004206144:	48 39 c3             	cmp    %rax,%rbx
  8004206147:	0f 84 97 00 00 00    	je     80042061e4 <page_check+0x71d>
  800420614d:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206154:	00 00 00 
  8004206157:	48 8b 00             	mov    (%rax),%rax
  800420615a:	48 8b 00             	mov    (%rax),%rax
  800420615d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206163:	48 89 c3             	mov    %rax,%rbx
  8004206166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420616a:	48 89 c7             	mov    %rax,%rdi
  800420616d:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206174:	00 00 00 
  8004206177:	ff d0                	callq  *%rax
  8004206179:	48 39 c3             	cmp    %rax,%rbx
  800420617c:	74 66                	je     80042061e4 <page_check+0x71d>
  800420617e:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206185:	00 00 00 
  8004206188:	48 8b 00             	mov    (%rax),%rax
  800420618b:	48 8b 00             	mov    (%rax),%rax
  800420618e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206194:	48 89 c3             	mov    %rax,%rbx
  8004206197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420619b:	48 89 c7             	mov    %rax,%rdi
  800420619e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042061a5:	00 00 00 
  80042061a8:	ff d0                	callq  *%rax
  80042061aa:	48 39 c3             	cmp    %rax,%rbx
  80042061ad:	74 35                	je     80042061e4 <page_check+0x71d>
  80042061af:	48 b9 70 db 21 04 80 	movabs $0x800421db70,%rcx
  80042061b6:	00 00 00 
  80042061b9:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042061c0:	00 00 00 
  80042061c3:	be 26 05 00 00       	mov    $0x526,%esi
  80042061c8:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042061cf:	00 00 00 
  80042061d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061d7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042061de:	00 00 00 
  80042061e1:	41 ff d0             	callq  *%r8
  80042061e4:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042061eb:	00 00 00 
  80042061ee:	48 8b 00             	mov    (%rax),%rax
  80042061f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042061f6:	48 89 c7             	mov    %rax,%rdi
  80042061f9:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206200:	00 00 00 
  8004206203:	ff d0                	callq  *%rax
  8004206205:	48 89 c3             	mov    %rax,%rbx
  8004206208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420620c:	48 89 c7             	mov    %rax,%rdi
  800420620f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206216:	00 00 00 
  8004206219:	ff d0                	callq  *%rax
  800420621b:	48 39 c3             	cmp    %rax,%rbx
  800420621e:	74 35                	je     8004206255 <page_check+0x78e>
  8004206220:	48 b9 f8 db 21 04 80 	movabs $0x800421dbf8,%rcx
  8004206227:	00 00 00 
  800420622a:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206231:	00 00 00 
  8004206234:	be 27 05 00 00       	mov    $0x527,%esi
  8004206239:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206240:	00 00 00 
  8004206243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206248:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420624f:	00 00 00 
  8004206252:	41 ff d0             	callq  *%r8
  8004206255:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206259:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420625d:	66 83 f8 01          	cmp    $0x1,%ax
  8004206261:	74 35                	je     8004206298 <page_check+0x7d1>
  8004206263:	48 b9 25 dc 21 04 80 	movabs $0x800421dc25,%rcx
  800420626a:	00 00 00 
  800420626d:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206274:	00 00 00 
  8004206277:	be 28 05 00 00       	mov    $0x528,%esi
  800420627c:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206283:	00 00 00 
  8004206286:	b8 00 00 00 00       	mov    $0x0,%eax
  800420628b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206292:	00 00 00 
  8004206295:	41 ff d0             	callq  *%r8
  8004206298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420629c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062a0:	66 83 f8 01          	cmp    $0x1,%ax
  80042062a4:	74 35                	je     80042062db <page_check+0x814>
  80042062a6:	48 b9 36 dc 21 04 80 	movabs $0x800421dc36,%rcx
  80042062ad:	00 00 00 
  80042062b0:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042062b7:	00 00 00 
  80042062ba:	be 29 05 00 00       	mov    $0x529,%esi
  80042062bf:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042062c6:	00 00 00 
  80042062c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062ce:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042062d5:	00 00 00 
  80042062d8:	41 ff d0             	callq  *%r8
  80042062db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062df:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062e3:	66 83 f8 01          	cmp    $0x1,%ax
  80042062e7:	74 35                	je     800420631e <page_check+0x857>
  80042062e9:	48 b9 47 dc 21 04 80 	movabs $0x800421dc47,%rcx
  80042062f0:	00 00 00 
  80042062f3:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042062fa:	00 00 00 
  80042062fd:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206302:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206309:	00 00 00 
  800420630c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206311:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206318:	00 00 00 
  800420631b:	41 ff d0             	callq  *%r8
  800420631e:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206325:	00 00 00 
  8004206328:	48 8b 00             	mov    (%rax),%rax
  800420632b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420632f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206334:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206339:	48 89 c7             	mov    %rax,%rdi
  800420633c:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206343:	00 00 00 
  8004206346:	ff d0                	callq  *%rax
  8004206348:	85 c0                	test   %eax,%eax
  800420634a:	74 35                	je     8004206381 <page_check+0x8ba>
  800420634c:	48 b9 58 dc 21 04 80 	movabs $0x800421dc58,%rcx
  8004206353:	00 00 00 
  8004206356:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420635d:	00 00 00 
  8004206360:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206365:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420636c:	00 00 00 
  800420636f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206374:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420637b:	00 00 00 
  800420637e:	41 ff d0             	callq  *%r8
  8004206381:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206388:	00 00 00 
  800420638b:	48 8b 00             	mov    (%rax),%rax
  800420638e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206393:	48 89 c7             	mov    %rax,%rdi
  8004206396:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420639d:	00 00 00 
  80042063a0:	ff d0                	callq  *%rax
  80042063a2:	48 89 c3             	mov    %rax,%rbx
  80042063a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063a9:	48 89 c7             	mov    %rax,%rdi
  80042063ac:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042063b3:	00 00 00 
  80042063b6:	ff d0                	callq  *%rax
  80042063b8:	48 39 c3             	cmp    %rax,%rbx
  80042063bb:	74 35                	je     80042063f2 <page_check+0x92b>
  80042063bd:	48 b9 90 dc 21 04 80 	movabs $0x800421dc90,%rcx
  80042063c4:	00 00 00 
  80042063c7:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042063ce:	00 00 00 
  80042063d1:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063d6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042063dd:	00 00 00 
  80042063e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042063ec:	00 00 00 
  80042063ef:	41 ff d0             	callq  *%r8
  80042063f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063fa:	66 83 f8 02          	cmp    $0x2,%ax
  80042063fe:	74 35                	je     8004206435 <page_check+0x96e>
  8004206400:	48 b9 c0 dc 21 04 80 	movabs $0x800421dcc0,%rcx
  8004206407:	00 00 00 
  800420640a:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206411:	00 00 00 
  8004206414:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206419:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206420:	00 00 00 
  8004206423:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206428:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420642f:	00 00 00 
  8004206432:	41 ff d0             	callq  *%r8
  8004206435:	bf 00 00 00 00       	mov    $0x0,%edi
  800420643a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004206441:	00 00 00 
  8004206444:	ff d0                	callq  *%rax
  8004206446:	48 85 c0             	test   %rax,%rax
  8004206449:	74 35                	je     8004206480 <page_check+0x9b9>
  800420644b:	48 b9 df d7 21 04 80 	movabs $0x800421d7df,%rcx
  8004206452:	00 00 00 
  8004206455:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420645c:	00 00 00 
  800420645f:	be 31 05 00 00       	mov    $0x531,%esi
  8004206464:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420646b:	00 00 00 
  800420646e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206473:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420647a:	00 00 00 
  800420647d:	41 ff d0             	callq  *%r8
  8004206480:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206487:	00 00 00 
  800420648a:	48 8b 00             	mov    (%rax),%rax
  800420648d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206491:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206496:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420649b:	48 89 c7             	mov    %rax,%rdi
  800420649e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042064a5:	00 00 00 
  80042064a8:	ff d0                	callq  *%rax
  80042064aa:	85 c0                	test   %eax,%eax
  80042064ac:	74 35                	je     80042064e3 <page_check+0xa1c>
  80042064ae:	48 b9 58 dc 21 04 80 	movabs $0x800421dc58,%rcx
  80042064b5:	00 00 00 
  80042064b8:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042064bf:	00 00 00 
  80042064c2:	be 34 05 00 00       	mov    $0x534,%esi
  80042064c7:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042064ce:	00 00 00 
  80042064d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042064dd:	00 00 00 
  80042064e0:	41 ff d0             	callq  *%r8
  80042064e3:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042064ea:	00 00 00 
  80042064ed:	48 8b 00             	mov    (%rax),%rax
  80042064f0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064f5:	48 89 c7             	mov    %rax,%rdi
  80042064f8:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042064ff:	00 00 00 
  8004206502:	ff d0                	callq  *%rax
  8004206504:	48 89 c3             	mov    %rax,%rbx
  8004206507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420650b:	48 89 c7             	mov    %rax,%rdi
  800420650e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206515:	00 00 00 
  8004206518:	ff d0                	callq  *%rax
  800420651a:	48 39 c3             	cmp    %rax,%rbx
  800420651d:	74 35                	je     8004206554 <page_check+0xa8d>
  800420651f:	48 b9 90 dc 21 04 80 	movabs $0x800421dc90,%rcx
  8004206526:	00 00 00 
  8004206529:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206530:	00 00 00 
  8004206533:	be 35 05 00 00       	mov    $0x535,%esi
  8004206538:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420653f:	00 00 00 
  8004206542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420654e:	00 00 00 
  8004206551:	41 ff d0             	callq  *%r8
  8004206554:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206558:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420655c:	66 83 f8 02          	cmp    $0x2,%ax
  8004206560:	74 35                	je     8004206597 <page_check+0xad0>
  8004206562:	48 b9 c0 dc 21 04 80 	movabs $0x800421dcc0,%rcx
  8004206569:	00 00 00 
  800420656c:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206573:	00 00 00 
  8004206576:	be 36 05 00 00       	mov    $0x536,%esi
  800420657b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206582:	00 00 00 
  8004206585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420658a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206591:	00 00 00 
  8004206594:	41 ff d0             	callq  *%r8
  8004206597:	bf 00 00 00 00       	mov    $0x0,%edi
  800420659c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042065a3:	00 00 00 
  80042065a6:	ff d0                	callq  *%rax
  80042065a8:	48 85 c0             	test   %rax,%rax
  80042065ab:	74 35                	je     80042065e2 <page_check+0xb1b>
  80042065ad:	48 b9 df d7 21 04 80 	movabs $0x800421d7df,%rcx
  80042065b4:	00 00 00 
  80042065b7:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042065be:	00 00 00 
  80042065c1:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065c6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042065cd:	00 00 00 
  80042065d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065d5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042065dc:	00 00 00 
  80042065df:	41 ff d0             	callq  *%r8
  80042065e2:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042065e9:	00 00 00 
  80042065ec:	48 8b 00             	mov    (%rax),%rax
  80042065ef:	48 8b 00             	mov    (%rax),%rax
  80042065f2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042065f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042065fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206600:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206604:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206607:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420660a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004206611:	00 00 00 
  8004206614:	48 8b 00             	mov    (%rax),%rax
  8004206617:	48 39 c2             	cmp    %rax,%rdx
  800420661a:	72 32                	jb     800420664e <page_check+0xb87>
  800420661c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206620:	48 89 c1             	mov    %rax,%rcx
  8004206623:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  800420662a:	00 00 00 
  800420662d:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206632:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206639:	00 00 00 
  800420663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206641:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206648:	00 00 00 
  800420664b:	41 ff d0             	callq  *%r8
  800420664e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206655:	00 00 00 
  8004206658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420665c:	48 01 d0             	add    %rdx,%rax
  800420665f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004206663:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206667:	48 8b 00             	mov    (%rax),%rax
  800420666a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206674:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420667c:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420667f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004206682:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004206689:	00 00 00 
  800420668c:	48 8b 00             	mov    (%rax),%rax
  800420668f:	48 39 c2             	cmp    %rax,%rdx
  8004206692:	72 32                	jb     80042066c6 <page_check+0xbff>
  8004206694:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206698:	48 89 c1             	mov    %rax,%rcx
  800420669b:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042066a2:	00 00 00 
  80042066a5:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066aa:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042066b1:	00 00 00 
  80042066b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042066c0:	00 00 00 
  80042066c3:	41 ff d0             	callq  *%r8
  80042066c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066cd:	00 00 00 
  80042066d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066d4:	48 01 d0             	add    %rdx,%rax
  80042066d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066df:	48 8b 00             	mov    (%rax),%rax
  80042066e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042066f6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042066fa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206700:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206706:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420670d:	00 00 00 
  8004206710:	48 8b 00             	mov    (%rax),%rax
  8004206713:	48 39 c2             	cmp    %rax,%rdx
  8004206716:	72 35                	jb     800420674d <page_check+0xc86>
  8004206718:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420671f:	48 89 c1             	mov    %rax,%rcx
  8004206722:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004206729:	00 00 00 
  800420672c:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206731:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206738:	00 00 00 
  800420673b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206740:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206747:	00 00 00 
  800420674a:	41 ff d0             	callq  *%r8
  800420674d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206754:	00 00 00 
  8004206757:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420675e:	48 01 d0             	add    %rdx,%rax
  8004206761:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206768:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420676f:	00 00 00 
  8004206772:	48 8b 00             	mov    (%rax),%rax
  8004206775:	ba 00 00 00 00       	mov    $0x0,%edx
  800420677a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420677f:	48 89 c7             	mov    %rax,%rdi
  8004206782:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206789:	00 00 00 
  800420678c:	ff d0                	callq  *%rax
  800420678e:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  8004206795:	48 83 c2 08          	add    $0x8,%rdx
  8004206799:	48 39 d0             	cmp    %rdx,%rax
  800420679c:	74 35                	je     80042067d3 <page_check+0xd0c>
  800420679e:	48 b9 d8 dc 21 04 80 	movabs $0x800421dcd8,%rcx
  80042067a5:	00 00 00 
  80042067a8:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042067af:	00 00 00 
  80042067b2:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067b7:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042067be:	00 00 00 
  80042067c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042067cd:	00 00 00 
  80042067d0:	41 ff d0             	callq  *%r8
  80042067d3:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042067da:	00 00 00 
  80042067dd:	48 8b 00             	mov    (%rax),%rax
  80042067e0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067e4:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067e9:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067ee:	48 89 c7             	mov    %rax,%rdi
  80042067f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042067f8:	00 00 00 
  80042067fb:	ff d0                	callq  *%rax
  80042067fd:	85 c0                	test   %eax,%eax
  80042067ff:	74 35                	je     8004206836 <page_check+0xd6f>
  8004206801:	48 b9 18 dd 21 04 80 	movabs $0x800421dd18,%rcx
  8004206808:	00 00 00 
  800420680b:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206812:	00 00 00 
  8004206815:	be 42 05 00 00       	mov    $0x542,%esi
  800420681a:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206821:	00 00 00 
  8004206824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206829:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206830:	00 00 00 
  8004206833:	41 ff d0             	callq  *%r8
  8004206836:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420683d:	00 00 00 
  8004206840:	48 8b 00             	mov    (%rax),%rax
  8004206843:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206848:	48 89 c7             	mov    %rax,%rdi
  800420684b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206852:	00 00 00 
  8004206855:	ff d0                	callq  *%rax
  8004206857:	48 89 c3             	mov    %rax,%rbx
  800420685a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420685e:	48 89 c7             	mov    %rax,%rdi
  8004206861:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206868:	00 00 00 
  800420686b:	ff d0                	callq  *%rax
  800420686d:	48 39 c3             	cmp    %rax,%rbx
  8004206870:	74 35                	je     80042068a7 <page_check+0xde0>
  8004206872:	48 b9 90 dc 21 04 80 	movabs $0x800421dc90,%rcx
  8004206879:	00 00 00 
  800420687c:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206883:	00 00 00 
  8004206886:	be 43 05 00 00       	mov    $0x543,%esi
  800420688b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206892:	00 00 00 
  8004206895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420689a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068a1:	00 00 00 
  80042068a4:	41 ff d0             	callq  *%r8
  80042068a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068af:	66 83 f8 02          	cmp    $0x2,%ax
  80042068b3:	74 35                	je     80042068ea <page_check+0xe23>
  80042068b5:	48 b9 c0 dc 21 04 80 	movabs $0x800421dcc0,%rcx
  80042068bc:	00 00 00 
  80042068bf:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042068c6:	00 00 00 
  80042068c9:	be 44 05 00 00       	mov    $0x544,%esi
  80042068ce:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042068d5:	00 00 00 
  80042068d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068e4:	00 00 00 
  80042068e7:	41 ff d0             	callq  *%r8
  80042068ea:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042068f1:	00 00 00 
  80042068f4:	48 8b 00             	mov    (%rax),%rax
  80042068f7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206901:	48 89 c7             	mov    %rax,%rdi
  8004206904:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  800420690b:	00 00 00 
  800420690e:	ff d0                	callq  *%rax
  8004206910:	48 8b 00             	mov    (%rax),%rax
  8004206913:	83 e0 04             	and    $0x4,%eax
  8004206916:	48 85 c0             	test   %rax,%rax
  8004206919:	75 35                	jne    8004206950 <page_check+0xe89>
  800420691b:	48 b9 58 dd 21 04 80 	movabs $0x800421dd58,%rcx
  8004206922:	00 00 00 
  8004206925:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420692c:	00 00 00 
  800420692f:	be 45 05 00 00       	mov    $0x545,%esi
  8004206934:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420693b:	00 00 00 
  800420693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206943:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420694a:	00 00 00 
  800420694d:	41 ff d0             	callq  *%r8
  8004206950:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206957:	00 00 00 
  800420695a:	48 8b 00             	mov    (%rax),%rax
  800420695d:	48 8b 00             	mov    (%rax),%rax
  8004206960:	83 e0 04             	and    $0x4,%eax
  8004206963:	48 85 c0             	test   %rax,%rax
  8004206966:	75 35                	jne    800420699d <page_check+0xed6>
  8004206968:	48 b9 8b dd 21 04 80 	movabs $0x800421dd8b,%rcx
  800420696f:	00 00 00 
  8004206972:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206979:	00 00 00 
  800420697c:	be 46 05 00 00       	mov    $0x546,%esi
  8004206981:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206988:	00 00 00 
  800420698b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206990:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206997:	00 00 00 
  800420699a:	41 ff d0             	callq  *%r8
  800420699d:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042069a4:	00 00 00 
  80042069a7:	48 8b 00             	mov    (%rax),%rax
  80042069aa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069b3:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069b8:	48 89 c7             	mov    %rax,%rdi
  80042069bb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042069c2:	00 00 00 
  80042069c5:	ff d0                	callq  *%rax
  80042069c7:	85 c0                	test   %eax,%eax
  80042069c9:	78 35                	js     8004206a00 <page_check+0xf39>
  80042069cb:	48 b9 a8 dd 21 04 80 	movabs $0x800421dda8,%rcx
  80042069d2:	00 00 00 
  80042069d5:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042069dc:	00 00 00 
  80042069df:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069e4:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042069eb:	00 00 00 
  80042069ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042069fa:	00 00 00 
  80042069fd:	41 ff d0             	callq  *%r8
  8004206a00:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206a07:	00 00 00 
  8004206a0a:	48 8b 00             	mov    (%rax),%rax
  8004206a0d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a11:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a16:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a1b:	48 89 c7             	mov    %rax,%rdi
  8004206a1e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206a25:	00 00 00 
  8004206a28:	ff d0                	callq  *%rax
  8004206a2a:	85 c0                	test   %eax,%eax
  8004206a2c:	74 35                	je     8004206a63 <page_check+0xf9c>
  8004206a2e:	48 b9 e0 dd 21 04 80 	movabs $0x800421dde0,%rcx
  8004206a35:	00 00 00 
  8004206a38:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206a3f:	00 00 00 
  8004206a42:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a47:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206a4e:	00 00 00 
  8004206a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206a5d:	00 00 00 
  8004206a60:	41 ff d0             	callq  *%r8
  8004206a63:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	48 8b 00             	mov    (%rax),%rax
  8004206a70:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a75:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a7a:	48 89 c7             	mov    %rax,%rdi
  8004206a7d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206a84:	00 00 00 
  8004206a87:	ff d0                	callq  *%rax
  8004206a89:	48 8b 00             	mov    (%rax),%rax
  8004206a8c:	83 e0 04             	and    $0x4,%eax
  8004206a8f:	48 85 c0             	test   %rax,%rax
  8004206a92:	74 35                	je     8004206ac9 <page_check+0x1002>
  8004206a94:	48 b9 18 de 21 04 80 	movabs $0x800421de18,%rcx
  8004206a9b:	00 00 00 
  8004206a9e:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206aa5:	00 00 00 
  8004206aa8:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206aad:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206ab4:	00 00 00 
  8004206ab7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206abc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ac3:	00 00 00 
  8004206ac6:	41 ff d0             	callq  *%r8
  8004206ac9:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206ad0:	00 00 00 
  8004206ad3:	48 8b 00             	mov    (%rax),%rax
  8004206ad6:	be 00 00 00 00       	mov    $0x0,%esi
  8004206adb:	48 89 c7             	mov    %rax,%rdi
  8004206ade:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ae5:	00 00 00 
  8004206ae8:	ff d0                	callq  *%rax
  8004206aea:	48 89 c3             	mov    %rax,%rbx
  8004206aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206af1:	48 89 c7             	mov    %rax,%rdi
  8004206af4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206afb:	00 00 00 
  8004206afe:	ff d0                	callq  *%rax
  8004206b00:	48 39 c3             	cmp    %rax,%rbx
  8004206b03:	74 35                	je     8004206b3a <page_check+0x1073>
  8004206b05:	48 b9 50 de 21 04 80 	movabs $0x800421de50,%rcx
  8004206b0c:	00 00 00 
  8004206b0f:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206b16:	00 00 00 
  8004206b19:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b1e:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206b25:	00 00 00 
  8004206b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206b34:	00 00 00 
  8004206b37:	41 ff d0             	callq  *%r8
  8004206b3a:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206b41:	00 00 00 
  8004206b44:	48 8b 00             	mov    (%rax),%rax
  8004206b47:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b4c:	48 89 c7             	mov    %rax,%rdi
  8004206b4f:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206b56:	00 00 00 
  8004206b59:	ff d0                	callq  *%rax
  8004206b5b:	48 89 c3             	mov    %rax,%rbx
  8004206b5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b62:	48 89 c7             	mov    %rax,%rdi
  8004206b65:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206b6c:	00 00 00 
  8004206b6f:	ff d0                	callq  *%rax
  8004206b71:	48 39 c3             	cmp    %rax,%rbx
  8004206b74:	74 35                	je     8004206bab <page_check+0x10e4>
  8004206b76:	48 b9 80 de 21 04 80 	movabs $0x800421de80,%rcx
  8004206b7d:	00 00 00 
  8004206b80:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206b87:	00 00 00 
  8004206b8a:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b8f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206b96:	00 00 00 
  8004206b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ba5:	00 00 00 
  8004206ba8:	41 ff d0             	callq  *%r8
  8004206bab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206baf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bb3:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bb7:	74 35                	je     8004206bee <page_check+0x1127>
  8004206bb9:	48 b9 b0 de 21 04 80 	movabs $0x800421deb0,%rcx
  8004206bc0:	00 00 00 
  8004206bc3:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206bca:	00 00 00 
  8004206bcd:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bd2:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206bd9:	00 00 00 
  8004206bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206be8:	00 00 00 
  8004206beb:	41 ff d0             	callq  *%r8
  8004206bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bf2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bf6:	66 83 f8 01          	cmp    $0x1,%ax
  8004206bfa:	74 35                	je     8004206c31 <page_check+0x116a>
  8004206bfc:	48 b9 c1 de 21 04 80 	movabs $0x800421dec1,%rcx
  8004206c03:	00 00 00 
  8004206c06:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206c0d:	00 00 00 
  8004206c10:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c15:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206c1c:	00 00 00 
  8004206c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206c2b:	00 00 00 
  8004206c2e:	41 ff d0             	callq  *%r8
  8004206c31:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206c38:	00 00 00 
  8004206c3b:	48 8b 00             	mov    (%rax),%rax
  8004206c3e:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c43:	48 89 c7             	mov    %rax,%rdi
  8004206c46:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206c4d:	00 00 00 
  8004206c50:	ff d0                	callq  *%rax
  8004206c52:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206c59:	00 00 00 
  8004206c5c:	48 8b 00             	mov    (%rax),%rax
  8004206c5f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c64:	48 89 c7             	mov    %rax,%rdi
  8004206c67:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206c6e:	00 00 00 
  8004206c71:	ff d0                	callq  *%rax
  8004206c73:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c77:	74 35                	je     8004206cae <page_check+0x11e7>
  8004206c79:	48 b9 d8 de 21 04 80 	movabs $0x800421ded8,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c92:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x1258>
  8004206cea:	48 b9 80 de 21 04 80 	movabs $0x800421de80,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d03:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x129b>
  8004206d2d:	48 b9 25 dc 21 04 80 	movabs $0x800421dc25,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d46:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x12de>
  8004206d70:	48 b9 c1 de 21 04 80 	movabs $0x800421dec1,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d89:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206db6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dc0:	48 89 c7             	mov    %rax,%rdi
  8004206dc3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206dca:	00 00 00 
  8004206dcd:	ff d0                	callq  *%rax
  8004206dcf:	85 c0                	test   %eax,%eax
  8004206dd1:	74 35                	je     8004206e08 <page_check+0x1341>
  8004206dd3:	48 b9 e0 dd 21 04 80 	movabs $0x800421dde0,%rcx
  8004206dda:	00 00 00 
  8004206ddd:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206de4:	00 00 00 
  8004206de7:	be 61 05 00 00       	mov    $0x561,%esi
  8004206dec:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206df3:	00 00 00 
  8004206df6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206dfb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e02:	00 00 00 
  8004206e05:	41 ff d0             	callq  *%r8
  8004206e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e0c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e10:	66 85 c0             	test   %ax,%ax
  8004206e13:	75 35                	jne    8004206e4a <page_check+0x1383>
  8004206e15:	48 b9 fb de 21 04 80 	movabs $0x800421defb,%rcx
  8004206e1c:	00 00 00 
  8004206e1f:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206e26:	00 00 00 
  8004206e29:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e2e:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206e35:	00 00 00 
  8004206e38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e44:	00 00 00 
  8004206e47:	41 ff d0             	callq  *%r8
  8004206e4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4e:	48 8b 00             	mov    (%rax),%rax
  8004206e51:	48 85 c0             	test   %rax,%rax
  8004206e54:	74 35                	je     8004206e8b <page_check+0x13c4>
  8004206e56:	48 b9 07 df 21 04 80 	movabs $0x800421df07,%rcx
  8004206e5d:	00 00 00 
  8004206e60:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206e67:	00 00 00 
  8004206e6a:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e6f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206e76:	00 00 00 
  8004206e79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e7e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e85:	00 00 00 
  8004206e88:	41 ff d0             	callq  *%r8
  8004206e8b:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206e92:	00 00 00 
  8004206e95:	48 8b 00             	mov    (%rax),%rax
  8004206e98:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e9d:	48 89 c7             	mov    %rax,%rdi
  8004206ea0:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206ea7:	00 00 00 
  8004206eaa:	ff d0                	callq  *%rax
  8004206eac:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	48 8b 00             	mov    (%rax),%rax
  8004206eb9:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ebe:	48 89 c7             	mov    %rax,%rdi
  8004206ec1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ec8:	00 00 00 
  8004206ecb:	ff d0                	callq  *%rax
  8004206ecd:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206ed1:	74 35                	je     8004206f08 <page_check+0x1441>
  8004206ed3:	48 b9 d8 de 21 04 80 	movabs $0x800421ded8,%rcx
  8004206eda:	00 00 00 
  8004206edd:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206ee4:	00 00 00 
  8004206ee7:	be 67 05 00 00       	mov    $0x567,%esi
  8004206eec:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206ef3:	00 00 00 
  8004206ef6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206efb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f02:	00 00 00 
  8004206f05:	41 ff d0             	callq  *%r8
  8004206f08:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206f0f:	00 00 00 
  8004206f12:	48 8b 00             	mov    (%rax),%rax
  8004206f15:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f1a:	48 89 c7             	mov    %rax,%rdi
  8004206f1d:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206f24:	00 00 00 
  8004206f27:	ff d0                	callq  *%rax
  8004206f29:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f2d:	74 35                	je     8004206f64 <page_check+0x149d>
  8004206f2f:	48 b9 20 df 21 04 80 	movabs $0x800421df20,%rcx
  8004206f36:	00 00 00 
  8004206f39:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206f40:	00 00 00 
  8004206f43:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f48:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206f4f:	00 00 00 
  8004206f52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f5e:	00 00 00 
  8004206f61:	41 ff d0             	callq  *%r8
  8004206f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f6c:	66 85 c0             	test   %ax,%ax
  8004206f6f:	74 35                	je     8004206fa6 <page_check+0x14df>
  8004206f71:	48 b9 46 df 21 04 80 	movabs $0x800421df46,%rcx
  8004206f78:	00 00 00 
  8004206f7b:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206f82:	00 00 00 
  8004206f85:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f8a:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206f91:	00 00 00 
  8004206f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f99:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fa0:	00 00 00 
  8004206fa3:	41 ff d0             	callq  *%r8
  8004206fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206faa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fae:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fb2:	74 35                	je     8004206fe9 <page_check+0x1522>
  8004206fb4:	48 b9 c1 de 21 04 80 	movabs $0x800421dec1,%rcx
  8004206fbb:	00 00 00 
  8004206fbe:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004206fc5:	00 00 00 
  8004206fc8:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fcd:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004206fd4:	00 00 00 
  8004206fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fe3:	00 00 00 
  8004206fe6:	41 ff d0             	callq  *%r8
  8004206fe9:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206ff0:	00 00 00 
  8004206ff3:	48 8b 00             	mov    (%rax),%rax
  8004206ff6:	48 8b 00             	mov    (%rax),%rax
  8004206ff9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206fff:	48 89 c7             	mov    %rax,%rdi
  8004207002:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004207009:	00 00 00 
  800420700c:	ff d0                	callq  *%rax
  800420700e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207015:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420701c:	00 00 00 
  800420701f:	48 8b 00             	mov    (%rax),%rax
  8004207022:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207029:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420702d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207031:	66 83 f8 01          	cmp    $0x1,%ax
  8004207035:	74 35                	je     800420706c <page_check+0x15a5>
  8004207037:	48 b9 c1 de 21 04 80 	movabs $0x800421dec1,%rcx
  800420703e:	00 00 00 
  8004207041:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207048:	00 00 00 
  800420704b:	be 80 05 00 00       	mov    $0x580,%esi
  8004207050:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207057:	00 00 00 
  800420705a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420705f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207066:	00 00 00 
  8004207069:	41 ff d0             	callq  *%r8
  800420706c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207073:	48 89 c7             	mov    %rax,%rdi
  8004207076:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420707d:	00 00 00 
  8004207080:	ff d0                	callq  *%rax
  8004207082:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207089:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420708d:	74 13                	je     80042070a2 <page_check+0x15db>
  800420708f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207093:	48 89 c7             	mov    %rax,%rdi
  8004207096:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420709d:	00 00 00 
  80042070a0:	ff d0                	callq  *%rax
  80042070a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070a9:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070ad:	74 13                	je     80042070c2 <page_check+0x15fb>
  80042070af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070b3:	48 89 c7             	mov    %rax,%rdi
  80042070b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070bd:	00 00 00 
  80042070c0:	ff d0                	callq  *%rax
  80042070c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070c9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070cd:	74 13                	je     80042070e2 <page_check+0x161b>
  80042070cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070d3:	48 89 c7             	mov    %rax,%rdi
  80042070d6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070dd:	00 00 00 
  80042070e0:	ff d0                	callq  *%rax
  80042070e2:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070e9:	00 40 06 00 
  80042070ed:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042070f4:	00 00 00 
  80042070f7:	48 8b 00             	mov    (%rax),%rax
  80042070fa:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207101:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207106:	48 89 ce             	mov    %rcx,%rsi
  8004207109:	48 89 c7             	mov    %rax,%rdi
  800420710c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207113:	00 00 00 
  8004207116:	ff d0                	callq  *%rax
  8004207118:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420711f:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207126:	00 00 00 
  8004207129:	48 8b 00             	mov    (%rax),%rax
  800420712c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207133:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207137:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  800420713d:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207141:	48 01 d0             	add    %rdx,%rax
  8004207144:	48 8b 00             	mov    (%rax),%rax
  8004207147:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420714d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207154:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420715b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420715f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207165:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  800420716b:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207172:	00 00 00 
  8004207175:	48 8b 00             	mov    (%rax),%rax
  8004207178:	48 39 c2             	cmp    %rax,%rdx
  800420717b:	72 35                	jb     80042071b2 <page_check+0x16eb>
  800420717d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207184:	48 89 c1             	mov    %rax,%rcx
  8004207187:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  800420718e:	00 00 00 
  8004207191:	be 88 05 00 00       	mov    $0x588,%esi
  8004207196:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420719d:	00 00 00 
  80042071a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042071ac:	00 00 00 
  80042071af:	41 ff d0             	callq  *%r8
  80042071b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071b9:	00 00 00 
  80042071bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071c3:	48 01 d0             	add    %rdx,%rax
  80042071c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071ca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071d1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071d5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071e1:	00 
  80042071e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071e6:	48 01 d0             	add    %rdx,%rax
  80042071e9:	48 8b 00             	mov    (%rax),%rax
  80042071ec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042071f9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207200:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207204:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420720a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207210:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207217:	00 00 00 
  800420721a:	48 8b 00             	mov    (%rax),%rax
  800420721d:	48 39 c2             	cmp    %rax,%rdx
  8004207220:	72 35                	jb     8004207257 <page_check+0x1790>
  8004207222:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207229:	48 89 c1             	mov    %rax,%rcx
  800420722c:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004207233:	00 00 00 
  8004207236:	be 89 05 00 00       	mov    $0x589,%esi
  800420723b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207242:	00 00 00 
  8004207245:	b8 00 00 00 00       	mov    $0x0,%eax
  800420724a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207251:	00 00 00 
  8004207254:	41 ff d0             	callq  *%r8
  8004207257:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420725e:	00 00 00 
  8004207261:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207268:	48 01 d0             	add    %rdx,%rax
  800420726b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420726f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207276:	48 c1 e8 15          	shr    $0x15,%rax
  800420727a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 8b 00             	mov    (%rax),%rax
  8004207291:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207297:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420729e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072a5:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072af:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072b5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042072bc:	00 00 00 
  80042072bf:	48 8b 00             	mov    (%rax),%rax
  80042072c2:	48 39 c2             	cmp    %rax,%rdx
  80042072c5:	72 35                	jb     80042072fc <page_check+0x1835>
  80042072c7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072ce:	48 89 c1             	mov    %rax,%rcx
  80042072d1:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042072d8:	00 00 00 
  80042072db:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072e0:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042072e7:	00 00 00 
  80042072ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042072f6:	00 00 00 
  80042072f9:	41 ff d0             	callq  *%r8
  80042072fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207303:	00 00 00 
  8004207306:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420730d:	48 01 d0             	add    %rdx,%rax
  8004207310:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207317:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420731e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207322:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207327:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420732e:	00 
  800420732f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207336:	48 01 c2             	add    %rax,%rdx
  8004207339:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207340:	48 39 c2             	cmp    %rax,%rdx
  8004207343:	74 35                	je     800420737a <page_check+0x18b3>
  8004207345:	48 b9 57 df 21 04 80 	movabs $0x800421df57,%rcx
  800420734c:	00 00 00 
  800420734f:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207356:	00 00 00 
  8004207359:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420735e:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207365:	00 00 00 
  8004207368:	b8 00 00 00 00       	mov    $0x0,%eax
  800420736d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207374:	00 00 00 
  8004207377:	41 ff d0             	callq  *%r8
  800420737a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420737e:	48 89 c7             	mov    %rax,%rdi
  8004207381:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004207388:	00 00 00 
  800420738b:	ff d0                	callq  *%rax
  800420738d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207392:	be ff 00 00 00       	mov    $0xff,%esi
  8004207397:	48 89 c7             	mov    %rax,%rdi
  800420739a:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  80042073a1:	00 00 00 
  80042073a4:	ff d0                	callq  *%rax
  80042073a6:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042073ad:	00 00 00 
  80042073b0:	48 8b 00             	mov    (%rax),%rax
  80042073b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042073bd:	48 89 c7             	mov    %rax,%rdi
  80042073c0:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042073c7:	00 00 00 
  80042073ca:	ff d0                	callq  *%rax
  80042073cc:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042073d3:	00 00 00 
  80042073d6:	48 8b 00             	mov    (%rax),%rax
  80042073d9:	48 8b 00             	mov    (%rax),%rax
  80042073dc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073e9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073f4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  80042073fa:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207400:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207407:	00 00 00 
  800420740a:	48 8b 00             	mov    (%rax),%rax
  800420740d:	48 39 c2             	cmp    %rax,%rdx
  8004207410:	72 35                	jb     8004207447 <page_check+0x1980>
  8004207412:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207419:	48 89 c1             	mov    %rax,%rcx
  800420741c:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004207423:	00 00 00 
  8004207426:	be 90 05 00 00       	mov    $0x590,%esi
  800420742b:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207432:	00 00 00 
  8004207435:	b8 00 00 00 00       	mov    $0x0,%eax
  800420743a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207441:	00 00 00 
  8004207444:	41 ff d0             	callq  *%r8
  8004207447:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420744e:	00 00 00 
  8004207451:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207458:	48 01 d0             	add    %rdx,%rax
  800420745b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420745f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004207463:	48 8b 00             	mov    (%rax),%rax
  8004207466:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420746c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004207473:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420747a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420747e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207484:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800420748a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207491:	00 00 00 
  8004207494:	48 8b 00             	mov    (%rax),%rax
  8004207497:	48 39 c2             	cmp    %rax,%rdx
  800420749a:	72 35                	jb     80042074d1 <page_check+0x1a0a>
  800420749c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074a3:	48 89 c1             	mov    %rax,%rcx
  80042074a6:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  80042074ad:	00 00 00 
  80042074b0:	be 91 05 00 00       	mov    $0x591,%esi
  80042074b5:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042074bc:	00 00 00 
  80042074bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042074cb:	00 00 00 
  80042074ce:	41 ff d0             	callq  *%r8
  80042074d1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074d8:	00 00 00 
  80042074db:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074e2:	48 01 d0             	add    %rdx,%rax
  80042074e5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074ed:	48 8b 00             	mov    (%rax),%rax
  80042074f0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042074f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042074fd:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207504:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207508:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420750e:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207514:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420751b:	00 00 00 
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 39 c2             	cmp    %rax,%rdx
  8004207524:	72 35                	jb     800420755b <page_check+0x1a94>
  8004207526:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420752d:	48 89 c1             	mov    %rax,%rcx
  8004207530:	48 ba b8 d2 21 04 80 	movabs $0x800421d2b8,%rdx
  8004207537:	00 00 00 
  800420753a:	be 92 05 00 00       	mov    $0x592,%esi
  800420753f:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207546:	00 00 00 
  8004207549:	b8 00 00 00 00       	mov    $0x0,%eax
  800420754e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207555:	00 00 00 
  8004207558:	41 ff d0             	callq  *%r8
  800420755b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207562:	00 00 00 
  8004207565:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420756c:	48 01 d0             	add    %rdx,%rax
  800420756f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420757d:	eb 58                	jmp    80042075d7 <page_check+0x1b10>
  800420757f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207586:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207589:	48 63 d2             	movslq %edx,%rdx
  800420758c:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207590:	48 01 d0             	add    %rdx,%rax
  8004207593:	48 8b 00             	mov    (%rax),%rax
  8004207596:	83 e0 01             	and    $0x1,%eax
  8004207599:	48 85 c0             	test   %rax,%rax
  800420759c:	74 35                	je     80042075d3 <page_check+0x1b0c>
  800420759e:	48 b9 6f df 21 04 80 	movabs $0x800421df6f,%rcx
  80042075a5:	00 00 00 
  80042075a8:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042075af:	00 00 00 
  80042075b2:	be 94 05 00 00       	mov    $0x594,%esi
  80042075b7:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042075be:	00 00 00 
  80042075c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042075cd:	00 00 00 
  80042075d0:	41 ff d0             	callq  *%r8
  80042075d3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075d7:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075de:	7e 9f                	jle    800420757f <page_check+0x1ab8>
  80042075e0:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042075e7:	00 00 00 
  80042075ea:	48 8b 00             	mov    (%rax),%rax
  80042075ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042075f4:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  80042075fb:	00 00 00 
  80042075fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207602:	48 89 10             	mov    %rdx,(%rax)
  8004207605:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207609:	48 89 c7             	mov    %rax,%rdi
  800420760c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207613:	00 00 00 
  8004207616:	ff d0                	callq  *%rax
  8004207618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420761c:	48 89 c7             	mov    %rax,%rdi
  800420761f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207626:	00 00 00 
  8004207629:	ff d0                	callq  *%rax
  800420762b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420762f:	48 89 c7             	mov    %rax,%rdi
  8004207632:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207639:	00 00 00 
  800420763c:	ff d0                	callq  *%rax
  800420763e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207642:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207646:	66 85 c0             	test   %ax,%ax
  8004207649:	74 35                	je     8004207680 <page_check+0x1bb9>
  800420764b:	48 b9 86 df 21 04 80 	movabs $0x800421df86,%rcx
  8004207652:	00 00 00 
  8004207655:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420765c:	00 00 00 
  800420765f:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207664:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420766b:	00 00 00 
  800420766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207673:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420767a:	00 00 00 
  800420767d:	41 ff d0             	callq  *%r8
  8004207680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207684:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207688:	66 85 c0             	test   %ax,%ax
  800420768b:	74 35                	je     80042076c2 <page_check+0x1bfb>
  800420768d:	48 b9 46 df 21 04 80 	movabs $0x800421df46,%rcx
  8004207694:	00 00 00 
  8004207697:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420769e:	00 00 00 
  80042076a1:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076a6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042076ad:	00 00 00 
  80042076b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076bc:	00 00 00 
  80042076bf:	41 ff d0             	callq  *%r8
  80042076c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076c6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076ca:	66 85 c0             	test   %ax,%ax
  80042076cd:	74 35                	je     8004207704 <page_check+0x1c3d>
  80042076cf:	48 b9 97 df 21 04 80 	movabs $0x800421df97,%rcx
  80042076d6:	00 00 00 
  80042076d9:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042076e0:	00 00 00 
  80042076e3:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076e8:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042076ef:	00 00 00 
  80042076f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076f7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076fe:	00 00 00 
  8004207701:	41 ff d0             	callq  *%r8
  8004207704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207708:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420770c:	66 85 c0             	test   %ax,%ax
  800420770f:	74 35                	je     8004207746 <page_check+0x1c7f>
  8004207711:	48 b9 a8 df 21 04 80 	movabs $0x800421dfa8,%rcx
  8004207718:	00 00 00 
  800420771b:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207722:	00 00 00 
  8004207725:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420772a:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207731:	00 00 00 
  8004207734:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207739:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207740:	00 00 00 
  8004207743:	41 ff d0             	callq  *%r8
  8004207746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420774a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420774e:	66 85 c0             	test   %ax,%ax
  8004207751:	74 35                	je     8004207788 <page_check+0x1cc1>
  8004207753:	48 b9 b9 df 21 04 80 	movabs $0x800421dfb9,%rcx
  800420775a:	00 00 00 
  800420775d:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207764:	00 00 00 
  8004207767:	be a4 05 00 00       	mov    $0x5a4,%esi
  800420776c:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207773:	00 00 00 
  8004207776:	b8 00 00 00 00       	mov    $0x0,%eax
  800420777b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207782:	00 00 00 
  8004207785:	41 ff d0             	callq  *%r8
  8004207788:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420778c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207790:	66 85 c0             	test   %ax,%ax
  8004207793:	74 35                	je     80042077ca <page_check+0x1d03>
  8004207795:	48 b9 ca df 21 04 80 	movabs $0x800421dfca,%rcx
  800420779c:	00 00 00 
  800420779f:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042077a6:	00 00 00 
  80042077a9:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ae:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042077b5:	00 00 00 
  80042077b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042077c4:	00 00 00 
  80042077c7:	41 ff d0             	callq  *%r8
  80042077ca:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077cf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077d4:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077db:	00 00 00 
  80042077de:	ff d0                	callq  *%rax
  80042077e0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077e7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077ec:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077f1:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077f8:	00 00 00 
  80042077fb:	ff d0                	callq  *%rax
  80042077fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207804:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420780b:	00 00 00 
  800420780e:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207815:	76 1d                	jbe    8004207834 <page_check+0x1d6d>
  8004207817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420781e:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207825:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420782c:	00 00 00 
  800420782f:	48 39 c2             	cmp    %rax,%rdx
  8004207832:	76 35                	jbe    8004207869 <page_check+0x1da2>
  8004207834:	48 b9 e0 df 21 04 80 	movabs $0x800421dfe0,%rcx
  800420783b:	00 00 00 
  800420783e:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207845:	00 00 00 
  8004207848:	be ac 05 00 00       	mov    $0x5ac,%esi
  800420784d:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207854:	00 00 00 
  8004207857:	b8 00 00 00 00       	mov    $0x0,%eax
  800420785c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207863:	00 00 00 
  8004207866:	41 ff d0             	callq  *%r8
  8004207869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207870:	00 00 00 
  8004207873:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  800420787a:	76 1d                	jbe    8004207899 <page_check+0x1dd2>
  800420787c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207883:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420788a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207891:	00 00 00 
  8004207894:	48 39 c2             	cmp    %rax,%rdx
  8004207897:	76 35                	jbe    80042078ce <page_check+0x1e07>
  8004207899:	48 b9 08 e0 21 04 80 	movabs $0x800421e008,%rcx
  80042078a0:	00 00 00 
  80042078a3:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042078aa:	00 00 00 
  80042078ad:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078b2:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042078b9:	00 00 00 
  80042078bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042078c8:	00 00 00 
  80042078cb:	41 ff d0             	callq  *%r8
  80042078ce:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078d5:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078da:	48 85 c0             	test   %rax,%rax
  80042078dd:	75 11                	jne    80042078f0 <page_check+0x1e29>
  80042078df:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078e6:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078eb:	48 85 c0             	test   %rax,%rax
  80042078ee:	74 35                	je     8004207925 <page_check+0x1e5e>
  80042078f0:	48 b9 30 e0 21 04 80 	movabs $0x800421e030,%rcx
  80042078f7:	00 00 00 
  80042078fa:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207901:	00 00 00 
  8004207904:	be af 05 00 00       	mov    $0x5af,%esi
  8004207909:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207910:	00 00 00 
  8004207913:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207918:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420791f:	00 00 00 
  8004207922:	41 ff d0             	callq  *%r8
  8004207925:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420792c:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207932:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207939:	76 35                	jbe    8004207970 <page_check+0x1ea9>
  800420793b:	48 b9 57 e0 21 04 80 	movabs $0x800421e057,%rcx
  8004207942:	00 00 00 
  8004207945:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  800420794c:	00 00 00 
  800420794f:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207954:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  800420795b:	00 00 00 
  800420795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207963:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420796a:	00 00 00 
  800420796d:	41 ff d0             	callq  *%r8
  8004207970:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207977:	00 00 00 
  800420797a:	48 8b 00             	mov    (%rax),%rax
  800420797d:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207984:	48 89 d6             	mov    %rdx,%rsi
  8004207987:	48 89 c7             	mov    %rax,%rdi
  800420798a:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207991:	00 00 00 
  8004207994:	ff d0                	callq  *%rax
  8004207996:	48 85 c0             	test   %rax,%rax
  8004207999:	74 35                	je     80042079d0 <page_check+0x1f09>
  800420799b:	48 b9 70 e0 21 04 80 	movabs $0x800421e070,%rcx
  80042079a2:	00 00 00 
  80042079a5:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  80042079ac:	00 00 00 
  80042079af:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079b4:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  80042079bb:	00 00 00 
  80042079be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079c3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042079ca:	00 00 00 
  80042079cd:	41 ff d0             	callq  *%r8
  80042079d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079d7:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079de:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042079e5:	00 00 00 
  80042079e8:	48 8b 00             	mov    (%rax),%rax
  80042079eb:	48 89 d6             	mov    %rdx,%rsi
  80042079ee:	48 89 c7             	mov    %rax,%rdi
  80042079f1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042079f8:	00 00 00 
  80042079fb:	ff d0                	callq  *%rax
  80042079fd:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a03:	74 35                	je     8004207a3a <page_check+0x1f73>
  8004207a05:	48 b9 98 e0 21 04 80 	movabs $0x800421e098,%rcx
  8004207a0c:	00 00 00 
  8004207a0f:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207a16:	00 00 00 
  8004207a19:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a1e:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207a25:	00 00 00 
  8004207a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a34:	00 00 00 
  8004207a37:	41 ff d0             	callq  *%r8
  8004207a3a:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207a41:	00 00 00 
  8004207a44:	48 8b 00             	mov    (%rax),%rax
  8004207a47:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a4e:	48 89 d6             	mov    %rdx,%rsi
  8004207a51:	48 89 c7             	mov    %rax,%rdi
  8004207a54:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207a5b:	00 00 00 
  8004207a5e:	ff d0                	callq  *%rax
  8004207a60:	48 85 c0             	test   %rax,%rax
  8004207a63:	74 35                	je     8004207a9a <page_check+0x1fd3>
  8004207a65:	48 b9 c8 e0 21 04 80 	movabs $0x800421e0c8,%rcx
  8004207a6c:	00 00 00 
  8004207a6f:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207a76:	00 00 00 
  8004207a79:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a7e:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207a85:	00 00 00 
  8004207a88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a94:	00 00 00 
  8004207a97:	41 ff d0             	callq  *%r8
  8004207a9a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aa1:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207aa8:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207aaf:	00 00 00 
  8004207ab2:	48 8b 00             	mov    (%rax),%rax
  8004207ab5:	48 89 d6             	mov    %rdx,%rsi
  8004207ab8:	48 89 c7             	mov    %rax,%rdi
  8004207abb:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207ac2:	00 00 00 
  8004207ac5:	ff d0                	callq  *%rax
  8004207ac7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207acb:	74 35                	je     8004207b02 <page_check+0x203b>
  8004207acd:	48 b9 f0 e0 21 04 80 	movabs $0x800421e0f0,%rcx
  8004207ad4:	00 00 00 
  8004207ad7:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207ade:	00 00 00 
  8004207ae1:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207ae6:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207aed:	00 00 00 
  8004207af0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207af5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207afc:	00 00 00 
  8004207aff:	41 ff d0             	callq  *%r8
  8004207b02:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b09:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207b10:	00 00 00 
  8004207b13:	48 8b 00             	mov    (%rax),%rax
  8004207b16:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b1b:	48 89 ce             	mov    %rcx,%rsi
  8004207b1e:	48 89 c7             	mov    %rax,%rdi
  8004207b21:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b28:	00 00 00 
  8004207b2b:	ff d0                	callq  *%rax
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	83 e0 1a             	and    $0x1a,%eax
  8004207b33:	48 85 c0             	test   %rax,%rax
  8004207b36:	75 35                	jne    8004207b6d <page_check+0x20a6>
  8004207b38:	48 b9 20 e1 21 04 80 	movabs $0x800421e120,%rcx
  8004207b3f:	00 00 00 
  8004207b42:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207b49:	00 00 00 
  8004207b4c:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b51:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207b58:	00 00 00 
  8004207b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207b67:	00 00 00 
  8004207b6a:	41 ff d0             	callq  *%r8
  8004207b6d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b74:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207b7b:	00 00 00 
  8004207b7e:	48 8b 00             	mov    (%rax),%rax
  8004207b81:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b86:	48 89 ce             	mov    %rcx,%rsi
  8004207b89:	48 89 c7             	mov    %rax,%rdi
  8004207b8c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b93:	00 00 00 
  8004207b96:	ff d0                	callq  *%rax
  8004207b98:	48 8b 00             	mov    (%rax),%rax
  8004207b9b:	83 e0 04             	and    $0x4,%eax
  8004207b9e:	48 85 c0             	test   %rax,%rax
  8004207ba1:	74 35                	je     8004207bd8 <page_check+0x2111>
  8004207ba3:	48 b9 68 e1 21 04 80 	movabs $0x800421e168,%rcx
  8004207baa:	00 00 00 
  8004207bad:	48 ba 31 d3 21 04 80 	movabs $0x800421d331,%rdx
  8004207bb4:	00 00 00 
  8004207bb7:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bbc:	48 bf 46 d3 21 04 80 	movabs $0x800421d346,%rdi
  8004207bc3:	00 00 00 
  8004207bc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bcb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207bd2:	00 00 00 
  8004207bd5:	41 ff d0             	callq  *%r8
  8004207bd8:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207bdf:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207be6:	00 00 00 
  8004207be9:	48 8b 00             	mov    (%rax),%rax
  8004207bec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bf1:	48 89 ce             	mov    %rcx,%rsi
  8004207bf4:	48 89 c7             	mov    %rax,%rdi
  8004207bf7:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207bfe:	00 00 00 
  8004207c01:	ff d0                	callq  *%rax
  8004207c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c0a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c11:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c17:	48 89 c1             	mov    %rax,%rcx
  8004207c1a:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207c21:	00 00 00 
  8004207c24:	48 8b 00             	mov    (%rax),%rax
  8004207c27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c2c:	48 89 ce             	mov    %rcx,%rsi
  8004207c2f:	48 89 c7             	mov    %rax,%rdi
  8004207c32:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c39:	00 00 00 
  8004207c3c:	ff d0                	callq  *%rax
  8004207c3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c45:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c4c:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207c53:	00 00 00 
  8004207c56:	48 8b 00             	mov    (%rax),%rax
  8004207c59:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c5e:	48 89 ce             	mov    %rcx,%rsi
  8004207c61:	48 89 c7             	mov    %rax,%rdi
  8004207c64:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c6b:	00 00 00 
  8004207c6e:	ff d0                	callq  *%rax
  8004207c70:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c77:	48 bf 9b e1 21 04 80 	movabs $0x800421e19b,%rdi
  8004207c7e:	00 00 00 
  8004207c81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c86:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004207c8d:	00 00 00 
  8004207c90:	ff d2                	callq  *%rdx
  8004207c92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207c99:	5b                   	pop    %rbx
  8004207c9a:	5d                   	pop    %rbp
  8004207c9b:	c3                   	retq   

0000008004207c9c <page2ppn>:
  8004207c9c:	55                   	push   %rbp
  8004207c9d:	48 89 e5             	mov    %rsp,%rbp
  8004207ca0:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cac:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004207cb3:	00 00 00 
  8004207cb6:	48 8b 00             	mov    (%rax),%rax
  8004207cb9:	48 29 c2             	sub    %rax,%rdx
  8004207cbc:	48 89 d0             	mov    %rdx,%rax
  8004207cbf:	48 c1 f8 04          	sar    $0x4,%rax
  8004207cc3:	c9                   	leaveq 
  8004207cc4:	c3                   	retq   

0000008004207cc5 <page2pa>:
  8004207cc5:	55                   	push   %rbp
  8004207cc6:	48 89 e5             	mov    %rsp,%rbp
  8004207cc9:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cd5:	48 89 c7             	mov    %rax,%rdi
  8004207cd8:	48 b8 9c 7c 20 04 80 	movabs $0x8004207c9c,%rax
  8004207cdf:	00 00 00 
  8004207ce2:	ff d0                	callq  *%rax
  8004207ce4:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207ce8:	c9                   	leaveq 
  8004207ce9:	c3                   	retq   

0000008004207cea <pa2page>:
  8004207cea:	55                   	push   %rbp
  8004207ceb:	48 89 e5             	mov    %rsp,%rbp
  8004207cee:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207cfe:	48 89 c2             	mov    %rax,%rdx
  8004207d01:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207d08:	00 00 00 
  8004207d0b:	48 8b 00             	mov    (%rax),%rax
  8004207d0e:	48 39 c2             	cmp    %rax,%rdx
  8004207d11:	72 2a                	jb     8004207d3d <pa2page+0x53>
  8004207d13:	48 ba b8 e1 21 04 80 	movabs $0x800421e1b8,%rdx
  8004207d1a:	00 00 00 
  8004207d1d:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d22:	48 bf d7 e1 21 04 80 	movabs $0x800421e1d7,%rdi
  8004207d29:	00 00 00 
  8004207d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d31:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004207d38:	00 00 00 
  8004207d3b:	ff d1                	callq  *%rcx
  8004207d3d:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004207d44:	00 00 00 
  8004207d47:	48 8b 00             	mov    (%rax),%rax
  8004207d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d4e:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d52:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d56:	48 01 d0             	add    %rdx,%rax
  8004207d59:	c9                   	leaveq 
  8004207d5a:	c3                   	retq   

0000008004207d5b <page2kva>:
  8004207d5b:	55                   	push   %rbp
  8004207d5c:	48 89 e5             	mov    %rsp,%rbp
  8004207d5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d6b:	48 89 c7             	mov    %rax,%rdi
  8004207d6e:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004207d75:	00 00 00 
  8004207d78:	ff d0                	callq  *%rax
  8004207d7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d8c:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207d93:	00 00 00 
  8004207d96:	48 8b 00             	mov    (%rax),%rax
  8004207d99:	48 39 c2             	cmp    %rax,%rdx
  8004207d9c:	72 32                	jb     8004207dd0 <page2kva+0x75>
  8004207d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207da2:	48 89 c1             	mov    %rax,%rcx
  8004207da5:	48 ba e8 e1 21 04 80 	movabs $0x800421e1e8,%rdx
  8004207dac:	00 00 00 
  8004207daf:	be 62 00 00 00       	mov    $0x62,%esi
  8004207db4:	48 bf d7 e1 21 04 80 	movabs $0x800421e1d7,%rdi
  8004207dbb:	00 00 00 
  8004207dbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dc3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207dca:	00 00 00 
  8004207dcd:	41 ff d0             	callq  *%r8
  8004207dd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207dd7:	00 00 00 
  8004207dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dde:	48 01 d0             	add    %rdx,%rax
  8004207de1:	c9                   	leaveq 
  8004207de2:	c3                   	retq   

0000008004207de3 <unlock_kernel>:
  8004207de3:	55                   	push   %rbp
  8004207de4:	48 89 e5             	mov    %rsp,%rbp
  8004207de7:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004207dee:	00 00 00 
  8004207df1:	48 b8 f4 7d 21 04 80 	movabs $0x8004217df4,%rax
  8004207df8:	00 00 00 
  8004207dfb:	ff d0                	callq  *%rax
  8004207dfd:	f3 90                	pause  
  8004207dff:	5d                   	pop    %rbp
  8004207e00:	c3                   	retq   

0000008004207e01 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e01:	55                   	push   %rbp
  8004207e02:	48 89 e5             	mov    %rsp,%rbp
  8004207e05:	53                   	push   %rbx
  8004207e06:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e0a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e11:	89 d0                	mov    %edx,%eax
  8004207e13:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207e16:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e1a:	75 41                	jne    8004207e5d <envid2env+0x5c>
		*env_store = curenv;
  8004207e1c:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004207e23:	00 00 00 
  8004207e26:	ff d0                	callq  *%rax
  8004207e28:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004207e2f:	00 00 00 
  8004207e32:	48 98                	cltq   
  8004207e34:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e38:	48 89 c1             	mov    %rax,%rcx
  8004207e3b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e3f:	48 01 c8             	add    %rcx,%rax
  8004207e42:	48 01 d0             	add    %rdx,%rax
  8004207e45:	48 83 c0 08          	add    $0x8,%rax
  8004207e49:	48 8b 10             	mov    (%rax),%rdx
  8004207e4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e50:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207e53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e58:	e9 fd 00 00 00       	jmpq   8004207f5a <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207e5d:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207e64:	00 00 00 
  8004207e67:	48 8b 10             	mov    (%rax),%rdx
  8004207e6a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e6d:	48 98                	cltq   
  8004207e6f:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e74:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e7b:	48 01 d0             	add    %rdx,%rax
  8004207e7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e86:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e8c:	85 c0                	test   %eax,%eax
  8004207e8e:	74 0f                	je     8004207e9f <envid2env+0x9e>
  8004207e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e94:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207e9a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207e9d:	74 15                	je     8004207eb4 <envid2env+0xb3>
		*env_store = 0;
  8004207e9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207ea3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207eaa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207eaf:	e9 a6 00 00 00       	jmpq   8004207f5a <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207eb4:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207eb8:	0f 84 8c 00 00 00    	je     8004207f4a <envid2env+0x149>
  8004207ebe:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004207ec5:	00 00 00 
  8004207ec8:	ff d0                	callq  *%rax
  8004207eca:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004207ed1:	00 00 00 
  8004207ed4:	48 98                	cltq   
  8004207ed6:	48 c1 e0 03          	shl    $0x3,%rax
  8004207eda:	48 89 c1             	mov    %rax,%rcx
  8004207edd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207ee1:	48 01 c8             	add    %rcx,%rax
  8004207ee4:	48 01 d0             	add    %rdx,%rax
  8004207ee7:	48 83 c0 08          	add    $0x8,%rax
  8004207eeb:	48 8b 00             	mov    (%rax),%rax
  8004207eee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207ef2:	74 56                	je     8004207f4a <envid2env+0x149>
  8004207ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ef8:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207efe:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004207f05:	00 00 00 
  8004207f08:	ff d0                	callq  *%rax
  8004207f0a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004207f11:	00 00 00 
  8004207f14:	48 98                	cltq   
  8004207f16:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f1a:	48 89 c1             	mov    %rax,%rcx
  8004207f1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f21:	48 01 c8             	add    %rcx,%rax
  8004207f24:	48 01 d0             	add    %rdx,%rax
  8004207f27:	48 83 c0 08          	add    $0x8,%rax
  8004207f2b:	48 8b 00             	mov    (%rax),%rax
  8004207f2e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f34:	39 c3                	cmp    %eax,%ebx
  8004207f36:	74 12                	je     8004207f4a <envid2env+0x149>
		*env_store = 0;
  8004207f38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f3c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207f43:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f48:	eb 10                	jmp    8004207f5a <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  8004207f4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f52:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  8004207f55:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f5a:	48 83 c4 28          	add    $0x28,%rsp
  8004207f5e:	5b                   	pop    %rbx
  8004207f5f:	5d                   	pop    %rbp
  8004207f60:	c3                   	retq   

0000008004207f61 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f61:	55                   	push   %rbp
  8004207f62:	48 89 e5             	mov    %rsp,%rbp
  8004207f65:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f70:	eb 6d                	jmp    8004207fdf <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f72:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207f79:	00 00 00 
  8004207f7c:	48 8b 10             	mov    (%rax),%rdx
  8004207f7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f82:	48 98                	cltq   
  8004207f84:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f8b:	48 01 d0             	add    %rdx,%rax
  8004207f8e:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207f95:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207f98:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207f9f:	00 00 00 
  8004207fa2:	48 8b 10             	mov    (%rax),%rdx
  8004207fa5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fa8:	48 98                	cltq   
  8004207faa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fb1:	48 01 c2             	add    %rax,%rdx
  8004207fb4:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207fbb:	00 00 00 
  8004207fbe:	48 8b 08             	mov    (%rax),%rcx
  8004207fc1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fc4:	48 98                	cltq   
  8004207fc6:	48 83 c0 01          	add    $0x1,%rax
  8004207fca:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fd1:	48 01 c8             	add    %rcx,%rax
  8004207fd4:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207fdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207fdf:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207fe6:	7e 8a                	jle    8004207f72 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207fe8:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207fef:	00 00 00 
  8004207ff2:	48 8b 00             	mov    (%rax),%rax
  8004207ff5:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004207ffb:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208002:	00 00 00 00 
	env_free_list = &envs[0];
  8004208006:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420800d:	00 00 00 
  8004208010:	48 8b 10             	mov    (%rax),%rdx
  8004208013:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  800420801a:	00 00 00 
  800420801d:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208020:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  8004208027:	00 00 00 
  800420802a:	ff d0                	callq  *%rax
}
  800420802c:	c9                   	leaveq 
  800420802d:	c3                   	retq   

000000800420802e <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  800420802e:	55                   	push   %rbp
  800420802f:	48 89 e5             	mov    %rsp,%rbp
  8004208032:	53                   	push   %rbx
  8004208033:	48 83 ec 10          	sub    $0x10,%rsp
  8004208037:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420803e:	00 00 00 
  8004208041:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208049:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  800420804c:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208051:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004208053:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208058:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  800420805a:	b8 10 00 00 00       	mov    $0x10,%eax
  800420805f:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  8004208061:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208066:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208068:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806d:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420806f:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208074:	89 c3                	mov    %eax,%ebx
  8004208076:	53                   	push   %rbx
  8004208077:	48 b8 84 80 20 04 80 	movabs $0x8004208084,%rax
  800420807e:	00 00 00 
  8004208081:	50                   	push   %rax
  8004208082:	48 cb                	lretq  
  8004208084:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  800420808a:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420808e:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208091:	48 83 c4 10          	add    $0x10,%rsp
  8004208095:	5b                   	pop    %rbx
  8004208096:	5d                   	pop    %rbp
  8004208097:	c3                   	retq   

0000008004208098 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004208098:	55                   	push   %rbp
  8004208099:	48 89 e5             	mov    %rsp,%rbp
  800420809c:	48 83 ec 20          	sub    $0x20,%rsp
  80042080a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042080a4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080ab:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042080ac:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080b1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042080b8:	00 00 00 
  80042080bb:	ff d0                	callq  *%rax
  80042080bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080c6:	75 0a                	jne    80042080d2 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042080c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080cd:	e9 bc 00 00 00       	jmpq   800420818e <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042080d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080d6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080da:	8d 50 01             	lea    0x1(%rax),%edx
  80042080dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e1:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042080e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e9:	48 89 c7             	mov    %rax,%rdi
  80042080ec:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042080f3:	00 00 00 
  80042080f6:	ff d0                	callq  *%rax
  80042080f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080fc:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208107:	48 89 c7             	mov    %rax,%rdi
  800420810a:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004208111:	00 00 00 
  8004208114:	ff d0                	callq  *%rax
  8004208116:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420811a:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  8004208121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208125:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420812c:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208131:	be 00 00 00 00       	mov    $0x0,%esi
  8004208136:	48 89 c7             	mov    %rax,%rdi
  8004208139:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004208140:	00 00 00 
  8004208143:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  8004208145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208149:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208150:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208154:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420815b:	00 00 00 
  800420815e:	48 8b 00             	mov    (%rax),%rax
  8004208161:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208165:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420816c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208173:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208177:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420817b:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208182:	48 83 c8 05          	or     $0x5,%rax
  8004208186:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208189:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420818e:	c9                   	leaveq 
  800420818f:	c3                   	retq   

0000008004208190 <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208190:	55                   	push   %rbp
  8004208191:	48 89 e5             	mov    %rsp,%rbp
  8004208194:	48 83 ec 50          	sub    $0x50,%rsp
  8004208198:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420819c:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  800420819f:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  80042081a6:	00 00 00 
  80042081a9:	48 8b 00             	mov    (%rax),%rax
  80042081ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081b0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081b5:	75 0a                	jne    80042081c1 <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042081b7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081bc:	e9 47 04 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  80042081c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081c5:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081cb:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081d0:	be 00 00 00 00       	mov    $0x0,%esi
  80042081d5:	48 89 c7             	mov    %rax,%rdi
  80042081d8:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  80042081df:	00 00 00 
  80042081e2:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  80042081e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081eb:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081ec:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042081f8:	00 00 00 
  80042081fb:	ff d0                	callq  *%rax
  80042081fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208201:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208206:	75 0a                	jne    8004208212 <env_guest_alloc+0x82>
		return -E_NO_MEM;
  8004208208:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420820d:	e9 f6 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  8004208212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208216:	ba 10 00 00 00       	mov    $0x10,%edx
  800420821b:	be 00 00 00 00       	mov    $0x0,%esi
  8004208220:	48 89 c7             	mov    %rax,%rdi
  8004208223:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  800420822a:	00 00 00 
  800420822d:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  800420822f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208233:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208237:	8d 50 01             	lea    0x1(%rax),%edx
  800420823a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823e:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  8004208242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208246:	48 89 c7             	mov    %rax,%rdi
  8004208249:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208250:	00 00 00 
  8004208253:	ff d0                	callq  *%rax
  8004208255:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208259:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208260:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208264:	48 89 c7             	mov    %rax,%rdi
  8004208267:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  800420826e:	00 00 00 
  8004208271:	ff d0                	callq  *%rax
  8004208273:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208277:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  800420827e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208283:	48 ba 1a 9e 21 04 80 	movabs $0x8004219e1a,%rdx
  800420828a:	00 00 00 
  800420828d:	ff d2                	callq  *%rdx
  800420828f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  8004208293:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004208298:	75 1d                	jne    80042082b7 <env_guest_alloc+0x127>
		page_decref(p);
  800420829a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420829e:	48 89 c7             	mov    %rax,%rdi
  80042082a1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082a8:	00 00 00 
  80042082ab:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082ad:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082b2:	e9 51 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  80042082b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082bb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082bf:	8d 50 01             	lea    0x1(%rax),%edx
  80042082c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c6:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  80042082ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082ce:	48 89 c7             	mov    %rax,%rdi
  80042082d1:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042082d8:	00 00 00 
  80042082db:	ff d0                	callq  *%rax
  80042082dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082e1:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  80042082e8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082ef:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082f0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042082f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042082fc:	00 00 00 
  80042082ff:	ff d0                	callq  *%rax
  8004208301:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208305:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420830a:	75 30                	jne    800420833c <env_guest_alloc+0x1ac>
		page_decref(p);
  800420830c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208310:	48 89 c7             	mov    %rax,%rdi
  8004208313:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420831a:	00 00 00 
  800420831d:	ff d0                	callq  *%rax
		page_decref(q);
  800420831f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208323:	48 89 c7             	mov    %rax,%rdi
  8004208326:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420832d:	00 00 00 
  8004208330:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  8004208332:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208337:	e9 cc 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  800420833c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208340:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208344:	8d 50 01             	lea    0x1(%rax),%edx
  8004208347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834b:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  800420834f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208353:	48 89 c7             	mov    %rax,%rdi
  8004208356:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420835d:	00 00 00 
  8004208360:	ff d0                	callq  *%rax
  8004208362:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208366:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  800420836d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208371:	48 89 c7             	mov    %rax,%rdi
  8004208374:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420837b:	00 00 00 
  800420837e:	ff d0                	callq  *%rax
  8004208380:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838b:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  8004208392:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004208399:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  800420839a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420839f:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042083a6:	00 00 00 
  80042083a9:	ff d0                	callq  *%rax
  80042083ab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083af:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083b4:	75 43                	jne    80042083f9 <env_guest_alloc+0x269>
		page_decref(p);
  80042083b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083ba:	48 89 c7             	mov    %rax,%rdi
  80042083bd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083c4:	00 00 00 
  80042083c7:	ff d0                	callq  *%rax
		page_decref(q);
  80042083c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083cd:	48 89 c7             	mov    %rax,%rdi
  80042083d0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083d7:	00 00 00 
  80042083da:	ff d0                	callq  *%rax
		page_decref(r);
  80042083dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083e0:	48 89 c7             	mov    %rax,%rdi
  80042083e3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083ea:	00 00 00 
  80042083ed:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083ef:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042083f4:	e9 0f 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  80042083f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083fd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208401:	8d 50 01             	lea    0x1(%rax),%edx
  8004208404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208408:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  800420840c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208410:	48 89 c7             	mov    %rax,%rdi
  8004208413:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420841a:	00 00 00 
  800420841d:	ff d0                	callq  *%rax
  800420841f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208423:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  800420842a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004208431:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  8004208432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208437:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420843e:	00 00 00 
  8004208441:	ff d0                	callq  *%rax
  8004208443:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208447:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420844c:	75 56                	jne    80042084a4 <env_guest_alloc+0x314>
		page_decref(p);
  800420844e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208452:	48 89 c7             	mov    %rax,%rdi
  8004208455:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420845c:	00 00 00 
  800420845f:	ff d0                	callq  *%rax
		page_decref(q);
  8004208461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208465:	48 89 c7             	mov    %rax,%rdi
  8004208468:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420846f:	00 00 00 
  8004208472:	ff d0                	callq  *%rax
		page_decref(r);
  8004208474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208478:	48 89 c7             	mov    %rax,%rdi
  800420847b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208482:	00 00 00 
  8004208485:	ff d0                	callq  *%rax
		page_decref(s);
  8004208487:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420848b:	48 89 c7             	mov    %rax,%rdi
  800420848e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208495:	00 00 00 
  8004208498:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420849a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420849f:	e9 64 01 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  80042084a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084ac:	8d 50 01             	lea    0x1(%rax),%edx
  80042084af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b3:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  80042084b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bb:	48 89 c7             	mov    %rax,%rdi
  80042084be:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042084c5:	00 00 00 
  80042084c8:	ff d0                	callq  *%rax
  80042084ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084ce:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042084d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084d9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084df:	05 00 10 00 00       	add    $0x1000,%eax
  80042084e4:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084e9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084f0:	7f 07                	jg     80042084f9 <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084f2:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042084f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084fd:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004208504:	00 00 00 
  8004208507:	48 8b 00             	mov    (%rax),%rax
  800420850a:	48 29 c2             	sub    %rax,%rdx
  800420850d:	48 89 d0             	mov    %rdx,%rax
  8004208510:	48 c1 f8 03          	sar    $0x3,%rax
  8004208514:	48 89 c2             	mov    %rax,%rdx
  8004208517:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420851e:	fa a4 4f 
  8004208521:	48 0f af c2          	imul   %rdx,%rax
  8004208525:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208528:	89 c2                	mov    %eax,%edx
  800420852a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420852e:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208538:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  800420853b:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  8004208541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208545:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  800420854c:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  800420854f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208553:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420855a:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  800420855d:	48 b8 50 b2 4d 04 80 	movabs $0x80044db250,%rax
  8004208564:	00 00 00 
  8004208567:	8b 00                	mov    (%rax),%eax
  8004208569:	8d 48 01             	lea    0x1(%rax),%ecx
  800420856c:	48 ba 50 b2 4d 04 80 	movabs $0x80044db250,%rdx
  8004208573:	00 00 00 
  8004208576:	89 0a                	mov    %ecx,(%rdx)
  8004208578:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420857c:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  8004208582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208586:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  800420858c:	89 c6                	mov    %eax,%esi
  800420858e:	48 bf 0b e2 21 04 80 	movabs $0x800421e20b,%rdi
  8004208595:	00 00 00 
  8004208598:	b8 00 00 00 00       	mov    $0x0,%eax
  800420859d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042085a4:	00 00 00 
  80042085a7:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042085a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ad:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085b2:	be 00 00 00 00       	mov    $0x0,%esi
  80042085b7:	48 89 c7             	mov    %rax,%rdi
  80042085ba:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  80042085c1:	00 00 00 
  80042085c4:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  80042085c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ca:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085d1:	00 00 00 00 
	e->env_ipc_recving = 0;
  80042085d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d9:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042085e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e4:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085eb:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  80042085f2:	00 00 00 
  80042085f5:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  80042085f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042085fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208600:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  8004208603:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208608:	c9                   	leaveq 
  8004208609:	c3                   	retq   

000000800420860a <env_guest_free>:

void env_guest_free(struct Env *e) {
  800420860a:	55                   	push   %rbp
  800420860b:	48 89 e5             	mov    %rsp,%rbp
  800420860e:	53                   	push   %rbx
  800420860f:	48 83 ec 38          	sub    $0x38,%rsp
  8004208613:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  8004208617:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420861b:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  8004208622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208626:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420862d:	00 00 00 
  8004208630:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208634:	77 32                	ja     8004208668 <env_guest_free+0x5e>
  8004208636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420863a:	48 89 c1             	mov    %rax,%rcx
  800420863d:	48 ba 28 e2 21 04 80 	movabs $0x800421e228,%rdx
  8004208644:	00 00 00 
  8004208647:	be 40 01 00 00       	mov    $0x140,%esi
  800420864c:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208653:	00 00 00 
  8004208656:	b8 00 00 00 00       	mov    $0x0,%eax
  800420865b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208662:	00 00 00 
  8004208665:	41 ff d0             	callq  *%r8
  8004208668:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420866f:	ff ff ff 
  8004208672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208676:	48 01 d0             	add    %rdx,%rax
  8004208679:	48 89 c7             	mov    %rax,%rdi
  800420867c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208683:	00 00 00 
  8004208686:	ff d0                	callq  *%rax
  8004208688:	48 89 c7             	mov    %rax,%rdi
  800420868b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208692:	00 00 00 
  8004208695:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  8004208697:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420869b:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086ad:	00 00 00 
  80042086b0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086b4:	77 32                	ja     80042086e8 <env_guest_free+0xde>
  80042086b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086ba:	48 89 c1             	mov    %rax,%rcx
  80042086bd:	48 ba 28 e2 21 04 80 	movabs $0x800421e228,%rdx
  80042086c4:	00 00 00 
  80042086c7:	be 42 01 00 00       	mov    $0x142,%esi
  80042086cc:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  80042086d3:	00 00 00 
  80042086d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042086e2:	00 00 00 
  80042086e5:	41 ff d0             	callq  *%r8
  80042086e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086ef:	ff ff ff 
  80042086f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086f6:	48 01 d0             	add    %rdx,%rax
  80042086f9:	48 89 c7             	mov    %rax,%rdi
  80042086fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208703:	00 00 00 
  8004208706:	ff d0                	callq  *%rax
  8004208708:	48 89 c7             	mov    %rax,%rdi
  800420870b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208712:	00 00 00 
  8004208715:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  8004208717:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420871b:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  8004208722:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208726:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420872d:	00 00 00 
  8004208730:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208734:	77 32                	ja     8004208768 <env_guest_free+0x15e>
  8004208736:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420873a:	48 89 c1             	mov    %rax,%rcx
  800420873d:	48 ba 28 e2 21 04 80 	movabs $0x800421e228,%rdx
  8004208744:	00 00 00 
  8004208747:	be 44 01 00 00       	mov    $0x144,%esi
  800420874c:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208753:	00 00 00 
  8004208756:	b8 00 00 00 00       	mov    $0x0,%eax
  800420875b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208762:	00 00 00 
  8004208765:	41 ff d0             	callq  *%r8
  8004208768:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420876f:	ff ff ff 
  8004208772:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208776:	48 01 d0             	add    %rdx,%rax
  8004208779:	48 89 c7             	mov    %rax,%rdi
  800420877c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208783:	00 00 00 
  8004208786:	ff d0                	callq  *%rax
  8004208788:	48 89 c7             	mov    %rax,%rdi
  800420878b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208792:	00 00 00 
  8004208795:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  8004208797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420879b:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087ad:	00 00 00 
  80042087b0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087b4:	77 32                	ja     80042087e8 <env_guest_free+0x1de>
  80042087b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ba:	48 89 c1             	mov    %rax,%rcx
  80042087bd:	48 ba 28 e2 21 04 80 	movabs $0x800421e228,%rdx
  80042087c4:	00 00 00 
  80042087c7:	be 45 01 00 00       	mov    $0x145,%esi
  80042087cc:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  80042087d3:	00 00 00 
  80042087d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042087e2:	00 00 00 
  80042087e5:	41 ff d0             	callq  *%r8
  80042087e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087ef:	ff ff ff 
  80042087f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087f6:	48 01 d0             	add    %rdx,%rax
  80042087f9:	48 89 c7             	mov    %rax,%rdi
  80042087fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208803:	00 00 00 
  8004208806:	ff d0                	callq  *%rax
  8004208808:	48 89 c7             	mov    %rax,%rdi
  800420880b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208812:	00 00 00 
  8004208815:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  8004208817:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420881b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208822:	48 89 c7             	mov    %rax,%rdi
  8004208825:	48 b8 ae 96 21 04 80 	movabs $0x80042196ae,%rax
  800420882c:	00 00 00 
  800420882f:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  8004208831:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208835:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420883c:	48 89 c7             	mov    %rax,%rdi
  800420883f:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208846:	00 00 00 
  8004208849:	ff d0                	callq  *%rax
  800420884b:	48 89 c7             	mov    %rax,%rdi
  800420884e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208855:	00 00 00 
  8004208858:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  800420885a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420885e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208865:	00 00 00 00 
	e->env_cr3 = 0;
  8004208869:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886d:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208874:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208878:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420887c:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208883:	00 00 00 
	e->env_link = env_free_list;
  8004208886:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  800420888d:	00 00 00 
  8004208890:	48 8b 10             	mov    (%rax),%rdx
  8004208893:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208897:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  800420889e:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  80042088a5:	00 00 00 
  80042088a8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088ac:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  80042088af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088b3:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088b9:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042088c0:	00 00 00 
  80042088c3:	ff d0                	callq  *%rax
  80042088c5:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042088cc:	00 00 00 
  80042088cf:	48 98                	cltq   
  80042088d1:	48 c1 e0 03          	shl    $0x3,%rax
  80042088d5:	48 89 c1             	mov    %rax,%rcx
  80042088d8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088dc:	48 01 c8             	add    %rcx,%rax
  80042088df:	48 01 d0             	add    %rdx,%rax
  80042088e2:	48 83 c0 08          	add    $0x8,%rax
  80042088e6:	48 8b 00             	mov    (%rax),%rax
  80042088e9:	48 85 c0             	test   %rax,%rax
  80042088ec:	74 38                	je     8004208926 <env_guest_free+0x31c>
  80042088ee:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042088f5:	00 00 00 
  80042088f8:	ff d0                	callq  *%rax
  80042088fa:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004208901:	00 00 00 
  8004208904:	48 98                	cltq   
  8004208906:	48 c1 e0 03          	shl    $0x3,%rax
  800420890a:	48 89 c1             	mov    %rax,%rcx
  800420890d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208911:	48 01 c8             	add    %rcx,%rax
  8004208914:	48 01 d0             	add    %rdx,%rax
  8004208917:	48 83 c0 08          	add    $0x8,%rax
  800420891b:	48 8b 00             	mov    (%rax),%rax
  800420891e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208924:	eb 05                	jmp    800420892b <env_guest_free+0x321>
  8004208926:	b8 00 00 00 00       	mov    $0x0,%eax
  800420892b:	89 da                	mov    %ebx,%edx
  800420892d:	89 c6                	mov    %eax,%esi
  800420892f:	48 bf 58 e2 21 04 80 	movabs $0x800421e258,%rdi
  8004208936:	00 00 00 
  8004208939:	b8 00 00 00 00       	mov    $0x0,%eax
  800420893e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004208945:	00 00 00 
  8004208948:	ff d1                	callq  *%rcx
}
  800420894a:	48 83 c4 38          	add    $0x38,%rsp
  800420894e:	5b                   	pop    %rbx
  800420894f:	5d                   	pop    %rbp
  8004208950:	c3                   	retq   

0000008004208951 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208951:	55                   	push   %rbp
  8004208952:	48 89 e5             	mov    %rsp,%rbp
  8004208955:	48 83 ec 30          	sub    $0x30,%rsp
  8004208959:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420895d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208960:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004208967:	00 00 00 
  800420896a:	48 8b 00             	mov    (%rax),%rax
  800420896d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208971:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208976:	75 0a                	jne    8004208982 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208978:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  800420897d:	e9 5b 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208986:	48 89 c7             	mov    %rax,%rdi
  8004208989:	48 b8 98 80 20 04 80 	movabs $0x8004208098,%rax
  8004208990:	00 00 00 
  8004208993:	ff d0                	callq  *%rax
  8004208995:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208998:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420899c:	79 08                	jns    80042089a6 <env_alloc+0x55>
		return r;
  800420899e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089a1:	e9 37 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042089a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089aa:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089b0:	05 00 10 00 00       	add    $0x1000,%eax
  80042089b5:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042089bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089c1:	7f 07                	jg     80042089ca <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042089c3:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042089ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089ce:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  80042089d5:	00 00 00 
  80042089d8:	48 8b 00             	mov    (%rax),%rax
  80042089db:	48 29 c2             	sub    %rax,%rdx
  80042089de:	48 89 d0             	mov    %rdx,%rax
  80042089e1:	48 c1 f8 03          	sar    $0x3,%rax
  80042089e5:	48 89 c2             	mov    %rax,%rdx
  80042089e8:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089ef:	fa a4 4f 
  80042089f2:	48 0f af c2          	imul   %rdx,%rax
  80042089f6:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042089f9:	89 c2                	mov    %eax,%edx
  80042089fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089ff:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a09:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a0c:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208a12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a16:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a1d:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208a20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a24:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a2b:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a32:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a37:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a3c:	48 89 c7             	mov    %rax,%rdi
  8004208a3f:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004208a46:	00 00 00 
  8004208a49:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208a4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a4f:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a56:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a5c:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a66:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a6d:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a73:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a78:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a83:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a8a:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a90:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208a97:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208a9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9f:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208aa6:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aae:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208ab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ab9:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208ac0:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004208ac7:	00 00 00 
  8004208aca:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208acd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ad1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ad5:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208ad8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208add:	c9                   	leaveq 
  8004208ade:	c3                   	retq   

0000008004208adf <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208adf:	55                   	push   %rbp
  8004208ae0:	48 89 e5             	mov    %rsp,%rbp
  8004208ae3:	48 83 ec 40          	sub    $0x40,%rsp
  8004208ae7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208aeb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208aef:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208af7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208afb:	48 01 d0             	add    %rdx,%rax
  8004208afe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208b02:	e9 c8 00 00 00       	jmpq   8004208bcf <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208b07:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b0c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004208b13:	00 00 00 
  8004208b16:	ff d0                	callq  *%rax
  8004208b18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b1c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b21:	75 30                	jne    8004208b53 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208b23:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b28:	48 ba 78 e2 21 04 80 	movabs $0x800421e278,%rdx
  8004208b2f:	00 00 00 
  8004208b32:	be b2 01 00 00       	mov    $0x1b2,%esi
  8004208b37:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208b3e:	00 00 00 
  8004208b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b46:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b4d:	00 00 00 
  8004208b50:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b57:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b5e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b62:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b66:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b6b:	48 89 c7             	mov    %rax,%rdi
  8004208b6e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004208b75:	00 00 00 
  8004208b78:	ff d0                	callq  *%rax
  8004208b7a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b81:	79 30                	jns    8004208bb3 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b83:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b86:	89 c1                	mov    %eax,%ecx
  8004208b88:	48 ba a0 e2 21 04 80 	movabs $0x800421e2a0,%rdx
  8004208b8f:	00 00 00 
  8004208b92:	be b6 01 00 00       	mov    $0x1b6,%esi
  8004208b97:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208b9e:	00 00 00 
  8004208ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ba6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208bad:	00 00 00 
  8004208bb0:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208bb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bb7:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bbd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208bc5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bcb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bd3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208bd7:	0f 82 2a ff ff ff    	jb     8004208b07 <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208bdd:	c9                   	leaveq 
  8004208bde:	c3                   	retq   

0000008004208bdf <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208bdf:	55                   	push   %rbp
  8004208be0:	48 89 e5             	mov    %rsp,%rbp
  8004208be3:	53                   	push   %rbx
  8004208be4:	48 83 ec 78          	sub    $0x78,%rsp
  8004208be8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208bec:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208bf0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208bf4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208bf8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208bfd:	0f 84 6f 03 00 00    	je     8004208f72 <load_icode+0x393>
  8004208c03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c07:	8b 00                	mov    (%rax),%eax
  8004208c09:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c0e:	0f 85 5e 03 00 00    	jne    8004208f72 <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208c14:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c18:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c1f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c23:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c2a:	00 00 00 
  8004208c2d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c31:	77 32                	ja     8004208c65 <load_icode+0x86>
  8004208c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c37:	48 89 c1             	mov    %rax,%rcx
  8004208c3a:	48 ba 28 e2 21 04 80 	movabs $0x800421e228,%rdx
  8004208c41:	00 00 00 
  8004208c44:	be d8 01 00 00       	mov    $0x1d8,%esi
  8004208c49:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208c50:	00 00 00 
  8004208c53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c58:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208c5f:	00 00 00 
  8004208c62:	41 ff d0             	callq  *%r8
  8004208c65:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c6c:	ff ff ff 
  8004208c6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c73:	48 01 d0             	add    %rdx,%rax
  8004208c76:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c7e:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c85:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c8d:	48 01 d0             	add    %rdx,%rax
  8004208c90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208c94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c98:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208c9c:	0f b7 c0             	movzwl %ax,%eax
  8004208c9f:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ca3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208caa:	00 
  8004208cab:	48 29 c2             	sub    %rax,%rdx
  8004208cae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cb2:	48 01 d0             	add    %rdx,%rax
  8004208cb5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208cb9:	e9 bd 00 00 00       	jmpq   8004208d7b <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208cbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cc2:	8b 00                	mov    (%rax),%eax
  8004208cc4:	83 f8 01             	cmp    $0x1,%eax
  8004208cc7:	0f 85 a9 00 00 00    	jne    8004208d76 <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208ccd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd9:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208cdd:	48 89 c1             	mov    %rax,%rcx
  8004208ce0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208ce4:	48 89 ce             	mov    %rcx,%rsi
  8004208ce7:	48 89 c7             	mov    %rax,%rdi
  8004208cea:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208cf1:	00 00 00 
  8004208cf4:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cfa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208cfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d02:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d0a:	48 01 c1             	add    %rax,%rcx
  8004208d0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d11:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d15:	48 89 ce             	mov    %rcx,%rsi
  8004208d18:	48 89 c7             	mov    %rax,%rdi
  8004208d1b:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  8004208d22:	00 00 00 
  8004208d25:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d2b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d33:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d37:	48 39 c2             	cmp    %rax,%rdx
  8004208d3a:	73 3a                	jae    8004208d76 <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208d3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d40:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d48:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d4c:	48 29 c2             	sub    %rax,%rdx
  8004208d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d53:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5b:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d5f:	48 01 c8             	add    %rcx,%rax
  8004208d62:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d67:	48 89 c7             	mov    %rax,%rdi
  8004208d6a:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004208d71:	00 00 00 
  8004208d74:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d76:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d7f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d83:	0f 82 35 ff ff ff    	jb     8004208cbe <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d89:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d8d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d92:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208d97:	48 89 c7             	mov    %rax,%rdi
  8004208d9a:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208da1:	00 00 00 
  8004208da4:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208da6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208daa:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208db2:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208db9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dbd:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dc2:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208dc9:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208dd0:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208dd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208dd5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208dd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ddd:	48 01 d0             	add    %rdx,%rax
  8004208de0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208de4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de8:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208dec:	0f b7 c0             	movzwl %ax,%eax
  8004208def:	48 c1 e0 06          	shl    $0x6,%rax
  8004208df3:	48 89 c2             	mov    %rax,%rdx
  8004208df6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208dfa:	48 01 d0             	add    %rdx,%rax
  8004208dfd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208e01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e05:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e09:	0f b7 c0             	movzwl %ax,%eax
  8004208e0c:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e10:	48 89 c2             	mov    %rax,%rdx
  8004208e13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e17:	48 01 d0             	add    %rdx,%rax
  8004208e1a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208e1e:	e9 27 01 00 00       	jmpq   8004208f4a <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208e23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e27:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e2f:	8b 00                	mov    (%rax),%eax
  8004208e31:	89 c0                	mov    %eax,%eax
  8004208e33:	48 01 c2             	add    %rax,%rdx
  8004208e36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e3a:	48 01 d0             	add    %rdx,%rax
  8004208e3d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208e41:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e45:	48 be c8 e2 21 04 80 	movabs $0x800421e2c8,%rsi
  8004208e4c:	00 00 00 
  8004208e4f:	48 89 c7             	mov    %rax,%rdi
  8004208e52:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004208e59:	00 00 00 
  8004208e5c:	ff d0                	callq  *%rax
  8004208e5e:	85 c0                	test   %eax,%eax
  8004208e60:	0f 84 84 00 00 00    	je     8004208eea <load_icode+0x30b>
  8004208e66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e6a:	48 be d4 e2 21 04 80 	movabs $0x800421e2d4,%rsi
  8004208e71:	00 00 00 
  8004208e74:	48 89 c7             	mov    %rax,%rdi
  8004208e77:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004208e7e:	00 00 00 
  8004208e81:	ff d0                	callq  *%rax
  8004208e83:	85 c0                	test   %eax,%eax
  8004208e85:	74 63                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e8b:	48 be e2 e2 21 04 80 	movabs $0x800421e2e2,%rsi
  8004208e92:	00 00 00 
  8004208e95:	48 89 c7             	mov    %rax,%rdi
  8004208e98:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004208e9f:	00 00 00 
  8004208ea2:	ff d0                	callq  *%rax
  8004208ea4:	85 c0                	test   %eax,%eax
  8004208ea6:	74 42                	je     8004208eea <load_icode+0x30b>
  8004208ea8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208eac:	48 be ee e2 21 04 80 	movabs $0x800421e2ee,%rsi
  8004208eb3:	00 00 00 
  8004208eb6:	48 89 c7             	mov    %rax,%rdi
  8004208eb9:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004208ec0:	00 00 00 
  8004208ec3:	ff d0                	callq  *%rax
  8004208ec5:	85 c0                	test   %eax,%eax
  8004208ec7:	74 21                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208ec9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ecd:	48 be f8 e2 21 04 80 	movabs $0x800421e2f8,%rsi
  8004208ed4:	00 00 00 
  8004208ed7:	48 89 c7             	mov    %rax,%rdi
  8004208eda:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004208ee1:	00 00 00 
  8004208ee4:	ff d0                	callq  *%rax
  8004208ee6:	85 c0                	test   %eax,%eax
  8004208ee8:	75 5b                	jne    8004208f45 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208eea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208eee:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ef2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208ef6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208efa:	48 89 ce             	mov    %rcx,%rsi
  8004208efd:	48 89 c7             	mov    %rax,%rdi
  8004208f00:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208f07:	00 00 00 
  8004208f0a:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208f0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f18:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f20:	48 01 c1             	add    %rax,%rcx
  8004208f23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f27:	48 89 ce             	mov    %rcx,%rsi
  8004208f2a:	48 89 c7             	mov    %rax,%rdi
  8004208f2d:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  8004208f34:	00 00 00 
  8004208f37:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f3d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f41:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208f45:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f4e:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f52:	0f 82 cb fe ff ff    	jb     8004208e23 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f58:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  8004208f5f:	00 00 00 
  8004208f62:	48 8b 00             	mov    (%rax),%rax
  8004208f65:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f69:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f6d:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f70:	eb 2a                	jmp    8004208f9c <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f72:	48 ba 03 e3 21 04 80 	movabs $0x800421e303,%rdx
  8004208f79:	00 00 00 
  8004208f7c:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208f81:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208f88:	00 00 00 
  8004208f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f90:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004208f97:	00 00 00 
  8004208f9a:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208f9c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fa0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fa4:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208fab:	48 83 c4 78          	add    $0x78,%rsp
  8004208faf:	5b                   	pop    %rbx
  8004208fb0:	5d                   	pop    %rbp
  8004208fb1:	c3                   	retq   

0000008004208fb2 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208fb2:	55                   	push   %rbp
  8004208fb3:	48 89 e5             	mov    %rsp,%rbp
  8004208fb6:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fbe:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208fc1:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fc5:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fca:	48 89 c7             	mov    %rax,%rdi
  8004208fcd:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  8004208fd4:	00 00 00 
  8004208fd7:	ff d0                	callq  *%rax
  8004208fd9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208fdc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208fe0:	79 30                	jns    8004209012 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208fe2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208fe5:	89 c1                	mov    %eax,%ecx
  8004208fe7:	48 ba 18 e3 21 04 80 	movabs $0x800421e318,%rdx
  8004208fee:	00 00 00 
  8004208ff1:	be 0d 02 00 00       	mov    $0x20d,%esi
  8004208ff6:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004208ffd:	00 00 00 
  8004209000:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209005:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420900c:	00 00 00 
  800420900f:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  8004209012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209016:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420901a:	48 89 d6             	mov    %rdx,%rsi
  800420901d:	48 89 c7             	mov    %rax,%rdi
  8004209020:	48 b8 df 8b 20 04 80 	movabs $0x8004208bdf,%rax
  8004209027:	00 00 00 
  800420902a:	ff d0                	callq  *%rax
	e->env_type = type;
  800420902c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209030:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209033:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004209039:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420903d:	75 19                	jne    8004209058 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  800420903f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209043:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209047:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420904e:	80 ce 30             	or     $0x30,%dh
  8004209051:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004209058:	c9                   	leaveq 
  8004209059:	c3                   	retq   

000000800420905a <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  800420905a:	55                   	push   %rbp
  800420905b:	48 89 e5             	mov    %rsp,%rbp
  800420905e:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209065:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420906c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209073:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209079:	83 f8 03             	cmp    $0x3,%eax
  800420907c:	75 1b                	jne    8004209099 <env_free+0x3f>
		env_guest_free(e);
  800420907e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209085:	48 89 c7             	mov    %rax,%rdi
  8004209088:	48 b8 0a 86 20 04 80 	movabs $0x800420860a,%rax
  800420908f:	00 00 00 
  8004209092:	ff d0                	callq  *%rax
		return;
  8004209094:	e9 78 04 00 00       	jmpq   8004209511 <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004209099:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042090a0:	00 00 00 
  80042090a3:	ff d0                	callq  *%rax
  80042090a5:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042090ac:	00 00 00 
  80042090af:	48 98                	cltq   
  80042090b1:	48 c1 e0 03          	shl    $0x3,%rax
  80042090b5:	48 89 c1             	mov    %rax,%rcx
  80042090b8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090bc:	48 01 c8             	add    %rcx,%rax
  80042090bf:	48 01 d0             	add    %rdx,%rax
  80042090c2:	48 83 c0 08          	add    $0x8,%rax
  80042090c6:	48 8b 00             	mov    (%rax),%rax
  80042090c9:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090d0:	75 18                	jne    80042090ea <env_free+0x90>
		lcr3(boot_cr3);
  80042090d2:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  80042090d9:	00 00 00 
  80042090dc:	48 8b 00             	mov    (%rax),%rax
  80042090df:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090e3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042090e7:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042090ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090f1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042090f8:	48 8b 00             	mov    (%rax),%rax
  80042090fb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209101:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209109:	48 c1 e8 0c          	shr    $0xc,%rax
  800420910d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004209110:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209113:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420911a:	00 00 00 
  800420911d:	48 8b 00             	mov    (%rax),%rax
  8004209120:	48 39 c2             	cmp    %rax,%rdx
  8004209123:	72 32                	jb     8004209157 <env_free+0xfd>
  8004209125:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209129:	48 89 c1             	mov    %rax,%rcx
  800420912c:	48 ba e8 e1 21 04 80 	movabs $0x800421e1e8,%rdx
  8004209133:	00 00 00 
  8004209136:	be 32 02 00 00       	mov    $0x232,%esi
  800420913b:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  8004209142:	00 00 00 
  8004209145:	b8 00 00 00 00       	mov    $0x0,%eax
  800420914a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209151:	00 00 00 
  8004209154:	41 ff d0             	callq  *%r8
  8004209157:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420915e:	00 00 00 
  8004209161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209165:	48 01 d0             	add    %rdx,%rax
  8004209168:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420916c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004209173:	00 
  8004209174:	e9 ab 02 00 00       	jmpq   8004209424 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004209179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420917d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209184:	00 
  8004209185:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209189:	48 01 d0             	add    %rdx,%rax
  800420918c:	48 8b 00             	mov    (%rax),%rax
  800420918f:	83 e0 01             	and    $0x1,%eax
  8004209192:	48 85 c0             	test   %rax,%rax
  8004209195:	75 05                	jne    800420919c <env_free+0x142>
			continue;
  8004209197:	e9 83 02 00 00       	jmpq   800420941f <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  800420919c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091a7:	00 
  80042091a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091ac:	48 01 d0             	add    %rdx,%rax
  80042091af:	48 8b 00             	mov    (%rax),%rax
  80042091b2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091b8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091c0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091c4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091c7:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091ca:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042091d1:	00 00 00 
  80042091d4:	48 8b 00             	mov    (%rax),%rax
  80042091d7:	48 39 c2             	cmp    %rax,%rdx
  80042091da:	72 32                	jb     800420920e <env_free+0x1b4>
  80042091dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091e0:	48 89 c1             	mov    %rax,%rcx
  80042091e3:	48 ba e8 e1 21 04 80 	movabs $0x800421e1e8,%rdx
  80042091ea:	00 00 00 
  80042091ed:	be 3a 02 00 00       	mov    $0x23a,%esi
  80042091f2:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  80042091f9:	00 00 00 
  80042091fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209201:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209208:	00 00 00 
  800420920b:	41 ff d0             	callq  *%r8
  800420920e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209215:	00 00 00 
  8004209218:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420921c:	48 01 d0             	add    %rdx,%rax
  800420921f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004209223:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209228:	75 07                	jne    8004209231 <env_free+0x1d7>
  800420922a:	b8 04 00 00 00       	mov    $0x4,%eax
  800420922f:	eb 05                	jmp    8004209236 <env_free+0x1dc>
  8004209231:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209236:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209239:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004209240:	00 
  8004209241:	e9 6e 01 00 00       	jmpq   80042093b4 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004209246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420924a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209251:	00 
  8004209252:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209256:	48 01 d0             	add    %rdx,%rax
  8004209259:	48 8b 00             	mov    (%rax),%rax
  800420925c:	83 e0 01             	and    $0x1,%eax
  800420925f:	48 85 c0             	test   %rax,%rax
  8004209262:	75 05                	jne    8004209269 <env_free+0x20f>
				continue;
  8004209264:	e9 46 01 00 00       	jmpq   80042093af <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004209269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420926d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209274:	00 
  8004209275:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209279:	48 01 d0             	add    %rdx,%rax
  800420927c:	48 8b 00             	mov    (%rax),%rax
  800420927f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209285:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004209289:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420928d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004209291:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004209295:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209299:	89 45 9c             	mov    %eax,-0x64(%rbp)
  800420929c:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420929f:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042092a6:	00 00 00 
  80042092a9:	48 8b 00             	mov    (%rax),%rax
  80042092ac:	48 39 c2             	cmp    %rax,%rdx
  80042092af:	72 32                	jb     80042092e3 <env_free+0x289>
  80042092b1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092b5:	48 89 c1             	mov    %rax,%rcx
  80042092b8:	48 ba e8 e1 21 04 80 	movabs $0x800421e1e8,%rdx
  80042092bf:	00 00 00 
  80042092c2:	be 44 02 00 00       	mov    $0x244,%esi
  80042092c7:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  80042092ce:	00 00 00 
  80042092d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042092dd:	00 00 00 
  80042092e0:	41 ff d0             	callq  *%r8
  80042092e3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042092ea:	00 00 00 
  80042092ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092f1:	48 01 d0             	add    %rdx,%rax
  80042092f4:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  80042092f8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042092ff:	00 
  8004209300:	eb 67                	jmp    8004209369 <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  8004209302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209306:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420930d:	00 
  800420930e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004209312:	48 01 d0             	add    %rdx,%rax
  8004209315:	48 8b 00             	mov    (%rax),%rax
  8004209318:	83 e0 01             	and    $0x1,%eax
  800420931b:	48 85 c0             	test   %rax,%rax
  800420931e:	74 44                	je     8004209364 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004209320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209324:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209328:	48 89 c2             	mov    %rax,%rdx
  800420932b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420932f:	48 c1 e0 15          	shl    $0x15,%rax
  8004209333:	48 09 c2             	or     %rax,%rdx
  8004209336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420933a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420933e:	48 09 d0             	or     %rdx,%rax
  8004209341:	48 89 c2             	mov    %rax,%rdx
  8004209344:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420934b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209352:	48 89 d6             	mov    %rdx,%rsi
  8004209355:	48 89 c7             	mov    %rax,%rdi
  8004209358:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420935f:	00 00 00 
  8004209362:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209364:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209369:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004209370:	00 
  8004209371:	76 8f                	jbe    8004209302 <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004209373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209377:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420937e:	00 
  800420937f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209383:	48 01 d0             	add    %rdx,%rax
  8004209386:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  800420938d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209391:	48 89 c7             	mov    %rax,%rdi
  8004209394:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420939b:	00 00 00 
  800420939e:	ff d0                	callq  *%rax
  80042093a0:	48 89 c7             	mov    %rax,%rdi
  80042093a3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042093aa:	00 00 00 
  80042093ad:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042093af:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093b4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093b7:	48 98                	cltq   
  80042093b9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093bd:	0f 87 83 fe ff ff    	ja     8004209246 <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042093c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ce:	00 
  80042093cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093d3:	48 01 d0             	add    %rdx,%rax
  80042093d6:	48 8b 00             	mov    (%rax),%rax
  80042093d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093df:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  80042093e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093e7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ee:	00 
  80042093ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093f3:	48 01 d0             	add    %rdx,%rax
  80042093f6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  80042093fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209401:	48 89 c7             	mov    %rax,%rdi
  8004209404:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420940b:	00 00 00 
  800420940e:	ff d0                	callq  *%rax
  8004209410:	48 89 c7             	mov    %rax,%rdi
  8004209413:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420941a:	00 00 00 
  800420941d:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420941f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209424:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209429:	0f 86 4a fd ff ff    	jbe    8004209179 <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  800420942f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209436:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420943d:	48 8b 00             	mov    (%rax),%rax
  8004209440:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209446:	48 89 c7             	mov    %rax,%rdi
  8004209449:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209450:	00 00 00 
  8004209453:	ff d0                	callq  *%rax
  8004209455:	48 89 c7             	mov    %rax,%rdi
  8004209458:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420945f:	00 00 00 
  8004209462:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209464:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420946b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209472:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004209479:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209480:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209487:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  800420948b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209492:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004209499:	00 00 00 00 
	e->env_cr3 = 0;
  800420949d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094a4:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094ab:	00 00 00 00 
	page_decref(pa2page(pa));
  80042094af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094b3:	48 89 c7             	mov    %rax,%rdi
  80042094b6:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042094bd:	00 00 00 
  80042094c0:	ff d0                	callq  *%rax
  80042094c2:	48 89 c7             	mov    %rax,%rdi
  80042094c5:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042094cc:	00 00 00 
  80042094cf:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042094d1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094d8:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094df:	00 00 00 
	e->env_link = env_free_list;
  80042094e2:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  80042094e9:	00 00 00 
  80042094ec:	48 8b 10             	mov    (%rax),%rdx
  80042094ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094f6:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042094fd:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004209504:	00 00 00 
  8004209507:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420950e:	48 89 10             	mov    %rdx,(%rax)
}
  8004209511:	c9                   	leaveq 
  8004209512:	c3                   	retq   

0000008004209513 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004209513:	55                   	push   %rbp
  8004209514:	48 89 e5             	mov    %rsp,%rbp
  8004209517:	48 83 ec 10          	sub    $0x10,%rsp
  800420951b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  800420951f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209523:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209529:	83 f8 03             	cmp    $0x3,%eax
  800420952c:	75 49                	jne    8004209577 <env_destroy+0x64>
  800420952e:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004209535:	00 00 00 
  8004209538:	ff d0                	callq  *%rax
  800420953a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209541:	00 00 00 
  8004209544:	48 98                	cltq   
  8004209546:	48 c1 e0 03          	shl    $0x3,%rax
  800420954a:	48 89 c1             	mov    %rax,%rcx
  800420954d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209551:	48 01 c8             	add    %rcx,%rax
  8004209554:	48 01 d0             	add    %rdx,%rax
  8004209557:	48 83 c0 08          	add    $0x8,%rax
  800420955b:	48 8b 00             	mov    (%rax),%rax
  800420955e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209562:	74 13                	je     8004209577 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209568:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420956f:	00 00 00 
		return;
  8004209572:	e9 89 00 00 00       	jmpq   8004209600 <env_destroy+0xed>
	}

	env_free(e);
  8004209577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420957b:	48 89 c7             	mov    %rax,%rdi
  800420957e:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  8004209585:	00 00 00 
  8004209588:	ff d0                	callq  *%rax
	if (curenv == e) {
  800420958a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004209591:	00 00 00 
  8004209594:	ff d0                	callq  *%rax
  8004209596:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420959d:	00 00 00 
  80042095a0:	48 98                	cltq   
  80042095a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042095a6:	48 89 c1             	mov    %rax,%rcx
  80042095a9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ad:	48 01 c8             	add    %rcx,%rax
  80042095b0:	48 01 d0             	add    %rdx,%rax
  80042095b3:	48 83 c0 08          	add    $0x8,%rax
  80042095b7:	48 8b 00             	mov    (%rax),%rax
  80042095ba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095be:	75 40                	jne    8004209600 <env_destroy+0xed>
		curenv = NULL;
  80042095c0:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042095c7:	00 00 00 
  80042095ca:	ff d0                	callq  *%rax
  80042095cc:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042095d3:	00 00 00 
  80042095d6:	48 98                	cltq   
  80042095d8:	48 c1 e0 03          	shl    $0x3,%rax
  80042095dc:	48 89 c1             	mov    %rax,%rcx
  80042095df:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095e3:	48 01 c8             	add    %rcx,%rax
  80042095e6:	48 01 d0             	add    %rdx,%rax
  80042095e9:	48 83 c0 08          	add    $0x8,%rax
  80042095ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  80042095f4:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042095fb:	00 00 00 
  80042095fe:	ff d0                	callq  *%rax
	}
}
  8004209600:	c9                   	leaveq 
  8004209601:	c3                   	retq   

0000008004209602 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004209602:	55                   	push   %rbp
  8004209603:	48 89 e5             	mov    %rsp,%rbp
  8004209606:	53                   	push   %rbx
  8004209607:	48 83 ec 18          	sub    $0x18,%rsp
  800420960b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  800420960f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004209616:	00 00 00 
  8004209619:	ff d0                	callq  *%rax
  800420961b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209622:	00 00 00 
  8004209625:	48 98                	cltq   
  8004209627:	48 c1 e0 03          	shl    $0x3,%rax
  800420962b:	48 89 c1             	mov    %rax,%rcx
  800420962e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209632:	48 01 c8             	add    %rcx,%rax
  8004209635:	48 01 d0             	add    %rdx,%rax
  8004209638:	48 83 c0 08          	add    $0x8,%rax
  800420963c:	48 8b 18             	mov    (%rax),%rbx
  800420963f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004209646:	00 00 00 
  8004209649:	ff d0                	callq  *%rax
  800420964b:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004209651:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209655:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209659:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420965e:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004209663:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209668:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  800420966d:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004209672:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209677:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  800420967c:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209681:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209686:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  800420968b:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209690:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004209695:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  800420969a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  800420969f:	48 83 c4 78          	add    $0x78,%rsp
  80042096a3:	8e 04 24             	mov    (%rsp),%es
  80042096a6:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096aa:	48 83 c4 10          	add    $0x10,%rsp
  80042096ae:	48 83 c4 10          	add    $0x10,%rsp
  80042096b2:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042096b4:	48 ba 40 e3 21 04 80 	movabs $0x800421e340,%rdx
  80042096bb:	00 00 00 
  80042096be:	be 90 02 00 00       	mov    $0x290,%esi
  80042096c3:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  80042096ca:	00 00 00 
  80042096cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096d2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042096d9:	00 00 00 
  80042096dc:	ff d1                	callq  *%rcx

00000080042096de <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  80042096de:	55                   	push   %rbp
  80042096df:	48 89 e5             	mov    %rsp,%rbp
  80042096e2:	48 83 ec 20          	sub    $0x20,%rsp
  80042096e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  80042096ea:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042096f1:	00 00 00 
  80042096f4:	ff d0                	callq  *%rax
  80042096f6:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042096fd:	00 00 00 
  8004209700:	48 98                	cltq   
  8004209702:	48 c1 e0 03          	shl    $0x3,%rax
  8004209706:	48 89 c1             	mov    %rax,%rcx
  8004209709:	48 c1 e1 04          	shl    $0x4,%rcx
  800420970d:	48 01 c8             	add    %rcx,%rax
  8004209710:	48 01 d0             	add    %rdx,%rax
  8004209713:	48 83 c0 08          	add    $0x8,%rax
  8004209717:	48 8b 00             	mov    (%rax),%rax
  800420971a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420971e:	0f 84 28 01 00 00    	je     800420984c <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  8004209724:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420972b:	00 00 00 
  800420972e:	ff d0                	callq  *%rax
  8004209730:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209737:	00 00 00 
  800420973a:	48 98                	cltq   
  800420973c:	48 c1 e0 03          	shl    $0x3,%rax
  8004209740:	48 89 c1             	mov    %rax,%rcx
  8004209743:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209747:	48 01 c8             	add    %rcx,%rax
  800420974a:	48 01 d0             	add    %rdx,%rax
  800420974d:	48 83 c0 08          	add    $0x8,%rax
  8004209751:	48 8b 00             	mov    (%rax),%rax
  8004209754:	48 85 c0             	test   %rax,%rax
  8004209757:	74 75                	je     80042097ce <env_run+0xf0>
  8004209759:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004209760:	00 00 00 
  8004209763:	ff d0                	callq  *%rax
  8004209765:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420976c:	00 00 00 
  800420976f:	48 98                	cltq   
  8004209771:	48 c1 e0 03          	shl    $0x3,%rax
  8004209775:	48 89 c1             	mov    %rax,%rcx
  8004209778:	48 c1 e1 04          	shl    $0x4,%rcx
  800420977c:	48 01 c8             	add    %rcx,%rax
  800420977f:	48 01 d0             	add    %rdx,%rax
  8004209782:	48 83 c0 08          	add    $0x8,%rax
  8004209786:	48 8b 00             	mov    (%rax),%rax
  8004209789:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420978f:	83 f8 03             	cmp    $0x3,%eax
  8004209792:	75 3a                	jne    80042097ce <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  8004209794:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420979b:	00 00 00 
  800420979e:	ff d0                	callq  *%rax
  80042097a0:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042097a7:	00 00 00 
  80042097aa:	48 98                	cltq   
  80042097ac:	48 c1 e0 03          	shl    $0x3,%rax
  80042097b0:	48 89 c1             	mov    %rax,%rcx
  80042097b3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097b7:	48 01 c8             	add    %rcx,%rax
  80042097ba:	48 01 d0             	add    %rdx,%rax
  80042097bd:	48 83 c0 08          	add    $0x8,%rax
  80042097c1:	48 8b 00             	mov    (%rax),%rax
  80042097c4:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097cb:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042097ce:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  80042097d5:	00 00 00 
  80042097d8:	ff d0                	callq  *%rax
  80042097da:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042097e1:	00 00 00 
  80042097e4:	48 98                	cltq   
  80042097e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042097ea:	48 89 c1             	mov    %rax,%rcx
  80042097ed:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097f1:	48 01 c8             	add    %rcx,%rax
  80042097f4:	48 01 d0             	add    %rdx,%rax
  80042097f7:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042097fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097ff:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  8004209802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209806:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  800420980d:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  8004209810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209814:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800420981a:	8d 50 01             	lea    0x1(%rax),%edx
  800420981d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209821:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  8004209827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420982b:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209831:	83 f8 03             	cmp    $0x3,%eax
  8004209834:	74 16                	je     800420984c <env_run+0x16e>
			lcr3(e->env_cr3);
  8004209836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420983a:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209841:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209849:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  800420984c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209850:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209856:	83 f8 03             	cmp    $0x3,%eax
  8004209859:	74 35                	je     8004209890 <env_run+0x1b2>
  800420985b:	48 b9 4c e3 21 04 80 	movabs $0x800421e34c,%rcx
  8004209862:	00 00 00 
  8004209865:	48 ba 69 e3 21 04 80 	movabs $0x800421e369,%rdx
  800420986c:	00 00 00 
  800420986f:	be b2 02 00 00       	mov    $0x2b2,%esi
  8004209874:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  800420987b:	00 00 00 
  800420987e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209883:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420988a:	00 00 00 
  800420988d:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209894:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420989a:	83 f8 03             	cmp    $0x3,%eax
  800420989d:	75 3d                	jne    80042098dc <env_run+0x1fe>
		vmx_vmrun(e);
  800420989f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098a3:	48 89 c7             	mov    %rax,%rdi
  80042098a6:	48 b8 7c c1 21 04 80 	movabs $0x800421c17c,%rax
  80042098ad:	00 00 00 
  80042098b0:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  80042098b2:	48 ba 7e e3 21 04 80 	movabs $0x800421e37e,%rdx
  80042098b9:	00 00 00 
  80042098bc:	be b8 02 00 00       	mov    $0x2b8,%esi
  80042098c1:	48 bf 4c e2 21 04 80 	movabs $0x800421e24c,%rdi
  80042098c8:	00 00 00 
  80042098cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098d0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042098d7:	00 00 00 
  80042098da:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  80042098dc:	48 b8 e3 7d 20 04 80 	movabs $0x8004207de3,%rax
  80042098e3:	00 00 00 
  80042098e6:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  80042098e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098ec:	48 89 c7             	mov    %rax,%rdi
  80042098ef:	48 b8 02 96 20 04 80 	movabs $0x8004209602,%rax
  80042098f6:	00 00 00 
  80042098f9:	ff d0                	callq  *%rax

00000080042098fb <mc146818_read>:
  80042098fb:	55                   	push   %rbp
  80042098fc:	48 89 e5             	mov    %rsp,%rbp
  80042098ff:	48 83 ec 14          	sub    $0x14,%rsp
  8004209903:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209906:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209909:	0f b6 c0             	movzbl %al,%eax
  800420990c:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209913:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209916:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420991a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420991d:	ee                   	out    %al,(%dx)
  800420991e:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209925:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209928:	89 c2                	mov    %eax,%edx
  800420992a:	ec                   	in     (%dx),%al
  800420992b:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420992e:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209932:	0f b6 c0             	movzbl %al,%eax
  8004209935:	c9                   	leaveq 
  8004209936:	c3                   	retq   

0000008004209937 <mc146818_write>:
  8004209937:	55                   	push   %rbp
  8004209938:	48 89 e5             	mov    %rsp,%rbp
  800420993b:	48 83 ec 18          	sub    $0x18,%rsp
  800420993f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209942:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209945:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209948:	0f b6 c0             	movzbl %al,%eax
  800420994b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209952:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209955:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209959:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420995c:	ee                   	out    %al,(%dx)
  800420995d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004209960:	0f b6 c0             	movzbl %al,%eax
  8004209963:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  800420996a:	88 45 f3             	mov    %al,-0xd(%rbp)
  800420996d:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209971:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209974:	ee                   	out    %al,(%dx)
  8004209975:	c9                   	leaveq 
  8004209976:	c3                   	retq   

0000008004209977 <pic_init>:
  8004209977:	55                   	push   %rbp
  8004209978:	48 89 e5             	mov    %rsp,%rbp
  800420997b:	48 83 ec 70          	sub    $0x70,%rsp
  800420997f:	48 b8 68 b2 4d 04 80 	movabs $0x80044db268,%rax
  8004209986:	00 00 00 
  8004209989:	c6 00 01             	movb   $0x1,(%rax)
  800420998c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  8004209993:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  8004209997:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420999b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420999e:	ee                   	out    %al,(%dx)
  800420999f:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099a6:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099aa:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099b1:	ee                   	out    %al,(%dx)
  80042099b2:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099b9:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099bd:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099c1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099c4:	ee                   	out    %al,(%dx)
  80042099c5:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099cc:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099d0:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099d4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099d7:	ee                   	out    %al,(%dx)
  80042099d8:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099df:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099e3:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042099e7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042099ea:	ee                   	out    %al,(%dx)
  80042099eb:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042099f2:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  80042099f6:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042099fa:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042099fd:	ee                   	out    %al,(%dx)
  80042099fe:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a05:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a09:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a0d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a10:	ee                   	out    %al,(%dx)
  8004209a11:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a18:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a1c:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a20:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a23:	ee                   	out    %al,(%dx)
  8004209a24:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a2b:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a2f:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a33:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a36:	ee                   	out    %al,(%dx)
  8004209a37:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a3e:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a42:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a46:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a49:	ee                   	out    %al,(%dx)
  8004209a4a:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a51:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a55:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a59:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a5c:	ee                   	out    %al,(%dx)
  8004209a5d:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a64:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a68:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a6c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a6f:	ee                   	out    %al,(%dx)
  8004209a70:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a77:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a7b:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a7f:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a82:	ee                   	out    %al,(%dx)
  8004209a83:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a8a:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a8e:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a92:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209a95:	ee                   	out    %al,(%dx)
  8004209a96:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004209a9d:	00 00 00 
  8004209aa0:	0f b7 00             	movzwl (%rax),%eax
  8004209aa3:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209aa7:	74 1e                	je     8004209ac7 <pic_init+0x150>
  8004209aa9:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004209ab0:	00 00 00 
  8004209ab3:	0f b7 00             	movzwl (%rax),%eax
  8004209ab6:	0f b7 c0             	movzwl %ax,%eax
  8004209ab9:	89 c7                	mov    %eax,%edi
  8004209abb:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004209ac2:	00 00 00 
  8004209ac5:	ff d0                	callq  *%rax
  8004209ac7:	c9                   	leaveq 
  8004209ac8:	c3                   	retq   

0000008004209ac9 <irq_setmask_8259A>:
  8004209ac9:	55                   	push   %rbp
  8004209aca:	48 89 e5             	mov    %rsp,%rbp
  8004209acd:	48 83 ec 30          	sub    $0x30,%rsp
  8004209ad1:	89 f8                	mov    %edi,%eax
  8004209ad3:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209ad7:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004209ade:	00 00 00 
  8004209ae1:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209ae5:	66 89 10             	mov    %dx,(%rax)
  8004209ae8:	48 b8 68 b2 4d 04 80 	movabs $0x80044db268,%rax
  8004209aef:	00 00 00 
  8004209af2:	0f b6 00             	movzbl (%rax),%eax
  8004209af5:	83 f0 01             	xor    $0x1,%eax
  8004209af8:	84 c0                	test   %al,%al
  8004209afa:	74 05                	je     8004209b01 <irq_setmask_8259A+0x38>
  8004209afc:	e9 b7 00 00 00       	jmpq   8004209bb8 <irq_setmask_8259A+0xef>
  8004209b01:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b05:	0f b6 c0             	movzbl %al,%eax
  8004209b08:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b0f:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b12:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b16:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b19:	ee                   	out    %al,(%dx)
  8004209b1a:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b1e:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b22:	0f b6 c0             	movzbl %al,%eax
  8004209b25:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b2c:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b2f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b33:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b36:	ee                   	out    %al,(%dx)
  8004209b37:	48 bf 95 e3 21 04 80 	movabs $0x800421e395,%rdi
  8004209b3e:	00 00 00 
  8004209b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b4d:	00 00 00 
  8004209b50:	ff d2                	callq  *%rdx
  8004209b52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b59:	eb 3c                	jmp    8004209b97 <irq_setmask_8259A+0xce>
  8004209b5b:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b5f:	f7 d0                	not    %eax
  8004209b61:	89 c2                	mov    %eax,%edx
  8004209b63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b66:	89 c1                	mov    %eax,%ecx
  8004209b68:	d3 fa                	sar    %cl,%edx
  8004209b6a:	89 d0                	mov    %edx,%eax
  8004209b6c:	83 e0 01             	and    $0x1,%eax
  8004209b6f:	85 c0                	test   %eax,%eax
  8004209b71:	74 20                	je     8004209b93 <irq_setmask_8259A+0xca>
  8004209b73:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b76:	89 c6                	mov    %eax,%esi
  8004209b78:	48 bf a9 e3 21 04 80 	movabs $0x800421e3a9,%rdi
  8004209b7f:	00 00 00 
  8004209b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b8e:	00 00 00 
  8004209b91:	ff d2                	callq  *%rdx
  8004209b93:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209b97:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209b9b:	7e be                	jle    8004209b5b <irq_setmask_8259A+0x92>
  8004209b9d:	48 bf ad e3 21 04 80 	movabs $0x800421e3ad,%rdi
  8004209ba4:	00 00 00 
  8004209ba7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bac:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209bb3:	00 00 00 
  8004209bb6:	ff d2                	callq  *%rdx
  8004209bb8:	c9                   	leaveq 
  8004209bb9:	c3                   	retq   

0000008004209bba <irq_eoi>:
  8004209bba:	55                   	push   %rbp
  8004209bbb:	48 89 e5             	mov    %rsp,%rbp
  8004209bbe:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bc2:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209bc9:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209bcd:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bd1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209bd4:	ee                   	out    %al,(%dx)
  8004209bd5:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209bdc:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209be0:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209be4:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209be7:	ee                   	out    %al,(%dx)
  8004209be8:	c9                   	leaveq 
  8004209be9:	c3                   	retq   

0000008004209bea <putch>:
  8004209bea:	55                   	push   %rbp
  8004209beb:	48 89 e5             	mov    %rsp,%rbp
  8004209bee:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bf2:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209bf5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209bf9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209bfc:	89 c7                	mov    %eax,%edi
  8004209bfe:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004209c05:	00 00 00 
  8004209c08:	ff d0                	callq  *%rax
  8004209c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c0e:	48 83 c0 04          	add    $0x4,%rax
  8004209c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c16:	c9                   	leaveq 
  8004209c17:	c3                   	retq   

0000008004209c18 <vcprintf>:
  8004209c18:	55                   	push   %rbp
  8004209c19:	48 89 e5             	mov    %rsp,%rbp
  8004209c1c:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c24:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c28:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c37:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c3a:	48 89 08             	mov    %rcx,(%rax)
  8004209c3d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c41:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c45:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c4d:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c55:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c59:	48 89 c6             	mov    %rax,%rsi
  8004209c5c:	48 bf ea 9b 20 04 80 	movabs $0x8004209bea,%rdi
  8004209c63:	00 00 00 
  8004209c66:	48 b8 a3 fd 20 04 80 	movabs $0x800420fda3,%rax
  8004209c6d:	00 00 00 
  8004209c70:	ff d0                	callq  *%rax
  8004209c72:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c75:	c9                   	leaveq 
  8004209c76:	c3                   	retq   

0000008004209c77 <cprintf>:
  8004209c77:	55                   	push   %rbp
  8004209c78:	48 89 e5             	mov    %rsp,%rbp
  8004209c7b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c82:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c89:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c90:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209c97:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209c9e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209ca5:	84 c0                	test   %al,%al
  8004209ca7:	74 20                	je     8004209cc9 <cprintf+0x52>
  8004209ca9:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cad:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209cb1:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cb5:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cb9:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cbd:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209cc1:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209cc5:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209cc9:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cd0:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209cd7:	00 00 00 
  8004209cda:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209ce1:	00 00 00 
  8004209ce4:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209ce8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209cef:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209cf6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209cfd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d04:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d0b:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d0e:	48 89 08             	mov    %rcx,(%rax)
  8004209d11:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d15:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d19:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d1d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d21:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d28:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d2f:	48 89 d6             	mov    %rdx,%rsi
  8004209d32:	48 89 c7             	mov    %rax,%rdi
  8004209d35:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  8004209d3c:	00 00 00 
  8004209d3f:	ff d0                	callq  *%rax
  8004209d41:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d47:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d4d:	c9                   	leaveq 
  8004209d4e:	c3                   	retq   

0000008004209d4f <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d4f:	55                   	push   %rbp
  8004209d50:	48 89 e5             	mov    %rsp,%rbp
  8004209d53:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d5b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209d5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d65:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d69:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d6c:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d72:	c9                   	leaveq 
  8004209d73:	c3                   	retq   

0000008004209d74 <lock_kernel>:
  8004209d74:	55                   	push   %rbp
  8004209d75:	48 89 e5             	mov    %rsp,%rbp
  8004209d78:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004209d7f:	00 00 00 
  8004209d82:	48 b8 1d 7d 21 04 80 	movabs $0x8004217d1d,%rax
  8004209d89:	00 00 00 
  8004209d8c:	ff d0                	callq  *%rax
  8004209d8e:	5d                   	pop    %rbp
  8004209d8f:	c3                   	retq   

0000008004209d90 <trapname>:
  8004209d90:	55                   	push   %rbp
  8004209d91:	48 89 e5             	mov    %rsp,%rbp
  8004209d94:	48 83 ec 04          	sub    $0x4,%rsp
  8004209d98:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209d9b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209d9e:	83 f8 13             	cmp    $0x13,%eax
  8004209da1:	77 16                	ja     8004209db9 <trapname+0x29>
  8004209da3:	48 b8 c0 e7 21 04 80 	movabs $0x800421e7c0,%rax
  8004209daa:	00 00 00 
  8004209dad:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209db0:	48 63 d2             	movslq %edx,%rdx
  8004209db3:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209db7:	eb 34                	jmp    8004209ded <trapname+0x5d>
  8004209db9:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dbd:	75 0c                	jne    8004209dcb <trapname+0x3b>
  8004209dbf:	48 b8 c0 e3 21 04 80 	movabs $0x800421e3c0,%rax
  8004209dc6:	00 00 00 
  8004209dc9:	eb 22                	jmp    8004209ded <trapname+0x5d>
  8004209dcb:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209dcf:	7e 12                	jle    8004209de3 <trapname+0x53>
  8004209dd1:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209dd5:	7f 0c                	jg     8004209de3 <trapname+0x53>
  8004209dd7:	48 b8 cc e3 21 04 80 	movabs $0x800421e3cc,%rax
  8004209dde:	00 00 00 
  8004209de1:	eb 0a                	jmp    8004209ded <trapname+0x5d>
  8004209de3:	48 b8 df e3 21 04 80 	movabs $0x800421e3df,%rax
  8004209dea:	00 00 00 
  8004209ded:	c9                   	leaveq 
  8004209dee:	c3                   	retq   

0000008004209def <trap_init>:
  8004209def:	55                   	push   %rbp
  8004209df0:	48 89 e5             	mov    %rsp,%rbp
  8004209df3:	48 83 ec 10          	sub    $0x10,%rsp
  8004209df7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209dfe:	e9 7d 01 00 00       	jmpq   8004209f80 <trap_init+0x191>
  8004209e03:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209e0a:	00 00 00 
  8004209e0d:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  8004209e14:	00 00 00 
  8004209e17:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e1a:	48 63 c9             	movslq %ecx,%rcx
  8004209e1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e21:	48 01 ca             	add    %rcx,%rdx
  8004209e24:	66 89 02             	mov    %ax,(%rdx)
  8004209e27:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e2e:	00 00 00 
  8004209e31:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e34:	48 63 d2             	movslq %edx,%rdx
  8004209e37:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e3b:	48 01 d0             	add    %rdx,%rax
  8004209e3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e44:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e4b:	00 00 00 
  8004209e4e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e51:	48 63 d2             	movslq %edx,%rdx
  8004209e54:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e58:	48 01 d0             	add    %rdx,%rax
  8004209e5b:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e5f:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e62:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e65:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e6c:	00 00 00 
  8004209e6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e72:	48 63 d2             	movslq %edx,%rdx
  8004209e75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e79:	48 01 d0             	add    %rdx,%rax
  8004209e7c:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e80:	83 e2 07             	and    $0x7,%edx
  8004209e83:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e86:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e8d:	00 00 00 
  8004209e90:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e93:	48 63 d2             	movslq %edx,%rdx
  8004209e96:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e9a:	48 01 d0             	add    %rdx,%rax
  8004209e9d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ea1:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ea4:	83 ca 0e             	or     $0xe,%edx
  8004209ea7:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eaa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209eb1:	00 00 00 
  8004209eb4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209eb7:	48 63 d2             	movslq %edx,%rdx
  8004209eba:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209ebe:	48 01 d0             	add    %rdx,%rax
  8004209ec1:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ec5:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ec8:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ecb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209ed2:	00 00 00 
  8004209ed5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ed8:	48 63 d2             	movslq %edx,%rdx
  8004209edb:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209edf:	48 01 d0             	add    %rdx,%rax
  8004209ee2:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ee6:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ee9:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eec:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209ef3:	00 00 00 
  8004209ef6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ef9:	48 63 d2             	movslq %edx,%rdx
  8004209efc:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f00:	48 01 d0             	add    %rdx,%rax
  8004209f03:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f07:	83 ca 80             	or     $0xffffff80,%edx
  8004209f0a:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f0d:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209f14:	00 00 00 
  8004209f17:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f1b:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  8004209f22:	00 00 00 
  8004209f25:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f28:	48 63 c9             	movslq %ecx,%rcx
  8004209f2b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f2f:	48 01 ca             	add    %rcx,%rdx
  8004209f32:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f36:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209f3d:	00 00 00 
  8004209f40:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f44:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  8004209f4b:	00 00 00 
  8004209f4e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f51:	48 63 c9             	movslq %ecx,%rcx
  8004209f54:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f58:	48 01 ca             	add    %rcx,%rdx
  8004209f5b:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f5e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f65:	00 00 00 
  8004209f68:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f6b:	48 63 d2             	movslq %edx,%rdx
  8004209f6e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f72:	48 01 d0             	add    %rdx,%rax
  8004209f75:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f7c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f80:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f83:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f88:	0f 86 75 fe ff ff    	jbe    8004209e03 <trap_init+0x14>
  8004209f8e:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  8004209f95:	00 00 00 
  8004209f98:	89 c2                	mov    %eax,%edx
  8004209f9a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	66 89 10             	mov    %dx,(%rax)
  8004209fa7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fae:	00 00 00 
  8004209fb1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fb7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fbe:	00 00 00 
  8004209fc1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fc5:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fc8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fcb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fd2:	00 00 00 
  8004209fd5:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fd9:	83 e2 07             	and    $0x7,%edx
  8004209fdc:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fdf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fe6:	00 00 00 
  8004209fe9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fed:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ff0:	83 ca 0e             	or     $0xe,%edx
  8004209ff3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ff6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209ffd:	00 00 00 
  800420a000:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a004:	83 e2 ef             	and    $0xffffffef,%edx
  800420a007:	88 50 05             	mov    %dl,0x5(%rax)
  800420a00a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a011:	00 00 00 
  800420a014:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a018:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a01b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a01e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a025:	00 00 00 
  800420a028:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a02c:	83 ca 80             	or     $0xffffff80,%edx
  800420a02f:	88 50 05             	mov    %dl,0x5(%rax)
  800420a032:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a039:	00 00 00 
  800420a03c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a040:	89 c2                	mov    %eax,%edx
  800420a042:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a049:	00 00 00 
  800420a04c:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a050:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a057:	00 00 00 
  800420a05a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a05e:	89 c2                	mov    %eax,%edx
  800420a060:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a067:	00 00 00 
  800420a06a:	89 50 08             	mov    %edx,0x8(%rax)
  800420a06d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a074:	00 00 00 
  800420a077:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a07e:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a085:	00 00 00 
  800420a088:	89 c2                	mov    %eax,%edx
  800420a08a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a091:	00 00 00 
  800420a094:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a098:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a09f:	00 00 00 
  800420a0a2:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0a8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0af:	00 00 00 
  800420a0b2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0b9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0bc:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0c3:	00 00 00 
  800420a0c6:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0ca:	83 e2 07             	and    $0x7,%edx
  800420a0cd:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0d0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0d7:	00 00 00 
  800420a0da:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0e1:	83 ca 0e             	or     $0xe,%edx
  800420a0e4:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0e7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0ee:	00 00 00 
  800420a0f1:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0f5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0f8:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0fb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a102:	00 00 00 
  800420a105:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a109:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a10c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a10f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a116:	00 00 00 
  800420a119:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a11d:	83 ca 80             	or     $0xffffff80,%edx
  800420a120:	88 50 15             	mov    %dl,0x15(%rax)
  800420a123:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a12a:	00 00 00 
  800420a12d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a131:	89 c2                	mov    %eax,%edx
  800420a133:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a13a:	00 00 00 
  800420a13d:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a141:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a148:	00 00 00 
  800420a14b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a14f:	89 c2                	mov    %eax,%edx
  800420a151:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a158:	00 00 00 
  800420a15b:	89 50 18             	mov    %edx,0x18(%rax)
  800420a15e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a165:	00 00 00 
  800420a168:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a16f:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a176:	00 00 00 
  800420a179:	89 c2                	mov    %eax,%edx
  800420a17b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a182:	00 00 00 
  800420a185:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a189:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a190:	00 00 00 
  800420a193:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a199:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1a0:	00 00 00 
  800420a1a3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1a7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1aa:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1ad:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1b4:	00 00 00 
  800420a1b7:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1bb:	83 e2 07             	and    $0x7,%edx
  800420a1be:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1c1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1c8:	00 00 00 
  800420a1cb:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1cf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1d2:	83 ca 0e             	or     $0xe,%edx
  800420a1d5:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1d8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1df:	00 00 00 
  800420a1e2:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1e6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1e9:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1ec:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1f3:	00 00 00 
  800420a1f6:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1fa:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a1fd:	88 50 25             	mov    %dl,0x25(%rax)
  800420a200:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a207:	00 00 00 
  800420a20a:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a20e:	83 ca 80             	or     $0xffffff80,%edx
  800420a211:	88 50 25             	mov    %dl,0x25(%rax)
  800420a214:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a21b:	00 00 00 
  800420a21e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a222:	89 c2                	mov    %eax,%edx
  800420a224:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a22b:	00 00 00 
  800420a22e:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a232:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a239:	00 00 00 
  800420a23c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a240:	89 c2                	mov    %eax,%edx
  800420a242:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a249:	00 00 00 
  800420a24c:	89 50 28             	mov    %edx,0x28(%rax)
  800420a24f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a256:	00 00 00 
  800420a259:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a260:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a267:	00 00 00 
  800420a26a:	89 c2                	mov    %eax,%edx
  800420a26c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a273:	00 00 00 
  800420a276:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a27a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a281:	00 00 00 
  800420a284:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a28a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a291:	00 00 00 
  800420a294:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a298:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a29b:	88 50 34             	mov    %dl,0x34(%rax)
  800420a29e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2a5:	00 00 00 
  800420a2a8:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2ac:	83 e2 07             	and    $0x7,%edx
  800420a2af:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2b2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2b9:	00 00 00 
  800420a2bc:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2c0:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2c3:	83 ca 0e             	or     $0xe,%edx
  800420a2c6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2c9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2d0:	00 00 00 
  800420a2d3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2da:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2dd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2e4:	00 00 00 
  800420a2e7:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2eb:	83 ca 60             	or     $0x60,%edx
  800420a2ee:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2f1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2f8:	00 00 00 
  800420a2fb:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a302:	88 50 35             	mov    %dl,0x35(%rax)
  800420a305:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a30c:	00 00 00 
  800420a30f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a313:	89 c2                	mov    %eax,%edx
  800420a315:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a31c:	00 00 00 
  800420a31f:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a323:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a32a:	00 00 00 
  800420a32d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a331:	89 c2                	mov    %eax,%edx
  800420a333:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a33a:	00 00 00 
  800420a33d:	89 50 38             	mov    %edx,0x38(%rax)
  800420a340:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a347:	00 00 00 
  800420a34a:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a351:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a358:	00 00 00 
  800420a35b:	89 c2                	mov    %eax,%edx
  800420a35d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a364:	00 00 00 
  800420a367:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a36b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a372:	00 00 00 
  800420a375:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a37b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a382:	00 00 00 
  800420a385:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a389:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a38c:	88 50 44             	mov    %dl,0x44(%rax)
  800420a38f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a396:	00 00 00 
  800420a399:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a39d:	83 e2 07             	and    $0x7,%edx
  800420a3a0:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3a3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3aa:	00 00 00 
  800420a3ad:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3b1:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3b4:	83 ca 0e             	or     $0xe,%edx
  800420a3b7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ba:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3c1:	00 00 00 
  800420a3c4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3c8:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3cb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ce:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3d5:	00 00 00 
  800420a3d8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3dc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3df:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3e2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3e9:	00 00 00 
  800420a3ec:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3f0:	83 ca 80             	or     $0xffffff80,%edx
  800420a3f3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3f6:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a3fd:	00 00 00 
  800420a400:	48 c1 e8 10          	shr    $0x10,%rax
  800420a404:	89 c2                	mov    %eax,%edx
  800420a406:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a40d:	00 00 00 
  800420a410:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a414:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a41b:	00 00 00 
  800420a41e:	48 c1 e8 20          	shr    $0x20,%rax
  800420a422:	89 c2                	mov    %eax,%edx
  800420a424:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a42b:	00 00 00 
  800420a42e:	89 50 48             	mov    %edx,0x48(%rax)
  800420a431:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a438:	00 00 00 
  800420a43b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a442:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a449:	00 00 00 
  800420a44c:	89 c2                	mov    %eax,%edx
  800420a44e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a455:	00 00 00 
  800420a458:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a45c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a463:	00 00 00 
  800420a466:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a46c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a473:	00 00 00 
  800420a476:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a47a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a47d:	88 50 54             	mov    %dl,0x54(%rax)
  800420a480:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a487:	00 00 00 
  800420a48a:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a48e:	83 e2 07             	and    $0x7,%edx
  800420a491:	88 50 54             	mov    %dl,0x54(%rax)
  800420a494:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a49b:	00 00 00 
  800420a49e:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4a5:	83 ca 0e             	or     $0xe,%edx
  800420a4a8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4ab:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4b2:	00 00 00 
  800420a4b5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4b9:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4bc:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4bf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4c6:	00 00 00 
  800420a4c9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4d0:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4d3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4da:	00 00 00 
  800420a4dd:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4e1:	83 ca 80             	or     $0xffffff80,%edx
  800420a4e4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4e7:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a4ee:	00 00 00 
  800420a4f1:	48 c1 e8 10          	shr    $0x10,%rax
  800420a4f5:	89 c2                	mov    %eax,%edx
  800420a4f7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4fe:	00 00 00 
  800420a501:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a505:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a50c:	00 00 00 
  800420a50f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a513:	89 c2                	mov    %eax,%edx
  800420a515:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a51c:	00 00 00 
  800420a51f:	89 50 58             	mov    %edx,0x58(%rax)
  800420a522:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a529:	00 00 00 
  800420a52c:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a533:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a53a:	00 00 00 
  800420a53d:	89 c2                	mov    %eax,%edx
  800420a53f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a546:	00 00 00 
  800420a549:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a54d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a554:	00 00 00 
  800420a557:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a55d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a564:	00 00 00 
  800420a567:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a56b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a56e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a571:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a578:	00 00 00 
  800420a57b:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a57f:	83 e2 07             	and    $0x7,%edx
  800420a582:	88 50 64             	mov    %dl,0x64(%rax)
  800420a585:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a58c:	00 00 00 
  800420a58f:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a593:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a596:	83 ca 0e             	or     $0xe,%edx
  800420a599:	88 50 65             	mov    %dl,0x65(%rax)
  800420a59c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5a3:	00 00 00 
  800420a5a6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5aa:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5ad:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5b0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5be:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5c1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5c4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5cb:	00 00 00 
  800420a5ce:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5d2:	83 ca 80             	or     $0xffffff80,%edx
  800420a5d5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5d8:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5df:	00 00 00 
  800420a5e2:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5e6:	89 c2                	mov    %eax,%edx
  800420a5e8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5ef:	00 00 00 
  800420a5f2:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a5f6:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5fd:	00 00 00 
  800420a600:	48 c1 e8 20          	shr    $0x20,%rax
  800420a604:	89 c2                	mov    %eax,%edx
  800420a606:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a60d:	00 00 00 
  800420a610:	89 50 68             	mov    %edx,0x68(%rax)
  800420a613:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a61a:	00 00 00 
  800420a61d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a624:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a62b:	00 00 00 
  800420a62e:	89 c2                	mov    %eax,%edx
  800420a630:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a637:	00 00 00 
  800420a63a:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a63e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a645:	00 00 00 
  800420a648:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a64e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a655:	00 00 00 
  800420a658:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a65c:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a65f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a662:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a669:	00 00 00 
  800420a66c:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a670:	83 e2 07             	and    $0x7,%edx
  800420a673:	88 50 74             	mov    %dl,0x74(%rax)
  800420a676:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a67d:	00 00 00 
  800420a680:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a684:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a687:	83 ca 0e             	or     $0xe,%edx
  800420a68a:	88 50 75             	mov    %dl,0x75(%rax)
  800420a68d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a694:	00 00 00 
  800420a697:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a69b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a69e:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6a1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6a8:	00 00 00 
  800420a6ab:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6af:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6b2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6b5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6bc:	00 00 00 
  800420a6bf:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6c3:	83 ca 80             	or     $0xffffff80,%edx
  800420a6c6:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6c9:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6d0:	00 00 00 
  800420a6d3:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6d7:	89 c2                	mov    %eax,%edx
  800420a6d9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6e0:	00 00 00 
  800420a6e3:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a6e7:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6ee:	00 00 00 
  800420a6f1:	48 c1 e8 20          	shr    $0x20,%rax
  800420a6f5:	89 c2                	mov    %eax,%edx
  800420a6f7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6fe:	00 00 00 
  800420a701:	89 50 78             	mov    %edx,0x78(%rax)
  800420a704:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a70b:	00 00 00 
  800420a70e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a715:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a71c:	00 00 00 
  800420a71f:	89 c2                	mov    %eax,%edx
  800420a721:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a728:	00 00 00 
  800420a72b:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a732:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a739:	00 00 00 
  800420a73c:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a743:	08 00 
  800420a745:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a74c:	00 00 00 
  800420a74f:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a756:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a759:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a75f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a766:	00 00 00 
  800420a769:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a770:	83 e2 07             	and    $0x7,%edx
  800420a773:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a779:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a780:	00 00 00 
  800420a783:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a78a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a78d:	83 ca 0e             	or     $0xe,%edx
  800420a790:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a796:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a79d:	00 00 00 
  800420a7a0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7aa:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7b0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7b7:	00 00 00 
  800420a7ba:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7c1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7c4:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7ca:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7d1:	00 00 00 
  800420a7d4:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7db:	83 ca 80             	or     $0xffffff80,%edx
  800420a7de:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7e4:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a7eb:	00 00 00 
  800420a7ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7f2:	89 c2                	mov    %eax,%edx
  800420a7f4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7fb:	00 00 00 
  800420a7fe:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a805:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a80c:	00 00 00 
  800420a80f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a813:	89 c2                	mov    %eax,%edx
  800420a815:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a81c:	00 00 00 
  800420a81f:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a825:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a82c:	00 00 00 
  800420a82f:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a836:	00 00 00 
  800420a839:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a840:	00 00 00 
  800420a843:	89 c2                	mov    %eax,%edx
  800420a845:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a84c:	00 00 00 
  800420a84f:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a856:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a85d:	00 00 00 
  800420a860:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a867:	08 00 
  800420a869:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a870:	00 00 00 
  800420a873:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a87a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a87d:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a883:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a88a:	00 00 00 
  800420a88d:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a894:	83 e2 07             	and    $0x7,%edx
  800420a897:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a89d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8a4:	00 00 00 
  800420a8a7:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8b1:	83 ca 0e             	or     $0xe,%edx
  800420a8b4:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ba:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8c1:	00 00 00 
  800420a8c4:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8ce:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8d4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8db:	00 00 00 
  800420a8de:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8e8:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ee:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8f5:	00 00 00 
  800420a8f8:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a902:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a908:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a90f:	00 00 00 
  800420a912:	48 c1 e8 10          	shr    $0x10,%rax
  800420a916:	89 c2                	mov    %eax,%edx
  800420a918:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a91f:	00 00 00 
  800420a922:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a929:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a930:	00 00 00 
  800420a933:	48 c1 e8 20          	shr    $0x20,%rax
  800420a937:	89 c2                	mov    %eax,%edx
  800420a939:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a940:	00 00 00 
  800420a943:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a949:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a950:	00 00 00 
  800420a953:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a95a:	00 00 00 
  800420a95d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a964:	00 00 00 
  800420a967:	89 c2                	mov    %eax,%edx
  800420a969:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a970:	00 00 00 
  800420a973:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a97a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a981:	00 00 00 
  800420a984:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a98b:	08 00 
  800420a98d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a994:	00 00 00 
  800420a997:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a99e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9a1:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9a7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a9ae:	00 00 00 
  800420a9b1:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9b8:	83 e2 07             	and    $0x7,%edx
  800420a9bb:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9c1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a9c8:	00 00 00 
  800420a9cb:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9d5:	83 ca 0e             	or     $0xe,%edx
  800420a9d8:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9de:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a9e5:	00 00 00 
  800420a9e8:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9f2:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9f8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a9ff:	00 00 00 
  800420aa02:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa09:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa0c:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa12:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa19:	00 00 00 
  800420aa1c:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa23:	83 ca 80             	or     $0xffffff80,%edx
  800420aa26:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa2c:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa33:	00 00 00 
  800420aa36:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa3a:	89 c2                	mov    %eax,%edx
  800420aa3c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa43:	00 00 00 
  800420aa46:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa4d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa54:	00 00 00 
  800420aa57:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa5b:	89 c2                	mov    %eax,%edx
  800420aa5d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa64:	00 00 00 
  800420aa67:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa6d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa74:	00 00 00 
  800420aa77:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa7e:	00 00 00 
  800420aa81:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420aa88:	00 00 00 
  800420aa8b:	89 c2                	mov    %eax,%edx
  800420aa8d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa94:	00 00 00 
  800420aa97:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aa9e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aaa5:	00 00 00 
  800420aaa8:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aaaf:	08 00 
  800420aab1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aab8:	00 00 00 
  800420aabb:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aac2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aac5:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aacb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aad2:	00 00 00 
  800420aad5:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aadc:	83 e2 07             	and    $0x7,%edx
  800420aadf:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aae5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aaec:	00 00 00 
  800420aaef:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aaf6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aaf9:	83 ca 0e             	or     $0xe,%edx
  800420aafc:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab02:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab09:	00 00 00 
  800420ab0c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab13:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab16:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab1c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab23:	00 00 00 
  800420ab26:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab2d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab30:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab36:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab3d:	00 00 00 
  800420ab40:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab47:	83 ca 80             	or     $0xffffff80,%edx
  800420ab4a:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab50:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab57:	00 00 00 
  800420ab5a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab5e:	89 c2                	mov    %eax,%edx
  800420ab60:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab67:	00 00 00 
  800420ab6a:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab71:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab78:	00 00 00 
  800420ab7b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab7f:	89 c2                	mov    %eax,%edx
  800420ab81:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab88:	00 00 00 
  800420ab8b:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab91:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab98:	00 00 00 
  800420ab9b:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420aba2:	00 00 00 
  800420aba5:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420abac:	00 00 00 
  800420abaf:	89 c2                	mov    %eax,%edx
  800420abb1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abb8:	00 00 00 
  800420abbb:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abc2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abc9:	00 00 00 
  800420abcc:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abd3:	08 00 
  800420abd5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abdc:	00 00 00 
  800420abdf:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420abe6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abe9:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420abef:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abf6:	00 00 00 
  800420abf9:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac00:	83 e2 07             	and    $0x7,%edx
  800420ac03:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac09:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac10:	00 00 00 
  800420ac13:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac1a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac1d:	83 ca 0e             	or     $0xe,%edx
  800420ac20:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac26:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac2d:	00 00 00 
  800420ac30:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac37:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac3a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac40:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac47:	00 00 00 
  800420ac4a:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac51:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac54:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac5a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac61:	00 00 00 
  800420ac64:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac6b:	83 ca 80             	or     $0xffffff80,%edx
  800420ac6e:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac74:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac7b:	00 00 00 
  800420ac7e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac82:	89 c2                	mov    %eax,%edx
  800420ac84:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac8b:	00 00 00 
  800420ac8e:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420ac95:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac9c:	00 00 00 
  800420ac9f:	48 c1 e8 20          	shr    $0x20,%rax
  800420aca3:	89 c2                	mov    %eax,%edx
  800420aca5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420acac:	00 00 00 
  800420acaf:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acb5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420acbc:	00 00 00 
  800420acbf:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420acc6:	00 00 00 
  800420acc9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420acd0:	00 00 00 
  800420acd3:	89 c2                	mov    %eax,%edx
  800420acd5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420acdc:	00 00 00 
  800420acdf:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420ace6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aced:	00 00 00 
  800420acf0:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420acf7:	08 00 
  800420acf9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad00:	00 00 00 
  800420ad03:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad0a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad0d:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad13:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad1a:	00 00 00 
  800420ad1d:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad24:	83 e2 07             	and    $0x7,%edx
  800420ad27:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad2d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad34:	00 00 00 
  800420ad37:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad3e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad41:	83 ca 0e             	or     $0xe,%edx
  800420ad44:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad4a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad51:	00 00 00 
  800420ad54:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad5b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad5e:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad64:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad6b:	00 00 00 
  800420ad6e:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad75:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad78:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad7e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad85:	00 00 00 
  800420ad88:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad8f:	83 ca 80             	or     $0xffffff80,%edx
  800420ad92:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad98:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ad9f:	00 00 00 
  800420ada2:	48 c1 e8 10          	shr    $0x10,%rax
  800420ada6:	89 c2                	mov    %eax,%edx
  800420ada8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420adaf:	00 00 00 
  800420adb2:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420adb9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420adc0:	00 00 00 
  800420adc3:	48 c1 e8 20          	shr    $0x20,%rax
  800420adc7:	89 c2                	mov    %eax,%edx
  800420adc9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420add0:	00 00 00 
  800420add3:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420add9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ade0:	00 00 00 
  800420ade3:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420adea:	00 00 00 
  800420aded:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420adf4:	00 00 00 
  800420adf7:	89 c2                	mov    %eax,%edx
  800420adf9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae00:	00 00 00 
  800420ae03:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae0a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae11:	00 00 00 
  800420ae14:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae1b:	08 00 
  800420ae1d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae24:	00 00 00 
  800420ae27:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae2e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae31:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae37:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae3e:	00 00 00 
  800420ae41:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae48:	83 e2 07             	and    $0x7,%edx
  800420ae4b:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae51:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae58:	00 00 00 
  800420ae5b:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae62:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae65:	83 ca 0e             	or     $0xe,%edx
  800420ae68:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae6e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae75:	00 00 00 
  800420ae78:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae7f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae82:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae88:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae8f:	00 00 00 
  800420ae92:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae99:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae9c:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aea2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aea9:	00 00 00 
  800420aeac:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aeb3:	83 ca 80             	or     $0xffffff80,%edx
  800420aeb6:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aebc:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aec3:	00 00 00 
  800420aec6:	48 c1 e8 10          	shr    $0x10,%rax
  800420aeca:	89 c2                	mov    %eax,%edx
  800420aecc:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aed3:	00 00 00 
  800420aed6:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aedd:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aee4:	00 00 00 
  800420aee7:	48 c1 e8 20          	shr    $0x20,%rax
  800420aeeb:	89 c2                	mov    %eax,%edx
  800420aeed:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aef4:	00 00 00 
  800420aef7:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420aefd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af04:	00 00 00 
  800420af07:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af0e:	00 00 00 
  800420af11:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420af18:	00 00 00 
  800420af1b:	89 c2                	mov    %eax,%edx
  800420af1d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af24:	00 00 00 
  800420af27:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af2e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af35:	00 00 00 
  800420af38:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af3f:	08 00 
  800420af41:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af48:	00 00 00 
  800420af4b:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af52:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af55:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af5b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af62:	00 00 00 
  800420af65:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af6c:	83 e2 07             	and    $0x7,%edx
  800420af6f:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af75:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af7c:	00 00 00 
  800420af7f:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af86:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af89:	83 ca 0e             	or     $0xe,%edx
  800420af8c:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af92:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af99:	00 00 00 
  800420af9c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afa3:	83 e2 ef             	and    $0xffffffef,%edx
  800420afa6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afac:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420afb3:	00 00 00 
  800420afb6:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afbd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afc0:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afc6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420afcd:	00 00 00 
  800420afd0:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afd7:	83 ca 80             	or     $0xffffff80,%edx
  800420afda:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afe0:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420afe7:	00 00 00 
  800420afea:	48 c1 e8 10          	shr    $0x10,%rax
  800420afee:	89 c2                	mov    %eax,%edx
  800420aff0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aff7:	00 00 00 
  800420affa:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b001:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420b008:	00 00 00 
  800420b00b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b00f:	89 c2                	mov    %eax,%edx
  800420b011:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b018:	00 00 00 
  800420b01b:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b021:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b028:	00 00 00 
  800420b02b:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b032:	00 00 00 
  800420b035:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b03c:	00 00 00 
  800420b03f:	89 c2                	mov    %eax,%edx
  800420b041:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b048:	00 00 00 
  800420b04b:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b052:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b059:	00 00 00 
  800420b05c:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b063:	08 00 
  800420b065:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b06c:	00 00 00 
  800420b06f:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b076:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b079:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b07f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b086:	00 00 00 
  800420b089:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b090:	83 e2 07             	and    $0x7,%edx
  800420b093:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b099:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0a0:	00 00 00 
  800420b0a3:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0aa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0ad:	83 ca 0e             	or     $0xe,%edx
  800420b0b0:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0b6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0bd:	00 00 00 
  800420b0c0:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0c7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0ca:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0d0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0d7:	00 00 00 
  800420b0da:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0e1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0e4:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0ea:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0f1:	00 00 00 
  800420b0f4:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0fb:	83 ca 80             	or     $0xffffff80,%edx
  800420b0fe:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b104:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b10b:	00 00 00 
  800420b10e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b112:	89 c2                	mov    %eax,%edx
  800420b114:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b11b:	00 00 00 
  800420b11e:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b125:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b12c:	00 00 00 
  800420b12f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b133:	89 c2                	mov    %eax,%edx
  800420b135:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b13c:	00 00 00 
  800420b13f:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b145:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b14c:	00 00 00 
  800420b14f:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b156:	00 00 00 
  800420b159:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b160:	00 00 00 
  800420b163:	89 c2                	mov    %eax,%edx
  800420b165:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b16c:	00 00 00 
  800420b16f:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b176:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b17d:	00 00 00 
  800420b180:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b187:	08 00 
  800420b189:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b190:	00 00 00 
  800420b193:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b19a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b19d:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1a3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1aa:	00 00 00 
  800420b1ad:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1b4:	83 e2 07             	and    $0x7,%edx
  800420b1b7:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1bd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1c4:	00 00 00 
  800420b1c7:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1ce:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1d1:	83 ca 0e             	or     $0xe,%edx
  800420b1d4:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1da:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1e1:	00 00 00 
  800420b1e4:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1eb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1ee:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1f4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1fb:	00 00 00 
  800420b1fe:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b205:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b208:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b20e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b215:	00 00 00 
  800420b218:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b21f:	83 ca 80             	or     $0xffffff80,%edx
  800420b222:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b228:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b22f:	00 00 00 
  800420b232:	48 c1 e8 10          	shr    $0x10,%rax
  800420b236:	89 c2                	mov    %eax,%edx
  800420b238:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b23f:	00 00 00 
  800420b242:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b249:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b250:	00 00 00 
  800420b253:	48 c1 e8 20          	shr    $0x20,%rax
  800420b257:	89 c2                	mov    %eax,%edx
  800420b259:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b260:	00 00 00 
  800420b263:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b269:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b270:	00 00 00 
  800420b273:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b27a:	00 00 00 
  800420b27d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b284:	00 00 00 
  800420b287:	89 c2                	mov    %eax,%edx
  800420b289:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b290:	00 00 00 
  800420b293:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b29a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2a1:	00 00 00 
  800420b2a4:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2ab:	08 00 
  800420b2ad:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2b4:	00 00 00 
  800420b2b7:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2be:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2c1:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2c7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2ce:	00 00 00 
  800420b2d1:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2d8:	83 e2 07             	and    $0x7,%edx
  800420b2db:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2e1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2e8:	00 00 00 
  800420b2eb:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2f2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b2f5:	83 ca 0e             	or     $0xe,%edx
  800420b2f8:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2fe:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b305:	00 00 00 
  800420b308:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b30f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b312:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b318:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b31f:	00 00 00 
  800420b322:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b329:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b32c:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b332:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b339:	00 00 00 
  800420b33c:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b343:	83 ca 80             	or     $0xffffff80,%edx
  800420b346:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b34c:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b353:	00 00 00 
  800420b356:	48 c1 e8 10          	shr    $0x10,%rax
  800420b35a:	89 c2                	mov    %eax,%edx
  800420b35c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b363:	00 00 00 
  800420b366:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b36d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b374:	00 00 00 
  800420b377:	48 c1 e8 20          	shr    $0x20,%rax
  800420b37b:	89 c2                	mov    %eax,%edx
  800420b37d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b384:	00 00 00 
  800420b387:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b38d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b394:	00 00 00 
  800420b397:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b39e:	00 00 00 
  800420b3a1:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b3a8:	00 00 00 
  800420b3ab:	89 c2                	mov    %eax,%edx
  800420b3ad:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3b4:	00 00 00 
  800420b3b7:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3be:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3c5:	00 00 00 
  800420b3c8:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3cf:	08 00 
  800420b3d1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3d8:	00 00 00 
  800420b3db:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3e2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3e5:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3eb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3f2:	00 00 00 
  800420b3f5:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3fc:	83 e2 07             	and    $0x7,%edx
  800420b3ff:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b405:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b40c:	00 00 00 
  800420b40f:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b416:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b419:	83 ca 0e             	or     $0xe,%edx
  800420b41c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b422:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b429:	00 00 00 
  800420b42c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b433:	83 e2 ef             	and    $0xffffffef,%edx
  800420b436:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b43c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b443:	00 00 00 
  800420b446:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b44d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b450:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b456:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b45d:	00 00 00 
  800420b460:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b467:	83 ca 80             	or     $0xffffff80,%edx
  800420b46a:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b470:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b477:	00 00 00 
  800420b47a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b47e:	89 c2                	mov    %eax,%edx
  800420b480:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b487:	00 00 00 
  800420b48a:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b491:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b498:	00 00 00 
  800420b49b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b49f:	89 c2                	mov    %eax,%edx
  800420b4a1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4a8:	00 00 00 
  800420b4ab:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4b1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4b8:	00 00 00 
  800420b4bb:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4c2:	00 00 00 
  800420b4c5:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b4cc:	00 00 00 
  800420b4cf:	89 c2                	mov    %eax,%edx
  800420b4d1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4d8:	00 00 00 
  800420b4db:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4e2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4e9:	00 00 00 
  800420b4ec:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b4f3:	08 00 
  800420b4f5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4fc:	00 00 00 
  800420b4ff:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b506:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b509:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b50f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b516:	00 00 00 
  800420b519:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b520:	83 e2 07             	and    $0x7,%edx
  800420b523:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b529:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b530:	00 00 00 
  800420b533:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b53a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b53d:	83 ca 0e             	or     $0xe,%edx
  800420b540:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b546:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b54d:	00 00 00 
  800420b550:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b557:	83 e2 ef             	and    $0xffffffef,%edx
  800420b55a:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b560:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b567:	00 00 00 
  800420b56a:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b571:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b574:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b57a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b581:	00 00 00 
  800420b584:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b58b:	83 ca 80             	or     $0xffffff80,%edx
  800420b58e:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b594:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b59b:	00 00 00 
  800420b59e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5a2:	89 c2                	mov    %eax,%edx
  800420b5a4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5ab:	00 00 00 
  800420b5ae:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5b5:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b5bc:	00 00 00 
  800420b5bf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5c3:	89 c2                	mov    %eax,%edx
  800420b5c5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5cc:	00 00 00 
  800420b5cf:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5d5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5dc:	00 00 00 
  800420b5df:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b5e6:	00 00 00 
  800420b5e9:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b5f0:	00 00 00 
  800420b5f3:	89 c2                	mov    %eax,%edx
  800420b5f5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5fc:	00 00 00 
  800420b5ff:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b606:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b60d:	00 00 00 
  800420b610:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b617:	08 00 
  800420b619:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b620:	00 00 00 
  800420b623:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b62a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b62d:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b633:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b63a:	00 00 00 
  800420b63d:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b644:	83 e2 07             	and    $0x7,%edx
  800420b647:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b64d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b654:	00 00 00 
  800420b657:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b65e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b661:	83 ca 0e             	or     $0xe,%edx
  800420b664:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b66a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b671:	00 00 00 
  800420b674:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b67b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b67e:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b684:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b68b:	00 00 00 
  800420b68e:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b695:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b698:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b69e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6a5:	00 00 00 
  800420b6a8:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6af:	83 ca 80             	or     $0xffffff80,%edx
  800420b6b2:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6b8:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b6bf:	00 00 00 
  800420b6c2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6c6:	89 c2                	mov    %eax,%edx
  800420b6c8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6cf:	00 00 00 
  800420b6d2:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6d9:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b6e0:	00 00 00 
  800420b6e3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6e7:	89 c2                	mov    %eax,%edx
  800420b6e9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6f0:	00 00 00 
  800420b6f3:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b6f9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b700:	00 00 00 
  800420b703:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b70a:	00 00 00 
  800420b70d:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b714:	00 00 00 
  800420b717:	89 c2                	mov    %eax,%edx
  800420b719:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b720:	00 00 00 
  800420b723:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b72a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b731:	00 00 00 
  800420b734:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b73b:	08 00 
  800420b73d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b744:	00 00 00 
  800420b747:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b74e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b751:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b757:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b75e:	00 00 00 
  800420b761:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b768:	83 e2 07             	and    $0x7,%edx
  800420b76b:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b771:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b778:	00 00 00 
  800420b77b:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b782:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b785:	83 ca 0e             	or     $0xe,%edx
  800420b788:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b78e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b795:	00 00 00 
  800420b798:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b79f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7a2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7a8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7af:	00 00 00 
  800420b7b2:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7b9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7bc:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7c2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7c9:	00 00 00 
  800420b7cc:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7d3:	83 ca 80             	or     $0xffffff80,%edx
  800420b7d6:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7dc:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b7e3:	00 00 00 
  800420b7e6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7ea:	89 c2                	mov    %eax,%edx
  800420b7ec:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7f3:	00 00 00 
  800420b7f6:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b7fd:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b804:	00 00 00 
  800420b807:	48 c1 e8 20          	shr    $0x20,%rax
  800420b80b:	89 c2                	mov    %eax,%edx
  800420b80d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b814:	00 00 00 
  800420b817:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b81d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b824:	00 00 00 
  800420b827:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b82e:	00 00 00 
  800420b831:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b838:	00 00 00 
  800420b83b:	89 c2                	mov    %eax,%edx
  800420b83d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b844:	00 00 00 
  800420b847:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b84e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b855:	00 00 00 
  800420b858:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b85f:	08 00 
  800420b861:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b868:	00 00 00 
  800420b86b:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b872:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b875:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b87b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b882:	00 00 00 
  800420b885:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b88c:	83 e2 07             	and    $0x7,%edx
  800420b88f:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b895:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b89c:	00 00 00 
  800420b89f:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8a9:	83 ca 0e             	or     $0xe,%edx
  800420b8ac:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8b2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b8b9:	00 00 00 
  800420b8bc:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8c6:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8cc:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b8d3:	00 00 00 
  800420b8d6:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8e0:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8e6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b8ed:	00 00 00 
  800420b8f0:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8f7:	83 ca 80             	or     $0xffffff80,%edx
  800420b8fa:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b900:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b907:	00 00 00 
  800420b90a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b90e:	89 c2                	mov    %eax,%edx
  800420b910:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b917:	00 00 00 
  800420b91a:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b921:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b928:	00 00 00 
  800420b92b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b92f:	89 c2                	mov    %eax,%edx
  800420b931:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b938:	00 00 00 
  800420b93b:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b941:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b948:	00 00 00 
  800420b94b:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b952:	00 00 00 
  800420b955:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420b95c:	00 00 00 
  800420b95f:	89 c2                	mov    %eax,%edx
  800420b961:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b968:	00 00 00 
  800420b96b:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b972:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b979:	00 00 00 
  800420b97c:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b983:	08 00 
  800420b985:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b98c:	00 00 00 
  800420b98f:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b996:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b999:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b99f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9a6:	00 00 00 
  800420b9a9:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9b0:	83 e2 07             	and    $0x7,%edx
  800420b9b3:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9b9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9c0:	00 00 00 
  800420b9c3:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9cd:	83 ca 0e             	or     $0xe,%edx
  800420b9d0:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9d6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9dd:	00 00 00 
  800420b9e0:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9ea:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9f0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9f7:	00 00 00 
  800420b9fa:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba01:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba04:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba0a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba11:	00 00 00 
  800420ba14:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba1b:	83 ca 80             	or     $0xffffff80,%edx
  800420ba1e:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba24:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420ba2b:	00 00 00 
  800420ba2e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba32:	89 c2                	mov    %eax,%edx
  800420ba34:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba3b:	00 00 00 
  800420ba3e:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba45:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420ba4c:	00 00 00 
  800420ba4f:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba53:	89 c2                	mov    %eax,%edx
  800420ba55:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba5c:	00 00 00 
  800420ba5f:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba65:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba6c:	00 00 00 
  800420ba6f:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba76:	00 00 00 
  800420ba79:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420ba80:	00 00 00 
  800420ba83:	89 c2                	mov    %eax,%edx
  800420ba85:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba8c:	00 00 00 
  800420ba8f:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420ba96:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba9d:	00 00 00 
  800420baa0:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420baa7:	08 00 
  800420baa9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bab0:	00 00 00 
  800420bab3:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420baba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420babd:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bac3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420baca:	00 00 00 
  800420bacd:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bad4:	83 e2 07             	and    $0x7,%edx
  800420bad7:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420badd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bae4:	00 00 00 
  800420bae7:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420baee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420baf1:	83 ca 0e             	or     $0xe,%edx
  800420baf4:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bafa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb01:	00 00 00 
  800420bb04:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb0b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb0e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb14:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb1b:	00 00 00 
  800420bb1e:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb25:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb28:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb2e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb35:	00 00 00 
  800420bb38:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb3f:	83 ca 80             	or     $0xffffff80,%edx
  800420bb42:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb48:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420bb4f:	00 00 00 
  800420bb52:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb56:	89 c2                	mov    %eax,%edx
  800420bb58:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb5f:	00 00 00 
  800420bb62:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb69:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420bb70:	00 00 00 
  800420bb73:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb77:	89 c2                	mov    %eax,%edx
  800420bb79:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb80:	00 00 00 
  800420bb83:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb89:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb90:	00 00 00 
  800420bb93:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bb9a:	00 00 00 
  800420bb9d:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bba4:	00 00 00 
  800420bba7:	89 c2                	mov    %eax,%edx
  800420bba9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbb0:	00 00 00 
  800420bbb3:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbba:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbc1:	00 00 00 
  800420bbc4:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbcb:	08 00 
  800420bbcd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbd4:	00 00 00 
  800420bbd7:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbde:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbe1:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bbe7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbee:	00 00 00 
  800420bbf1:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbf8:	83 e2 07             	and    $0x7,%edx
  800420bbfb:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc01:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc08:	00 00 00 
  800420bc0b:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc15:	83 ca 0e             	or     $0xe,%edx
  800420bc18:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc1e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc25:	00 00 00 
  800420bc28:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc32:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc38:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc3f:	00 00 00 
  800420bc42:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc4c:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc52:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc59:	00 00 00 
  800420bc5c:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc63:	83 ca 80             	or     $0xffffff80,%edx
  800420bc66:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc6c:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bc73:	00 00 00 
  800420bc76:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc7a:	89 c2                	mov    %eax,%edx
  800420bc7c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc83:	00 00 00 
  800420bc86:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc8d:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bc94:	00 00 00 
  800420bc97:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc9b:	89 c2                	mov    %eax,%edx
  800420bc9d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bca4:	00 00 00 
  800420bca7:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcad:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bcb4:	00 00 00 
  800420bcb7:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcbe:	00 00 00 
  800420bcc1:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bcc8:	00 00 00 
  800420bccb:	89 c2                	mov    %eax,%edx
  800420bccd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bcd4:	00 00 00 
  800420bcd7:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcde:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bce5:	00 00 00 
  800420bce8:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bcef:	08 00 
  800420bcf1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bcf8:	00 00 00 
  800420bcfb:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd05:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd0b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd12:	00 00 00 
  800420bd15:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd1c:	83 e2 07             	and    $0x7,%edx
  800420bd1f:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd25:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd2c:	00 00 00 
  800420bd2f:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd39:	83 ca 0e             	or     $0xe,%edx
  800420bd3c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd42:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd49:	00 00 00 
  800420bd4c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd53:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd56:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd5c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd63:	00 00 00 
  800420bd66:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd70:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd76:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd7d:	00 00 00 
  800420bd80:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd87:	83 ca 80             	or     $0xffffff80,%edx
  800420bd8a:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd90:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bd97:	00 00 00 
  800420bd9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd9e:	89 c2                	mov    %eax,%edx
  800420bda0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bda7:	00 00 00 
  800420bdaa:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdb1:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bdb8:	00 00 00 
  800420bdbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdbf:	89 c2                	mov    %eax,%edx
  800420bdc1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bdc8:	00 00 00 
  800420bdcb:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bdd1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bdd8:	00 00 00 
  800420bddb:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bde2:	00 00 00 
  800420bde5:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bdec:	00 00 00 
  800420bdef:	89 c2                	mov    %eax,%edx
  800420bdf1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bdf8:	00 00 00 
  800420bdfb:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be02:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be09:	00 00 00 
  800420be0c:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be13:	08 00 
  800420be15:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be1c:	00 00 00 
  800420be1f:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be29:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be2f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be36:	00 00 00 
  800420be39:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be40:	83 e2 07             	and    $0x7,%edx
  800420be43:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be49:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be50:	00 00 00 
  800420be53:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be5d:	83 ca 0e             	or     $0xe,%edx
  800420be60:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be66:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be6d:	00 00 00 
  800420be70:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be77:	83 e2 ef             	and    $0xffffffef,%edx
  800420be7a:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be80:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be87:	00 00 00 
  800420be8a:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be91:	83 e2 9f             	and    $0xffffff9f,%edx
  800420be94:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be9a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bea1:	00 00 00 
  800420bea4:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420beab:	83 ca 80             	or     $0xffffff80,%edx
  800420beae:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420beb4:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bebb:	00 00 00 
  800420bebe:	48 c1 e8 10          	shr    $0x10,%rax
  800420bec2:	89 c2                	mov    %eax,%edx
  800420bec4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420becb:	00 00 00 
  800420bece:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bed5:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bedc:	00 00 00 
  800420bedf:	48 c1 e8 20          	shr    $0x20,%rax
  800420bee3:	89 c2                	mov    %eax,%edx
  800420bee5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420beec:	00 00 00 
  800420beef:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bef5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420befc:	00 00 00 
  800420beff:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf06:	00 00 00 
  800420bf09:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420bf10:	00 00 00 
  800420bf13:	89 c2                	mov    %eax,%edx
  800420bf15:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf26:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf2d:	00 00 00 
  800420bf30:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf37:	08 00 
  800420bf39:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf40:	00 00 00 
  800420bf43:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf4a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf4d:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf53:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf5a:	00 00 00 
  800420bf5d:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf64:	83 e2 07             	and    $0x7,%edx
  800420bf67:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf6d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf74:	00 00 00 
  800420bf77:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf7e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf81:	83 ca 0e             	or     $0xe,%edx
  800420bf84:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf8a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf91:	00 00 00 
  800420bf94:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf9b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bf9e:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfa4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfab:	00 00 00 
  800420bfae:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfb5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfb8:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfbe:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfc5:	00 00 00 
  800420bfc8:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfcf:	83 ca 80             	or     $0xffffff80,%edx
  800420bfd2:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfd8:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420bfdf:	00 00 00 
  800420bfe2:	48 c1 e8 10          	shr    $0x10,%rax
  800420bfe6:	89 c2                	mov    %eax,%edx
  800420bfe8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfef:	00 00 00 
  800420bff2:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420bff9:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420c000:	00 00 00 
  800420c003:	48 c1 e8 20          	shr    $0x20,%rax
  800420c007:	89 c2                	mov    %eax,%edx
  800420c009:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c010:	00 00 00 
  800420c013:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c019:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c020:	00 00 00 
  800420c023:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c02a:	00 00 00 
  800420c02d:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c034:	00 00 00 
  800420c037:	89 c2                	mov    %eax,%edx
  800420c039:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c040:	00 00 00 
  800420c043:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c04a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c051:	00 00 00 
  800420c054:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c05b:	08 00 
  800420c05d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c064:	00 00 00 
  800420c067:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c06e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c071:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c077:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c07e:	00 00 00 
  800420c081:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c088:	83 e2 07             	and    $0x7,%edx
  800420c08b:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c091:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c098:	00 00 00 
  800420c09b:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0a5:	83 ca 0e             	or     $0xe,%edx
  800420c0a8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ae:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c0b5:	00 00 00 
  800420c0b8:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0bf:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0c2:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0c8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c0cf:	00 00 00 
  800420c0d2:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0d9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0dc:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0e2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c0e9:	00 00 00 
  800420c0ec:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0f3:	83 ca 80             	or     $0xffffff80,%edx
  800420c0f6:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0fc:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c103:	00 00 00 
  800420c106:	48 c1 e8 10          	shr    $0x10,%rax
  800420c10a:	89 c2                	mov    %eax,%edx
  800420c10c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c113:	00 00 00 
  800420c116:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c11d:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c124:	00 00 00 
  800420c127:	48 c1 e8 20          	shr    $0x20,%rax
  800420c12b:	89 c2                	mov    %eax,%edx
  800420c12d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c134:	00 00 00 
  800420c137:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c13d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c144:	00 00 00 
  800420c147:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c14e:	00 00 00 
  800420c151:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c158:	00 00 00 
  800420c15b:	89 c2                	mov    %eax,%edx
  800420c15d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c164:	00 00 00 
  800420c167:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c16e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c175:	00 00 00 
  800420c178:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c17f:	08 00 
  800420c181:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c188:	00 00 00 
  800420c18b:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c192:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c195:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c19b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1a2:	00 00 00 
  800420c1a5:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1ac:	83 e2 07             	and    $0x7,%edx
  800420c1af:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1b5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1bc:	00 00 00 
  800420c1bf:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1c6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1c9:	83 ca 0e             	or     $0xe,%edx
  800420c1cc:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1d2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1d9:	00 00 00 
  800420c1dc:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420c1e6:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1ec:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1f3:	00 00 00 
  800420c1f6:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1fd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c200:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c206:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c20d:	00 00 00 
  800420c210:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c217:	83 ca 80             	or     $0xffffff80,%edx
  800420c21a:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c220:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c227:	00 00 00 
  800420c22a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c22e:	89 c2                	mov    %eax,%edx
  800420c230:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c237:	00 00 00 
  800420c23a:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c241:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c248:	00 00 00 
  800420c24b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c24f:	89 c2                	mov    %eax,%edx
  800420c251:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c258:	00 00 00 
  800420c25b:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c261:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c268:	00 00 00 
  800420c26b:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c272:	00 00 00 
  800420c275:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c27c:	00 00 00 
  800420c27f:	89 c2                	mov    %eax,%edx
  800420c281:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c288:	00 00 00 
  800420c28b:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c292:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c299:	00 00 00 
  800420c29c:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2a3:	08 00 
  800420c2a5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2ac:	00 00 00 
  800420c2af:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2b9:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2bf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2c6:	00 00 00 
  800420c2c9:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2d0:	83 e2 07             	and    $0x7,%edx
  800420c2d3:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2d9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2e0:	00 00 00 
  800420c2e3:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c2ed:	83 ca 0e             	or     $0xe,%edx
  800420c2f0:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2f6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2fd:	00 00 00 
  800420c300:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c307:	83 e2 ef             	and    $0xffffffef,%edx
  800420c30a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c310:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c317:	00 00 00 
  800420c31a:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c321:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c324:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c32a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c331:	00 00 00 
  800420c334:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c33b:	83 ca 80             	or     $0xffffff80,%edx
  800420c33e:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c344:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c34b:	00 00 00 
  800420c34e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c352:	89 c2                	mov    %eax,%edx
  800420c354:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c35b:	00 00 00 
  800420c35e:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c365:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c36c:	00 00 00 
  800420c36f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c373:	89 c2                	mov    %eax,%edx
  800420c375:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c37c:	00 00 00 
  800420c37f:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c385:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c38c:	00 00 00 
  800420c38f:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c396:	00 00 00 
  800420c399:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c3a0:	00 00 00 
  800420c3a3:	89 c2                	mov    %eax,%edx
  800420c3a5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3ac:	00 00 00 
  800420c3af:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3b6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3bd:	00 00 00 
  800420c3c0:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3c7:	08 00 
  800420c3c9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3d0:	00 00 00 
  800420c3d3:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3da:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3dd:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3e3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3ea:	00 00 00 
  800420c3ed:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3f4:	83 e2 07             	and    $0x7,%edx
  800420c3f7:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3fd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c404:	00 00 00 
  800420c407:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c40e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c411:	83 ca 0e             	or     $0xe,%edx
  800420c414:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c41a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c421:	00 00 00 
  800420c424:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c42b:	83 e2 ef             	and    $0xffffffef,%edx
  800420c42e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c434:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c43b:	00 00 00 
  800420c43e:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c445:	83 ca 60             	or     $0x60,%edx
  800420c448:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c44e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c455:	00 00 00 
  800420c458:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c45f:	83 ca 80             	or     $0xffffff80,%edx
  800420c462:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c468:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c46f:	00 00 00 
  800420c472:	48 c1 e8 10          	shr    $0x10,%rax
  800420c476:	89 c2                	mov    %eax,%edx
  800420c478:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c47f:	00 00 00 
  800420c482:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c489:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c490:	00 00 00 
  800420c493:	48 c1 e8 20          	shr    $0x20,%rax
  800420c497:	89 c2                	mov    %eax,%edx
  800420c499:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c4a0:	00 00 00 
  800420c4a3:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4a9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c4b0:	00 00 00 
  800420c4b3:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4ba:	00 00 00 
  800420c4bd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c4c4:	00 00 00 
  800420c4c7:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4cc:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  800420c4d3:	00 00 00 
  800420c4d6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c4dd:	00 00 00 
  800420c4e0:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c4e4:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420c4eb:	00 00 00 
  800420c4ee:	ff d0                	callq  *%rax
  800420c4f0:	c9                   	leaveq 
  800420c4f1:	c3                   	retq   

000000800420c4f2 <trap_init_percpu>:
  800420c4f2:	55                   	push   %rbp
  800420c4f3:	48 89 e5             	mov    %rsp,%rbp
  800420c4f6:	53                   	push   %rbx
  800420c4f7:	48 83 ec 18          	sub    $0x18,%rsp
  800420c4fb:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c502:	00 00 00 
  800420c505:	ff d0                	callq  *%rax
  800420c507:	01 c0                	add    %eax,%eax
  800420c509:	83 c0 05             	add    $0x5,%eax
  800420c50c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c50f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c516:	00 00 00 
  800420c519:	ff d0                	callq  *%rax
  800420c51b:	89 c3                	mov    %eax,%ebx
  800420c51d:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c524:	00 00 00 
  800420c527:	ff d0                	callq  *%rax
  800420c529:	89 c2                	mov    %eax,%edx
  800420c52b:	89 d0                	mov    %edx,%eax
  800420c52d:	01 c0                	add    %eax,%eax
  800420c52f:	01 d0                	add    %edx,%eax
  800420c531:	c1 e0 0f             	shl    $0xf,%eax
  800420c534:	48 98                	cltq   
  800420c536:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c53d:	00 00 00 
  800420c540:	48 29 c2             	sub    %rax,%rdx
  800420c543:	48 89 d0             	mov    %rdx,%rax
  800420c546:	48 89 c2             	mov    %rax,%rdx
  800420c549:	48 b9 20 c0 6d 04 80 	movabs $0x80046dc020,%rcx
  800420c550:	00 00 00 
  800420c553:	48 63 c3             	movslq %ebx,%rax
  800420c556:	48 c1 e0 03          	shl    $0x3,%rax
  800420c55a:	48 89 c6             	mov    %rax,%rsi
  800420c55d:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c561:	48 01 f0             	add    %rsi,%rax
  800420c564:	48 01 c8             	add    %rcx,%rax
  800420c567:	48 83 c0 10          	add    $0x10,%rax
  800420c56b:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c56f:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c576:	00 00 00 
  800420c579:	48 8b 00             	mov    (%rax),%rax
  800420c57c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c580:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c584:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c58b:	00 00 00 
  800420c58e:	ff d0                	callq  *%rax
  800420c590:	c1 e0 04             	shl    $0x4,%eax
  800420c593:	48 98                	cltq   
  800420c595:	48 01 d8             	add    %rbx,%rax
  800420c598:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c59d:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c5a4:	00 00 00 
  800420c5a7:	48 8b 00             	mov    (%rax),%rax
  800420c5aa:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ae:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5b2:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c5b9:	00 00 00 
  800420c5bc:	ff d0                	callq  *%rax
  800420c5be:	c1 e0 04             	shl    $0x4,%eax
  800420c5c1:	48 98                	cltq   
  800420c5c3:	48 01 d8             	add    %rbx,%rax
  800420c5c6:	48 89 c3             	mov    %rax,%rbx
  800420c5c9:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c5d0:	00 00 00 
  800420c5d3:	ff d0                	callq  *%rax
  800420c5d5:	48 98                	cltq   
  800420c5d7:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5db:	48 89 c2             	mov    %rax,%rdx
  800420c5de:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5e2:	48 01 d0             	add    %rdx,%rax
  800420c5e5:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5e9:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c5f0:	00 00 00 
  800420c5f3:	48 01 d0             	add    %rdx,%rax
  800420c5f6:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c5fa:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c601:	00 00 00 
  800420c604:	48 8b 00             	mov    (%rax),%rax
  800420c607:	48 c1 f8 10          	sar    $0x10,%rax
  800420c60b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c60f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c616:	00 00 00 
  800420c619:	ff d0                	callq  *%rax
  800420c61b:	c1 e0 04             	shl    $0x4,%eax
  800420c61e:	48 98                	cltq   
  800420c620:	48 01 d8             	add    %rbx,%rax
  800420c623:	48 89 c3             	mov    %rax,%rbx
  800420c626:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c62d:	00 00 00 
  800420c630:	ff d0                	callq  *%rax
  800420c632:	48 98                	cltq   
  800420c634:	48 c1 e0 03          	shl    $0x3,%rax
  800420c638:	48 89 c2             	mov    %rax,%rdx
  800420c63b:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c63f:	48 01 d0             	add    %rdx,%rax
  800420c642:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c646:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c64d:	00 00 00 
  800420c650:	48 01 d0             	add    %rdx,%rax
  800420c653:	48 c1 e8 10          	shr    $0x10,%rax
  800420c657:	88 43 04             	mov    %al,0x4(%rbx)
  800420c65a:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c661:	00 00 00 
  800420c664:	48 8b 00             	mov    (%rax),%rax
  800420c667:	48 c1 f8 10          	sar    $0x10,%rax
  800420c66b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c66f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c676:	00 00 00 
  800420c679:	ff d0                	callq  *%rax
  800420c67b:	c1 e0 04             	shl    $0x4,%eax
  800420c67e:	48 98                	cltq   
  800420c680:	48 01 d8             	add    %rbx,%rax
  800420c683:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c687:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c68a:	83 ca 09             	or     $0x9,%edx
  800420c68d:	88 50 05             	mov    %dl,0x5(%rax)
  800420c690:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c697:	00 00 00 
  800420c69a:	48 8b 00             	mov    (%rax),%rax
  800420c69d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6a1:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6a5:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c6ac:	00 00 00 
  800420c6af:	ff d0                	callq  *%rax
  800420c6b1:	c1 e0 04             	shl    $0x4,%eax
  800420c6b4:	48 98                	cltq   
  800420c6b6:	48 01 d8             	add    %rbx,%rax
  800420c6b9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6bd:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6c0:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6c3:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c6ca:	00 00 00 
  800420c6cd:	48 8b 00             	mov    (%rax),%rax
  800420c6d0:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6d4:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6d8:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c6df:	00 00 00 
  800420c6e2:	ff d0                	callq  *%rax
  800420c6e4:	c1 e0 04             	shl    $0x4,%eax
  800420c6e7:	48 98                	cltq   
  800420c6e9:	48 01 d8             	add    %rbx,%rax
  800420c6ec:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6f0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c6f3:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6f6:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c6fd:	00 00 00 
  800420c700:	48 8b 00             	mov    (%rax),%rax
  800420c703:	48 c1 f8 10          	sar    $0x10,%rax
  800420c707:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c70b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c712:	00 00 00 
  800420c715:	ff d0                	callq  *%rax
  800420c717:	c1 e0 04             	shl    $0x4,%eax
  800420c71a:	48 98                	cltq   
  800420c71c:	48 01 d8             	add    %rbx,%rax
  800420c71f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c723:	83 ca 80             	or     $0xffffff80,%edx
  800420c726:	88 50 05             	mov    %dl,0x5(%rax)
  800420c729:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c730:	00 00 00 
  800420c733:	48 8b 00             	mov    (%rax),%rax
  800420c736:	48 c1 f8 10          	sar    $0x10,%rax
  800420c73a:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c73e:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c745:	00 00 00 
  800420c748:	ff d0                	callq  *%rax
  800420c74a:	c1 e0 04             	shl    $0x4,%eax
  800420c74d:	48 98                	cltq   
  800420c74f:	48 01 d8             	add    %rbx,%rax
  800420c752:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c756:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c759:	88 50 06             	mov    %dl,0x6(%rax)
  800420c75c:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c763:	00 00 00 
  800420c766:	48 8b 00             	mov    (%rax),%rax
  800420c769:	48 c1 f8 10          	sar    $0x10,%rax
  800420c76d:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c771:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c778:	00 00 00 
  800420c77b:	ff d0                	callq  *%rax
  800420c77d:	c1 e0 04             	shl    $0x4,%eax
  800420c780:	48 98                	cltq   
  800420c782:	48 01 d8             	add    %rbx,%rax
  800420c785:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c789:	83 e2 ef             	and    $0xffffffef,%edx
  800420c78c:	88 50 06             	mov    %dl,0x6(%rax)
  800420c78f:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c796:	00 00 00 
  800420c799:	48 8b 00             	mov    (%rax),%rax
  800420c79c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7a0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7a4:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c7ab:	00 00 00 
  800420c7ae:	ff d0                	callq  *%rax
  800420c7b0:	c1 e0 04             	shl    $0x4,%eax
  800420c7b3:	48 98                	cltq   
  800420c7b5:	48 01 d8             	add    %rbx,%rax
  800420c7b8:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7bc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7bf:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7c2:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c7c9:	00 00 00 
  800420c7cc:	48 8b 00             	mov    (%rax),%rax
  800420c7cf:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7d3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7d7:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c7de:	00 00 00 
  800420c7e1:	ff d0                	callq  *%rax
  800420c7e3:	c1 e0 04             	shl    $0x4,%eax
  800420c7e6:	48 98                	cltq   
  800420c7e8:	48 01 d8             	add    %rbx,%rax
  800420c7eb:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7ef:	83 e2 7f             	and    $0x7f,%edx
  800420c7f2:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7f5:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c7fc:	00 00 00 
  800420c7ff:	48 8b 00             	mov    (%rax),%rax
  800420c802:	48 c1 f8 10          	sar    $0x10,%rax
  800420c806:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c80a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c811:	00 00 00 
  800420c814:	ff d0                	callq  *%rax
  800420c816:	c1 e0 04             	shl    $0x4,%eax
  800420c819:	48 98                	cltq   
  800420c81b:	48 01 d8             	add    %rbx,%rax
  800420c81e:	48 89 c3             	mov    %rax,%rbx
  800420c821:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c828:	00 00 00 
  800420c82b:	ff d0                	callq  *%rax
  800420c82d:	48 98                	cltq   
  800420c82f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c833:	48 89 c2             	mov    %rax,%rdx
  800420c836:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c83a:	48 01 d0             	add    %rdx,%rax
  800420c83d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c841:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c848:	00 00 00 
  800420c84b:	48 01 d0             	add    %rdx,%rax
  800420c84e:	48 c1 e8 18          	shr    $0x18,%rax
  800420c852:	88 43 07             	mov    %al,0x7(%rbx)
  800420c855:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c85c:	00 00 00 
  800420c85f:	48 8b 00             	mov    (%rax),%rax
  800420c862:	48 c1 f8 10          	sar    $0x10,%rax
  800420c866:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c86a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c871:	00 00 00 
  800420c874:	ff d0                	callq  *%rax
  800420c876:	c1 e0 04             	shl    $0x4,%eax
  800420c879:	48 98                	cltq   
  800420c87b:	48 01 d8             	add    %rbx,%rax
  800420c87e:	48 89 c3             	mov    %rax,%rbx
  800420c881:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c888:	00 00 00 
  800420c88b:	ff d0                	callq  *%rax
  800420c88d:	48 98                	cltq   
  800420c88f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c893:	48 89 c2             	mov    %rax,%rdx
  800420c896:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c89a:	48 01 d0             	add    %rdx,%rax
  800420c89d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8a1:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c8a8:	00 00 00 
  800420c8ab:	48 01 d0             	add    %rdx,%rax
  800420c8ae:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8b2:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8b5:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c8bc:	00 00 00 
  800420c8bf:	48 8b 00             	mov    (%rax),%rax
  800420c8c2:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8c6:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8ca:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c8d1:	00 00 00 
  800420c8d4:	ff d0                	callq  *%rax
  800420c8d6:	c1 e0 04             	shl    $0x4,%eax
  800420c8d9:	48 98                	cltq   
  800420c8db:	48 01 d8             	add    %rbx,%rax
  800420c8de:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8e2:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c8e9:	00 00 00 
  800420c8ec:	48 8b 00             	mov    (%rax),%rax
  800420c8ef:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8f3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8f7:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c8fe:	00 00 00 
  800420c901:	ff d0                	callq  *%rax
  800420c903:	c1 e0 04             	shl    $0x4,%eax
  800420c906:	48 98                	cltq   
  800420c908:	48 01 d8             	add    %rbx,%rax
  800420c90b:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c90f:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c916:	00 00 00 
  800420c919:	48 8b 00             	mov    (%rax),%rax
  800420c91c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c920:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c924:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c92b:	00 00 00 
  800420c92e:	ff d0                	callq  *%rax
  800420c930:	c1 e0 04             	shl    $0x4,%eax
  800420c933:	48 98                	cltq   
  800420c935:	48 01 d8             	add    %rbx,%rax
  800420c938:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c93e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c941:	c1 e0 03             	shl    $0x3,%eax
  800420c944:	0f b7 c0             	movzwl %ax,%eax
  800420c947:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c94b:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c94f:	0f 00 d8             	ltr    %ax
  800420c952:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c959:	00 00 00 
  800420c95c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c964:	0f 01 18             	lidt   (%rax)
  800420c967:	48 83 c4 18          	add    $0x18,%rsp
  800420c96b:	5b                   	pop    %rbx
  800420c96c:	5d                   	pop    %rbp
  800420c96d:	c3                   	retq   

000000800420c96e <print_trapframe>:
  800420c96e:	55                   	push   %rbp
  800420c96f:	48 89 e5             	mov    %rsp,%rbp
  800420c972:	48 83 ec 20          	sub    $0x20,%rsp
  800420c976:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c97a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420c981:	00 00 00 
  800420c984:	ff d0                	callq  *%rax
  800420c986:	89 c2                	mov    %eax,%edx
  800420c988:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c98c:	48 89 c6             	mov    %rax,%rsi
  800420c98f:	48 bf ee e3 21 04 80 	movabs $0x800421e3ee,%rdi
  800420c996:	00 00 00 
  800420c999:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c99e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420c9a5:	00 00 00 
  800420c9a8:	ff d1                	callq  *%rcx
  800420c9aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ae:	48 89 c7             	mov    %rax,%rdi
  800420c9b1:	48 b8 7f cc 20 04 80 	movabs $0x800420cc7f,%rax
  800420c9b8:	00 00 00 
  800420c9bb:	ff d0                	callq  *%rax
  800420c9bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9c1:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9c5:	0f b7 c0             	movzwl %ax,%eax
  800420c9c8:	89 c6                	mov    %eax,%esi
  800420c9ca:	48 bf 0c e4 21 04 80 	movabs $0x800421e40c,%rdi
  800420c9d1:	00 00 00 
  800420c9d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9d9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420c9e0:	00 00 00 
  800420c9e3:	ff d2                	callq  *%rdx
  800420c9e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9e9:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c9f0:	0f b7 c0             	movzwl %ax,%eax
  800420c9f3:	89 c6                	mov    %eax,%esi
  800420c9f5:	48 bf 1f e4 21 04 80 	movabs $0x800421e41f,%rdi
  800420c9fc:	00 00 00 
  800420c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca04:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca0b:	00 00 00 
  800420ca0e:	ff d2                	callq  *%rdx
  800420ca10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca14:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca1b:	89 c7                	mov    %eax,%edi
  800420ca1d:	48 b8 90 9d 20 04 80 	movabs $0x8004209d90,%rax
  800420ca24:	00 00 00 
  800420ca27:	ff d0                	callq  *%rax
  800420ca29:	48 89 c2             	mov    %rax,%rdx
  800420ca2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca30:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca37:	48 89 c6             	mov    %rax,%rsi
  800420ca3a:	48 bf 32 e4 21 04 80 	movabs $0x800421e432,%rdi
  800420ca41:	00 00 00 
  800420ca44:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca49:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420ca50:	00 00 00 
  800420ca53:	ff d1                	callq  *%rcx
  800420ca55:	48 b8 90 c2 4d 04 80 	movabs $0x80044dc290,%rax
  800420ca5c:	00 00 00 
  800420ca5f:	48 8b 00             	mov    (%rax),%rax
  800420ca62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca66:	75 3a                	jne    800420caa2 <print_trapframe+0x134>
  800420ca68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca6c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca73:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca77:	75 29                	jne    800420caa2 <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca79:	0f 20 d0             	mov    %cr2,%rax
  800420ca7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca84:	48 89 c6             	mov    %rax,%rsi
  800420ca87:	48 bf 44 e4 21 04 80 	movabs $0x800421e444,%rdi
  800420ca8e:	00 00 00 
  800420ca91:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca96:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca9d:	00 00 00 
  800420caa0:	ff d2                	callq  *%rdx
  800420caa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caa6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caad:	48 89 c6             	mov    %rax,%rsi
  800420cab0:	48 bf 53 e4 21 04 80 	movabs $0x800421e453,%rdi
  800420cab7:	00 00 00 
  800420caba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cabf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cac6:	00 00 00 
  800420cac9:	ff d2                	callq  *%rdx
  800420cacb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cacf:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cad6:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cada:	0f 85 9c 00 00 00    	jne    800420cb7c <print_trapframe+0x20e>
  800420cae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cae4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caeb:	83 e0 01             	and    $0x1,%eax
  800420caee:	48 85 c0             	test   %rax,%rax
  800420caf1:	74 0c                	je     800420caff <print_trapframe+0x191>
  800420caf3:	48 b9 61 e4 21 04 80 	movabs $0x800421e461,%rcx
  800420cafa:	00 00 00 
  800420cafd:	eb 0a                	jmp    800420cb09 <print_trapframe+0x19b>
  800420caff:	48 b9 6c e4 21 04 80 	movabs $0x800421e46c,%rcx
  800420cb06:	00 00 00 
  800420cb09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb0d:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb14:	83 e0 02             	and    $0x2,%eax
  800420cb17:	48 85 c0             	test   %rax,%rax
  800420cb1a:	74 0c                	je     800420cb28 <print_trapframe+0x1ba>
  800420cb1c:	48 ba 78 e4 21 04 80 	movabs $0x800421e478,%rdx
  800420cb23:	00 00 00 
  800420cb26:	eb 0a                	jmp    800420cb32 <print_trapframe+0x1c4>
  800420cb28:	48 ba 7e e4 21 04 80 	movabs $0x800421e47e,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb36:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb3d:	83 e0 04             	and    $0x4,%eax
  800420cb40:	48 85 c0             	test   %rax,%rax
  800420cb43:	74 0c                	je     800420cb51 <print_trapframe+0x1e3>
  800420cb45:	48 b8 83 e4 21 04 80 	movabs $0x800421e483,%rax
  800420cb4c:	00 00 00 
  800420cb4f:	eb 0a                	jmp    800420cb5b <print_trapframe+0x1ed>
  800420cb51:	48 b8 88 e4 21 04 80 	movabs $0x800421e488,%rax
  800420cb58:	00 00 00 
  800420cb5b:	48 89 c6             	mov    %rax,%rsi
  800420cb5e:	48 bf 8f e4 21 04 80 	movabs $0x800421e48f,%rdi
  800420cb65:	00 00 00 
  800420cb68:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb6d:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420cb74:	00 00 00 
  800420cb77:	41 ff d0             	callq  *%r8
  800420cb7a:	eb 1b                	jmp    800420cb97 <print_trapframe+0x229>
  800420cb7c:	48 bf 9e e4 21 04 80 	movabs $0x800421e49e,%rdi
  800420cb83:	00 00 00 
  800420cb86:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb8b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cb92:	00 00 00 
  800420cb95:	ff d2                	callq  *%rdx
  800420cb97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb9b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cba2:	48 89 c6             	mov    %rax,%rsi
  800420cba5:	48 bf a0 e4 21 04 80 	movabs $0x800421e4a0,%rdi
  800420cbac:	00 00 00 
  800420cbaf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbb4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbbb:	00 00 00 
  800420cbbe:	ff d2                	callq  *%rdx
  800420cbc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbc4:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbcb:	0f b7 c0             	movzwl %ax,%eax
  800420cbce:	89 c6                	mov    %eax,%esi
  800420cbd0:	48 bf af e4 21 04 80 	movabs $0x800421e4af,%rdi
  800420cbd7:	00 00 00 
  800420cbda:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbdf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbe6:	00 00 00 
  800420cbe9:	ff d2                	callq  *%rdx
  800420cbeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbef:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cbf6:	48 89 c6             	mov    %rax,%rsi
  800420cbf9:	48 bf c2 e4 21 04 80 	movabs $0x800421e4c2,%rdi
  800420cc00:	00 00 00 
  800420cc03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc08:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc0f:	00 00 00 
  800420cc12:	ff d2                	callq  *%rdx
  800420cc14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc18:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc1f:	0f b7 c0             	movzwl %ax,%eax
  800420cc22:	83 e0 03             	and    $0x3,%eax
  800420cc25:	85 c0                	test   %eax,%eax
  800420cc27:	74 54                	je     800420cc7d <print_trapframe+0x30f>
  800420cc29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc2d:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc34:	48 89 c6             	mov    %rax,%rsi
  800420cc37:	48 bf d1 e4 21 04 80 	movabs $0x800421e4d1,%rdi
  800420cc3e:	00 00 00 
  800420cc41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc4d:	00 00 00 
  800420cc50:	ff d2                	callq  *%rdx
  800420cc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc56:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc5d:	0f b7 c0             	movzwl %ax,%eax
  800420cc60:	89 c6                	mov    %eax,%esi
  800420cc62:	48 bf e0 e4 21 04 80 	movabs $0x800421e4e0,%rdi
  800420cc69:	00 00 00 
  800420cc6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc71:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc78:	00 00 00 
  800420cc7b:	ff d2                	callq  *%rdx
  800420cc7d:	c9                   	leaveq 
  800420cc7e:	c3                   	retq   

000000800420cc7f <print_regs>:
  800420cc7f:	55                   	push   %rbp
  800420cc80:	48 89 e5             	mov    %rsp,%rbp
  800420cc83:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc8f:	48 8b 00             	mov    (%rax),%rax
  800420cc92:	48 89 c6             	mov    %rax,%rsi
  800420cc95:	48 bf f3 e4 21 04 80 	movabs $0x800421e4f3,%rdi
  800420cc9c:	00 00 00 
  800420cc9f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cca4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccab:	00 00 00 
  800420ccae:	ff d2                	callq  *%rdx
  800420ccb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccb4:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccb8:	48 89 c6             	mov    %rax,%rsi
  800420ccbb:	48 bf 02 e5 21 04 80 	movabs $0x800421e502,%rdi
  800420ccc2:	00 00 00 
  800420ccc5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccca:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccd1:	00 00 00 
  800420ccd4:	ff d2                	callq  *%rdx
  800420ccd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccda:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccde:	48 89 c6             	mov    %rax,%rsi
  800420cce1:	48 bf 11 e5 21 04 80 	movabs $0x800421e511,%rdi
  800420cce8:	00 00 00 
  800420cceb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccf0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccf7:	00 00 00 
  800420ccfa:	ff d2                	callq  *%rdx
  800420ccfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd00:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd04:	48 89 c6             	mov    %rax,%rsi
  800420cd07:	48 bf 20 e5 21 04 80 	movabs $0x800421e520,%rdi
  800420cd0e:	00 00 00 
  800420cd11:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd16:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd1d:	00 00 00 
  800420cd20:	ff d2                	callq  *%rdx
  800420cd22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd26:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd2a:	48 89 c6             	mov    %rax,%rsi
  800420cd2d:	48 bf 2f e5 21 04 80 	movabs $0x800421e52f,%rdi
  800420cd34:	00 00 00 
  800420cd37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd3c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd43:	00 00 00 
  800420cd46:	ff d2                	callq  *%rdx
  800420cd48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd4c:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd50:	48 89 c6             	mov    %rax,%rsi
  800420cd53:	48 bf 3e e5 21 04 80 	movabs $0x800421e53e,%rdi
  800420cd5a:	00 00 00 
  800420cd5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd62:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd69:	00 00 00 
  800420cd6c:	ff d2                	callq  *%rdx
  800420cd6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd72:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd76:	48 89 c6             	mov    %rax,%rsi
  800420cd79:	48 bf 4d e5 21 04 80 	movabs $0x800421e54d,%rdi
  800420cd80:	00 00 00 
  800420cd83:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd88:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd8f:	00 00 00 
  800420cd92:	ff d2                	callq  *%rdx
  800420cd94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd98:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cd9c:	48 89 c6             	mov    %rax,%rsi
  800420cd9f:	48 bf 5b e5 21 04 80 	movabs $0x800421e55b,%rdi
  800420cda6:	00 00 00 
  800420cda9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdae:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cdb5:	00 00 00 
  800420cdb8:	ff d2                	callq  *%rdx
  800420cdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdbe:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdc2:	48 89 c6             	mov    %rax,%rsi
  800420cdc5:	48 bf 69 e5 21 04 80 	movabs $0x800421e569,%rdi
  800420cdcc:	00 00 00 
  800420cdcf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdd4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cddb:	00 00 00 
  800420cdde:	ff d2                	callq  *%rdx
  800420cde0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cde4:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cde8:	48 89 c6             	mov    %rax,%rsi
  800420cdeb:	48 bf 78 e5 21 04 80 	movabs $0x800421e578,%rdi
  800420cdf2:	00 00 00 
  800420cdf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdfa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce01:	00 00 00 
  800420ce04:	ff d2                	callq  *%rdx
  800420ce06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce0a:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce0e:	48 89 c6             	mov    %rax,%rsi
  800420ce11:	48 bf 87 e5 21 04 80 	movabs $0x800421e587,%rdi
  800420ce18:	00 00 00 
  800420ce1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce20:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce27:	00 00 00 
  800420ce2a:	ff d2                	callq  *%rdx
  800420ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce30:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce34:	48 89 c6             	mov    %rax,%rsi
  800420ce37:	48 bf 96 e5 21 04 80 	movabs $0x800421e596,%rdi
  800420ce3e:	00 00 00 
  800420ce41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce4d:	00 00 00 
  800420ce50:	ff d2                	callq  *%rdx
  800420ce52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce56:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce5a:	48 89 c6             	mov    %rax,%rsi
  800420ce5d:	48 bf a5 e5 21 04 80 	movabs $0x800421e5a5,%rdi
  800420ce64:	00 00 00 
  800420ce67:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce73:	00 00 00 
  800420ce76:	ff d2                	callq  *%rdx
  800420ce78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce7c:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce80:	48 89 c6             	mov    %rax,%rsi
  800420ce83:	48 bf b4 e5 21 04 80 	movabs $0x800421e5b4,%rdi
  800420ce8a:	00 00 00 
  800420ce8d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce92:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce99:	00 00 00 
  800420ce9c:	ff d2                	callq  *%rdx
  800420ce9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cea2:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cea6:	48 89 c6             	mov    %rax,%rsi
  800420cea9:	48 bf c3 e5 21 04 80 	movabs $0x800421e5c3,%rdi
  800420ceb0:	00 00 00 
  800420ceb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ceb8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cebf:	00 00 00 
  800420cec2:	ff d2                	callq  *%rdx
  800420cec4:	c9                   	leaveq 
  800420cec5:	c3                   	retq   

000000800420cec6 <trap_dispatch>:
  800420cec6:	55                   	push   %rbp
  800420cec7:	48 89 e5             	mov    %rsp,%rbp
  800420ceca:	48 83 ec 10          	sub    $0x10,%rsp
  800420cece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ced2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ced6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cedd:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cee1:	75 18                	jne    800420cefb <trap_dispatch+0x35>
  800420cee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cee7:	48 89 c7             	mov    %rax,%rdi
  800420ceea:	48 b8 44 d4 20 04 80 	movabs $0x800420d444,%rax
  800420cef1:	00 00 00 
  800420cef4:	ff d0                	callq  *%rax
  800420cef6:	e9 ea 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cefb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceff:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf06:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf0a:	75 55                	jne    800420cf61 <trap_dispatch+0x9b>
  800420cf0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf10:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf18:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf20:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf28:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf30:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf38:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf3c:	4d 89 c1             	mov    %r8,%r9
  800420cf3f:	49 89 f8             	mov    %rdi,%r8
  800420cf42:	48 89 c7             	mov    %rax,%rdi
  800420cf45:	48 b8 9f eb 20 04 80 	movabs $0x800420eb9f,%rax
  800420cf4c:	00 00 00 
  800420cf4f:	ff d0                	callq  *%rax
  800420cf51:	48 89 c2             	mov    %rax,%rdx
  800420cf54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf58:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf5c:	e9 84 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf65:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf6c:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf70:	75 18                	jne    800420cf8a <trap_dispatch+0xc4>
  800420cf72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf76:	48 89 c7             	mov    %rax,%rdi
  800420cf79:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420cf80:	00 00 00 
  800420cf83:	ff d0                	callq  *%rax
  800420cf85:	e9 5b 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf8e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf95:	48 83 f8 27          	cmp    $0x27,%rax
  800420cf99:	75 33                	jne    800420cfce <trap_dispatch+0x108>
  800420cf9b:	48 bf d2 e5 21 04 80 	movabs $0x800421e5d2,%rdi
  800420cfa2:	00 00 00 
  800420cfa5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfaa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cfb1:	00 00 00 
  800420cfb4:	ff d2                	callq  *%rdx
  800420cfb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfba:	48 89 c7             	mov    %rax,%rdi
  800420cfbd:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420cfc4:	00 00 00 
  800420cfc7:	ff d0                	callq  *%rax
  800420cfc9:	e9 17 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cfce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfd2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfd9:	48 83 f8 20          	cmp    $0x20,%rax
  800420cfdd:	75 34                	jne    800420d013 <trap_dispatch+0x14d>
  800420cfdf:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420cfe6:	00 00 00 
  800420cfe9:	ff d0                	callq  *%rax
  800420cfeb:	85 c0                	test   %eax,%eax
  800420cfed:	75 0c                	jne    800420cffb <trap_dispatch+0x135>
  800420cfef:	48 b8 ce 91 21 04 80 	movabs $0x80042191ce,%rax
  800420cff6:	00 00 00 
  800420cff9:	ff d0                	callq  *%rax
  800420cffb:	48 b8 c7 79 21 04 80 	movabs $0x80042179c7,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d00e:	00 00 00 
  800420d011:	ff d0                	callq  *%rax
  800420d013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d017:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d01e:	48 83 f8 21          	cmp    $0x21,%rax
  800420d022:	75 11                	jne    800420d035 <trap_dispatch+0x16f>
  800420d024:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  800420d02b:	00 00 00 
  800420d02e:	ff d0                	callq  *%rax
  800420d030:	e9 b0 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d039:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d040:	48 83 f8 24          	cmp    $0x24,%rax
  800420d044:	75 11                	jne    800420d057 <trap_dispatch+0x191>
  800420d046:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  800420d04d:	00 00 00 
  800420d050:	ff d0                	callq  *%rax
  800420d052:	e9 8e 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d057:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d05b:	48 89 c7             	mov    %rax,%rdi
  800420d05e:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d065:	00 00 00 
  800420d068:	ff d0                	callq  *%rax
  800420d06a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d06e:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d075:	66 83 f8 08          	cmp    $0x8,%ax
  800420d079:	75 2a                	jne    800420d0a5 <trap_dispatch+0x1df>
  800420d07b:	48 ba ef e5 21 04 80 	movabs $0x800421e5ef,%rdx
  800420d082:	00 00 00 
  800420d085:	be 77 01 00 00       	mov    $0x177,%esi
  800420d08a:	48 bf 08 e6 21 04 80 	movabs $0x800421e608,%rdi
  800420d091:	00 00 00 
  800420d094:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d099:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d0a0:	00 00 00 
  800420d0a3:	ff d1                	callq  *%rcx
  800420d0a5:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d0ac:	00 00 00 
  800420d0af:	ff d0                	callq  *%rax
  800420d0b1:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d0b8:	00 00 00 
  800420d0bb:	48 98                	cltq   
  800420d0bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0c1:	48 89 c1             	mov    %rax,%rcx
  800420d0c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0c8:	48 01 c8             	add    %rcx,%rax
  800420d0cb:	48 01 d0             	add    %rdx,%rax
  800420d0ce:	48 83 c0 08          	add    $0x8,%rax
  800420d0d2:	48 8b 00             	mov    (%rax),%rax
  800420d0d5:	48 89 c7             	mov    %rax,%rdi
  800420d0d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d0df:	00 00 00 
  800420d0e2:	ff d0                	callq  *%rax
  800420d0e4:	90                   	nop
  800420d0e5:	c9                   	leaveq 
  800420d0e6:	c3                   	retq   

000000800420d0e7 <trap>:
  800420d0e7:	55                   	push   %rbp
  800420d0e8:	48 89 e5             	mov    %rsp,%rbp
  800420d0eb:	48 83 ec 20          	sub    $0x20,%rsp
  800420d0ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d0f3:	fc                   	cld    
  800420d0f4:	48 b8 d8 a5 6d 04 80 	movabs $0x80046da5d8,%rax
  800420d0fb:	00 00 00 
  800420d0fe:	48 8b 00             	mov    (%rax),%rax
  800420d101:	48 85 c0             	test   %rax,%rax
  800420d104:	74 01                	je     800420d107 <trap+0x20>
  800420d106:	f4                   	hlt    
  800420d107:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d10e:	00 00 00 
  800420d111:	ff d0                	callq  *%rax
  800420d113:	48 98                	cltq   
  800420d115:	48 c1 e0 03          	shl    $0x3,%rax
  800420d119:	48 89 c2             	mov    %rax,%rdx
  800420d11c:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d120:	48 01 d0             	add    %rdx,%rax
  800420d123:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d12a:	00 00 00 
  800420d12d:	48 01 d0             	add    %rdx,%rax
  800420d130:	48 83 c0 04          	add    $0x4,%rax
  800420d134:	be 01 00 00 00       	mov    $0x1,%esi
  800420d139:	48 89 c7             	mov    %rax,%rdi
  800420d13c:	48 b8 4f 9d 20 04 80 	movabs $0x8004209d4f,%rax
  800420d143:	00 00 00 
  800420d146:	ff d0                	callq  *%rax
  800420d148:	83 f8 02             	cmp    $0x2,%eax
  800420d14b:	75 0c                	jne    800420d159 <trap+0x72>
  800420d14d:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d154:	00 00 00 
  800420d157:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d159:	9c                   	pushfq 
  800420d15a:	58                   	pop    %rax
  800420d15b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d15f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d163:	25 00 02 00 00       	and    $0x200,%eax
  800420d168:	48 85 c0             	test   %rax,%rax
  800420d16b:	74 35                	je     800420d1a2 <trap+0xbb>
  800420d16d:	48 b9 17 e6 21 04 80 	movabs $0x800421e617,%rcx
  800420d174:	00 00 00 
  800420d177:	48 ba 30 e6 21 04 80 	movabs $0x800421e630,%rdx
  800420d17e:	00 00 00 
  800420d181:	be 94 01 00 00       	mov    $0x194,%esi
  800420d186:	48 bf 08 e6 21 04 80 	movabs $0x800421e608,%rdi
  800420d18d:	00 00 00 
  800420d190:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d195:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d19c:	00 00 00 
  800420d19f:	41 ff d0             	callq  *%r8
  800420d1a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1a6:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1ad:	0f b7 c0             	movzwl %ax,%eax
  800420d1b0:	83 e0 03             	and    $0x3,%eax
  800420d1b3:	83 f8 03             	cmp    $0x3,%eax
  800420d1b6:	0f 85 a9 01 00 00    	jne    800420d365 <trap+0x27e>
  800420d1bc:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d1c3:	00 00 00 
  800420d1c6:	ff d0                	callq  *%rax
  800420d1c8:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d1cf:	00 00 00 
  800420d1d2:	ff d0                	callq  *%rax
  800420d1d4:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d1db:	00 00 00 
  800420d1de:	48 98                	cltq   
  800420d1e0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1e4:	48 89 c1             	mov    %rax,%rcx
  800420d1e7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1eb:	48 01 c8             	add    %rcx,%rax
  800420d1ee:	48 01 d0             	add    %rdx,%rax
  800420d1f1:	48 83 c0 08          	add    $0x8,%rax
  800420d1f5:	48 8b 00             	mov    (%rax),%rax
  800420d1f8:	48 85 c0             	test   %rax,%rax
  800420d1fb:	75 35                	jne    800420d232 <trap+0x14b>
  800420d1fd:	48 b9 45 e6 21 04 80 	movabs $0x800421e645,%rcx
  800420d204:	00 00 00 
  800420d207:	48 ba 30 e6 21 04 80 	movabs $0x800421e630,%rdx
  800420d20e:	00 00 00 
  800420d211:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d216:	48 bf 08 e6 21 04 80 	movabs $0x800421e608,%rdi
  800420d21d:	00 00 00 
  800420d220:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d225:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d22c:	00 00 00 
  800420d22f:	41 ff d0             	callq  *%r8
  800420d232:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d239:	00 00 00 
  800420d23c:	ff d0                	callq  *%rax
  800420d23e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d245:	00 00 00 
  800420d248:	48 98                	cltq   
  800420d24a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d24e:	48 89 c1             	mov    %rax,%rcx
  800420d251:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d255:	48 01 c8             	add    %rcx,%rax
  800420d258:	48 01 d0             	add    %rdx,%rax
  800420d25b:	48 83 c0 08          	add    $0x8,%rax
  800420d25f:	48 8b 00             	mov    (%rax),%rax
  800420d262:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d268:	83 f8 01             	cmp    $0x1,%eax
  800420d26b:	75 7f                	jne    800420d2ec <trap+0x205>
  800420d26d:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d274:	00 00 00 
  800420d277:	ff d0                	callq  *%rax
  800420d279:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d280:	00 00 00 
  800420d283:	48 98                	cltq   
  800420d285:	48 c1 e0 03          	shl    $0x3,%rax
  800420d289:	48 89 c1             	mov    %rax,%rcx
  800420d28c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d290:	48 01 c8             	add    %rcx,%rax
  800420d293:	48 01 d0             	add    %rdx,%rax
  800420d296:	48 83 c0 08          	add    $0x8,%rax
  800420d29a:	48 8b 00             	mov    (%rax),%rax
  800420d29d:	48 89 c7             	mov    %rax,%rdi
  800420d2a0:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  800420d2a7:	00 00 00 
  800420d2aa:	ff d0                	callq  *%rax
  800420d2ac:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d2b3:	00 00 00 
  800420d2b6:	ff d0                	callq  *%rax
  800420d2b8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d2bf:	00 00 00 
  800420d2c2:	48 98                	cltq   
  800420d2c4:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2c8:	48 89 c1             	mov    %rax,%rcx
  800420d2cb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2cf:	48 01 c8             	add    %rcx,%rax
  800420d2d2:	48 01 d0             	add    %rdx,%rax
  800420d2d5:	48 83 c0 08          	add    $0x8,%rax
  800420d2d9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2e0:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d2e7:	00 00 00 
  800420d2ea:	ff d0                	callq  *%rax
  800420d2ec:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d2f3:	00 00 00 
  800420d2f6:	ff d0                	callq  *%rax
  800420d2f8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d2ff:	00 00 00 
  800420d302:	48 98                	cltq   
  800420d304:	48 c1 e0 03          	shl    $0x3,%rax
  800420d308:	48 89 c1             	mov    %rax,%rcx
  800420d30b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d30f:	48 01 c8             	add    %rcx,%rax
  800420d312:	48 01 d0             	add    %rdx,%rax
  800420d315:	48 83 c0 08          	add    $0x8,%rax
  800420d319:	48 8b 10             	mov    (%rax),%rdx
  800420d31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d320:	48 89 c6             	mov    %rax,%rsi
  800420d323:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d328:	48 89 d7             	mov    %rdx,%rdi
  800420d32b:	48 89 c1             	mov    %rax,%rcx
  800420d32e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d331:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d338:	00 00 00 
  800420d33b:	ff d0                	callq  *%rax
  800420d33d:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d344:	00 00 00 
  800420d347:	48 98                	cltq   
  800420d349:	48 c1 e0 03          	shl    $0x3,%rax
  800420d34d:	48 89 c1             	mov    %rax,%rcx
  800420d350:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d354:	48 01 c8             	add    %rcx,%rax
  800420d357:	48 01 d0             	add    %rdx,%rax
  800420d35a:	48 83 c0 08          	add    $0x8,%rax
  800420d35e:	48 8b 00             	mov    (%rax),%rax
  800420d361:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d365:	48 b8 90 c2 4d 04 80 	movabs $0x80044dc290,%rax
  800420d36c:	00 00 00 
  800420d36f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d373:	48 89 10             	mov    %rdx,(%rax)
  800420d376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d37a:	48 89 c7             	mov    %rax,%rdi
  800420d37d:	48 b8 c6 ce 20 04 80 	movabs $0x800420cec6,%rax
  800420d384:	00 00 00 
  800420d387:	ff d0                	callq  *%rax
  800420d389:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d390:	00 00 00 
  800420d393:	ff d0                	callq  *%rax
  800420d395:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d39c:	00 00 00 
  800420d39f:	48 98                	cltq   
  800420d3a1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3a5:	48 89 c1             	mov    %rax,%rcx
  800420d3a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3ac:	48 01 c8             	add    %rcx,%rax
  800420d3af:	48 01 d0             	add    %rdx,%rax
  800420d3b2:	48 83 c0 08          	add    $0x8,%rax
  800420d3b6:	48 8b 00             	mov    (%rax),%rax
  800420d3b9:	48 85 c0             	test   %rax,%rax
  800420d3bc:	74 7a                	je     800420d438 <trap+0x351>
  800420d3be:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d3c5:	00 00 00 
  800420d3c8:	ff d0                	callq  *%rax
  800420d3ca:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d3d1:	00 00 00 
  800420d3d4:	48 98                	cltq   
  800420d3d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3da:	48 89 c1             	mov    %rax,%rcx
  800420d3dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3e1:	48 01 c8             	add    %rcx,%rax
  800420d3e4:	48 01 d0             	add    %rdx,%rax
  800420d3e7:	48 83 c0 08          	add    $0x8,%rax
  800420d3eb:	48 8b 00             	mov    (%rax),%rax
  800420d3ee:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3f4:	83 f8 03             	cmp    $0x3,%eax
  800420d3f7:	75 3f                	jne    800420d438 <trap+0x351>
  800420d3f9:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d400:	00 00 00 
  800420d403:	ff d0                	callq  *%rax
  800420d405:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d40c:	00 00 00 
  800420d40f:	48 98                	cltq   
  800420d411:	48 c1 e0 03          	shl    $0x3,%rax
  800420d415:	48 89 c1             	mov    %rax,%rcx
  800420d418:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d41c:	48 01 c8             	add    %rcx,%rax
  800420d41f:	48 01 d0             	add    %rdx,%rax
  800420d422:	48 83 c0 08          	add    $0x8,%rax
  800420d426:	48 8b 00             	mov    (%rax),%rax
  800420d429:	48 89 c7             	mov    %rax,%rdi
  800420d42c:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d433:	00 00 00 
  800420d436:	ff d0                	callq  *%rax
  800420d438:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d43f:	00 00 00 
  800420d442:	ff d0                	callq  *%rax

000000800420d444 <page_fault_handler>:
  800420d444:	55                   	push   %rbp
  800420d445:	48 89 e5             	mov    %rsp,%rbp
  800420d448:	53                   	push   %rbx
  800420d449:	48 83 ec 38          	sub    $0x38,%rsp
  800420d44d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d451:	0f 20 d0             	mov    %cr2,%rax
  800420d454:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d458:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d45c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d460:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d464:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d46b:	0f b7 c0             	movzwl %ax,%eax
  800420d46e:	83 e0 03             	and    $0x3,%eax
  800420d471:	85 c0                	test   %eax,%eax
  800420d473:	75 3d                	jne    800420d4b2 <page_fault_handler+0x6e>
  800420d475:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d479:	48 89 c7             	mov    %rax,%rdi
  800420d47c:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d483:	00 00 00 
  800420d486:	ff d0                	callq  *%rax
  800420d488:	48 ba 4c e6 21 04 80 	movabs $0x800421e64c,%rdx
  800420d48f:	00 00 00 
  800420d492:	be de 01 00 00       	mov    $0x1de,%esi
  800420d497:	48 bf 08 e6 21 04 80 	movabs $0x800421e608,%rdi
  800420d49e:	00 00 00 
  800420d4a1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4a6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d4ad:	00 00 00 
  800420d4b0:	ff d1                	callq  *%rcx
  800420d4b2:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d4b9:	00 00 00 
  800420d4bc:	ff d0                	callq  *%rax
  800420d4be:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d4c5:	00 00 00 
  800420d4c8:	48 98                	cltq   
  800420d4ca:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4ce:	48 89 c1             	mov    %rax,%rcx
  800420d4d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4d5:	48 01 c8             	add    %rcx,%rax
  800420d4d8:	48 01 d0             	add    %rdx,%rax
  800420d4db:	48 83 c0 08          	add    $0x8,%rax
  800420d4df:	48 8b 00             	mov    (%rax),%rax
  800420d4e2:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d4e9:	48 85 c0             	test   %rax,%rax
  800420d4ec:	0f 85 b8 00 00 00    	jne    800420d5aa <page_fault_handler+0x166>
  800420d4f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d4f6:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d4fd:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d504:	00 00 00 
  800420d507:	ff d0                	callq  *%rax
  800420d509:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d510:	00 00 00 
  800420d513:	48 98                	cltq   
  800420d515:	48 c1 e0 03          	shl    $0x3,%rax
  800420d519:	48 89 c1             	mov    %rax,%rcx
  800420d51c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d520:	48 01 c8             	add    %rcx,%rax
  800420d523:	48 01 d0             	add    %rdx,%rax
  800420d526:	48 83 c0 08          	add    $0x8,%rax
  800420d52a:	48 8b 00             	mov    (%rax),%rax
  800420d52d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d533:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d537:	48 89 d9             	mov    %rbx,%rcx
  800420d53a:	89 c6                	mov    %eax,%esi
  800420d53c:	48 bf 58 e6 21 04 80 	movabs $0x800421e658,%rdi
  800420d543:	00 00 00 
  800420d546:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d54b:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420d552:	00 00 00 
  800420d555:	41 ff d0             	callq  *%r8
  800420d558:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d55c:	48 89 c7             	mov    %rax,%rdi
  800420d55f:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d566:	00 00 00 
  800420d569:	ff d0                	callq  *%rax
  800420d56b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d572:	00 00 00 
  800420d575:	ff d0                	callq  *%rax
  800420d577:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d57e:	00 00 00 
  800420d581:	48 98                	cltq   
  800420d583:	48 c1 e0 03          	shl    $0x3,%rax
  800420d587:	48 89 c1             	mov    %rax,%rcx
  800420d58a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d58e:	48 01 c8             	add    %rcx,%rax
  800420d591:	48 01 d0             	add    %rdx,%rax
  800420d594:	48 83 c0 08          	add    $0x8,%rax
  800420d598:	48 8b 00             	mov    (%rax),%rax
  800420d59b:	48 89 c7             	mov    %rax,%rdi
  800420d59e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d5a5:	00 00 00 
  800420d5a8:	ff d0                	callq  *%rax
  800420d5aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ae:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5b5:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5ba:	48 39 c2             	cmp    %rax,%rdx
  800420d5bd:	76 2c                	jbe    800420d5eb <page_fault_handler+0x1a7>
  800420d5bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5c3:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5ca:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5cf:	48 39 c2             	cmp    %rax,%rdx
  800420d5d2:	77 17                	ja     800420d5eb <page_fault_handler+0x1a7>
  800420d5d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5d8:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5df:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d5e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5e9:	eb 09                	jmp    800420d5f4 <page_fault_handler+0x1b0>
  800420d5eb:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d5f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f4:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d5fb:	00 00 00 
  800420d5fe:	ff d0                	callq  *%rax
  800420d600:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d607:	00 00 00 
  800420d60a:	48 98                	cltq   
  800420d60c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d610:	48 89 c1             	mov    %rax,%rcx
  800420d613:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d617:	48 01 c8             	add    %rcx,%rax
  800420d61a:	48 01 d0             	add    %rdx,%rax
  800420d61d:	48 83 c0 08          	add    $0x8,%rax
  800420d621:	48 8b 00             	mov    (%rax),%rax
  800420d624:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d628:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d62d:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d632:	48 89 c7             	mov    %rax,%rdi
  800420d635:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420d63c:	00 00 00 
  800420d63f:	ff d0                	callq  *%rax
  800420d641:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d645:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d649:	48 89 10             	mov    %rdx,(%rax)
  800420d64c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d650:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d65b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d663:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d667:	48 8b 0a             	mov    (%rdx),%rcx
  800420d66a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d66e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d672:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d676:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d67a:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d67e:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d682:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d686:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d68a:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d68e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d692:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d696:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d69a:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d69e:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6a2:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6a6:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6aa:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ae:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6b2:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6b6:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6ba:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6be:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6c2:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6c6:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6ca:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6ce:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6d2:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6d6:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6da:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6e5:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d6ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6f0:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d6f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6fb:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d702:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d706:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d70d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d711:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d718:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d71c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d723:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d72b:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d732:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d739:	00 00 00 
  800420d73c:	ff d0                	callq  *%rax
  800420d73e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d745:	00 00 00 
  800420d748:	48 98                	cltq   
  800420d74a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d74e:	48 89 c1             	mov    %rax,%rcx
  800420d751:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d755:	48 01 c8             	add    %rcx,%rax
  800420d758:	48 01 d0             	add    %rdx,%rax
  800420d75b:	48 83 c0 08          	add    $0x8,%rax
  800420d75f:	48 8b 00             	mov    (%rax),%rax
  800420d762:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d769:	48 89 c2             	mov    %rax,%rdx
  800420d76c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d770:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d777:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d77e:	00 00 00 
  800420d781:	ff d0                	callq  *%rax
  800420d783:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d78a:	00 00 00 
  800420d78d:	48 98                	cltq   
  800420d78f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d793:	48 89 c1             	mov    %rax,%rcx
  800420d796:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d79a:	48 01 c8             	add    %rcx,%rax
  800420d79d:	48 01 d0             	add    %rdx,%rax
  800420d7a0:	48 83 c0 08          	add    $0x8,%rax
  800420d7a4:	48 8b 00             	mov    (%rax),%rax
  800420d7a7:	48 89 c7             	mov    %rax,%rdi
  800420d7aa:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d7b1:	00 00 00 
  800420d7b4:	ff d0                	callq  *%rax
  800420d7b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7bd:	00 00 00 

000000800420d7c0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7c0:	6a 00                	pushq  $0x0
  800420d7c2:	6a 00                	pushq  $0x0
  800420d7c4:	e9 f7 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7c9:	90                   	nop

000000800420d7ca <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7ca:	6a 00                	pushq  $0x0
  800420d7cc:	6a 01                	pushq  $0x1
  800420d7ce:	e9 ed 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7d3:	90                   	nop

000000800420d7d4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7d4:	6a 00                	pushq  $0x0
  800420d7d6:	6a 02                	pushq  $0x2
  800420d7d8:	e9 e3 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7dd:	90                   	nop

000000800420d7de <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7de:	6a 00                	pushq  $0x0
  800420d7e0:	6a 03                	pushq  $0x3
  800420d7e2:	e9 d9 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7e7:	90                   	nop

000000800420d7e8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d7e8:	6a 00                	pushq  $0x0
  800420d7ea:	6a 04                	pushq  $0x4
  800420d7ec:	e9 cf 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7f1:	90                   	nop

000000800420d7f2 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d7f2:	6a 00                	pushq  $0x0
  800420d7f4:	6a 05                	pushq  $0x5
  800420d7f6:	e9 c5 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7fb:	90                   	nop

000000800420d7fc <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d7fc:	6a 00                	pushq  $0x0
  800420d7fe:	6a 06                	pushq  $0x6
  800420d800:	e9 bb 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d805:	90                   	nop

000000800420d806 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d806:	6a 00                	pushq  $0x0
  800420d808:	6a 07                	pushq  $0x7
  800420d80a:	e9 b1 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d80f:	90                   	nop

000000800420d810 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d810:	6a 08                	pushq  $0x8
  800420d812:	e9 a9 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d817:	90                   	nop

000000800420d818 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d818:	6a 0a                	pushq  $0xa
  800420d81a:	e9 a1 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d81f:	90                   	nop

000000800420d820 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d820:	6a 0b                	pushq  $0xb
  800420d822:	e9 99 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d827:	90                   	nop

000000800420d828 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d828:	6a 0c                	pushq  $0xc
  800420d82a:	e9 91 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d830:	6a 0d                	pushq  $0xd
  800420d832:	e9 89 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d838:	6a 0e                	pushq  $0xe
  800420d83a:	e9 81 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d840:	6a 00                	pushq  $0x0
  800420d842:	6a 10                	pushq  $0x10
  800420d844:	eb 7a                	jmp    800420d8c0 <_alltraps>

000000800420d846 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d846:	6a 11                	pushq  $0x11
  800420d848:	eb 76                	jmp    800420d8c0 <_alltraps>

000000800420d84a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d84a:	6a 00                	pushq  $0x0
  800420d84c:	6a 12                	pushq  $0x12
  800420d84e:	eb 70                	jmp    800420d8c0 <_alltraps>

000000800420d850 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d850:	6a 00                	pushq  $0x0
  800420d852:	6a 20                	pushq  $0x20
  800420d854:	eb 6a                	jmp    800420d8c0 <_alltraps>

000000800420d856 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d856:	6a 00                	pushq  $0x0
  800420d858:	6a 21                	pushq  $0x21
  800420d85a:	eb 64                	jmp    800420d8c0 <_alltraps>

000000800420d85c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d85c:	6a 00                	pushq  $0x0
  800420d85e:	6a 22                	pushq  $0x22
  800420d860:	eb 5e                	jmp    800420d8c0 <_alltraps>

000000800420d862 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d862:	6a 00                	pushq  $0x0
  800420d864:	6a 23                	pushq  $0x23
  800420d866:	eb 58                	jmp    800420d8c0 <_alltraps>

000000800420d868 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d868:	6a 00                	pushq  $0x0
  800420d86a:	6a 24                	pushq  $0x24
  800420d86c:	eb 52                	jmp    800420d8c0 <_alltraps>

000000800420d86e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d86e:	6a 00                	pushq  $0x0
  800420d870:	6a 25                	pushq  $0x25
  800420d872:	eb 4c                	jmp    800420d8c0 <_alltraps>

000000800420d874 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d874:	6a 00                	pushq  $0x0
  800420d876:	6a 26                	pushq  $0x26
  800420d878:	eb 46                	jmp    800420d8c0 <_alltraps>

000000800420d87a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d87a:	6a 00                	pushq  $0x0
  800420d87c:	6a 27                	pushq  $0x27
  800420d87e:	eb 40                	jmp    800420d8c0 <_alltraps>

000000800420d880 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d880:	6a 00                	pushq  $0x0
  800420d882:	6a 28                	pushq  $0x28
  800420d884:	eb 3a                	jmp    800420d8c0 <_alltraps>

000000800420d886 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d886:	6a 00                	pushq  $0x0
  800420d888:	6a 29                	pushq  $0x29
  800420d88a:	eb 34                	jmp    800420d8c0 <_alltraps>

000000800420d88c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d88c:	6a 00                	pushq  $0x0
  800420d88e:	6a 2a                	pushq  $0x2a
  800420d890:	eb 2e                	jmp    800420d8c0 <_alltraps>

000000800420d892 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d892:	6a 00                	pushq  $0x0
  800420d894:	6a 2b                	pushq  $0x2b
  800420d896:	eb 28                	jmp    800420d8c0 <_alltraps>

000000800420d898 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d898:	6a 00                	pushq  $0x0
  800420d89a:	6a 2c                	pushq  $0x2c
  800420d89c:	eb 22                	jmp    800420d8c0 <_alltraps>

000000800420d89e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d89e:	6a 00                	pushq  $0x0
  800420d8a0:	6a 2d                	pushq  $0x2d
  800420d8a2:	eb 1c                	jmp    800420d8c0 <_alltraps>

000000800420d8a4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8a4:	6a 00                	pushq  $0x0
  800420d8a6:	6a 2e                	pushq  $0x2e
  800420d8a8:	eb 16                	jmp    800420d8c0 <_alltraps>

000000800420d8aa <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d8aa:	6a 00                	pushq  $0x0
  800420d8ac:	6a 2f                	pushq  $0x2f
  800420d8ae:	eb 10                	jmp    800420d8c0 <_alltraps>

000000800420d8b0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d8b0:	6a 00                	pushq  $0x0
  800420d8b2:	6a 30                	pushq  $0x30
  800420d8b4:	eb 0a                	jmp    800420d8c0 <_alltraps>

000000800420d8b6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d8b6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d8bb:	eb 03                	jmp    800420d8c0 <_alltraps>
  800420d8bd:	0f 1f 00             	nopl   (%rax)

000000800420d8c0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d8c0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d8c4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d8c8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d8cb:	48 83 ec 78          	sub    $0x78,%rsp
  800420d8cf:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d8d4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d8d9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d8de:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d8e3:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d8e8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d8ed:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d8f2:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d8f7:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d8fc:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d901:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d906:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d90b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d910:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d915:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d919:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d91e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d920:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d922:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d924:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d926:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d928:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d92b:	e8 b7 f7 ff ff       	callq  800420d0e7 <trap>

000000800420d930 <spin>:
spin:	jmp spin
  800420d930:	eb fe                	jmp    800420d930 <spin>

000000800420d932 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d932:	55                   	push   %rbp
  800420d933:	48 89 e5             	mov    %rsp,%rbp
  800420d936:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d93a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d93e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d941:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d945:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d948:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d94c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d94f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d952:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d955:	c9                   	leaveq 
  800420d956:	c3                   	retq   

000000800420d957 <unlock_kernel>:
  800420d957:	55                   	push   %rbp
  800420d958:	48 89 e5             	mov    %rsp,%rbp
  800420d95b:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  800420d962:	00 00 00 
  800420d965:	48 b8 f4 7d 21 04 80 	movabs $0x8004217df4,%rax
  800420d96c:	00 00 00 
  800420d96f:	ff d0                	callq  *%rax
  800420d971:	f3 90                	pause  
  800420d973:	5d                   	pop    %rbp
  800420d974:	c3                   	retq   

000000800420d975 <vmxon>:
  800420d975:	55                   	push   %rbp
  800420d976:	48 89 e5             	mov    %rsp,%rbp
  800420d979:	48 83 ec 10          	sub    $0x10,%rsp
  800420d97d:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420d984:	00 00 00 
  800420d987:	ff d0                	callq  *%rax
  800420d989:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d990:	00 00 00 
  800420d993:	48 98                	cltq   
  800420d995:	48 c1 e0 03          	shl    $0x3,%rax
  800420d999:	48 89 c1             	mov    %rax,%rcx
  800420d99c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9a0:	48 01 c8             	add    %rcx,%rax
  800420d9a3:	48 01 d0             	add    %rdx,%rax
  800420d9a6:	48 83 c0 70          	add    $0x70,%rax
  800420d9aa:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d9ae:	83 f0 01             	xor    $0x1,%eax
  800420d9b1:	84 c0                	test   %al,%al
  800420d9b3:	74 5a                	je     800420da0f <vmxon+0x9a>
  800420d9b5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9ba:	48 ba 20 9f 21 04 80 	movabs $0x8004219f20,%rdx
  800420d9c1:	00 00 00 
  800420d9c4:	ff d2                	callq  *%rdx
  800420d9c6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9c9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9cd:	79 25                	jns    800420d9f4 <vmxon+0x7f>
  800420d9cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9d2:	89 c6                	mov    %eax,%esi
  800420d9d4:	48 bf 60 e8 21 04 80 	movabs $0x800421e860,%rdi
  800420d9db:	00 00 00 
  800420d9de:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9e3:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420d9ea:	00 00 00 
  800420d9ed:	ff d2                	callq  *%rdx
  800420d9ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9f2:	eb 20                	jmp    800420da14 <vmxon+0x9f>
  800420d9f4:	48 bf 7b e8 21 04 80 	movabs $0x800421e87b,%rdi
  800420d9fb:	00 00 00 
  800420d9fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da03:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420da0a:	00 00 00 
  800420da0d:	ff d2                	callq  *%rdx
  800420da0f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da14:	c9                   	leaveq 
  800420da15:	c3                   	retq   

000000800420da16 <sched_yield>:
  800420da16:	55                   	push   %rbp
  800420da17:	48 89 e5             	mov    %rsp,%rbp
  800420da1a:	48 83 ec 10          	sub    $0x10,%rsp
  800420da1e:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420da25:	00 00 00 
  800420da28:	ff d0                	callq  *%rax
  800420da2a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420da31:	00 00 00 
  800420da34:	48 98                	cltq   
  800420da36:	48 c1 e0 03          	shl    $0x3,%rax
  800420da3a:	48 89 c1             	mov    %rax,%rcx
  800420da3d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da41:	48 01 c8             	add    %rcx,%rax
  800420da44:	48 01 d0             	add    %rdx,%rax
  800420da47:	48 83 c0 08          	add    $0x8,%rax
  800420da4b:	48 8b 00             	mov    (%rax),%rax
  800420da4e:	48 85 c0             	test   %rax,%rax
  800420da51:	74 60                	je     800420dab3 <sched_yield+0x9d>
  800420da53:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420da5a:	00 00 00 
  800420da5d:	ff d0                	callq  *%rax
  800420da5f:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420da66:	00 00 00 
  800420da69:	48 98                	cltq   
  800420da6b:	48 c1 e0 03          	shl    $0x3,%rax
  800420da6f:	48 89 c1             	mov    %rax,%rcx
  800420da72:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da76:	48 01 c8             	add    %rcx,%rax
  800420da79:	48 01 d0             	add    %rdx,%rax
  800420da7c:	48 83 c0 08          	add    $0x8,%rax
  800420da80:	48 8b 00             	mov    (%rax),%rax
  800420da83:	48 89 c2             	mov    %rax,%rdx
  800420da86:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420da8d:	00 00 00 
  800420da90:	48 8b 00             	mov    (%rax),%rax
  800420da93:	48 29 c2             	sub    %rax,%rdx
  800420da96:	48 89 d0             	mov    %rdx,%rax
  800420da99:	48 c1 f8 03          	sar    $0x3,%rax
  800420da9d:	48 89 c2             	mov    %rax,%rdx
  800420daa0:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420daa7:	fa a4 4f 
  800420daaa:	48 0f af c2          	imul   %rdx,%rax
  800420daae:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dab1:	eb 07                	jmp    800420daba <sched_yield+0xa4>
  800420dab3:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420daba:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420dac1:	eb 75                	jmp    800420db38 <sched_yield+0x122>
  800420dac3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dac6:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420dac9:	01 c2                	add    %eax,%edx
  800420dacb:	89 d0                	mov    %edx,%eax
  800420dacd:	c1 f8 1f             	sar    $0x1f,%eax
  800420dad0:	c1 e8 16             	shr    $0x16,%eax
  800420dad3:	01 c2                	add    %eax,%edx
  800420dad5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420dadb:	29 c2                	sub    %eax,%edx
  800420dadd:	89 d0                	mov    %edx,%eax
  800420dadf:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420dae2:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dae9:	00 00 00 
  800420daec:	48 8b 10             	mov    (%rax),%rdx
  800420daef:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420daf2:	48 98                	cltq   
  800420daf4:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dafb:	48 01 d0             	add    %rdx,%rax
  800420dafe:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db04:	83 f8 02             	cmp    $0x2,%eax
  800420db07:	75 2b                	jne    800420db34 <sched_yield+0x11e>
  800420db09:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420db10:	00 00 00 
  800420db13:	48 8b 10             	mov    (%rax),%rdx
  800420db16:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420db19:	48 98                	cltq   
  800420db1b:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db22:	48 01 d0             	add    %rdx,%rax
  800420db25:	48 89 c7             	mov    %rax,%rdi
  800420db28:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420db2f:	00 00 00 
  800420db32:	ff d0                	callq  *%rax
  800420db34:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420db38:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420db3f:	7e 82                	jle    800420dac3 <sched_yield+0xad>
  800420db41:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420db48:	00 00 00 
  800420db4b:	ff d0                	callq  *%rax
  800420db4d:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420db54:	00 00 00 
  800420db57:	48 98                	cltq   
  800420db59:	48 c1 e0 03          	shl    $0x3,%rax
  800420db5d:	48 89 c1             	mov    %rax,%rcx
  800420db60:	48 c1 e1 04          	shl    $0x4,%rcx
  800420db64:	48 01 c8             	add    %rcx,%rax
  800420db67:	48 01 d0             	add    %rdx,%rax
  800420db6a:	48 83 c0 08          	add    $0x8,%rax
  800420db6e:	48 8b 00             	mov    (%rax),%rax
  800420db71:	48 85 c0             	test   %rax,%rax
  800420db74:	74 7a                	je     800420dbf0 <sched_yield+0x1da>
  800420db76:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420db7d:	00 00 00 
  800420db80:	ff d0                	callq  *%rax
  800420db82:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420db89:	00 00 00 
  800420db8c:	48 98                	cltq   
  800420db8e:	48 c1 e0 03          	shl    $0x3,%rax
  800420db92:	48 89 c1             	mov    %rax,%rcx
  800420db95:	48 c1 e1 04          	shl    $0x4,%rcx
  800420db99:	48 01 c8             	add    %rcx,%rax
  800420db9c:	48 01 d0             	add    %rdx,%rax
  800420db9f:	48 83 c0 08          	add    $0x8,%rax
  800420dba3:	48 8b 00             	mov    (%rax),%rax
  800420dba6:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dbac:	83 f8 03             	cmp    $0x3,%eax
  800420dbaf:	75 3f                	jne    800420dbf0 <sched_yield+0x1da>
  800420dbb1:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420dbb8:	00 00 00 
  800420dbbb:	ff d0                	callq  *%rax
  800420dbbd:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dbc4:	00 00 00 
  800420dbc7:	48 98                	cltq   
  800420dbc9:	48 c1 e0 03          	shl    $0x3,%rax
  800420dbcd:	48 89 c1             	mov    %rax,%rcx
  800420dbd0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dbd4:	48 01 c8             	add    %rcx,%rax
  800420dbd7:	48 01 d0             	add    %rdx,%rax
  800420dbda:	48 83 c0 08          	add    $0x8,%rax
  800420dbde:	48 8b 00             	mov    (%rax),%rax
  800420dbe1:	48 89 c7             	mov    %rax,%rdi
  800420dbe4:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420dbeb:	00 00 00 
  800420dbee:	ff d0                	callq  *%rax
  800420dbf0:	48 b8 fe db 20 04 80 	movabs $0x800420dbfe,%rax
  800420dbf7:	00 00 00 
  800420dbfa:	ff d0                	callq  *%rax
  800420dbfc:	c9                   	leaveq 
  800420dbfd:	c3                   	retq   

000000800420dbfe <sched_halt>:
  800420dbfe:	55                   	push   %rbp
  800420dbff:	48 89 e5             	mov    %rsp,%rbp
  800420dc02:	48 83 ec 20          	sub    $0x20,%rsp
  800420dc06:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420dc0d:	eb 79                	jmp    800420dc88 <sched_halt+0x8a>
  800420dc0f:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dc16:	00 00 00 
  800420dc19:	48 8b 10             	mov    (%rax),%rdx
  800420dc1c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc1f:	48 98                	cltq   
  800420dc21:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc28:	48 01 d0             	add    %rdx,%rax
  800420dc2b:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc31:	83 f8 02             	cmp    $0x2,%eax
  800420dc34:	74 5f                	je     800420dc95 <sched_halt+0x97>
  800420dc36:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dc3d:	00 00 00 
  800420dc40:	48 8b 10             	mov    (%rax),%rdx
  800420dc43:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc46:	48 98                	cltq   
  800420dc48:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc4f:	48 01 d0             	add    %rdx,%rax
  800420dc52:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc58:	83 f8 03             	cmp    $0x3,%eax
  800420dc5b:	74 38                	je     800420dc95 <sched_halt+0x97>
  800420dc5d:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dc64:	00 00 00 
  800420dc67:	48 8b 10             	mov    (%rax),%rdx
  800420dc6a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc6d:	48 98                	cltq   
  800420dc6f:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc76:	48 01 d0             	add    %rdx,%rax
  800420dc79:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc7f:	83 f8 01             	cmp    $0x1,%eax
  800420dc82:	74 11                	je     800420dc95 <sched_halt+0x97>
  800420dc84:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420dc88:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420dc8f:	0f 8e 7a ff ff ff    	jle    800420dc0f <sched_halt+0x11>
  800420dc95:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420dc9c:	75 2e                	jne    800420dccc <sched_halt+0xce>
  800420dc9e:	48 bf 88 e8 21 04 80 	movabs $0x800421e888,%rdi
  800420dca5:	00 00 00 
  800420dca8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dcad:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420dcb4:	00 00 00 
  800420dcb7:	ff d2                	callq  *%rdx
  800420dcb9:	bf 00 00 00 00       	mov    $0x0,%edi
  800420dcbe:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420dcc5:	00 00 00 
  800420dcc8:	ff d0                	callq  *%rax
  800420dcca:	eb ed                	jmp    800420dcb9 <sched_halt+0xbb>
  800420dccc:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420dcd3:	00 00 00 
  800420dcd6:	ff d0                	callq  *%rax
  800420dcd8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dcdf:	00 00 00 
  800420dce2:	48 98                	cltq   
  800420dce4:	48 c1 e0 03          	shl    $0x3,%rax
  800420dce8:	48 89 c1             	mov    %rax,%rcx
  800420dceb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dcef:	48 01 c8             	add    %rcx,%rax
  800420dcf2:	48 01 d0             	add    %rdx,%rax
  800420dcf5:	48 83 c0 08          	add    $0x8,%rax
  800420dcf9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420dd00:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420dd07:	00 00 00 
  800420dd0a:	48 8b 00             	mov    (%rax),%rax
  800420dd0d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420dd11:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420dd18:	00 00 00 
  800420dd1b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420dd1f:	77 32                	ja     800420dd53 <sched_halt+0x155>
  800420dd21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dd25:	48 89 c1             	mov    %rax,%rcx
  800420dd28:	48 ba b8 e8 21 04 80 	movabs $0x800421e8b8,%rdx
  800420dd2f:	00 00 00 
  800420dd32:	be 5a 00 00 00       	mov    $0x5a,%esi
  800420dd37:	48 bf dc e8 21 04 80 	movabs $0x800421e8dc,%rdi
  800420dd3e:	00 00 00 
  800420dd41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd46:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420dd4d:	00 00 00 
  800420dd50:	41 ff d0             	callq  *%r8
  800420dd53:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420dd5a:	ff ff ff 
  800420dd5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dd61:	48 01 d0             	add    %rdx,%rax
  800420dd64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420dd68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dd6c:	0f 22 d8             	mov    %rax,%cr3
  800420dd6f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420dd76:	00 00 00 
  800420dd79:	ff d0                	callq  *%rax
  800420dd7b:	48 98                	cltq   
  800420dd7d:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd81:	48 89 c2             	mov    %rax,%rdx
  800420dd84:	48 c1 e2 04          	shl    $0x4,%rdx
  800420dd88:	48 01 d0             	add    %rdx,%rax
  800420dd8b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dd92:	00 00 00 
  800420dd95:	48 01 d0             	add    %rdx,%rax
  800420dd98:	48 83 c0 04          	add    $0x4,%rax
  800420dd9c:	be 02 00 00 00       	mov    $0x2,%esi
  800420dda1:	48 89 c7             	mov    %rax,%rdi
  800420dda4:	48 b8 32 d9 20 04 80 	movabs $0x800420d932,%rax
  800420ddab:	00 00 00 
  800420ddae:	ff d0                	callq  *%rax
  800420ddb0:	48 b8 57 d9 20 04 80 	movabs $0x800420d957,%rax
  800420ddb7:	00 00 00 
  800420ddba:	ff d0                	callq  *%rax
  800420ddbc:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420ddc3:	00 00 00 
  800420ddc6:	ff d0                	callq  *%rax
  800420ddc8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420ddcf:	00 00 00 
  800420ddd2:	48 98                	cltq   
  800420ddd4:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddd8:	48 89 c1             	mov    %rax,%rcx
  800420dddb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dddf:	48 01 c8             	add    %rcx,%rax
  800420dde2:	48 01 d0             	add    %rdx,%rax
  800420dde5:	48 83 c0 10          	add    $0x10,%rax
  800420dde9:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420dded:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420ddf4:	48 89 c4             	mov    %rax,%rsp
  800420ddf7:	6a 00                	pushq  $0x0
  800420ddf9:	6a 00                	pushq  $0x0
  800420ddfb:	fb                   	sti    
  800420ddfc:	f4                   	hlt    
  800420ddfd:	c9                   	leaveq 
  800420ddfe:	c3                   	retq   

000000800420ddff <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420ddff:	55                   	push   %rbp
  800420de00:	48 89 e5             	mov    %rsp,%rbp
  800420de03:	48 83 ec 10          	sub    $0x10,%rsp
  800420de07:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420de0b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420de0f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420de16:	00 00 00 
  800420de19:	ff d0                	callq  *%rax
  800420de1b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420de22:	00 00 00 
  800420de25:	48 98                	cltq   
  800420de27:	48 c1 e0 03          	shl    $0x3,%rax
  800420de2b:	48 89 c1             	mov    %rax,%rcx
  800420de2e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de32:	48 01 c8             	add    %rcx,%rax
  800420de35:	48 01 d0             	add    %rdx,%rax
  800420de38:	48 83 c0 08          	add    $0x8,%rax
  800420de3c:	48 8b 00             	mov    (%rax),%rax
  800420de3f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420de43:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420de47:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420de4c:	48 89 c7             	mov    %rax,%rdi
  800420de4f:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420de56:	00 00 00 
  800420de59:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420de5b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420de5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420de63:	48 89 c6             	mov    %rax,%rsi
  800420de66:	48 bf f0 e8 21 04 80 	movabs $0x800421e8f0,%rdi
  800420de6d:	00 00 00 
  800420de70:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de75:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420de7c:	00 00 00 
  800420de7f:	ff d1                	callq  *%rcx
}
  800420de81:	c9                   	leaveq 
  800420de82:	c3                   	retq   

000000800420de83 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420de83:	55                   	push   %rbp
  800420de84:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420de87:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  800420de8e:	00 00 00 
  800420de91:	ff d0                	callq  *%rax
}
  800420de93:	5d                   	pop    %rbp
  800420de94:	c3                   	retq   

000000800420de95 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420de95:	55                   	push   %rbp
  800420de96:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420de99:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420dea0:	00 00 00 
  800420dea3:	ff d0                	callq  *%rax
  800420dea5:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420deac:	00 00 00 
  800420deaf:	48 98                	cltq   
  800420deb1:	48 c1 e0 03          	shl    $0x3,%rax
  800420deb5:	48 89 c1             	mov    %rax,%rcx
  800420deb8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420debc:	48 01 c8             	add    %rcx,%rax
  800420debf:	48 01 d0             	add    %rdx,%rax
  800420dec2:	48 83 c0 08          	add    $0x8,%rax
  800420dec6:	48 8b 00             	mov    (%rax),%rax
  800420dec9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420decf:	5d                   	pop    %rbp
  800420ded0:	c3                   	retq   

000000800420ded1 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420ded1:	55                   	push   %rbp
  800420ded2:	48 89 e5             	mov    %rsp,%rbp
  800420ded5:	48 83 ec 20          	sub    $0x20,%rsp
  800420ded9:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420dedc:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dee0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dee3:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dee8:	48 89 ce             	mov    %rcx,%rsi
  800420deeb:	89 c7                	mov    %eax,%edi
  800420deed:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420def4:	00 00 00 
  800420def7:	ff d0                	callq  *%rax
  800420def9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420defc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420df00:	79 05                	jns    800420df07 <sys_env_destroy+0x36>
		return r;
  800420df02:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420df05:	eb 18                	jmp    800420df1f <sys_env_destroy+0x4e>
	env_destroy(e);
  800420df07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420df0b:	48 89 c7             	mov    %rax,%rdi
  800420df0e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420df15:	00 00 00 
  800420df18:	ff d0                	callq  *%rax
	return 0;
  800420df1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420df1f:	c9                   	leaveq 
  800420df20:	c3                   	retq   

000000800420df21 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420df21:	55                   	push   %rbp
  800420df22:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420df25:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420df2c:	00 00 00 
  800420df2f:	ff d0                	callq  *%rax

000000800420df31 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420df31:	55                   	push   %rbp
  800420df32:	48 89 e5             	mov    %rsp,%rbp
  800420df35:	53                   	push   %rbx
  800420df36:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420df3a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420df41:	00 00 00 
  800420df44:	ff d0                	callq  *%rax
  800420df46:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420df4d:	00 00 00 
  800420df50:	48 98                	cltq   
  800420df52:	48 c1 e0 03          	shl    $0x3,%rax
  800420df56:	48 89 c1             	mov    %rax,%rcx
  800420df59:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df5d:	48 01 c8             	add    %rcx,%rax
  800420df60:	48 01 d0             	add    %rdx,%rax
  800420df63:	48 83 c0 08          	add    $0x8,%rax
  800420df67:	48 8b 00             	mov    (%rax),%rax
  800420df6a:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420df70:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420df74:	89 d6                	mov    %edx,%esi
  800420df76:	48 89 c7             	mov    %rax,%rdi
  800420df79:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800420df80:	00 00 00 
  800420df83:	ff d0                	callq  *%rax
  800420df85:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420df88:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420df8c:	79 05                	jns    800420df93 <sys_exofork+0x62>
		return r;
  800420df8e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420df91:	eb 6c                	jmp    800420dfff <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420df93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420df97:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420df9e:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420dfa1:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420dfa5:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420dfac:	00 00 00 
  800420dfaf:	ff d0                	callq  *%rax
  800420dfb1:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dfb8:	00 00 00 
  800420dfbb:	48 98                	cltq   
  800420dfbd:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfc1:	48 89 c1             	mov    %rax,%rcx
  800420dfc4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfc8:	48 01 c8             	add    %rcx,%rax
  800420dfcb:	48 01 d0             	add    %rdx,%rax
  800420dfce:	48 83 c0 08          	add    $0x8,%rax
  800420dfd2:	48 8b 00             	mov    (%rax),%rax
  800420dfd5:	48 89 da             	mov    %rbx,%rdx
  800420dfd8:	48 89 c6             	mov    %rax,%rsi
  800420dfdb:	b8 18 00 00 00       	mov    $0x18,%eax
  800420dfe0:	48 89 d7             	mov    %rdx,%rdi
  800420dfe3:	48 89 c1             	mov    %rax,%rcx
  800420dfe6:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420dfe9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dfed:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420dff4:	00 
	return e->env_id;
  800420dff5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dff9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420dfff:	48 83 c4 18          	add    $0x18,%rsp
  800420e003:	5b                   	pop    %rbx
  800420e004:	5d                   	pop    %rbp
  800420e005:	c3                   	retq   

000000800420e006 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420e006:	55                   	push   %rbp
  800420e007:	48 89 e5             	mov    %rsp,%rbp
  800420e00a:	48 83 ec 20          	sub    $0x20,%rsp
  800420e00e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e011:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e014:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e018:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e01b:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e020:	48 89 ce             	mov    %rcx,%rsi
  800420e023:	89 c7                	mov    %eax,%edi
  800420e025:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e02c:	00 00 00 
  800420e02f:	ff d0                	callq  *%rax
  800420e031:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e034:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e038:	79 05                	jns    800420e03f <sys_env_set_status+0x39>
		return r;
  800420e03a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e03d:	eb 25                	jmp    800420e064 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420e03f:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e043:	74 0d                	je     800420e052 <sys_env_set_status+0x4c>
  800420e045:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e049:	74 07                	je     800420e052 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420e04b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e050:	eb 12                	jmp    800420e064 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420e052:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e056:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e059:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420e05f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e064:	c9                   	leaveq 
  800420e065:	c3                   	retq   

000000800420e066 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e066:	55                   	push   %rbp
  800420e067:	48 89 e5             	mov    %rsp,%rbp
  800420e06a:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e071:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e077:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e07e:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e085:	00 00 00 
  800420e088:	ff d0                	callq  *%rax
  800420e08a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e091:	00 00 00 
  800420e094:	48 98                	cltq   
  800420e096:	48 c1 e0 03          	shl    $0x3,%rax
  800420e09a:	48 89 c1             	mov    %rax,%rcx
  800420e09d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0a1:	48 01 c8             	add    %rcx,%rax
  800420e0a4:	48 01 d0             	add    %rdx,%rax
  800420e0a7:	48 83 c0 08          	add    $0x8,%rax
  800420e0ab:	48 8b 00             	mov    (%rax),%rax
  800420e0ae:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e0b5:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e0ba:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e0bf:	48 89 c7             	mov    %rax,%rdi
  800420e0c2:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e0c9:	00 00 00 
  800420e0cc:	ff d0                	callq  *%rax
	ltf = *tf;
  800420e0ce:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e0d5:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e0dc:	48 89 c6             	mov    %rax,%rsi
  800420e0df:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e0e4:	48 89 d7             	mov    %rdx,%rdi
  800420e0e7:	48 89 c1             	mov    %rax,%rcx
  800420e0ea:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420e0ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e0f1:	80 cc 02             	or     $0x2,%ah
  800420e0f4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420e0f8:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e0fc:	83 c8 03             	or     $0x3,%eax
  800420e0ff:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e103:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e107:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e10d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e112:	48 89 ce             	mov    %rcx,%rsi
  800420e115:	89 c7                	mov    %eax,%edi
  800420e117:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e11e:	00 00 00 
  800420e121:	ff d0                	callq  *%rax
  800420e123:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e126:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e12a:	79 05                	jns    800420e131 <sys_env_set_trapframe+0xcb>
		return r;
  800420e12c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e12f:	eb 21                	jmp    800420e152 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420e131:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e135:	48 89 c2             	mov    %rax,%rdx
  800420e138:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e13f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e144:	48 89 d7             	mov    %rdx,%rdi
  800420e147:	48 89 c1             	mov    %rax,%rcx
  800420e14a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420e14d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e152:	c9                   	leaveq 
  800420e153:	c3                   	retq   

000000800420e154 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e154:	55                   	push   %rbp
  800420e155:	48 89 e5             	mov    %rsp,%rbp
  800420e158:	48 83 ec 20          	sub    $0x20,%rsp
  800420e15c:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e15f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e163:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e167:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e16a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e16f:	48 89 ce             	mov    %rcx,%rsi
  800420e172:	89 c7                	mov    %eax,%edi
  800420e174:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e17b:	00 00 00 
  800420e17e:	ff d0                	callq  *%rax
  800420e180:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e183:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e187:	79 05                	jns    800420e18e <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420e189:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e18c:	eb 14                	jmp    800420e1a2 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420e18e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e192:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e196:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420e19d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e1a2:	c9                   	leaveq 
  800420e1a3:	c3                   	retq   

000000800420e1a4 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e1a4:	55                   	push   %rbp
  800420e1a5:	48 89 e5             	mov    %rsp,%rbp
  800420e1a8:	48 83 ec 30          	sub    $0x30,%rsp
  800420e1ac:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e1af:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e1b3:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e1b6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e1ba:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e1bd:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e1c2:	48 89 ce             	mov    %rcx,%rsi
  800420e1c5:	89 c7                	mov    %eax,%edi
  800420e1c7:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e1ce:	00 00 00 
  800420e1d1:	ff d0                	callq  *%rax
  800420e1d3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e1d6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e1da:	79 08                	jns    800420e1e4 <sys_page_alloc+0x40>
		return r;
  800420e1dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e1df:	e9 a7 00 00 00       	jmpq   800420e28b <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e1e4:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e1e7:	f7 d0                	not    %eax
  800420e1e9:	83 e0 05             	and    $0x5,%eax
  800420e1ec:	85 c0                	test   %eax,%eax
  800420e1ee:	75 0c                	jne    800420e1fc <sys_page_alloc+0x58>
  800420e1f0:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e1f3:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e1f8:	85 c0                	test   %eax,%eax
  800420e1fa:	74 0a                	je     800420e206 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420e1fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e201:	e9 85 00 00 00       	jmpq   800420e28b <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420e206:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e20d:	00 00 00 
  800420e210:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e214:	76 07                	jbe    800420e21d <sys_page_alloc+0x79>
		return -E_INVAL;
  800420e216:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e21b:	eb 6e                	jmp    800420e28b <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e21d:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e222:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420e229:	00 00 00 
  800420e22c:	ff d0                	callq  *%rax
  800420e22e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e232:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e237:	75 07                	jne    800420e240 <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420e239:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e23e:	eb 4b                	jmp    800420e28b <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420e240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e244:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e24b:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e24e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e252:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e256:	48 89 c7             	mov    %rax,%rdi
  800420e259:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e260:	00 00 00 
  800420e263:	ff d0                	callq  *%rax
  800420e265:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e268:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e26c:	79 18                	jns    800420e286 <sys_page_alloc+0xe2>
		page_free(pp);
  800420e26e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e272:	48 89 c7             	mov    %rax,%rdi
  800420e275:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420e27c:	00 00 00 
  800420e27f:	ff d0                	callq  *%rax
		return r;
  800420e281:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e284:	eb 05                	jmp    800420e28b <sys_page_alloc+0xe7>
	}
	return 0;
  800420e286:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e28b:	c9                   	leaveq 
  800420e28c:	c3                   	retq   

000000800420e28d <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420e28d:	55                   	push   %rbp
  800420e28e:	48 89 e5             	mov    %rsp,%rbp
  800420e291:	48 83 ec 60          	sub    $0x60,%rsp
  800420e295:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e298:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e29c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e29f:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e2a3:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420e2a7:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e2ae:	00 00 00 
  800420e2b1:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e2b5:	77 10                	ja     800420e2c7 <sys_page_map+0x3a>
  800420e2b7:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e2be:	00 00 00 
  800420e2c1:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e2c5:	76 0a                	jbe    800420e2d1 <sys_page_map+0x44>
		return -E_INVAL;
  800420e2c7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e2cc:	e9 3f 01 00 00       	jmpq   800420e410 <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e2d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e2d5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e2d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2dd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e2e3:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e2e7:	75 18                	jne    800420e301 <sys_page_map+0x74>
  800420e2e9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e2ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e2f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e2f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e2fb:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e2ff:	74 0a                	je     800420e30b <sys_page_map+0x7e>
		return -E_INVAL;
  800420e301:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e306:	e9 05 01 00 00       	jmpq   800420e410 <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420e30b:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e30f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e312:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e317:	48 89 ce             	mov    %rcx,%rsi
  800420e31a:	89 c7                	mov    %eax,%edi
  800420e31c:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e323:	00 00 00 
  800420e326:	ff d0                	callq  *%rax
  800420e328:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e32b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e32f:	78 26                	js     800420e357 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e331:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e335:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e338:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e33d:	48 89 ce             	mov    %rcx,%rsi
  800420e340:	89 c7                	mov    %eax,%edi
  800420e342:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e349:	00 00 00 
  800420e34c:	ff d0                	callq  *%rax
  800420e34e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e351:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e355:	79 08                	jns    800420e35f <sys_page_map+0xd2>
		return r;
  800420e357:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e35a:	e9 b1 00 00 00       	jmpq   800420e410 <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e35f:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e362:	f7 d0                	not    %eax
  800420e364:	83 e0 05             	and    $0x5,%eax
  800420e367:	85 c0                	test   %eax,%eax
  800420e369:	75 0c                	jne    800420e377 <sys_page_map+0xea>
  800420e36b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e36e:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e373:	85 c0                	test   %eax,%eax
  800420e375:	74 0a                	je     800420e381 <sys_page_map+0xf4>
		return -E_INVAL;
  800420e377:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e37c:	e9 8f 00 00 00       	jmpq   800420e410 <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e381:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e385:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e38c:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e390:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e394:	48 89 ce             	mov    %rcx,%rsi
  800420e397:	48 89 c7             	mov    %rax,%rdi
  800420e39a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e3a1:	00 00 00 
  800420e3a4:	ff d0                	callq  *%rax
  800420e3a6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e3aa:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e3af:	75 07                	jne    800420e3b8 <sys_page_map+0x12b>
		return -E_INVAL;
  800420e3b1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e3b6:	eb 58                	jmp    800420e410 <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e3b8:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e3bb:	83 e0 02             	and    $0x2,%eax
  800420e3be:	85 c0                	test   %eax,%eax
  800420e3c0:	74 16                	je     800420e3d8 <sys_page_map+0x14b>
  800420e3c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e3c6:	48 8b 00             	mov    (%rax),%rax
  800420e3c9:	83 e0 02             	and    $0x2,%eax
  800420e3cc:	48 85 c0             	test   %rax,%rax
  800420e3cf:	75 07                	jne    800420e3d8 <sys_page_map+0x14b>
		return -E_INVAL;
  800420e3d1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e3d6:	eb 38                	jmp    800420e410 <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e3d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e3dc:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e3e3:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e3e6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e3ea:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e3ee:	48 89 c7             	mov    %rax,%rdi
  800420e3f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e3f8:	00 00 00 
  800420e3fb:	ff d0                	callq  *%rax
  800420e3fd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e400:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e404:	79 05                	jns    800420e40b <sys_page_map+0x17e>
		return r;
  800420e406:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e409:	eb 05                	jmp    800420e410 <sys_page_map+0x183>
	return 0;
  800420e40b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e410:	c9                   	leaveq 
  800420e411:	c3                   	retq   

000000800420e412 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e412:	55                   	push   %rbp
  800420e413:	48 89 e5             	mov    %rsp,%rbp
  800420e416:	48 83 ec 20          	sub    $0x20,%rsp
  800420e41a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e41d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e421:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e425:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e428:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e42d:	48 89 ce             	mov    %rcx,%rsi
  800420e430:	89 c7                	mov    %eax,%edi
  800420e432:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e439:	00 00 00 
  800420e43c:	ff d0                	callq  *%rax
  800420e43e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e441:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e445:	79 05                	jns    800420e44c <sys_page_unmap+0x3a>
		return r;
  800420e447:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e44a:	eb 4b                	jmp    800420e497 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420e44c:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e453:	00 00 00 
  800420e456:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e45a:	77 0e                	ja     800420e46a <sys_page_unmap+0x58>
  800420e45c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e460:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e465:	48 85 c0             	test   %rax,%rax
  800420e468:	74 07                	je     800420e471 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420e46a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e46f:	eb 26                	jmp    800420e497 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420e471:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e475:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e47c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e480:	48 89 d6             	mov    %rdx,%rsi
  800420e483:	48 89 c7             	mov    %rax,%rdi
  800420e486:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420e48d:	00 00 00 
  800420e490:	ff d0                	callq  *%rax
	return 0;
  800420e492:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e497:	c9                   	leaveq 
  800420e498:	c3                   	retq   

000000800420e499 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e499:	55                   	push   %rbp
  800420e49a:	48 89 e5             	mov    %rsp,%rbp
  800420e49d:	53                   	push   %rbx
  800420e49e:	48 83 ec 48          	sub    $0x48,%rsp
  800420e4a2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e4a5:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e4a8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e4ac:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420e4af:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e4b3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e4b6:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e4bb:	48 89 ce             	mov    %rcx,%rsi
  800420e4be:	89 c7                	mov    %eax,%edi
  800420e4c0:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e4c7:	00 00 00 
  800420e4ca:	ff d0                	callq  *%rax
  800420e4cc:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e4cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e4d3:	79 08                	jns    800420e4dd <sys_ipc_try_send+0x44>
        return r;
  800420e4d5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e4d8:	e9 25 03 00 00       	jmpq   800420e802 <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420e4dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e4e1:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e4e8:	83 f0 01             	xor    $0x1,%eax
  800420e4eb:	84 c0                	test   %al,%al
  800420e4ed:	74 0a                	je     800420e4f9 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420e4ef:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e4f4:	e9 09 03 00 00       	jmpq   800420e802 <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420e4f9:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e500:	00 00 00 
  800420e503:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e507:	0f 87 70 02 00 00    	ja     800420e77d <sys_ipc_try_send+0x2e4>
  800420e50d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e511:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e518:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e51f:	00 00 00 
  800420e522:	48 39 c2             	cmp    %rax,%rdx
  800420e525:	0f 87 52 02 00 00    	ja     800420e77d <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420e52b:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e52e:	f7 d0                	not    %eax
  800420e530:	83 e0 05             	and    $0x5,%eax
  800420e533:	85 c0                	test   %eax,%eax
  800420e535:	75 0c                	jne    800420e543 <sys_ipc_try_send+0xaa>
  800420e537:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e53a:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e53f:	85 c0                	test   %eax,%eax
  800420e541:	74 60                	je     800420e5a3 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e543:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e54a:	00 00 00 
  800420e54d:	ff d0                	callq  *%rax
  800420e54f:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e556:	00 00 00 
  800420e559:	48 98                	cltq   
  800420e55b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e55f:	48 89 c1             	mov    %rax,%rcx
  800420e562:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e566:	48 01 c8             	add    %rcx,%rax
  800420e569:	48 01 d0             	add    %rdx,%rax
  800420e56c:	48 83 c0 08          	add    $0x8,%rax
  800420e570:	48 8b 00             	mov    (%rax),%rax
  800420e573:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e579:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e57c:	89 c6                	mov    %eax,%esi
  800420e57e:	48 bf f8 e8 21 04 80 	movabs $0x800421e8f8,%rdi
  800420e585:	00 00 00 
  800420e588:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e58d:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e594:	00 00 00 
  800420e597:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e599:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e59e:	e9 5f 02 00 00       	jmpq   800420e802 <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e5a3:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e5aa:	00 00 00 
  800420e5ad:	ff d0                	callq  *%rax
  800420e5af:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e5b6:	00 00 00 
  800420e5b9:	48 98                	cltq   
  800420e5bb:	48 c1 e0 03          	shl    $0x3,%rax
  800420e5bf:	48 89 c1             	mov    %rax,%rcx
  800420e5c2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e5c6:	48 01 c8             	add    %rcx,%rax
  800420e5c9:	48 01 d0             	add    %rdx,%rax
  800420e5cc:	48 83 c0 08          	add    $0x8,%rax
  800420e5d0:	48 8b 00             	mov    (%rax),%rax
  800420e5d3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e5da:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e5de:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e5e2:	48 89 ce             	mov    %rcx,%rsi
  800420e5e5:	48 89 c7             	mov    %rax,%rdi
  800420e5e8:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e5ef:	00 00 00 
  800420e5f2:	ff d0                	callq  *%rax
  800420e5f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420e5f8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e5fd:	75 61                	jne    800420e660 <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e5ff:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e606:	00 00 00 
  800420e609:	ff d0                	callq  *%rax
  800420e60b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e612:	00 00 00 
  800420e615:	48 98                	cltq   
  800420e617:	48 c1 e0 03          	shl    $0x3,%rax
  800420e61b:	48 89 c1             	mov    %rax,%rcx
  800420e61e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e622:	48 01 c8             	add    %rcx,%rax
  800420e625:	48 01 d0             	add    %rdx,%rax
  800420e628:	48 83 c0 08          	add    $0x8,%rax
  800420e62c:	48 8b 00             	mov    (%rax),%rax
  800420e62f:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e635:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e639:	89 c6                	mov    %eax,%esi
  800420e63b:	48 bf 20 e9 21 04 80 	movabs $0x800421e920,%rdi
  800420e642:	00 00 00 
  800420e645:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e64a:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e651:	00 00 00 
  800420e654:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e656:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e65b:	e9 a2 01 00 00       	jmpq   800420e802 <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420e660:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e663:	83 e0 02             	and    $0x2,%eax
  800420e666:	85 c0                	test   %eax,%eax
  800420e668:	74 6c                	je     800420e6d6 <sys_ipc_try_send+0x23d>
  800420e66a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e66e:	48 8b 00             	mov    (%rax),%rax
  800420e671:	83 e0 02             	and    $0x2,%eax
  800420e674:	48 85 c0             	test   %rax,%rax
  800420e677:	75 5d                	jne    800420e6d6 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e679:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e680:	00 00 00 
  800420e683:	ff d0                	callq  *%rax
  800420e685:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e68c:	00 00 00 
  800420e68f:	48 98                	cltq   
  800420e691:	48 c1 e0 03          	shl    $0x3,%rax
  800420e695:	48 89 c1             	mov    %rax,%rcx
  800420e698:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e69c:	48 01 c8             	add    %rcx,%rax
  800420e69f:	48 01 d0             	add    %rdx,%rax
  800420e6a2:	48 83 c0 08          	add    $0x8,%rax
  800420e6a6:	48 8b 00             	mov    (%rax),%rax
  800420e6a9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e6af:	89 c6                	mov    %eax,%esi
  800420e6b1:	48 bf 58 e9 21 04 80 	movabs $0x800421e958,%rdi
  800420e6b8:	00 00 00 
  800420e6bb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e6c0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420e6c7:	00 00 00 
  800420e6ca:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420e6cc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e6d1:	e9 2c 01 00 00       	jmpq   800420e802 <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e6d6:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e6d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e6dd:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e6e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e6e8:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e6ef:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e6f3:	48 89 c7             	mov    %rax,%rdi
  800420e6f6:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e6fd:	00 00 00 
  800420e700:	ff d0                	callq  *%rax
  800420e702:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420e705:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e709:	79 63                	jns    800420e76e <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e70b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e712:	00 00 00 
  800420e715:	ff d0                	callq  *%rax
  800420e717:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e71e:	00 00 00 
  800420e721:	48 98                	cltq   
  800420e723:	48 c1 e0 03          	shl    $0x3,%rax
  800420e727:	48 89 c1             	mov    %rax,%rcx
  800420e72a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e72e:	48 01 c8             	add    %rcx,%rax
  800420e731:	48 01 d0             	add    %rdx,%rax
  800420e734:	48 83 c0 08          	add    $0x8,%rax
  800420e738:	48 8b 00             	mov    (%rax),%rax
  800420e73b:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e741:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e744:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e748:	89 c6                	mov    %eax,%esi
  800420e74a:	48 bf a0 e9 21 04 80 	movabs $0x800421e9a0,%rdi
  800420e751:	00 00 00 
  800420e754:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e759:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420e760:	00 00 00 
  800420e763:	41 ff d0             	callq  *%r8
            return r;
  800420e766:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e769:	e9 94 00 00 00       	jmpq   800420e802 <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420e76e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e772:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e775:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e77b:	eb 0e                	jmp    800420e78b <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420e77d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e781:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e788:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420e78b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e78f:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420e796:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e79a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e7a1:	00 00 00 
  800420e7a4:	ff d0                	callq  *%rax
  800420e7a6:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e7ad:	00 00 00 
  800420e7b0:	48 98                	cltq   
  800420e7b2:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7b6:	48 89 c1             	mov    %rax,%rcx
  800420e7b9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7bd:	48 01 c8             	add    %rcx,%rax
  800420e7c0:	48 01 d0             	add    %rdx,%rax
  800420e7c3:	48 83 c0 08          	add    $0x8,%rax
  800420e7c7:	48 8b 00             	mov    (%rax),%rax
  800420e7ca:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e7d0:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420e7d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e7da:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e7dd:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e7e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e7e7:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e7ee:	00 
    e->env_status = ENV_RUNNABLE;
  800420e7ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e7f3:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e7fa:	00 00 00 
    return 0;
  800420e7fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e802:	48 83 c4 48          	add    $0x48,%rsp
  800420e806:	5b                   	pop    %rbx
  800420e807:	5d                   	pop    %rbp
  800420e808:	c3                   	retq   

000000800420e809 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e809:	55                   	push   %rbp
  800420e80a:	48 89 e5             	mov    %rsp,%rbp
  800420e80d:	48 83 ec 10          	sub    $0x10,%rsp
  800420e811:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e815:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e81c:	00 00 00 
  800420e81f:	ff d0                	callq  *%rax
  800420e821:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e828:	00 00 00 
  800420e82b:	48 98                	cltq   
  800420e82d:	48 c1 e0 03          	shl    $0x3,%rax
  800420e831:	48 89 c1             	mov    %rax,%rcx
  800420e834:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e838:	48 01 c8             	add    %rcx,%rax
  800420e83b:	48 01 d0             	add    %rdx,%rax
  800420e83e:	48 83 c0 08          	add    $0x8,%rax
  800420e842:	48 8b 00             	mov    (%rax),%rax
  800420e845:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e84c:	84 c0                	test   %al,%al
  800420e84e:	74 2a                	je     800420e87a <sys_ipc_recv+0x71>
		panic("already recving!");
  800420e850:	48 ba d9 e9 21 04 80 	movabs $0x800421e9d9,%rdx
  800420e857:	00 00 00 
  800420e85a:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420e85f:	48 bf ea e9 21 04 80 	movabs $0x800421e9ea,%rdi
  800420e866:	00 00 00 
  800420e869:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e86e:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420e875:	00 00 00 
  800420e878:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420e87a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e881:	00 00 00 
  800420e884:	ff d0                	callq  *%rax
  800420e886:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e88d:	00 00 00 
  800420e890:	48 98                	cltq   
  800420e892:	48 c1 e0 03          	shl    $0x3,%rax
  800420e896:	48 89 c1             	mov    %rax,%rcx
  800420e899:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e89d:	48 01 c8             	add    %rcx,%rax
  800420e8a0:	48 01 d0             	add    %rdx,%rax
  800420e8a3:	48 83 c0 08          	add    $0x8,%rax
  800420e8a7:	48 8b 00             	mov    (%rax),%rax
  800420e8aa:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420e8b1:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e8b8:	00 00 00 
  800420e8bb:	ff d0                	callq  *%rax
  800420e8bd:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e8c4:	00 00 00 
  800420e8c7:	48 98                	cltq   
  800420e8c9:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8cd:	48 89 c1             	mov    %rax,%rcx
  800420e8d0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e8d4:	48 01 c8             	add    %rcx,%rax
  800420e8d7:	48 01 d0             	add    %rdx,%rax
  800420e8da:	48 83 c0 08          	add    $0x8,%rax
  800420e8de:	48 8b 00             	mov    (%rax),%rax
  800420e8e1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e8e5:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420e8ec:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e8f3:	00 00 00 
  800420e8f6:	ff d0                	callq  *%rax
  800420e8f8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e8ff:	00 00 00 
  800420e902:	48 98                	cltq   
  800420e904:	48 c1 e0 03          	shl    $0x3,%rax
  800420e908:	48 89 c1             	mov    %rax,%rcx
  800420e90b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e90f:	48 01 c8             	add    %rcx,%rax
  800420e912:	48 01 d0             	add    %rdx,%rax
  800420e915:	48 83 c0 08          	add    $0x8,%rax
  800420e919:	48 8b 00             	mov    (%rax),%rax
  800420e91c:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e923:	00 00 00 
	sched_yield();
  800420e926:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420e92d:	00 00 00 
  800420e930:	ff d0                	callq  *%rax

000000800420e932 <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420e932:	55                   	push   %rbp
  800420e933:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420e936:	48 b8 40 92 21 04 80 	movabs $0x8004219240,%rax
  800420e93d:	00 00 00 
  800420e940:	ff d0                	callq  *%rax
}
  800420e942:	5d                   	pop    %rbp
  800420e943:	c3                   	retq   

000000800420e944 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420e944:	55                   	push   %rbp
  800420e945:	48 89 e5             	mov    %rsp,%rbp
  800420e948:	48 83 ec 10          	sub    $0x10,%rsp
  800420e94c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e950:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420e954:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e95b:	00 00 00 
  800420e95e:	ff d0                	callq  *%rax
  800420e960:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e967:	00 00 00 
  800420e96a:	48 98                	cltq   
  800420e96c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e970:	48 89 c1             	mov    %rax,%rcx
  800420e973:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e977:	48 01 c8             	add    %rcx,%rax
  800420e97a:	48 01 d0             	add    %rdx,%rax
  800420e97d:	48 83 c0 08          	add    $0x8,%rax
  800420e981:	48 8b 00             	mov    (%rax),%rax
  800420e984:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e988:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e98c:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e991:	48 89 c7             	mov    %rax,%rdi
  800420e994:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e99b:	00 00 00 
  800420e99e:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420e9a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e9a4:	89 c2                	mov    %eax,%edx
  800420e9a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e9aa:	89 d6                	mov    %edx,%esi
  800420e9ac:	48 89 c7             	mov    %rax,%rdi
  800420e9af:	48 b8 c9 83 21 04 80 	movabs $0x80042183c9,%rax
  800420e9b6:	00 00 00 
  800420e9b9:	ff d0                	callq  *%rax
}
  800420e9bb:	c9                   	leaveq 
  800420e9bc:	c3                   	retq   

000000800420e9bd <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420e9bd:	55                   	push   %rbp
  800420e9be:	48 89 e5             	mov    %rsp,%rbp
  800420e9c1:	48 83 ec 10          	sub    $0x10,%rsp
  800420e9c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e9c9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420e9cd:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420e9d4:	00 00 00 
  800420e9d7:	ff d0                	callq  *%rax
  800420e9d9:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e9e0:	00 00 00 
  800420e9e3:	48 98                	cltq   
  800420e9e5:	48 c1 e0 03          	shl    $0x3,%rax
  800420e9e9:	48 89 c1             	mov    %rax,%rcx
  800420e9ec:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e9f0:	48 01 c8             	add    %rcx,%rax
  800420e9f3:	48 01 d0             	add    %rdx,%rax
  800420e9f6:	48 83 c0 08          	add    $0x8,%rax
  800420e9fa:	48 8b 00             	mov    (%rax),%rax
  800420e9fd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ea01:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ea05:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420ea0a:	48 89 c7             	mov    %rax,%rdi
  800420ea0d:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420ea14:	00 00 00 
  800420ea17:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420ea19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ea1d:	89 c2                	mov    %eax,%edx
  800420ea1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ea23:	89 d6                	mov    %edx,%esi
  800420ea25:	48 89 c7             	mov    %rax,%rdi
  800420ea28:	48 b8 38 85 21 04 80 	movabs $0x8004218538,%rax
  800420ea2f:	00 00 00 
  800420ea32:	ff d0                	callq  *%rax
}
  800420ea34:	c9                   	leaveq 
  800420ea35:	c3                   	retq   

000000800420ea36 <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms() {
  800420ea36:	55                   	push   %rbp
  800420ea37:	48 89 e5             	mov    %rsp,%rbp
	vmx_list_vms();
  800420ea3a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea3f:	48 ba 0f 9a 21 04 80 	movabs $0x8004219a0f,%rdx
  800420ea46:	00 00 00 
  800420ea49:	ff d2                	callq  *%rdx
}
  800420ea4b:	5d                   	pop    %rbp
  800420ea4c:	c3                   	retq   

000000800420ea4d <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i) {
  800420ea4d:	55                   	push   %rbp
  800420ea4e:	48 89 e5             	mov    %rsp,%rbp
  800420ea51:	48 83 ec 10          	sub    $0x10,%rsp
  800420ea55:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return vmx_sel_resume(i);
  800420ea58:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ea5b:	89 c7                	mov    %eax,%edi
  800420ea5d:	48 b8 cf 9a 21 04 80 	movabs $0x8004219acf,%rax
  800420ea64:	00 00 00 
  800420ea67:	ff d0                	callq  *%rax
}
  800420ea69:	c9                   	leaveq 
  800420ea6a:	c3                   	retq   

000000800420ea6b <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number() {
  800420ea6b:	55                   	push   %rbp
  800420ea6c:	48 89 e5             	mov    %rsp,%rbp
	return vmx_get_vmdisk_number();
  800420ea6f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea74:	48 ba 68 c5 21 04 80 	movabs $0x800421c568,%rdx
  800420ea7b:	00 00 00 
  800420ea7e:	ff d2                	callq  *%rdx
}
  800420ea80:	5d                   	pop    %rbp
  800420ea81:	c3                   	retq   

000000800420ea82 <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number() {
  800420ea82:	55                   	push   %rbp
  800420ea83:	48 89 e5             	mov    %rsp,%rbp
	vmx_incr_vmdisk_number();
  800420ea86:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea8b:	48 ba 7a c5 21 04 80 	movabs $0x800421c57a,%rdx
  800420ea92:	00 00 00 
  800420ea95:	ff d2                	callq  *%rdx
}
  800420ea97:	5d                   	pop    %rbp
  800420ea98:	c3                   	retq   

000000800420ea99 <sys_ept_map>:
//       instead of the normal page table. 
// 
static int
sys_ept_map(envid_t srcenvid, void *srcva,
	    envid_t guest, void* guest_pa, int perm)
{
  800420ea99:	55                   	push   %rbp
  800420ea9a:	48 89 e5             	mov    %rsp,%rbp
  800420ea9d:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420eaa1:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420eaa4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420eaa8:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420eaab:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420eaaf:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
    /* Your code here */
    return 0;
  800420eab3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420eab8:	c9                   	leaveq 
  800420eab9:	c3                   	retq   

000000800420eaba <sys_env_mkguest>:

static envid_t
	sys_env_mkguest(uint64_t gphysz, uint64_t gRIP) {
  800420eaba:	55                   	push   %rbp
  800420eabb:	48 89 e5             	mov    %rsp,%rbp
  800420eabe:	48 83 ec 20          	sub    $0x20,%rsp
  800420eac2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420eac6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	// Check if the processor has VMX support.
	if ( !vmx_check_support() ) {
  800420eaca:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eacf:	48 ba a5 9b 21 04 80 	movabs $0x8004219ba5,%rdx
  800420ead6:	00 00 00 
  800420ead9:	ff d2                	callq  *%rdx
  800420eadb:	83 f0 01             	xor    $0x1,%eax
  800420eade:	84 c0                	test   %al,%al
  800420eae0:	74 0a                	je     800420eaec <sys_env_mkguest+0x32>
		return -E_NO_VMX;
  800420eae2:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420eae7:	e9 b1 00 00 00       	jmpq   800420eb9d <sys_env_mkguest+0xe3>
	} else if ( !vmx_check_ept() ) {
  800420eaec:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eaf1:	48 ba 26 9c 21 04 80 	movabs $0x8004219c26,%rdx
  800420eaf8:	00 00 00 
  800420eafb:	ff d2                	callq  *%rdx
  800420eafd:	83 f0 01             	xor    $0x1,%eax
  800420eb00:	84 c0                	test   %al,%al
  800420eb02:	74 0a                	je     800420eb0e <sys_env_mkguest+0x54>
		return -E_NO_EPT;
  800420eb04:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420eb09:	e9 8f 00 00 00       	jmpq   800420eb9d <sys_env_mkguest+0xe3>
	} 
	if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420eb0e:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420eb15:	00 00 00 
  800420eb18:	ff d0                	callq  *%rax
  800420eb1a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420eb21:	00 00 00 
  800420eb24:	48 98                	cltq   
  800420eb26:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb2a:	48 89 c1             	mov    %rax,%rcx
  800420eb2d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb31:	48 01 c8             	add    %rcx,%rax
  800420eb34:	48 01 d0             	add    %rdx,%rax
  800420eb37:	48 83 c0 08          	add    $0x8,%rax
  800420eb3b:	48 8b 00             	mov    (%rax),%rax
  800420eb3e:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420eb44:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420eb48:	89 d6                	mov    %edx,%esi
  800420eb4a:	48 89 c7             	mov    %rax,%rdi
  800420eb4d:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800420eb54:	00 00 00 
  800420eb57:	ff d0                	callq  *%rax
  800420eb59:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420eb5c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420eb60:	79 05                	jns    800420eb67 <sys_env_mkguest+0xad>
		return r;
  800420eb62:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420eb65:	eb 36                	jmp    800420eb9d <sys_env_mkguest+0xe3>
	e->env_status = ENV_NOT_RUNNABLE;
  800420eb67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb6b:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420eb72:	00 00 00 
	e->env_vmxinfo.phys_sz = gphysz;
  800420eb75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eb7d:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	e->env_tf.tf_rip = gRIP;
  800420eb84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb88:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420eb8c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return e->env_id;
  800420eb93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb97:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420eb9d:	c9                   	leaveq 
  800420eb9e:	c3                   	retq   

000000800420eb9f <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420eb9f:	55                   	push   %rbp
  800420eba0:	48 89 e5             	mov    %rsp,%rbp
  800420eba3:	48 83 ec 30          	sub    $0x30,%rsp
  800420eba7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ebab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ebaf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ebb3:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420ebb7:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420ebbb:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420ebbf:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420ebc4:	0f 87 c6 02 00 00    	ja     800420ee90 <syscall+0x2f1>
  800420ebca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ebce:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420ebd5:	00 
  800420ebd6:	48 b8 00 ea 21 04 80 	movabs $0x800421ea00,%rax
  800420ebdd:	00 00 00 
  800420ebe0:	48 01 d0             	add    %rdx,%rax
  800420ebe3:	48 8b 00             	mov    (%rax),%rax
  800420ebe6:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420ebe8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ebec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ebf0:	48 89 d6             	mov    %rdx,%rsi
  800420ebf3:	48 89 c7             	mov    %rax,%rdi
  800420ebf6:	48 b8 ff dd 20 04 80 	movabs $0x800420ddff,%rax
  800420ebfd:	00 00 00 
  800420ec00:	ff d0                	callq  *%rax
		return 0;
  800420ec02:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec07:	e9 8b 02 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_cgetc:
		return sys_cgetc();
  800420ec0c:	48 b8 83 de 20 04 80 	movabs $0x800420de83,%rax
  800420ec13:	00 00 00 
  800420ec16:	ff d0                	callq  *%rax
  800420ec18:	48 98                	cltq   
  800420ec1a:	e9 78 02 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_getenvid:
		return sys_getenvid();
  800420ec1f:	48 b8 95 de 20 04 80 	movabs $0x800420de95,%rax
  800420ec26:	00 00 00 
  800420ec29:	ff d0                	callq  *%rax
  800420ec2b:	48 98                	cltq   
  800420ec2d:	e9 65 02 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420ec32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec36:	89 c7                	mov    %eax,%edi
  800420ec38:	48 b8 d1 de 20 04 80 	movabs $0x800420ded1,%rax
  800420ec3f:	00 00 00 
  800420ec42:	ff d0                	callq  *%rax
  800420ec44:	48 98                	cltq   
  800420ec46:	e9 4c 02 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420ec4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ec4f:	89 c2                	mov    %eax,%edx
  800420ec51:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420ec55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec59:	48 89 ce             	mov    %rcx,%rsi
  800420ec5c:	89 c7                	mov    %eax,%edi
  800420ec5e:	48 b8 a4 e1 20 04 80 	movabs $0x800420e1a4,%rax
  800420ec65:	00 00 00 
  800420ec68:	ff d0                	callq  *%rax
  800420ec6a:	48 98                	cltq   
  800420ec6c:	e9 26 02 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ec71:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ec75:	89 c7                	mov    %eax,%edi
  800420ec77:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420ec7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ec7f:	89 c2                	mov    %eax,%edx
  800420ec81:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420ec85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec89:	41 89 f8             	mov    %edi,%r8d
  800420ec8c:	89 c7                	mov    %eax,%edi
  800420ec8e:	48 b8 8d e2 20 04 80 	movabs $0x800420e28d,%rax
  800420ec95:	00 00 00 
  800420ec98:	ff d0                	callq  *%rax
  800420ec9a:	48 98                	cltq   
  800420ec9c:	e9 f6 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420eca1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eca5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eca9:	48 89 d6             	mov    %rdx,%rsi
  800420ecac:	89 c7                	mov    %eax,%edi
  800420ecae:	48 b8 12 e4 20 04 80 	movabs $0x800420e412,%rax
  800420ecb5:	00 00 00 
  800420ecb8:	ff d0                	callq  *%rax
  800420ecba:	48 98                	cltq   
  800420ecbc:	e9 d6 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_exofork:
		return sys_exofork();
  800420ecc1:	48 b8 31 df 20 04 80 	movabs $0x800420df31,%rax
  800420ecc8:	00 00 00 
  800420eccb:	ff d0                	callq  *%rax
  800420eccd:	48 98                	cltq   
  800420eccf:	e9 c3 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420ecd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ecd8:	89 c2                	mov    %eax,%edx
  800420ecda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ecde:	89 d6                	mov    %edx,%esi
  800420ece0:	89 c7                	mov    %eax,%edi
  800420ece2:	48 b8 06 e0 20 04 80 	movabs $0x800420e006,%rax
  800420ece9:	00 00 00 
  800420ecec:	ff d0                	callq  *%rax
  800420ecee:	48 98                	cltq   
  800420ecf0:	e9 a2 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420ecf5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ecf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ecfd:	48 89 d6             	mov    %rdx,%rsi
  800420ed00:	89 c7                	mov    %eax,%edi
  800420ed02:	48 b8 66 e0 20 04 80 	movabs $0x800420e066,%rax
  800420ed09:	00 00 00 
  800420ed0c:	ff d0                	callq  *%rax
  800420ed0e:	48 98                	cltq   
  800420ed10:	e9 82 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420ed15:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ed19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed1d:	48 89 d6             	mov    %rdx,%rsi
  800420ed20:	89 c7                	mov    %eax,%edi
  800420ed22:	48 b8 54 e1 20 04 80 	movabs $0x800420e154,%rax
  800420ed29:	00 00 00 
  800420ed2c:	ff d0                	callq  *%rax
  800420ed2e:	48 98                	cltq   
  800420ed30:	e9 62 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_yield:
		sys_yield();
  800420ed35:	48 b8 21 df 20 04 80 	movabs $0x800420df21,%rax
  800420ed3c:	00 00 00 
  800420ed3f:	ff d0                	callq  *%rax
		return 0;
  800420ed41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ed46:	e9 4c 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420ed4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ed4f:	89 c1                	mov    %eax,%ecx
  800420ed51:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ed55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ed59:	89 c6                	mov    %eax,%esi
  800420ed5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed5f:	89 c7                	mov    %eax,%edi
  800420ed61:	48 b8 99 e4 20 04 80 	movabs $0x800420e499,%rax
  800420ed68:	00 00 00 
  800420ed6b:	ff d0                	callq  *%rax
  800420ed6d:	48 98                	cltq   
  800420ed6f:	e9 23 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420ed74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed78:	48 89 c7             	mov    %rax,%rdi
  800420ed7b:	48 b8 09 e8 20 04 80 	movabs $0x800420e809,%rax
  800420ed82:	00 00 00 
  800420ed85:	ff d0                	callq  *%rax
		return 0;
  800420ed87:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ed8c:	e9 06 01 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_time_msec:
		return sys_time_msec();
  800420ed91:	48 b8 32 e9 20 04 80 	movabs $0x800420e932,%rax
  800420ed98:	00 00 00 
  800420ed9b:	ff d0                	callq  *%rax
  800420ed9d:	48 98                	cltq   
  800420ed9f:	e9 f3 00 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420eda4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eda8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420edac:	48 89 d6             	mov    %rdx,%rsi
  800420edaf:	48 89 c7             	mov    %rax,%rdi
  800420edb2:	48 b8 44 e9 20 04 80 	movabs $0x800420e944,%rax
  800420edb9:	00 00 00 
  800420edbc:	ff d0                	callq  *%rax
  800420edbe:	48 98                	cltq   
  800420edc0:	e9 d2 00 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420edc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edc9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420edcd:	48 89 d6             	mov    %rdx,%rsi
  800420edd0:	48 89 c7             	mov    %rax,%rdi
  800420edd3:	48 b8 bd e9 20 04 80 	movabs $0x800420e9bd,%rax
  800420edda:	00 00 00 
  800420eddd:	ff d0                	callq  *%rax
  800420eddf:	48 98                	cltq   
  800420ede1:	e9 b1 00 00 00       	jmpq   800420ee97 <syscall+0x2f8>
#ifndef VMM_GUEST
	case SYS_ept_map:
		return sys_ept_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ede6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420edea:	89 c7                	mov    %eax,%edi
  800420edec:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420edf0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420edf4:	89 c2                	mov    %eax,%edx
  800420edf6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420edfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edfe:	41 89 f8             	mov    %edi,%r8d
  800420ee01:	89 c7                	mov    %eax,%edi
  800420ee03:	48 b8 99 ea 20 04 80 	movabs $0x800420ea99,%rax
  800420ee0a:	00 00 00 
  800420ee0d:	ff d0                	callq  *%rax
  800420ee0f:	48 98                	cltq   
  800420ee11:	e9 81 00 00 00       	jmpq   800420ee97 <syscall+0x2f8>
	case SYS_env_mkguest:
		return sys_env_mkguest(a1, a2);
  800420ee16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ee1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee1e:	48 89 d6             	mov    %rdx,%rsi
  800420ee21:	48 89 c7             	mov    %rax,%rdi
  800420ee24:	48 b8 ba ea 20 04 80 	movabs $0x800420eaba,%rax
  800420ee2b:	00 00 00 
  800420ee2e:	ff d0                	callq  *%rax
  800420ee30:	48 98                	cltq   
  800420ee32:	eb 63                	jmp    800420ee97 <syscall+0x2f8>
	case SYS_vmx_list_vms:
		sys_vmx_list_vms();
  800420ee34:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee39:	48 ba 36 ea 20 04 80 	movabs $0x800420ea36,%rdx
  800420ee40:	00 00 00 
  800420ee43:	ff d2                	callq  *%rdx
		return 0;
  800420ee45:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee4a:	eb 4b                	jmp    800420ee97 <syscall+0x2f8>
	case SYS_vmx_sel_resume:
		return sys_vmx_sel_resume(a1);
  800420ee4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee50:	89 c7                	mov    %eax,%edi
  800420ee52:	48 b8 4d ea 20 04 80 	movabs $0x800420ea4d,%rax
  800420ee59:	00 00 00 
  800420ee5c:	ff d0                	callq  *%rax
  800420ee5e:	0f b6 c0             	movzbl %al,%eax
  800420ee61:	eb 34                	jmp    800420ee97 <syscall+0x2f8>
	case SYS_vmx_get_vmdisk_number:
		return sys_vmx_get_vmdisk_number();
  800420ee63:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee68:	48 ba 6b ea 20 04 80 	movabs $0x800420ea6b,%rdx
  800420ee6f:	00 00 00 
  800420ee72:	ff d2                	callq  *%rdx
  800420ee74:	48 98                	cltq   
  800420ee76:	eb 1f                	jmp    800420ee97 <syscall+0x2f8>
	case SYS_vmx_incr_vmdisk_number:
		sys_vmx_incr_vmdisk_number();
  800420ee78:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee7d:	48 ba 82 ea 20 04 80 	movabs $0x800420ea82,%rdx
  800420ee84:	00 00 00 
  800420ee87:	ff d2                	callq  *%rdx
		return 0;
  800420ee89:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee8e:	eb 07                	jmp    800420ee97 <syscall+0x2f8>
#endif

	default:
		return -E_NO_SYS;
  800420ee90:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420ee97:	c9                   	leaveq 
  800420ee98:	c3                   	retq   

000000800420ee99 <list_func_die>:
  800420ee99:	55                   	push   %rbp
  800420ee9a:	48 89 e5             	mov    %rsp,%rbp
  800420ee9d:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420eea4:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420eeab:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420eeb2:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420eeb9:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420eec0:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420eec7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420eecb:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420eed2:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420eed9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420eedd:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420eee4:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420eeeb:	48 89 d1             	mov    %rdx,%rcx
  800420eeee:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420eef3:	48 89 ce             	mov    %rcx,%rsi
  800420eef6:	48 89 c7             	mov    %rax,%rdi
  800420eef9:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  800420ef00:	00 00 00 
  800420ef03:	ff d0                	callq  *%rax
  800420ef05:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420ef0c:	00 
  800420ef0d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ef14:	00 
  800420ef15:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ef1c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ef20:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420ef24:	74 0a                	je     800420ef30 <list_func_die+0x97>
  800420ef26:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef2b:	e9 cd 06 00 00       	jmpq   800420f5fd <list_func_die+0x764>
  800420ef30:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420ef37:	ba 38 00 00 00       	mov    $0x38,%edx
  800420ef3c:	be 00 00 00 00       	mov    $0x0,%esi
  800420ef41:	48 89 c7             	mov    %rax,%rdi
  800420ef44:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  800420ef4b:	00 00 00 
  800420ef4e:	ff d0                	callq  *%rax
  800420ef50:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ef57:	be 11 00 00 00       	mov    $0x11,%esi
  800420ef5c:	48 89 c7             	mov    %rax,%rdi
  800420ef5f:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420ef66:	00 00 00 
  800420ef69:	ff d0                	callq  *%rax
  800420ef6b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420ef6f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ef76:	be 12 00 00 00       	mov    $0x12,%esi
  800420ef7b:	48 89 c7             	mov    %rax,%rdi
  800420ef7e:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420ef85:	00 00 00 
  800420ef88:	ff d0                	callq  *%rax
  800420ef8a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420ef8e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420ef93:	0f 84 5f 06 00 00    	je     800420f5f8 <list_func_die+0x75f>
  800420ef99:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ef9d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420efa1:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420efa8:	0f 83 4a 06 00 00    	jae    800420f5f8 <list_func_die+0x75f>
  800420efae:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420efb3:	0f 84 3f 06 00 00    	je     800420f5f8 <list_func_die+0x75f>
  800420efb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420efbd:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420efc1:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420efc8:	0f 86 2a 06 00 00    	jbe    800420f5f8 <list_func_die+0x75f>
  800420efce:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420efd5:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420efdc:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420efe3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420efea:	48 89 10             	mov    %rdx,(%rax)
  800420efed:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420eff4:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420effb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f002:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f006:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f00d:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f014:	48 89 c7             	mov    %rax,%rdi
  800420f017:	48 b8 8e 06 21 04 80 	movabs $0x800421068e,%rax
  800420f01e:	00 00 00 
  800420f021:	ff d0                	callq  *%rax
  800420f023:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f02a:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f02d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f031:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f035:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f03c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f040:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f047:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f04e:	48 85 c0             	test   %rax,%rax
  800420f051:	75 35                	jne    800420f088 <list_func_die+0x1ef>
  800420f053:	48 b9 e0 ed 21 04 80 	movabs $0x800421ede0,%rcx
  800420f05a:	00 00 00 
  800420f05d:	48 ba ec ed 21 04 80 	movabs $0x800421edec,%rdx
  800420f064:	00 00 00 
  800420f067:	be 95 00 00 00       	mov    $0x95,%esi
  800420f06c:	48 bf 01 ee 21 04 80 	movabs $0x800421ee01,%rdi
  800420f073:	00 00 00 
  800420f076:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f07b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f082:	00 00 00 
  800420f085:	41 ff d0             	callq  *%r8
  800420f088:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f08f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f096:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f09d:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f0a4:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f0a9:	48 89 c7             	mov    %rax,%rdi
  800420f0ac:	48 b8 ef 5e 21 04 80 	movabs $0x8004215eef,%rax
  800420f0b3:	00 00 00 
  800420f0b6:	ff d0                	callq  *%rax
  800420f0b8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f0bf:	89 c2                	mov    %eax,%edx
  800420f0c1:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f0c8:	89 50 08             	mov    %edx,0x8(%rax)
  800420f0cb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f0d2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f0d9:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f0e0:	00 00 00 
  800420f0e3:	48 8b 00             	mov    (%rax),%rax
  800420f0e6:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f0ed:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f0f4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f0f8:	48 89 c7             	mov    %rax,%rdi
  800420f0fb:	48 b8 9f 2b 21 04 80 	movabs $0x8004212b9f,%rax
  800420f102:	00 00 00 
  800420f105:	ff d0                	callq  *%rax
  800420f107:	83 f8 04             	cmp    $0x4,%eax
  800420f10a:	0f 84 e1 04 00 00    	je     800420f5f1 <list_func_die+0x758>
  800420f110:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f117:	48 83 f8 05          	cmp    $0x5,%rax
  800420f11b:	74 05                	je     800420f122 <list_func_die+0x289>
  800420f11d:	e9 cf 04 00 00       	jmpq   800420f5f1 <list_func_die+0x758>
  800420f122:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f129:	be 49 00 00 00       	mov    $0x49,%esi
  800420f12e:	48 89 c7             	mov    %rax,%rdi
  800420f131:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f138:	00 00 00 
  800420f13b:	ff d0                	callq  *%rax
  800420f13d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f141:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f146:	0f 84 d7 00 00 00    	je     800420f223 <list_func_die+0x38a>
  800420f14c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f150:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f158:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f15c:	48 01 d0             	add    %rdx,%rax
  800420f15f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f163:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f16a:	00 00 00 
  800420f16d:	48 8b 08             	mov    (%rax),%rcx
  800420f170:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f177:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f17b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f17f:	48 8b 38             	mov    (%rax),%rdi
  800420f182:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f186:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f18a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f18f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f193:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f198:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f19c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f1a1:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f1a5:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f1aa:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f1ae:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f1b3:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f1b7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f1bc:	48 89 cf             	mov    %rcx,%rdi
  800420f1bf:	48 b8 c5 27 21 04 80 	movabs $0x80042127c5,%rax
  800420f1c6:	00 00 00 
  800420f1c9:	ff d0                	callq  *%rax
  800420f1cb:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f1d2:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f1d7:	48 89 c7             	mov    %rax,%rdi
  800420f1da:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f1e1:	00 00 00 
  800420f1e4:	ff d0                	callq  *%rax
  800420f1e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f1ea:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f1ef:	74 0e                	je     800420f1ff <list_func_die+0x366>
  800420f1f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1f5:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f1f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f1fd:	eb 24                	jmp    800420f223 <list_func_die+0x38a>
  800420f1ff:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f206:	be 49 00 00 00       	mov    $0x49,%esi
  800420f20b:	48 89 c7             	mov    %rax,%rdi
  800420f20e:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f215:	00 00 00 
  800420f218:	ff d0                	callq  *%rax
  800420f21a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f21e:	e9 1e ff ff ff       	jmpq   800420f141 <list_func_die+0x2a8>
  800420f223:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f22a:	00 
  800420f22b:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f232:	be 02 00 00 00       	mov    $0x2,%esi
  800420f237:	48 89 c7             	mov    %rax,%rdi
  800420f23a:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f241:	00 00 00 
  800420f244:	ff d0                	callq  *%rax
  800420f246:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f24a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f24f:	0f 84 a2 00 00 00    	je     800420f2f7 <list_func_die+0x45e>
  800420f255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f259:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f25d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f265:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f269:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f26d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f271:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f275:	48 83 f8 03          	cmp    $0x3,%rax
  800420f279:	72 7c                	jb     800420f2f7 <list_func_die+0x45e>
  800420f27b:	48 83 f8 04          	cmp    $0x4,%rax
  800420f27f:	76 06                	jbe    800420f287 <list_func_die+0x3ee>
  800420f281:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f285:	75 70                	jne    800420f2f7 <list_func_die+0x45e>
  800420f287:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f28e:	00 
  800420f28f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f293:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f297:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f29b:	0f b6 00             	movzbl (%rax),%eax
  800420f29e:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f2a1:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f2a6:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f2aa:	75 4a                	jne    800420f2f6 <list_func_die+0x45d>
  800420f2ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f2b0:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f2b7:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f2be:	48 89 c7             	mov    %rax,%rdi
  800420f2c1:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  800420f2c8:	00 00 00 
  800420f2cb:	ff d0                	callq  *%rax
  800420f2cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f2d1:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f2d8:	48 89 c2             	mov    %rax,%rdx
  800420f2db:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f2df:	48 29 c2             	sub    %rax,%rdx
  800420f2e2:	48 89 d0             	mov    %rdx,%rax
  800420f2e5:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f2e9:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f2f0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f2f4:	eb 00                	jmp    800420f2f6 <list_func_die+0x45d>
  800420f2f6:	90                   	nop
  800420f2f7:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2fe:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f305:	89 c2                	mov    %eax,%edx
  800420f307:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f30e:	48 63 c9             	movslq %ecx,%rcx
  800420f311:	48 83 c1 08          	add    $0x8,%rcx
  800420f315:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f319:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f320:	8b 50 28             	mov    0x28(%rax),%edx
  800420f323:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f32a:	48 63 d2             	movslq %edx,%rdx
  800420f32d:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f331:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f335:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f33a:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f341:	8b 40 28             	mov    0x28(%rax),%eax
  800420f344:	8d 50 01             	lea    0x1(%rax),%edx
  800420f347:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f34e:	89 50 28             	mov    %edx,0x28(%rax)
  800420f351:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f358:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f35f:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f364:	48 89 ce             	mov    %rcx,%rsi
  800420f367:	48 89 c7             	mov    %rax,%rdi
  800420f36a:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  800420f371:	00 00 00 
  800420f374:	ff d0                	callq  *%rax
  800420f376:	e9 40 02 00 00       	jmpq   800420f5bb <list_func_die+0x722>
  800420f37b:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f382:	48 83 f8 05          	cmp    $0x5,%rax
  800420f386:	74 05                	je     800420f38d <list_func_die+0x4f4>
  800420f388:	e9 64 02 00 00       	jmpq   800420f5f1 <list_func_die+0x758>
  800420f38d:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f394:	be 49 00 00 00       	mov    $0x49,%esi
  800420f399:	48 89 c7             	mov    %rax,%rdi
  800420f39c:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f3a3:	00 00 00 
  800420f3a6:	ff d0                	callq  *%rax
  800420f3a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f3ac:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f3b1:	0f 84 b1 00 00 00    	je     800420f468 <list_func_die+0x5cf>
  800420f3b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f3bb:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f3bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3c3:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f3c7:	48 01 d0             	add    %rdx,%rax
  800420f3ca:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f3ce:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f3d5:	00 00 00 
  800420f3d8:	48 8b 08             	mov    (%rax),%rcx
  800420f3db:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f3e2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f3e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f3ea:	48 8b 38             	mov    (%rax),%rdi
  800420f3ed:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f3f1:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f3f5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f3fa:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f3fe:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f403:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f407:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f40c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f410:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f415:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f419:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f41e:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f422:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f427:	48 89 cf             	mov    %rcx,%rdi
  800420f42a:	48 b8 c5 27 21 04 80 	movabs $0x80042127c5,%rax
  800420f431:	00 00 00 
  800420f434:	ff d0                	callq  *%rax
  800420f436:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f43d:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f442:	48 89 c7             	mov    %rax,%rdi
  800420f445:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f44c:	00 00 00 
  800420f44f:	ff d0                	callq  *%rax
  800420f451:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f455:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f45a:	74 0c                	je     800420f468 <list_func_die+0x5cf>
  800420f45c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f460:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f464:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f468:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f46f:	00 
  800420f470:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f477:	be 02 00 00 00       	mov    $0x2,%esi
  800420f47c:	48 89 c7             	mov    %rax,%rdi
  800420f47f:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  800420f486:	00 00 00 
  800420f489:	ff d0                	callq  *%rax
  800420f48b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f48f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f494:	0f 84 a2 00 00 00    	je     800420f53c <list_func_die+0x6a3>
  800420f49a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f49e:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f4a2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420f4a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4aa:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f4ae:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f4b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4b6:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f4ba:	48 83 f8 03          	cmp    $0x3,%rax
  800420f4be:	72 7c                	jb     800420f53c <list_func_die+0x6a3>
  800420f4c0:	48 83 f8 04          	cmp    $0x4,%rax
  800420f4c4:	76 06                	jbe    800420f4cc <list_func_die+0x633>
  800420f4c6:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f4ca:	75 70                	jne    800420f53c <list_func_die+0x6a3>
  800420f4cc:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f4d3:	00 
  800420f4d4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f4d8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f4dc:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f4e0:	0f b6 00             	movzbl (%rax),%eax
  800420f4e3:	88 45 97             	mov    %al,-0x69(%rbp)
  800420f4e6:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f4eb:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420f4ef:	75 4a                	jne    800420f53b <list_func_die+0x6a2>
  800420f4f1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f4f5:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420f4fc:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420f503:	48 89 c7             	mov    %rax,%rdi
  800420f506:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  800420f50d:	00 00 00 
  800420f510:	ff d0                	callq  *%rax
  800420f512:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f516:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f51d:	48 89 c2             	mov    %rax,%rdx
  800420f520:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f524:	48 29 c2             	sub    %rax,%rdx
  800420f527:	48 89 d0             	mov    %rdx,%rax
  800420f52a:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f52e:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f535:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f539:	eb 00                	jmp    800420f53b <list_func_die+0x6a2>
  800420f53b:	90                   	nop
  800420f53c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f543:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f54a:	89 c2                	mov    %eax,%edx
  800420f54c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f553:	48 63 c9             	movslq %ecx,%rcx
  800420f556:	48 83 c1 08          	add    $0x8,%rcx
  800420f55a:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f55e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f565:	8b 50 28             	mov    0x28(%rax),%edx
  800420f568:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f56f:	48 63 d2             	movslq %edx,%rdx
  800420f572:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f576:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f57a:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f57f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f586:	8b 40 28             	mov    0x28(%rax),%eax
  800420f589:	8d 50 01             	lea    0x1(%rax),%edx
  800420f58c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f593:	89 50 28             	mov    %edx,0x28(%rax)
  800420f596:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f59d:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f5a4:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f5a9:	48 89 ce             	mov    %rcx,%rsi
  800420f5ac:	48 89 c7             	mov    %rax,%rdi
  800420f5af:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  800420f5b6:	00 00 00 
  800420f5b9:	ff d0                	callq  *%rax
  800420f5bb:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f5c2:	00 00 00 
  800420f5c5:	48 8b 00             	mov    (%rax),%rax
  800420f5c8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f5cc:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420f5d3:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420f5da:	48 89 c7             	mov    %rax,%rdi
  800420f5dd:	48 b8 5b 29 21 04 80 	movabs $0x800421295b,%rax
  800420f5e4:	00 00 00 
  800420f5e7:	ff d0                	callq  *%rax
  800420f5e9:	85 c0                	test   %eax,%eax
  800420f5eb:	0f 84 8a fd ff ff    	je     800420f37b <list_func_die+0x4e2>
  800420f5f1:	b8 01 00 00 00       	mov    $0x1,%eax
  800420f5f6:	eb 05                	jmp    800420f5fd <list_func_die+0x764>
  800420f5f8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f5fd:	c9                   	leaveq 
  800420f5fe:	c3                   	retq   

000000800420f5ff <debuginfo_rip>:
  800420f5ff:	55                   	push   %rbp
  800420f600:	48 89 e5             	mov    %rsp,%rbp
  800420f603:	53                   	push   %rbx
  800420f604:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420f60b:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420f612:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420f619:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420f620:	00 
  800420f621:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420f628:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f62c:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f633:	48 bb 12 ee 21 04 80 	movabs $0x800421ee12,%rbx
  800420f63a:	00 00 00 
  800420f63d:	48 89 18             	mov    %rbx,(%rax)
  800420f640:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f647:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420f64e:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f655:	48 bb 12 ee 21 04 80 	movabs $0x800421ee12,%rbx
  800420f65c:	00 00 00 
  800420f65f:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420f663:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f66a:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420f671:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f678:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f67f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f683:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f68a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f691:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420f698:	00 00 00 
  800420f69b:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420f6a2:	76 13                	jbe    800420f6b7 <debuginfo_rip+0xb8>
  800420f6a4:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420f6ab:	00 00 00 
  800420f6ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f6b2:	e9 04 01 00 00       	jmpq   800420f7bb <debuginfo_rip+0x1bc>
  800420f6b7:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420f6be:	00 00 00 
  800420f6c1:	ff d0                	callq  *%rax
  800420f6c3:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f6ca:	00 00 00 
  800420f6cd:	48 98                	cltq   
  800420f6cf:	48 c1 e0 03          	shl    $0x3,%rax
  800420f6d3:	48 89 c1             	mov    %rax,%rcx
  800420f6d6:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f6da:	48 01 c8             	add    %rcx,%rax
  800420f6dd:	48 01 d0             	add    %rdx,%rax
  800420f6e0:	48 83 c0 08          	add    $0x8,%rax
  800420f6e4:	48 8b 10             	mov    (%rax),%rdx
  800420f6e7:	48 b8 98 c2 4d 04 80 	movabs $0x80044dc298,%rax
  800420f6ee:	00 00 00 
  800420f6f1:	48 8b 00             	mov    (%rax),%rax
  800420f6f4:	48 39 c2             	cmp    %rax,%rdx
  800420f6f7:	0f 84 83 00 00 00    	je     800420f780 <debuginfo_rip+0x181>
  800420f6fd:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420f704:	00 00 00 
  800420f707:	ff d0                	callq  *%rax
  800420f709:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f710:	00 00 00 
  800420f713:	48 98                	cltq   
  800420f715:	48 c1 e0 03          	shl    $0x3,%rax
  800420f719:	48 89 c1             	mov    %rax,%rcx
  800420f71c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f720:	48 01 c8             	add    %rcx,%rax
  800420f723:	48 01 d0             	add    %rdx,%rax
  800420f726:	48 83 c0 08          	add    $0x8,%rax
  800420f72a:	48 8b 00             	mov    (%rax),%rax
  800420f72d:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f734:	48 89 c7             	mov    %rax,%rdi
  800420f737:	48 b8 ea 60 21 04 80 	movabs $0x80042160ea,%rax
  800420f73e:	00 00 00 
  800420f741:	ff d0                	callq  *%rax
  800420f743:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420f74a:	00 00 00 
  800420f74d:	ff d0                	callq  *%rax
  800420f74f:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f756:	00 00 00 
  800420f759:	48 98                	cltq   
  800420f75b:	48 c1 e0 03          	shl    $0x3,%rax
  800420f75f:	48 89 c1             	mov    %rax,%rcx
  800420f762:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f766:	48 01 c8             	add    %rcx,%rax
  800420f769:	48 01 d0             	add    %rdx,%rax
  800420f76c:	48 83 c0 08          	add    $0x8,%rax
  800420f770:	48 8b 10             	mov    (%rax),%rdx
  800420f773:	48 b8 98 c2 4d 04 80 	movabs $0x80044dc298,%rax
  800420f77a:	00 00 00 
  800420f77d:	48 89 10             	mov    %rdx,(%rax)
  800420f780:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800420f787:	00 00 00 
  800420f78a:	ff d0                	callq  *%rax
  800420f78c:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f793:	00 00 00 
  800420f796:	48 98                	cltq   
  800420f798:	48 c1 e0 03          	shl    $0x3,%rax
  800420f79c:	48 89 c1             	mov    %rax,%rcx
  800420f79f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f7a3:	48 01 c8             	add    %rcx,%rax
  800420f7a6:	48 01 d0             	add    %rdx,%rax
  800420f7a9:	48 83 c0 08          	add    $0x8,%rax
  800420f7ad:	48 8b 00             	mov    (%rax),%rax
  800420f7b0:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f7b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7bb:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f7c2:	00 00 00 
  800420f7c5:	48 8b 00             	mov    (%rax),%rax
  800420f7c8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f7cc:	48 89 d6             	mov    %rdx,%rsi
  800420f7cf:	48 89 c7             	mov    %rax,%rdi
  800420f7d2:	48 b8 d3 17 21 04 80 	movabs $0x80042117d3,%rax
  800420f7d9:	00 00 00 
  800420f7dc:	ff d0                	callq  *%rax
  800420f7de:	48 bf 1c ee 21 04 80 	movabs $0x800421ee1c,%rdi
  800420f7e5:	00 00 00 
  800420f7e8:	48 b8 6a 60 21 04 80 	movabs $0x800421606a,%rax
  800420f7ef:	00 00 00 
  800420f7f2:	ff d0                	callq  *%rax
  800420f7f4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f7f8:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f7ff:	00 00 00 
  800420f802:	48 8b 00             	mov    (%rax),%rax
  800420f805:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f809:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420f80d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420f811:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f818:	00 00 00 
  800420f81b:	48 8b 00             	mov    (%rax),%rax
  800420f81e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f822:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420f826:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f82a:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f831:	00 00 00 
  800420f834:	48 8b 00             	mov    (%rax),%rax
  800420f837:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420f83b:	48 85 c0             	test   %rax,%rax
  800420f83e:	75 35                	jne    800420f875 <debuginfo_rip+0x276>
  800420f840:	48 b9 28 ee 21 04 80 	movabs $0x800421ee28,%rcx
  800420f847:	00 00 00 
  800420f84a:	48 ba ec ed 21 04 80 	movabs $0x800421edec,%rdx
  800420f851:	00 00 00 
  800420f854:	be 40 01 00 00       	mov    $0x140,%esi
  800420f859:	48 bf 01 ee 21 04 80 	movabs $0x800421ee01,%rdi
  800420f860:	00 00 00 
  800420f863:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f868:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f86f:	00 00 00 
  800420f872:	41 ff d0             	callq  *%r8
  800420f875:	e9 6f 01 00 00       	jmpq   800420f9e9 <debuginfo_rip+0x3ea>
  800420f87a:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f881:	00 00 00 
  800420f884:	48 8b 00             	mov    (%rax),%rax
  800420f887:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f88b:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420f892:	be 00 00 00 00       	mov    $0x0,%esi
  800420f897:	48 89 c7             	mov    %rax,%rdi
  800420f89a:	48 b8 5b 29 21 04 80 	movabs $0x800421295b,%rax
  800420f8a1:	00 00 00 
  800420f8a4:	ff d0                	callq  *%rax
  800420f8a6:	83 f8 04             	cmp    $0x4,%eax
  800420f8a9:	75 05                	jne    800420f8b0 <debuginfo_rip+0x2b1>
  800420f8ab:	e9 39 01 00 00       	jmpq   800420f9e9 <debuginfo_rip+0x3ea>
  800420f8b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f8b4:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420f8bb:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420f8c2:	00 00 00 00 
  800420f8c6:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f8cd:	00 00 00 
  800420f8d0:	48 8b 00             	mov    (%rax),%rax
  800420f8d3:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420f8da:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420f8e1:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420f8e5:	48 89 c7             	mov    %rax,%rdi
  800420f8e8:	48 b8 9f 2b 21 04 80 	movabs $0x8004212b9f,%rax
  800420f8ef:	00 00 00 
  800420f8f2:	ff d0                	callq  *%rax
  800420f8f4:	83 f8 04             	cmp    $0x4,%eax
  800420f8f7:	75 05                	jne    800420f8fe <debuginfo_rip+0x2ff>
  800420f8f9:	e9 eb 00 00 00       	jmpq   800420f9e9 <debuginfo_rip+0x3ea>
  800420f8fe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f902:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f909:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f910:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f917:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f91e:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420f925:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f92c:	48 89 ce             	mov    %rcx,%rsi
  800420f92f:	48 89 c7             	mov    %rax,%rdi
  800420f932:	48 b8 99 ee 20 04 80 	movabs $0x800420ee99,%rax
  800420f939:	00 00 00 
  800420f93c:	ff d0                	callq  *%rax
  800420f93e:	85 c0                	test   %eax,%eax
  800420f940:	74 30                	je     800420f972 <debuginfo_rip+0x373>
  800420f942:	90                   	nop
  800420f943:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f94a:	00 00 00 
  800420f94d:	48 8b 00             	mov    (%rax),%rax
  800420f950:	be 00 00 00 00       	mov    $0x0,%esi
  800420f955:	48 89 c7             	mov    %rax,%rdi
  800420f958:	48 b8 77 52 21 04 80 	movabs $0x8004215277,%rax
  800420f95f:	00 00 00 
  800420f962:	ff d0                	callq  *%rax
  800420f964:	83 f8 01             	cmp    $0x1,%eax
  800420f967:	0f 85 bb 00 00 00    	jne    800420fa28 <debuginfo_rip+0x429>
  800420f96d:	e9 ac 00 00 00       	jmpq   800420fa1e <debuginfo_rip+0x41f>
  800420f972:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f979:	00 00 00 
  800420f97c:	48 8b 00             	mov    (%rax),%rax
  800420f97f:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f983:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420f98a:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420f991:	48 89 c7             	mov    %rax,%rdi
  800420f994:	48 b8 5b 29 21 04 80 	movabs $0x800421295b,%rax
  800420f99b:	00 00 00 
  800420f99e:	ff d0                	callq  *%rax
  800420f9a0:	85 c0                	test   %eax,%eax
  800420f9a2:	79 02                	jns    800420f9a6 <debuginfo_rip+0x3a7>
  800420f9a4:	eb 43                	jmp    800420f9e9 <debuginfo_rip+0x3ea>
  800420f9a6:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420f9ad:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420f9b4:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f9b9:	48 89 ce             	mov    %rcx,%rsi
  800420f9bc:	48 89 c7             	mov    %rax,%rdi
  800420f9bf:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  800420f9c6:	00 00 00 
  800420f9c9:	ff d0                	callq  *%rax
  800420f9cb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f9cf:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f9d6:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f9dd:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f9e4:	e9 2e ff ff ff       	jmpq   800420f917 <debuginfo_rip+0x318>
  800420f9e9:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f9f0:	00 00 00 
  800420f9f3:	48 8b 00             	mov    (%rax),%rax
  800420f9f6:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420f9fa:	48 89 d6             	mov    %rdx,%rsi
  800420f9fd:	48 89 c7             	mov    %rax,%rdi
  800420fa00:	48 b8 b5 18 21 04 80 	movabs $0x80042118b5,%rax
  800420fa07:	00 00 00 
  800420fa0a:	ff d0                	callq  *%rax
  800420fa0c:	85 c0                	test   %eax,%eax
  800420fa0e:	0f 84 66 fe ff ff    	je     800420f87a <debuginfo_rip+0x27b>
  800420fa14:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fa19:	e9 a0 00 00 00       	jmpq   800420fabe <debuginfo_rip+0x4bf>
  800420fa1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fa23:	e9 96 00 00 00       	jmpq   800420fabe <debuginfo_rip+0x4bf>
  800420fa28:	48 b8 80 36 23 04 80 	movabs $0x8004233680,%rax
  800420fa2f:	00 00 00 
  800420fa32:	48 8b 08             	mov    (%rax),%rcx
  800420fa35:	48 b8 78 36 23 04 80 	movabs $0x8004233678,%rax
  800420fa3c:	00 00 00 
  800420fa3f:	48 8b 10             	mov    (%rax),%rdx
  800420fa42:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420fa49:	00 00 00 
  800420fa4c:	48 8b 00             	mov    (%rax),%rax
  800420fa4f:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420fa56:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fa5c:	48 89 c7             	mov    %rax,%rdi
  800420fa5f:	48 b8 e0 2d 21 04 80 	movabs $0x8004212de0,%rax
  800420fa66:	00 00 00 
  800420fa69:	ff d0                	callq  *%rax
  800420fa6b:	85 c0                	test   %eax,%eax
  800420fa6d:	75 4a                	jne    800420fab9 <debuginfo_rip+0x4ba>
  800420fa6f:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fa76:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420fa7d:	48 b8 78 36 23 04 80 	movabs $0x8004233678,%rax
  800420fa84:	00 00 00 
  800420fa87:	48 8b 30             	mov    (%rax),%rsi
  800420fa8a:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420fa91:	00 00 00 
  800420fa94:	48 8b 00             	mov    (%rax),%rax
  800420fa97:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fa9e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420faa4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420faaa:	48 89 c7             	mov    %rax,%rdi
  800420faad:	48 b8 ec 40 21 04 80 	movabs $0x80042140ec,%rax
  800420fab4:	00 00 00 
  800420fab7:	ff d0                	callq  *%rax
  800420fab9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fabe:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420fac5:	5b                   	pop    %rbx
  800420fac6:	5d                   	pop    %rbp
  800420fac7:	c3                   	retq   

000000800420fac8 <printnum>:
  800420fac8:	55                   	push   %rbp
  800420fac9:	48 89 e5             	mov    %rsp,%rbp
  800420facc:	53                   	push   %rbx
  800420facd:	48 83 ec 38          	sub    $0x38,%rsp
  800420fad1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fad5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fad9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fadd:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420fae0:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420fae4:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420fae8:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420faeb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420faef:	77 3b                	ja     800420fb2c <printnum+0x64>
  800420faf1:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420faf4:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420faf8:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420fafb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420faff:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fb04:	48 f7 f3             	div    %rbx
  800420fb07:	48 89 c2             	mov    %rax,%rdx
  800420fb0a:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420fb0d:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fb10:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420fb14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb18:	41 89 f9             	mov    %edi,%r9d
  800420fb1b:	48 89 c7             	mov    %rax,%rdi
  800420fb1e:	48 b8 c8 fa 20 04 80 	movabs $0x800420fac8,%rax
  800420fb25:	00 00 00 
  800420fb28:	ff d0                	callq  *%rax
  800420fb2a:	eb 1e                	jmp    800420fb4a <printnum+0x82>
  800420fb2c:	eb 12                	jmp    800420fb40 <printnum+0x78>
  800420fb2e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fb32:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420fb35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb39:	48 89 ce             	mov    %rcx,%rsi
  800420fb3c:	89 d7                	mov    %edx,%edi
  800420fb3e:	ff d0                	callq  *%rax
  800420fb40:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420fb44:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420fb48:	7f e4                	jg     800420fb2e <printnum+0x66>
  800420fb4a:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fb4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fb51:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fb56:	48 f7 f1             	div    %rcx
  800420fb59:	48 89 d0             	mov    %rdx,%rax
  800420fb5c:	48 ba 30 f0 21 04 80 	movabs $0x800421f030,%rdx
  800420fb63:	00 00 00 
  800420fb66:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420fb6a:	0f be d0             	movsbl %al,%edx
  800420fb6d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fb71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb75:	48 89 ce             	mov    %rcx,%rsi
  800420fb78:	89 d7                	mov    %edx,%edi
  800420fb7a:	ff d0                	callq  *%rax
  800420fb7c:	48 83 c4 38          	add    $0x38,%rsp
  800420fb80:	5b                   	pop    %rbx
  800420fb81:	5d                   	pop    %rbp
  800420fb82:	c3                   	retq   

000000800420fb83 <getuint>:
  800420fb83:	55                   	push   %rbp
  800420fb84:	48 89 e5             	mov    %rsp,%rbp
  800420fb87:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fb8b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fb8f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fb92:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fb96:	7e 52                	jle    800420fbea <getuint+0x67>
  800420fb98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb9c:	8b 00                	mov    (%rax),%eax
  800420fb9e:	83 f8 30             	cmp    $0x30,%eax
  800420fba1:	73 24                	jae    800420fbc7 <getuint+0x44>
  800420fba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fba7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fbab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbaf:	8b 00                	mov    (%rax),%eax
  800420fbb1:	89 c0                	mov    %eax,%eax
  800420fbb3:	48 01 d0             	add    %rdx,%rax
  800420fbb6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fbba:	8b 12                	mov    (%rdx),%edx
  800420fbbc:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fbbf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fbc3:	89 0a                	mov    %ecx,(%rdx)
  800420fbc5:	eb 17                	jmp    800420fbde <getuint+0x5b>
  800420fbc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbcb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fbcf:	48 89 d0             	mov    %rdx,%rax
  800420fbd2:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fbd6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fbda:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fbde:	48 8b 00             	mov    (%rax),%rax
  800420fbe1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fbe5:	e9 a3 00 00 00       	jmpq   800420fc8d <getuint+0x10a>
  800420fbea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fbee:	74 4f                	je     800420fc3f <getuint+0xbc>
  800420fbf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbf4:	8b 00                	mov    (%rax),%eax
  800420fbf6:	83 f8 30             	cmp    $0x30,%eax
  800420fbf9:	73 24                	jae    800420fc1f <getuint+0x9c>
  800420fbfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbff:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fc03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc07:	8b 00                	mov    (%rax),%eax
  800420fc09:	89 c0                	mov    %eax,%eax
  800420fc0b:	48 01 d0             	add    %rdx,%rax
  800420fc0e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc12:	8b 12                	mov    (%rdx),%edx
  800420fc14:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fc17:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc1b:	89 0a                	mov    %ecx,(%rdx)
  800420fc1d:	eb 17                	jmp    800420fc36 <getuint+0xb3>
  800420fc1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc23:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fc27:	48 89 d0             	mov    %rdx,%rax
  800420fc2a:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fc2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc32:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fc36:	48 8b 00             	mov    (%rax),%rax
  800420fc39:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fc3d:	eb 4e                	jmp    800420fc8d <getuint+0x10a>
  800420fc3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc43:	8b 00                	mov    (%rax),%eax
  800420fc45:	83 f8 30             	cmp    $0x30,%eax
  800420fc48:	73 24                	jae    800420fc6e <getuint+0xeb>
  800420fc4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc4e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc56:	8b 00                	mov    (%rax),%eax
  800420fc58:	89 c0                	mov    %eax,%eax
  800420fc5a:	48 01 d0             	add    %rdx,%rax
  800420fc5d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc61:	8b 12                	mov    (%rdx),%edx
  800420fc63:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fc66:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc6a:	89 0a                	mov    %ecx,(%rdx)
  800420fc6c:	eb 17                	jmp    800420fc85 <getuint+0x102>
  800420fc6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc72:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fc76:	48 89 d0             	mov    %rdx,%rax
  800420fc79:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fc7d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc81:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fc85:	8b 00                	mov    (%rax),%eax
  800420fc87:	89 c0                	mov    %eax,%eax
  800420fc89:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fc8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fc91:	c9                   	leaveq 
  800420fc92:	c3                   	retq   

000000800420fc93 <getint>:
  800420fc93:	55                   	push   %rbp
  800420fc94:	48 89 e5             	mov    %rsp,%rbp
  800420fc97:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fc9b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fc9f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fca2:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fca6:	7e 52                	jle    800420fcfa <getint+0x67>
  800420fca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcac:	8b 00                	mov    (%rax),%eax
  800420fcae:	83 f8 30             	cmp    $0x30,%eax
  800420fcb1:	73 24                	jae    800420fcd7 <getint+0x44>
  800420fcb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcb7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fcbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcbf:	8b 00                	mov    (%rax),%eax
  800420fcc1:	89 c0                	mov    %eax,%eax
  800420fcc3:	48 01 d0             	add    %rdx,%rax
  800420fcc6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fcca:	8b 12                	mov    (%rdx),%edx
  800420fccc:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fccf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fcd3:	89 0a                	mov    %ecx,(%rdx)
  800420fcd5:	eb 17                	jmp    800420fcee <getint+0x5b>
  800420fcd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcdb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fcdf:	48 89 d0             	mov    %rdx,%rax
  800420fce2:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fce6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fcea:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fcee:	48 8b 00             	mov    (%rax),%rax
  800420fcf1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fcf5:	e9 a3 00 00 00       	jmpq   800420fd9d <getint+0x10a>
  800420fcfa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fcfe:	74 4f                	je     800420fd4f <getint+0xbc>
  800420fd00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd04:	8b 00                	mov    (%rax),%eax
  800420fd06:	83 f8 30             	cmp    $0x30,%eax
  800420fd09:	73 24                	jae    800420fd2f <getint+0x9c>
  800420fd0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd0f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fd13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd17:	8b 00                	mov    (%rax),%eax
  800420fd19:	89 c0                	mov    %eax,%eax
  800420fd1b:	48 01 d0             	add    %rdx,%rax
  800420fd1e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd22:	8b 12                	mov    (%rdx),%edx
  800420fd24:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fd27:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd2b:	89 0a                	mov    %ecx,(%rdx)
  800420fd2d:	eb 17                	jmp    800420fd46 <getint+0xb3>
  800420fd2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd33:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fd37:	48 89 d0             	mov    %rdx,%rax
  800420fd3a:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fd3e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd42:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fd46:	48 8b 00             	mov    (%rax),%rax
  800420fd49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fd4d:	eb 4e                	jmp    800420fd9d <getint+0x10a>
  800420fd4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd53:	8b 00                	mov    (%rax),%eax
  800420fd55:	83 f8 30             	cmp    $0x30,%eax
  800420fd58:	73 24                	jae    800420fd7e <getint+0xeb>
  800420fd5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd5e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fd62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd66:	8b 00                	mov    (%rax),%eax
  800420fd68:	89 c0                	mov    %eax,%eax
  800420fd6a:	48 01 d0             	add    %rdx,%rax
  800420fd6d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd71:	8b 12                	mov    (%rdx),%edx
  800420fd73:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fd76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd7a:	89 0a                	mov    %ecx,(%rdx)
  800420fd7c:	eb 17                	jmp    800420fd95 <getint+0x102>
  800420fd7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd82:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fd86:	48 89 d0             	mov    %rdx,%rax
  800420fd89:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fd8d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd91:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fd95:	8b 00                	mov    (%rax),%eax
  800420fd97:	48 98                	cltq   
  800420fd99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fd9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fda1:	c9                   	leaveq 
  800420fda2:	c3                   	retq   

000000800420fda3 <vprintfmt>:
  800420fda3:	55                   	push   %rbp
  800420fda4:	48 89 e5             	mov    %rsp,%rbp
  800420fda7:	41 54                	push   %r12
  800420fda9:	53                   	push   %rbx
  800420fdaa:	48 83 ec 60          	sub    $0x60,%rsp
  800420fdae:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420fdb2:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420fdb6:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fdba:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420fdbe:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420fdc2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420fdc6:	48 8b 0a             	mov    (%rdx),%rcx
  800420fdc9:	48 89 08             	mov    %rcx,(%rax)
  800420fdcc:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fdd0:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fdd4:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fdd8:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fddc:	eb 17                	jmp    800420fdf5 <vprintfmt+0x52>
  800420fdde:	85 db                	test   %ebx,%ebx
  800420fde0:	0f 84 cc 04 00 00    	je     80042102b2 <vprintfmt+0x50f>
  800420fde6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fdea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fdee:	48 89 d6             	mov    %rdx,%rsi
  800420fdf1:	89 df                	mov    %ebx,%edi
  800420fdf3:	ff d0                	callq  *%rax
  800420fdf5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fdf9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fdfd:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fe01:	0f b6 00             	movzbl (%rax),%eax
  800420fe04:	0f b6 d8             	movzbl %al,%ebx
  800420fe07:	83 fb 25             	cmp    $0x25,%ebx
  800420fe0a:	75 d2                	jne    800420fdde <vprintfmt+0x3b>
  800420fe0c:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420fe10:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420fe17:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420fe1e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420fe25:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420fe2c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fe30:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fe34:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fe38:	0f b6 00             	movzbl (%rax),%eax
  800420fe3b:	0f b6 d8             	movzbl %al,%ebx
  800420fe3e:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420fe41:	83 f8 55             	cmp    $0x55,%eax
  800420fe44:	0f 87 34 04 00 00    	ja     800421027e <vprintfmt+0x4db>
  800420fe4a:	89 c0                	mov    %eax,%eax
  800420fe4c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420fe53:	00 
  800420fe54:	48 b8 58 f0 21 04 80 	movabs $0x800421f058,%rax
  800420fe5b:	00 00 00 
  800420fe5e:	48 01 d0             	add    %rdx,%rax
  800420fe61:	48 8b 00             	mov    (%rax),%rax
  800420fe64:	ff e0                	jmpq   *%rax
  800420fe66:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420fe6a:	eb c0                	jmp    800420fe2c <vprintfmt+0x89>
  800420fe6c:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420fe70:	eb ba                	jmp    800420fe2c <vprintfmt+0x89>
  800420fe72:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420fe79:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420fe7c:	89 d0                	mov    %edx,%eax
  800420fe7e:	c1 e0 02             	shl    $0x2,%eax
  800420fe81:	01 d0                	add    %edx,%eax
  800420fe83:	01 c0                	add    %eax,%eax
  800420fe85:	01 d8                	add    %ebx,%eax
  800420fe87:	83 e8 30             	sub    $0x30,%eax
  800420fe8a:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420fe8d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fe91:	0f b6 00             	movzbl (%rax),%eax
  800420fe94:	0f be d8             	movsbl %al,%ebx
  800420fe97:	83 fb 2f             	cmp    $0x2f,%ebx
  800420fe9a:	7e 0c                	jle    800420fea8 <vprintfmt+0x105>
  800420fe9c:	83 fb 39             	cmp    $0x39,%ebx
  800420fe9f:	7f 07                	jg     800420fea8 <vprintfmt+0x105>
  800420fea1:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420fea6:	eb d1                	jmp    800420fe79 <vprintfmt+0xd6>
  800420fea8:	eb 58                	jmp    800420ff02 <vprintfmt+0x15f>
  800420feaa:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fead:	83 f8 30             	cmp    $0x30,%eax
  800420feb0:	73 17                	jae    800420fec9 <vprintfmt+0x126>
  800420feb2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420feb6:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420feb9:	89 c0                	mov    %eax,%eax
  800420febb:	48 01 d0             	add    %rdx,%rax
  800420febe:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420fec1:	83 c2 08             	add    $0x8,%edx
  800420fec4:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420fec7:	eb 0f                	jmp    800420fed8 <vprintfmt+0x135>
  800420fec9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420fecd:	48 89 d0             	mov    %rdx,%rax
  800420fed0:	48 83 c2 08          	add    $0x8,%rdx
  800420fed4:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420fed8:	8b 00                	mov    (%rax),%eax
  800420feda:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420fedd:	eb 23                	jmp    800420ff02 <vprintfmt+0x15f>
  800420fedf:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fee3:	79 0c                	jns    800420fef1 <vprintfmt+0x14e>
  800420fee5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420feec:	e9 3b ff ff ff       	jmpq   800420fe2c <vprintfmt+0x89>
  800420fef1:	e9 36 ff ff ff       	jmpq   800420fe2c <vprintfmt+0x89>
  800420fef6:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420fefd:	e9 2a ff ff ff       	jmpq   800420fe2c <vprintfmt+0x89>
  800420ff02:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420ff06:	79 12                	jns    800420ff1a <vprintfmt+0x177>
  800420ff08:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420ff0b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420ff0e:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420ff15:	e9 12 ff ff ff       	jmpq   800420fe2c <vprintfmt+0x89>
  800420ff1a:	e9 0d ff ff ff       	jmpq   800420fe2c <vprintfmt+0x89>
  800420ff1f:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420ff23:	e9 04 ff ff ff       	jmpq   800420fe2c <vprintfmt+0x89>
  800420ff28:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ff2b:	83 f8 30             	cmp    $0x30,%eax
  800420ff2e:	73 17                	jae    800420ff47 <vprintfmt+0x1a4>
  800420ff30:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ff34:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ff37:	89 c0                	mov    %eax,%eax
  800420ff39:	48 01 d0             	add    %rdx,%rax
  800420ff3c:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ff3f:	83 c2 08             	add    $0x8,%edx
  800420ff42:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420ff45:	eb 0f                	jmp    800420ff56 <vprintfmt+0x1b3>
  800420ff47:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ff4b:	48 89 d0             	mov    %rdx,%rax
  800420ff4e:	48 83 c2 08          	add    $0x8,%rdx
  800420ff52:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420ff56:	8b 10                	mov    (%rax),%edx
  800420ff58:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420ff5c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ff60:	48 89 ce             	mov    %rcx,%rsi
  800420ff63:	89 d7                	mov    %edx,%edi
  800420ff65:	ff d0                	callq  *%rax
  800420ff67:	e9 40 03 00 00       	jmpq   80042102ac <vprintfmt+0x509>
  800420ff6c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ff6f:	83 f8 30             	cmp    $0x30,%eax
  800420ff72:	73 17                	jae    800420ff8b <vprintfmt+0x1e8>
  800420ff74:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ff78:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ff7b:	89 c0                	mov    %eax,%eax
  800420ff7d:	48 01 d0             	add    %rdx,%rax
  800420ff80:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ff83:	83 c2 08             	add    $0x8,%edx
  800420ff86:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420ff89:	eb 0f                	jmp    800420ff9a <vprintfmt+0x1f7>
  800420ff8b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ff8f:	48 89 d0             	mov    %rdx,%rax
  800420ff92:	48 83 c2 08          	add    $0x8,%rdx
  800420ff96:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420ff9a:	8b 18                	mov    (%rax),%ebx
  800420ff9c:	85 db                	test   %ebx,%ebx
  800420ff9e:	79 02                	jns    800420ffa2 <vprintfmt+0x1ff>
  800420ffa0:	f7 db                	neg    %ebx
  800420ffa2:	83 fb 15             	cmp    $0x15,%ebx
  800420ffa5:	7f 16                	jg     800420ffbd <vprintfmt+0x21a>
  800420ffa7:	48 b8 80 ef 21 04 80 	movabs $0x800421ef80,%rax
  800420ffae:	00 00 00 
  800420ffb1:	48 63 d3             	movslq %ebx,%rdx
  800420ffb4:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420ffb8:	4d 85 e4             	test   %r12,%r12
  800420ffbb:	75 2e                	jne    800420ffeb <vprintfmt+0x248>
  800420ffbd:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420ffc1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ffc5:	89 d9                	mov    %ebx,%ecx
  800420ffc7:	48 ba 41 f0 21 04 80 	movabs $0x800421f041,%rdx
  800420ffce:	00 00 00 
  800420ffd1:	48 89 c7             	mov    %rax,%rdi
  800420ffd4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ffd9:	49 b8 bb 02 21 04 80 	movabs $0x80042102bb,%r8
  800420ffe0:	00 00 00 
  800420ffe3:	41 ff d0             	callq  *%r8
  800420ffe6:	e9 c1 02 00 00       	jmpq   80042102ac <vprintfmt+0x509>
  800420ffeb:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420ffef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fff3:	4c 89 e1             	mov    %r12,%rcx
  800420fff6:	48 ba 4a f0 21 04 80 	movabs $0x800421f04a,%rdx
  800420fffd:	00 00 00 
  8004210000:	48 89 c7             	mov    %rax,%rdi
  8004210003:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210008:	49 b8 bb 02 21 04 80 	movabs $0x80042102bb,%r8
  800421000f:	00 00 00 
  8004210012:	41 ff d0             	callq  *%r8
  8004210015:	e9 92 02 00 00       	jmpq   80042102ac <vprintfmt+0x509>
  800421001a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421001d:	83 f8 30             	cmp    $0x30,%eax
  8004210020:	73 17                	jae    8004210039 <vprintfmt+0x296>
  8004210022:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210026:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210029:	89 c0                	mov    %eax,%eax
  800421002b:	48 01 d0             	add    %rdx,%rax
  800421002e:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210031:	83 c2 08             	add    $0x8,%edx
  8004210034:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210037:	eb 0f                	jmp    8004210048 <vprintfmt+0x2a5>
  8004210039:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421003d:	48 89 d0             	mov    %rdx,%rax
  8004210040:	48 83 c2 08          	add    $0x8,%rdx
  8004210044:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210048:	4c 8b 20             	mov    (%rax),%r12
  800421004b:	4d 85 e4             	test   %r12,%r12
  800421004e:	75 0a                	jne    800421005a <vprintfmt+0x2b7>
  8004210050:	49 bc 4d f0 21 04 80 	movabs $0x800421f04d,%r12
  8004210057:	00 00 00 
  800421005a:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421005e:	7e 3f                	jle    800421009f <vprintfmt+0x2fc>
  8004210060:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  8004210064:	74 39                	je     800421009f <vprintfmt+0x2fc>
  8004210066:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210069:	48 98                	cltq   
  800421006b:	48 89 c6             	mov    %rax,%rsi
  800421006e:	4c 89 e7             	mov    %r12,%rdi
  8004210071:	48 b8 bc 06 21 04 80 	movabs $0x80042106bc,%rax
  8004210078:	00 00 00 
  800421007b:	ff d0                	callq  *%rax
  800421007d:	29 45 dc             	sub    %eax,-0x24(%rbp)
  8004210080:	eb 17                	jmp    8004210099 <vprintfmt+0x2f6>
  8004210082:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  8004210086:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421008a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421008e:	48 89 ce             	mov    %rcx,%rsi
  8004210091:	89 d7                	mov    %edx,%edi
  8004210093:	ff d0                	callq  *%rax
  8004210095:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210099:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421009d:	7f e3                	jg     8004210082 <vprintfmt+0x2df>
  800421009f:	eb 37                	jmp    80042100d8 <vprintfmt+0x335>
  80042100a1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  80042100a5:	74 1e                	je     80042100c5 <vprintfmt+0x322>
  80042100a7:	83 fb 1f             	cmp    $0x1f,%ebx
  80042100aa:	7e 05                	jle    80042100b1 <vprintfmt+0x30e>
  80042100ac:	83 fb 7e             	cmp    $0x7e,%ebx
  80042100af:	7e 14                	jle    80042100c5 <vprintfmt+0x322>
  80042100b1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042100b5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042100b9:	48 89 d6             	mov    %rdx,%rsi
  80042100bc:	bf 3f 00 00 00       	mov    $0x3f,%edi
  80042100c1:	ff d0                	callq  *%rax
  80042100c3:	eb 0f                	jmp    80042100d4 <vprintfmt+0x331>
  80042100c5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042100c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042100cd:	48 89 d6             	mov    %rdx,%rsi
  80042100d0:	89 df                	mov    %ebx,%edi
  80042100d2:	ff d0                	callq  *%rax
  80042100d4:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042100d8:	4c 89 e0             	mov    %r12,%rax
  80042100db:	4c 8d 60 01          	lea    0x1(%rax),%r12
  80042100df:	0f b6 00             	movzbl (%rax),%eax
  80042100e2:	0f be d8             	movsbl %al,%ebx
  80042100e5:	85 db                	test   %ebx,%ebx
  80042100e7:	74 10                	je     80042100f9 <vprintfmt+0x356>
  80042100e9:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  80042100ed:	78 b2                	js     80042100a1 <vprintfmt+0x2fe>
  80042100ef:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  80042100f3:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  80042100f7:	79 a8                	jns    80042100a1 <vprintfmt+0x2fe>
  80042100f9:	eb 16                	jmp    8004210111 <vprintfmt+0x36e>
  80042100fb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042100ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210103:	48 89 d6             	mov    %rdx,%rsi
  8004210106:	bf 20 00 00 00       	mov    $0x20,%edi
  800421010b:	ff d0                	callq  *%rax
  800421010d:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210111:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210115:	7f e4                	jg     80042100fb <vprintfmt+0x358>
  8004210117:	e9 90 01 00 00       	jmpq   80042102ac <vprintfmt+0x509>
  800421011c:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210120:	be 03 00 00 00       	mov    $0x3,%esi
  8004210125:	48 89 c7             	mov    %rax,%rdi
  8004210128:	48 b8 93 fc 20 04 80 	movabs $0x800420fc93,%rax
  800421012f:	00 00 00 
  8004210132:	ff d0                	callq  *%rax
  8004210134:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210138:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421013c:	48 85 c0             	test   %rax,%rax
  800421013f:	79 1d                	jns    800421015e <vprintfmt+0x3bb>
  8004210141:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210145:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210149:	48 89 d6             	mov    %rdx,%rsi
  800421014c:	bf 2d 00 00 00       	mov    $0x2d,%edi
  8004210151:	ff d0                	callq  *%rax
  8004210153:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210157:	48 f7 d8             	neg    %rax
  800421015a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421015e:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210165:	e9 d5 00 00 00       	jmpq   800421023f <vprintfmt+0x49c>
  800421016a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421016e:	be 03 00 00 00       	mov    $0x3,%esi
  8004210173:	48 89 c7             	mov    %rax,%rdi
  8004210176:	48 b8 83 fb 20 04 80 	movabs $0x800420fb83,%rax
  800421017d:	00 00 00 
  8004210180:	ff d0                	callq  *%rax
  8004210182:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210186:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800421018d:	e9 ad 00 00 00       	jmpq   800421023f <vprintfmt+0x49c>
  8004210192:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210196:	be 03 00 00 00       	mov    $0x3,%esi
  800421019b:	48 89 c7             	mov    %rax,%rdi
  800421019e:	48 b8 83 fb 20 04 80 	movabs $0x800420fb83,%rax
  80042101a5:	00 00 00 
  80042101a8:	ff d0                	callq  *%rax
  80042101aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042101ae:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  80042101b5:	e9 85 00 00 00       	jmpq   800421023f <vprintfmt+0x49c>
  80042101ba:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042101be:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042101c2:	48 89 d6             	mov    %rdx,%rsi
  80042101c5:	bf 30 00 00 00       	mov    $0x30,%edi
  80042101ca:	ff d0                	callq  *%rax
  80042101cc:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042101d0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042101d4:	48 89 d6             	mov    %rdx,%rsi
  80042101d7:	bf 78 00 00 00       	mov    $0x78,%edi
  80042101dc:	ff d0                	callq  *%rax
  80042101de:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042101e1:	83 f8 30             	cmp    $0x30,%eax
  80042101e4:	73 17                	jae    80042101fd <vprintfmt+0x45a>
  80042101e6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042101ea:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042101ed:	89 c0                	mov    %eax,%eax
  80042101ef:	48 01 d0             	add    %rdx,%rax
  80042101f2:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042101f5:	83 c2 08             	add    $0x8,%edx
  80042101f8:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042101fb:	eb 0f                	jmp    800421020c <vprintfmt+0x469>
  80042101fd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210201:	48 89 d0             	mov    %rdx,%rax
  8004210204:	48 83 c2 08          	add    $0x8,%rdx
  8004210208:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421020c:	48 8b 00             	mov    (%rax),%rax
  800421020f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210213:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800421021a:	eb 23                	jmp    800421023f <vprintfmt+0x49c>
  800421021c:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210220:	be 03 00 00 00       	mov    $0x3,%esi
  8004210225:	48 89 c7             	mov    %rax,%rdi
  8004210228:	48 b8 83 fb 20 04 80 	movabs $0x800420fb83,%rax
  800421022f:	00 00 00 
  8004210232:	ff d0                	callq  *%rax
  8004210234:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210238:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800421023f:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  8004210244:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004210247:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800421024a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421024e:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210252:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210256:	45 89 c1             	mov    %r8d,%r9d
  8004210259:	41 89 f8             	mov    %edi,%r8d
  800421025c:	48 89 c7             	mov    %rax,%rdi
  800421025f:	48 b8 c8 fa 20 04 80 	movabs $0x800420fac8,%rax
  8004210266:	00 00 00 
  8004210269:	ff d0                	callq  *%rax
  800421026b:	eb 3f                	jmp    80042102ac <vprintfmt+0x509>
  800421026d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210271:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210275:	48 89 d6             	mov    %rdx,%rsi
  8004210278:	89 df                	mov    %ebx,%edi
  800421027a:	ff d0                	callq  *%rax
  800421027c:	eb 2e                	jmp    80042102ac <vprintfmt+0x509>
  800421027e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210282:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210286:	48 89 d6             	mov    %rdx,%rsi
  8004210289:	bf 25 00 00 00       	mov    $0x25,%edi
  800421028e:	ff d0                	callq  *%rax
  8004210290:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210295:	eb 05                	jmp    800421029c <vprintfmt+0x4f9>
  8004210297:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800421029c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042102a0:	48 83 e8 01          	sub    $0x1,%rax
  80042102a4:	0f b6 00             	movzbl (%rax),%eax
  80042102a7:	3c 25                	cmp    $0x25,%al
  80042102a9:	75 ec                	jne    8004210297 <vprintfmt+0x4f4>
  80042102ab:	90                   	nop
  80042102ac:	90                   	nop
  80042102ad:	e9 43 fb ff ff       	jmpq   800420fdf5 <vprintfmt+0x52>
  80042102b2:	48 83 c4 60          	add    $0x60,%rsp
  80042102b6:	5b                   	pop    %rbx
  80042102b7:	41 5c                	pop    %r12
  80042102b9:	5d                   	pop    %rbp
  80042102ba:	c3                   	retq   

00000080042102bb <printfmt>:
  80042102bb:	55                   	push   %rbp
  80042102bc:	48 89 e5             	mov    %rsp,%rbp
  80042102bf:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042102c6:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042102cd:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  80042102d4:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042102db:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042102e2:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042102e9:	84 c0                	test   %al,%al
  80042102eb:	74 20                	je     800421030d <printfmt+0x52>
  80042102ed:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042102f1:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042102f5:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042102f9:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042102fd:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210301:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210305:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210309:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800421030d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004210314:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800421031b:	00 00 00 
  800421031e:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004210325:	00 00 00 
  8004210328:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800421032c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210333:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421033a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004210341:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  8004210348:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800421034f:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  8004210356:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421035d:	48 89 c7             	mov    %rax,%rdi
  8004210360:	48 b8 a3 fd 20 04 80 	movabs $0x800420fda3,%rax
  8004210367:	00 00 00 
  800421036a:	ff d0                	callq  *%rax
  800421036c:	c9                   	leaveq 
  800421036d:	c3                   	retq   

000000800421036e <sprintputch>:
  800421036e:	55                   	push   %rbp
  800421036f:	48 89 e5             	mov    %rsp,%rbp
  8004210372:	48 83 ec 10          	sub    $0x10,%rsp
  8004210376:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004210379:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421037d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210381:	8b 40 10             	mov    0x10(%rax),%eax
  8004210384:	8d 50 01             	lea    0x1(%rax),%edx
  8004210387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421038b:	89 50 10             	mov    %edx,0x10(%rax)
  800421038e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210392:	48 8b 10             	mov    (%rax),%rdx
  8004210395:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210399:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421039d:	48 39 c2             	cmp    %rax,%rdx
  80042103a0:	73 17                	jae    80042103b9 <sprintputch+0x4b>
  80042103a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042103a6:	48 8b 00             	mov    (%rax),%rax
  80042103a9:	48 8d 48 01          	lea    0x1(%rax),%rcx
  80042103ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042103b1:	48 89 0a             	mov    %rcx,(%rdx)
  80042103b4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042103b7:	88 10                	mov    %dl,(%rax)
  80042103b9:	c9                   	leaveq 
  80042103ba:	c3                   	retq   

00000080042103bb <vsnprintf>:
  80042103bb:	55                   	push   %rbp
  80042103bc:	48 89 e5             	mov    %rsp,%rbp
  80042103bf:	48 83 ec 50          	sub    $0x50,%rsp
  80042103c3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042103c7:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042103ca:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042103ce:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042103d2:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  80042103d6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042103da:	48 8b 0a             	mov    (%rdx),%rcx
  80042103dd:	48 89 08             	mov    %rcx,(%rax)
  80042103e0:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042103e4:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042103e8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042103ec:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042103f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042103f4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042103f8:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042103fb:	48 98                	cltq   
  80042103fd:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210401:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210405:	48 01 d0             	add    %rdx,%rax
  8004210408:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421040c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  8004210413:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004210418:	74 06                	je     8004210420 <vsnprintf+0x65>
  800421041a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421041e:	7f 07                	jg     8004210427 <vsnprintf+0x6c>
  8004210420:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004210425:	eb 2f                	jmp    8004210456 <vsnprintf+0x9b>
  8004210427:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421042b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421042f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004210433:	48 89 c6             	mov    %rax,%rsi
  8004210436:	48 bf 6e 03 21 04 80 	movabs $0x800421036e,%rdi
  800421043d:	00 00 00 
  8004210440:	48 b8 a3 fd 20 04 80 	movabs $0x800420fda3,%rax
  8004210447:	00 00 00 
  800421044a:	ff d0                	callq  *%rax
  800421044c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210450:	c6 00 00             	movb   $0x0,(%rax)
  8004210453:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004210456:	c9                   	leaveq 
  8004210457:	c3                   	retq   

0000008004210458 <snprintf>:
  8004210458:	55                   	push   %rbp
  8004210459:	48 89 e5             	mov    %rsp,%rbp
  800421045c:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004210463:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800421046a:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210470:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004210477:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800421047e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210485:	84 c0                	test   %al,%al
  8004210487:	74 20                	je     80042104a9 <snprintf+0x51>
  8004210489:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800421048d:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210491:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210495:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210499:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800421049d:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042104a1:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042104a5:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042104a9:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  80042104b0:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  80042104b7:	00 00 00 
  80042104ba:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  80042104c1:	00 00 00 
  80042104c4:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042104c8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042104cf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042104d6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042104dd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  80042104e4:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  80042104eb:	48 8b 0a             	mov    (%rdx),%rcx
  80042104ee:	48 89 08             	mov    %rcx,(%rax)
  80042104f1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042104f5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042104f9:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042104fd:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210501:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  8004210508:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800421050f:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  8004210515:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421051c:	48 89 c7             	mov    %rax,%rdi
  800421051f:	48 b8 bb 03 21 04 80 	movabs $0x80042103bb,%rax
  8004210526:	00 00 00 
  8004210529:	ff d0                	callq  *%rax
  800421052b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004210531:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004210537:	c9                   	leaveq 
  8004210538:	c3                   	retq   

0000008004210539 <readline>:
  8004210539:	55                   	push   %rbp
  800421053a:	48 89 e5             	mov    %rsp,%rbp
  800421053d:	48 83 ec 20          	sub    $0x20,%rsp
  8004210541:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210545:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421054a:	74 22                	je     800421056e <readline+0x35>
  800421054c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210550:	48 89 c6             	mov    %rax,%rsi
  8004210553:	48 bf 08 f3 21 04 80 	movabs $0x800421f308,%rdi
  800421055a:	00 00 00 
  800421055d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210562:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004210569:	00 00 00 
  800421056c:	ff d2                	callq  *%rdx
  800421056e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210575:	bf 00 00 00 00       	mov    $0x0,%edi
  800421057a:	48 b8 33 12 20 04 80 	movabs $0x8004201233,%rax
  8004210581:	00 00 00 
  8004210584:	ff d0                	callq  *%rax
  8004210586:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004210589:	48 b8 11 12 20 04 80 	movabs $0x8004201211,%rax
  8004210590:	00 00 00 
  8004210593:	ff d0                	callq  *%rax
  8004210595:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004210598:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421059c:	79 30                	jns    80042105ce <readline+0x95>
  800421059e:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  80042105a2:	74 20                	je     80042105c4 <readline+0x8b>
  80042105a4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042105a7:	89 c6                	mov    %eax,%esi
  80042105a9:	48 bf 0b f3 21 04 80 	movabs $0x800421f30b,%rdi
  80042105b0:	00 00 00 
  80042105b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042105b8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042105bf:	00 00 00 
  80042105c2:	ff d2                	callq  *%rdx
  80042105c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042105c9:	e9 be 00 00 00       	jmpq   800421068c <readline+0x153>
  80042105ce:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042105d2:	74 06                	je     80042105da <readline+0xa1>
  80042105d4:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  80042105d8:	75 26                	jne    8004210600 <readline+0xc7>
  80042105da:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042105de:	7e 20                	jle    8004210600 <readline+0xc7>
  80042105e0:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042105e4:	74 11                	je     80042105f7 <readline+0xbe>
  80042105e6:	bf 08 00 00 00       	mov    $0x8,%edi
  80042105eb:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  80042105f2:	00 00 00 
  80042105f5:	ff d0                	callq  *%rax
  80042105f7:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  80042105fb:	e9 87 00 00 00       	jmpq   8004210687 <readline+0x14e>
  8004210600:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210604:	7e 3f                	jle    8004210645 <readline+0x10c>
  8004210606:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800421060d:	7f 36                	jg     8004210645 <readline+0x10c>
  800421060f:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210613:	74 11                	je     8004210626 <readline+0xed>
  8004210615:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210618:	89 c7                	mov    %eax,%edi
  800421061a:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210621:	00 00 00 
  8004210624:	ff d0                	callq  *%rax
  8004210626:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210629:	8d 50 01             	lea    0x1(%rax),%edx
  800421062c:	89 55 fc             	mov    %edx,-0x4(%rbp)
  800421062f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210632:	89 d1                	mov    %edx,%ecx
  8004210634:	48 ba a0 c2 4d 04 80 	movabs $0x80044dc2a0,%rdx
  800421063b:	00 00 00 
  800421063e:	48 98                	cltq   
  8004210640:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004210643:	eb 42                	jmp    8004210687 <readline+0x14e>
  8004210645:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210649:	74 06                	je     8004210651 <readline+0x118>
  800421064b:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  800421064f:	75 36                	jne    8004210687 <readline+0x14e>
  8004210651:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210655:	74 11                	je     8004210668 <readline+0x12f>
  8004210657:	bf 0a 00 00 00       	mov    $0xa,%edi
  800421065c:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210663:	00 00 00 
  8004210666:	ff d0                	callq  *%rax
  8004210668:	48 ba a0 c2 4d 04 80 	movabs $0x80044dc2a0,%rdx
  800421066f:	00 00 00 
  8004210672:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210675:	48 98                	cltq   
  8004210677:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800421067b:	48 b8 a0 c2 4d 04 80 	movabs $0x80044dc2a0,%rax
  8004210682:	00 00 00 
  8004210685:	eb 05                	jmp    800421068c <readline+0x153>
  8004210687:	e9 fd fe ff ff       	jmpq   8004210589 <readline+0x50>
  800421068c:	c9                   	leaveq 
  800421068d:	c3                   	retq   

000000800421068e <strlen>:
  800421068e:	55                   	push   %rbp
  800421068f:	48 89 e5             	mov    %rsp,%rbp
  8004210692:	48 83 ec 18          	sub    $0x18,%rsp
  8004210696:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421069a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042106a1:	eb 09                	jmp    80042106ac <strlen+0x1e>
  80042106a3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042106a7:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042106ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106b0:	0f b6 00             	movzbl (%rax),%eax
  80042106b3:	84 c0                	test   %al,%al
  80042106b5:	75 ec                	jne    80042106a3 <strlen+0x15>
  80042106b7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042106ba:	c9                   	leaveq 
  80042106bb:	c3                   	retq   

00000080042106bc <strnlen>:
  80042106bc:	55                   	push   %rbp
  80042106bd:	48 89 e5             	mov    %rsp,%rbp
  80042106c0:	48 83 ec 20          	sub    $0x20,%rsp
  80042106c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042106c8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042106cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042106d3:	eb 0e                	jmp    80042106e3 <strnlen+0x27>
  80042106d5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042106d9:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042106de:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  80042106e3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042106e8:	74 0b                	je     80042106f5 <strnlen+0x39>
  80042106ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106ee:	0f b6 00             	movzbl (%rax),%eax
  80042106f1:	84 c0                	test   %al,%al
  80042106f3:	75 e0                	jne    80042106d5 <strnlen+0x19>
  80042106f5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042106f8:	c9                   	leaveq 
  80042106f9:	c3                   	retq   

00000080042106fa <strcpy>:
  80042106fa:	55                   	push   %rbp
  80042106fb:	48 89 e5             	mov    %rsp,%rbp
  80042106fe:	48 83 ec 20          	sub    $0x20,%rsp
  8004210702:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210706:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421070a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421070e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210712:	90                   	nop
  8004210713:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210717:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421071b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421071f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210723:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210727:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421072b:	0f b6 12             	movzbl (%rdx),%edx
  800421072e:	88 10                	mov    %dl,(%rax)
  8004210730:	0f b6 00             	movzbl (%rax),%eax
  8004210733:	84 c0                	test   %al,%al
  8004210735:	75 dc                	jne    8004210713 <strcpy+0x19>
  8004210737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421073b:	c9                   	leaveq 
  800421073c:	c3                   	retq   

000000800421073d <strcat>:
  800421073d:	55                   	push   %rbp
  800421073e:	48 89 e5             	mov    %rsp,%rbp
  8004210741:	48 83 ec 20          	sub    $0x20,%rsp
  8004210745:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210749:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421074d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210751:	48 89 c7             	mov    %rax,%rdi
  8004210754:	48 b8 8e 06 21 04 80 	movabs $0x800421068e,%rax
  800421075b:	00 00 00 
  800421075e:	ff d0                	callq  *%rax
  8004210760:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210763:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210766:	48 63 d0             	movslq %eax,%rdx
  8004210769:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421076d:	48 01 c2             	add    %rax,%rdx
  8004210770:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210774:	48 89 c6             	mov    %rax,%rsi
  8004210777:	48 89 d7             	mov    %rdx,%rdi
  800421077a:	48 b8 fa 06 21 04 80 	movabs $0x80042106fa,%rax
  8004210781:	00 00 00 
  8004210784:	ff d0                	callq  *%rax
  8004210786:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421078a:	c9                   	leaveq 
  800421078b:	c3                   	retq   

000000800421078c <strncpy>:
  800421078c:	55                   	push   %rbp
  800421078d:	48 89 e5             	mov    %rsp,%rbp
  8004210790:	48 83 ec 28          	sub    $0x28,%rsp
  8004210794:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210798:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421079c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042107a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042107a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042107a8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042107af:	00 
  80042107b0:	eb 2a                	jmp    80042107dc <strncpy+0x50>
  80042107b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042107b6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042107ba:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042107be:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042107c2:	0f b6 12             	movzbl (%rdx),%edx
  80042107c5:	88 10                	mov    %dl,(%rax)
  80042107c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042107cb:	0f b6 00             	movzbl (%rax),%eax
  80042107ce:	84 c0                	test   %al,%al
  80042107d0:	74 05                	je     80042107d7 <strncpy+0x4b>
  80042107d2:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  80042107d7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042107dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042107e0:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042107e4:	72 cc                	jb     80042107b2 <strncpy+0x26>
  80042107e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107ea:	c9                   	leaveq 
  80042107eb:	c3                   	retq   

00000080042107ec <strlcpy>:
  80042107ec:	55                   	push   %rbp
  80042107ed:	48 89 e5             	mov    %rsp,%rbp
  80042107f0:	48 83 ec 28          	sub    $0x28,%rsp
  80042107f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042107f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042107fc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210800:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210804:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210808:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421080d:	74 3d                	je     800421084c <strlcpy+0x60>
  800421080f:	eb 1d                	jmp    800421082e <strlcpy+0x42>
  8004210811:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210815:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210819:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421081d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210821:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210825:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210829:	0f b6 12             	movzbl (%rdx),%edx
  800421082c:	88 10                	mov    %dl,(%rax)
  800421082e:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210833:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210838:	74 0b                	je     8004210845 <strlcpy+0x59>
  800421083a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421083e:	0f b6 00             	movzbl (%rax),%eax
  8004210841:	84 c0                	test   %al,%al
  8004210843:	75 cc                	jne    8004210811 <strlcpy+0x25>
  8004210845:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210849:	c6 00 00             	movb   $0x0,(%rax)
  800421084c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210854:	48 29 c2             	sub    %rax,%rdx
  8004210857:	48 89 d0             	mov    %rdx,%rax
  800421085a:	c9                   	leaveq 
  800421085b:	c3                   	retq   

000000800421085c <strcmp>:
  800421085c:	55                   	push   %rbp
  800421085d:	48 89 e5             	mov    %rsp,%rbp
  8004210860:	48 83 ec 10          	sub    $0x10,%rsp
  8004210864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210868:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421086c:	eb 0a                	jmp    8004210878 <strcmp+0x1c>
  800421086e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210873:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210878:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421087c:	0f b6 00             	movzbl (%rax),%eax
  800421087f:	84 c0                	test   %al,%al
  8004210881:	74 12                	je     8004210895 <strcmp+0x39>
  8004210883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210887:	0f b6 10             	movzbl (%rax),%edx
  800421088a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421088e:	0f b6 00             	movzbl (%rax),%eax
  8004210891:	38 c2                	cmp    %al,%dl
  8004210893:	74 d9                	je     800421086e <strcmp+0x12>
  8004210895:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210899:	0f b6 00             	movzbl (%rax),%eax
  800421089c:	0f b6 d0             	movzbl %al,%edx
  800421089f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108a3:	0f b6 00             	movzbl (%rax),%eax
  80042108a6:	0f b6 c0             	movzbl %al,%eax
  80042108a9:	29 c2                	sub    %eax,%edx
  80042108ab:	89 d0                	mov    %edx,%eax
  80042108ad:	c9                   	leaveq 
  80042108ae:	c3                   	retq   

00000080042108af <strncmp>:
  80042108af:	55                   	push   %rbp
  80042108b0:	48 89 e5             	mov    %rsp,%rbp
  80042108b3:	48 83 ec 18          	sub    $0x18,%rsp
  80042108b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042108bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042108bf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042108c3:	eb 0f                	jmp    80042108d4 <strncmp+0x25>
  80042108c5:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  80042108ca:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042108cf:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042108d4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042108d9:	74 1d                	je     80042108f8 <strncmp+0x49>
  80042108db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042108df:	0f b6 00             	movzbl (%rax),%eax
  80042108e2:	84 c0                	test   %al,%al
  80042108e4:	74 12                	je     80042108f8 <strncmp+0x49>
  80042108e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042108ea:	0f b6 10             	movzbl (%rax),%edx
  80042108ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108f1:	0f b6 00             	movzbl (%rax),%eax
  80042108f4:	38 c2                	cmp    %al,%dl
  80042108f6:	74 cd                	je     80042108c5 <strncmp+0x16>
  80042108f8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042108fd:	75 07                	jne    8004210906 <strncmp+0x57>
  80042108ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210904:	eb 18                	jmp    800421091e <strncmp+0x6f>
  8004210906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421090a:	0f b6 00             	movzbl (%rax),%eax
  800421090d:	0f b6 d0             	movzbl %al,%edx
  8004210910:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210914:	0f b6 00             	movzbl (%rax),%eax
  8004210917:	0f b6 c0             	movzbl %al,%eax
  800421091a:	29 c2                	sub    %eax,%edx
  800421091c:	89 d0                	mov    %edx,%eax
  800421091e:	c9                   	leaveq 
  800421091f:	c3                   	retq   

0000008004210920 <strchr>:
  8004210920:	55                   	push   %rbp
  8004210921:	48 89 e5             	mov    %rsp,%rbp
  8004210924:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210928:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421092c:	89 f0                	mov    %esi,%eax
  800421092e:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210931:	eb 17                	jmp    800421094a <strchr+0x2a>
  8004210933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210937:	0f b6 00             	movzbl (%rax),%eax
  800421093a:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800421093d:	75 06                	jne    8004210945 <strchr+0x25>
  800421093f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210943:	eb 15                	jmp    800421095a <strchr+0x3a>
  8004210945:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421094a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421094e:	0f b6 00             	movzbl (%rax),%eax
  8004210951:	84 c0                	test   %al,%al
  8004210953:	75 de                	jne    8004210933 <strchr+0x13>
  8004210955:	b8 00 00 00 00       	mov    $0x0,%eax
  800421095a:	c9                   	leaveq 
  800421095b:	c3                   	retq   

000000800421095c <strfind>:
  800421095c:	55                   	push   %rbp
  800421095d:	48 89 e5             	mov    %rsp,%rbp
  8004210960:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210964:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210968:	89 f0                	mov    %esi,%eax
  800421096a:	88 45 f4             	mov    %al,-0xc(%rbp)
  800421096d:	eb 13                	jmp    8004210982 <strfind+0x26>
  800421096f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210973:	0f b6 00             	movzbl (%rax),%eax
  8004210976:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210979:	75 02                	jne    800421097d <strfind+0x21>
  800421097b:	eb 10                	jmp    800421098d <strfind+0x31>
  800421097d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210982:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210986:	0f b6 00             	movzbl (%rax),%eax
  8004210989:	84 c0                	test   %al,%al
  800421098b:	75 e2                	jne    800421096f <strfind+0x13>
  800421098d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210991:	c9                   	leaveq 
  8004210992:	c3                   	retq   

0000008004210993 <memset>:
  8004210993:	55                   	push   %rbp
  8004210994:	48 89 e5             	mov    %rsp,%rbp
  8004210997:	48 83 ec 18          	sub    $0x18,%rsp
  800421099b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421099f:	89 75 f4             	mov    %esi,-0xc(%rbp)
  80042109a2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042109a6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042109ab:	75 06                	jne    80042109b3 <memset+0x20>
  80042109ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042109b1:	eb 69                	jmp    8004210a1c <memset+0x89>
  80042109b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042109b7:	83 e0 03             	and    $0x3,%eax
  80042109ba:	48 85 c0             	test   %rax,%rax
  80042109bd:	75 48                	jne    8004210a07 <memset+0x74>
  80042109bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109c3:	83 e0 03             	and    $0x3,%eax
  80042109c6:	48 85 c0             	test   %rax,%rax
  80042109c9:	75 3c                	jne    8004210a07 <memset+0x74>
  80042109cb:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  80042109d2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042109d5:	c1 e0 18             	shl    $0x18,%eax
  80042109d8:	89 c2                	mov    %eax,%edx
  80042109da:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042109dd:	c1 e0 10             	shl    $0x10,%eax
  80042109e0:	09 c2                	or     %eax,%edx
  80042109e2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042109e5:	c1 e0 08             	shl    $0x8,%eax
  80042109e8:	09 d0                	or     %edx,%eax
  80042109ea:	09 45 f4             	or     %eax,-0xc(%rbp)
  80042109ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109f1:	48 c1 e8 02          	shr    $0x2,%rax
  80042109f5:	48 89 c1             	mov    %rax,%rcx
  80042109f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042109fc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042109ff:	48 89 d7             	mov    %rdx,%rdi
  8004210a02:	fc                   	cld    
  8004210a03:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210a05:	eb 11                	jmp    8004210a18 <memset+0x85>
  8004210a07:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210a0b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210a0e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210a12:	48 89 d7             	mov    %rdx,%rdi
  8004210a15:	fc                   	cld    
  8004210a16:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a1c:	c9                   	leaveq 
  8004210a1d:	c3                   	retq   

0000008004210a1e <memmove>:
  8004210a1e:	55                   	push   %rbp
  8004210a1f:	48 89 e5             	mov    %rsp,%rbp
  8004210a22:	48 83 ec 28          	sub    $0x28,%rsp
  8004210a26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210a2a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210a2e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210a32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210a36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210a3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a3e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210a42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a46:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210a4a:	0f 83 88 00 00 00    	jae    8004210ad8 <memmove+0xba>
  8004210a50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210a58:	48 01 d0             	add    %rdx,%rax
  8004210a5b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210a5f:	76 77                	jbe    8004210ad8 <memmove+0xba>
  8004210a61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a65:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210a69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a6d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210a71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a75:	83 e0 03             	and    $0x3,%eax
  8004210a78:	48 85 c0             	test   %rax,%rax
  8004210a7b:	75 3b                	jne    8004210ab8 <memmove+0x9a>
  8004210a7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a81:	83 e0 03             	and    $0x3,%eax
  8004210a84:	48 85 c0             	test   %rax,%rax
  8004210a87:	75 2f                	jne    8004210ab8 <memmove+0x9a>
  8004210a89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a8d:	83 e0 03             	and    $0x3,%eax
  8004210a90:	48 85 c0             	test   %rax,%rax
  8004210a93:	75 23                	jne    8004210ab8 <memmove+0x9a>
  8004210a95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a99:	48 83 e8 04          	sub    $0x4,%rax
  8004210a9d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210aa1:	48 83 ea 04          	sub    $0x4,%rdx
  8004210aa5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210aa9:	48 c1 e9 02          	shr    $0x2,%rcx
  8004210aad:	48 89 c7             	mov    %rax,%rdi
  8004210ab0:	48 89 d6             	mov    %rdx,%rsi
  8004210ab3:	fd                   	std    
  8004210ab4:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210ab6:	eb 1d                	jmp    8004210ad5 <memmove+0xb7>
  8004210ab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210abc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ac4:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210ac8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210acc:	48 89 d7             	mov    %rdx,%rdi
  8004210acf:	48 89 c1             	mov    %rax,%rcx
  8004210ad2:	fd                   	std    
  8004210ad3:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210ad5:	fc                   	cld    
  8004210ad6:	eb 57                	jmp    8004210b2f <memmove+0x111>
  8004210ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210adc:	83 e0 03             	and    $0x3,%eax
  8004210adf:	48 85 c0             	test   %rax,%rax
  8004210ae2:	75 36                	jne    8004210b1a <memmove+0xfc>
  8004210ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ae8:	83 e0 03             	and    $0x3,%eax
  8004210aeb:	48 85 c0             	test   %rax,%rax
  8004210aee:	75 2a                	jne    8004210b1a <memmove+0xfc>
  8004210af0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210af4:	83 e0 03             	and    $0x3,%eax
  8004210af7:	48 85 c0             	test   %rax,%rax
  8004210afa:	75 1e                	jne    8004210b1a <memmove+0xfc>
  8004210afc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b00:	48 c1 e8 02          	shr    $0x2,%rax
  8004210b04:	48 89 c1             	mov    %rax,%rcx
  8004210b07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b0b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210b0f:	48 89 c7             	mov    %rax,%rdi
  8004210b12:	48 89 d6             	mov    %rdx,%rsi
  8004210b15:	fc                   	cld    
  8004210b16:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210b18:	eb 15                	jmp    8004210b2f <memmove+0x111>
  8004210b1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210b22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210b26:	48 89 c7             	mov    %rax,%rdi
  8004210b29:	48 89 d6             	mov    %rdx,%rsi
  8004210b2c:	fc                   	cld    
  8004210b2d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210b2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b33:	c9                   	leaveq 
  8004210b34:	c3                   	retq   

0000008004210b35 <memcpy>:
  8004210b35:	55                   	push   %rbp
  8004210b36:	48 89 e5             	mov    %rsp,%rbp
  8004210b39:	48 83 ec 18          	sub    $0x18,%rsp
  8004210b3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210b41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210b45:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b49:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210b4d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b55:	48 89 ce             	mov    %rcx,%rsi
  8004210b58:	48 89 c7             	mov    %rax,%rdi
  8004210b5b:	48 b8 1e 0a 21 04 80 	movabs $0x8004210a1e,%rax
  8004210b62:	00 00 00 
  8004210b65:	ff d0                	callq  *%rax
  8004210b67:	c9                   	leaveq 
  8004210b68:	c3                   	retq   

0000008004210b69 <memcmp>:
  8004210b69:	55                   	push   %rbp
  8004210b6a:	48 89 e5             	mov    %rsp,%rbp
  8004210b6d:	48 83 ec 28          	sub    $0x28,%rsp
  8004210b71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b75:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210b79:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210b7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210b85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210b89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210b8d:	eb 36                	jmp    8004210bc5 <memcmp+0x5c>
  8004210b8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b93:	0f b6 10             	movzbl (%rax),%edx
  8004210b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b9a:	0f b6 00             	movzbl (%rax),%eax
  8004210b9d:	38 c2                	cmp    %al,%dl
  8004210b9f:	74 1a                	je     8004210bbb <memcmp+0x52>
  8004210ba1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ba5:	0f b6 00             	movzbl (%rax),%eax
  8004210ba8:	0f b6 d0             	movzbl %al,%edx
  8004210bab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210baf:	0f b6 00             	movzbl (%rax),%eax
  8004210bb2:	0f b6 c0             	movzbl %al,%eax
  8004210bb5:	29 c2                	sub    %eax,%edx
  8004210bb7:	89 d0                	mov    %edx,%eax
  8004210bb9:	eb 20                	jmp    8004210bdb <memcmp+0x72>
  8004210bbb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210bc0:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210bc5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bc9:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210bcd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210bd1:	48 85 c0             	test   %rax,%rax
  8004210bd4:	75 b9                	jne    8004210b8f <memcmp+0x26>
  8004210bd6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210bdb:	c9                   	leaveq 
  8004210bdc:	c3                   	retq   

0000008004210bdd <memfind>:
  8004210bdd:	55                   	push   %rbp
  8004210bde:	48 89 e5             	mov    %rsp,%rbp
  8004210be1:	48 83 ec 28          	sub    $0x28,%rsp
  8004210be5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210be9:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210bec:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210bf0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bf4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210bf8:	48 01 d0             	add    %rdx,%rax
  8004210bfb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210bff:	eb 15                	jmp    8004210c16 <memfind+0x39>
  8004210c01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c05:	0f b6 10             	movzbl (%rax),%edx
  8004210c08:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210c0b:	38 c2                	cmp    %al,%dl
  8004210c0d:	75 02                	jne    8004210c11 <memfind+0x34>
  8004210c0f:	eb 0f                	jmp    8004210c20 <memfind+0x43>
  8004210c11:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210c16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c1a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004210c1e:	72 e1                	jb     8004210c01 <memfind+0x24>
  8004210c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c24:	c9                   	leaveq 
  8004210c25:	c3                   	retq   

0000008004210c26 <strtol>:
  8004210c26:	55                   	push   %rbp
  8004210c27:	48 89 e5             	mov    %rsp,%rbp
  8004210c2a:	48 83 ec 34          	sub    $0x34,%rsp
  8004210c2e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210c32:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210c36:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210c39:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210c40:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210c47:	00 
  8004210c48:	eb 05                	jmp    8004210c4f <strtol+0x29>
  8004210c4a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210c4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c53:	0f b6 00             	movzbl (%rax),%eax
  8004210c56:	3c 20                	cmp    $0x20,%al
  8004210c58:	74 f0                	je     8004210c4a <strtol+0x24>
  8004210c5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c5e:	0f b6 00             	movzbl (%rax),%eax
  8004210c61:	3c 09                	cmp    $0x9,%al
  8004210c63:	74 e5                	je     8004210c4a <strtol+0x24>
  8004210c65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c69:	0f b6 00             	movzbl (%rax),%eax
  8004210c6c:	3c 2b                	cmp    $0x2b,%al
  8004210c6e:	75 07                	jne    8004210c77 <strtol+0x51>
  8004210c70:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210c75:	eb 17                	jmp    8004210c8e <strtol+0x68>
  8004210c77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c7b:	0f b6 00             	movzbl (%rax),%eax
  8004210c7e:	3c 2d                	cmp    $0x2d,%al
  8004210c80:	75 0c                	jne    8004210c8e <strtol+0x68>
  8004210c82:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210c87:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  8004210c8e:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210c92:	74 06                	je     8004210c9a <strtol+0x74>
  8004210c94:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210c98:	75 28                	jne    8004210cc2 <strtol+0x9c>
  8004210c9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c9e:	0f b6 00             	movzbl (%rax),%eax
  8004210ca1:	3c 30                	cmp    $0x30,%al
  8004210ca3:	75 1d                	jne    8004210cc2 <strtol+0x9c>
  8004210ca5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ca9:	48 83 c0 01          	add    $0x1,%rax
  8004210cad:	0f b6 00             	movzbl (%rax),%eax
  8004210cb0:	3c 78                	cmp    $0x78,%al
  8004210cb2:	75 0e                	jne    8004210cc2 <strtol+0x9c>
  8004210cb4:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210cb9:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  8004210cc0:	eb 2c                	jmp    8004210cee <strtol+0xc8>
  8004210cc2:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210cc6:	75 19                	jne    8004210ce1 <strtol+0xbb>
  8004210cc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ccc:	0f b6 00             	movzbl (%rax),%eax
  8004210ccf:	3c 30                	cmp    $0x30,%al
  8004210cd1:	75 0e                	jne    8004210ce1 <strtol+0xbb>
  8004210cd3:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210cd8:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004210cdf:	eb 0d                	jmp    8004210cee <strtol+0xc8>
  8004210ce1:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210ce5:	75 07                	jne    8004210cee <strtol+0xc8>
  8004210ce7:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004210cee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cf2:	0f b6 00             	movzbl (%rax),%eax
  8004210cf5:	3c 2f                	cmp    $0x2f,%al
  8004210cf7:	7e 1d                	jle    8004210d16 <strtol+0xf0>
  8004210cf9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cfd:	0f b6 00             	movzbl (%rax),%eax
  8004210d00:	3c 39                	cmp    $0x39,%al
  8004210d02:	7f 12                	jg     8004210d16 <strtol+0xf0>
  8004210d04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d08:	0f b6 00             	movzbl (%rax),%eax
  8004210d0b:	0f be c0             	movsbl %al,%eax
  8004210d0e:	83 e8 30             	sub    $0x30,%eax
  8004210d11:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210d14:	eb 4e                	jmp    8004210d64 <strtol+0x13e>
  8004210d16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d1a:	0f b6 00             	movzbl (%rax),%eax
  8004210d1d:	3c 60                	cmp    $0x60,%al
  8004210d1f:	7e 1d                	jle    8004210d3e <strtol+0x118>
  8004210d21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d25:	0f b6 00             	movzbl (%rax),%eax
  8004210d28:	3c 7a                	cmp    $0x7a,%al
  8004210d2a:	7f 12                	jg     8004210d3e <strtol+0x118>
  8004210d2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d30:	0f b6 00             	movzbl (%rax),%eax
  8004210d33:	0f be c0             	movsbl %al,%eax
  8004210d36:	83 e8 57             	sub    $0x57,%eax
  8004210d39:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210d3c:	eb 26                	jmp    8004210d64 <strtol+0x13e>
  8004210d3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d42:	0f b6 00             	movzbl (%rax),%eax
  8004210d45:	3c 40                	cmp    $0x40,%al
  8004210d47:	7e 48                	jle    8004210d91 <strtol+0x16b>
  8004210d49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d4d:	0f b6 00             	movzbl (%rax),%eax
  8004210d50:	3c 5a                	cmp    $0x5a,%al
  8004210d52:	7f 3d                	jg     8004210d91 <strtol+0x16b>
  8004210d54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d58:	0f b6 00             	movzbl (%rax),%eax
  8004210d5b:	0f be c0             	movsbl %al,%eax
  8004210d5e:	83 e8 37             	sub    $0x37,%eax
  8004210d61:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210d64:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210d67:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004210d6a:	7c 02                	jl     8004210d6e <strtol+0x148>
  8004210d6c:	eb 23                	jmp    8004210d91 <strtol+0x16b>
  8004210d6e:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210d73:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210d76:	48 98                	cltq   
  8004210d78:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  8004210d7d:	48 89 c2             	mov    %rax,%rdx
  8004210d80:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210d83:	48 98                	cltq   
  8004210d85:	48 01 d0             	add    %rdx,%rax
  8004210d88:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210d8c:	e9 5d ff ff ff       	jmpq   8004210cee <strtol+0xc8>
  8004210d91:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210d96:	74 0b                	je     8004210da3 <strtol+0x17d>
  8004210d98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210d9c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210da0:	48 89 10             	mov    %rdx,(%rax)
  8004210da3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210da7:	74 09                	je     8004210db2 <strtol+0x18c>
  8004210da9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210dad:	48 f7 d8             	neg    %rax
  8004210db0:	eb 04                	jmp    8004210db6 <strtol+0x190>
  8004210db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210db6:	c9                   	leaveq 
  8004210db7:	c3                   	retq   

0000008004210db8 <strstr>:
  8004210db8:	55                   	push   %rbp
  8004210db9:	48 89 e5             	mov    %rsp,%rbp
  8004210dbc:	48 83 ec 30          	sub    $0x30,%rsp
  8004210dc0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210dc4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210dc8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210dcc:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210dd0:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004210dd4:	0f b6 00             	movzbl (%rax),%eax
  8004210dd7:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004210dda:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004210dde:	75 06                	jne    8004210de6 <strstr+0x2e>
  8004210de0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210de4:	eb 6b                	jmp    8004210e51 <strstr+0x99>
  8004210de6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210dea:	48 89 c7             	mov    %rax,%rdi
  8004210ded:	48 b8 8e 06 21 04 80 	movabs $0x800421068e,%rax
  8004210df4:	00 00 00 
  8004210df7:	ff d0                	callq  *%rax
  8004210df9:	48 98                	cltq   
  8004210dfb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210dff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e03:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210e07:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210e0b:	0f b6 00             	movzbl (%rax),%eax
  8004210e0e:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004210e11:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  8004210e15:	75 07                	jne    8004210e1e <strstr+0x66>
  8004210e17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210e1c:	eb 33                	jmp    8004210e51 <strstr+0x99>
  8004210e1e:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004210e22:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004210e25:	75 d8                	jne    8004210dff <strstr+0x47>
  8004210e27:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210e2b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004210e2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e33:	48 89 ce             	mov    %rcx,%rsi
  8004210e36:	48 89 c7             	mov    %rax,%rdi
  8004210e39:	48 b8 af 08 21 04 80 	movabs $0x80042108af,%rax
  8004210e40:	00 00 00 
  8004210e43:	ff d0                	callq  *%rax
  8004210e45:	85 c0                	test   %eax,%eax
  8004210e47:	75 b6                	jne    8004210dff <strstr+0x47>
  8004210e49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e4d:	48 83 e8 01          	sub    $0x1,%rax
  8004210e51:	c9                   	leaveq 
  8004210e52:	c3                   	retq   

0000008004210e53 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210e53:	55                   	push   %rbp
  8004210e54:	48 89 e5             	mov    %rsp,%rbp
  8004210e57:	48 83 ec 24          	sub    $0x24,%rsp
  8004210e5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e5f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210e63:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210e66:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e6a:	48 8b 10             	mov    (%rax),%rdx
  8004210e6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e71:	48 01 d0             	add    %rdx,%rax
  8004210e74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210e78:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210e7f:	00 
	switch (bytes_to_read) {
  8004210e80:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210e83:	83 f8 02             	cmp    $0x2,%eax
  8004210e86:	0f 84 ab 00 00 00    	je     8004210f37 <_dwarf_read_lsb+0xe4>
  8004210e8c:	83 f8 02             	cmp    $0x2,%eax
  8004210e8f:	7f 0e                	jg     8004210e9f <_dwarf_read_lsb+0x4c>
  8004210e91:	83 f8 01             	cmp    $0x1,%eax
  8004210e94:	0f 84 b3 00 00 00    	je     8004210f4d <_dwarf_read_lsb+0xfa>
  8004210e9a:	e9 d9 00 00 00       	jmpq   8004210f78 <_dwarf_read_lsb+0x125>
  8004210e9f:	83 f8 04             	cmp    $0x4,%eax
  8004210ea2:	74 65                	je     8004210f09 <_dwarf_read_lsb+0xb6>
  8004210ea4:	83 f8 08             	cmp    $0x8,%eax
  8004210ea7:	0f 85 cb 00 00 00    	jne    8004210f78 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004210ead:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210eb1:	48 83 c0 04          	add    $0x4,%rax
  8004210eb5:	0f b6 00             	movzbl (%rax),%eax
  8004210eb8:	0f b6 c0             	movzbl %al,%eax
  8004210ebb:	48 c1 e0 20          	shl    $0x20,%rax
  8004210ebf:	48 89 c2             	mov    %rax,%rdx
  8004210ec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ec6:	48 83 c0 05          	add    $0x5,%rax
  8004210eca:	0f b6 00             	movzbl (%rax),%eax
  8004210ecd:	0f b6 c0             	movzbl %al,%eax
  8004210ed0:	48 c1 e0 28          	shl    $0x28,%rax
  8004210ed4:	48 09 d0             	or     %rdx,%rax
  8004210ed7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210edb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210edf:	48 83 c0 06          	add    $0x6,%rax
  8004210ee3:	0f b6 00             	movzbl (%rax),%eax
  8004210ee6:	0f b6 c0             	movzbl %al,%eax
  8004210ee9:	48 c1 e0 30          	shl    $0x30,%rax
  8004210eed:	48 89 c2             	mov    %rax,%rdx
  8004210ef0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ef4:	48 83 c0 07          	add    $0x7,%rax
  8004210ef8:	0f b6 00             	movzbl (%rax),%eax
  8004210efb:	0f b6 c0             	movzbl %al,%eax
  8004210efe:	48 c1 e0 38          	shl    $0x38,%rax
  8004210f02:	48 09 d0             	or     %rdx,%rax
  8004210f05:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210f09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f0d:	48 83 c0 02          	add    $0x2,%rax
  8004210f11:	0f b6 00             	movzbl (%rax),%eax
  8004210f14:	0f b6 c0             	movzbl %al,%eax
  8004210f17:	48 c1 e0 10          	shl    $0x10,%rax
  8004210f1b:	48 89 c2             	mov    %rax,%rdx
  8004210f1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f22:	48 83 c0 03          	add    $0x3,%rax
  8004210f26:	0f b6 00             	movzbl (%rax),%eax
  8004210f29:	0f b6 c0             	movzbl %al,%eax
  8004210f2c:	48 c1 e0 18          	shl    $0x18,%rax
  8004210f30:	48 09 d0             	or     %rdx,%rax
  8004210f33:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210f37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f3b:	48 83 c0 01          	add    $0x1,%rax
  8004210f3f:	0f b6 00             	movzbl (%rax),%eax
  8004210f42:	0f b6 c0             	movzbl %al,%eax
  8004210f45:	48 c1 e0 08          	shl    $0x8,%rax
  8004210f49:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004210f4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f51:	0f b6 00             	movzbl (%rax),%eax
  8004210f54:	0f b6 c0             	movzbl %al,%eax
  8004210f57:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210f5b:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004210f5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f60:	48 8b 10             	mov    (%rax),%rdx
  8004210f63:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210f66:	48 98                	cltq   
  8004210f68:	48 01 c2             	add    %rax,%rdx
  8004210f6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f6f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210f72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f76:	eb 05                	jmp    8004210f7d <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210f78:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  8004210f7d:	c9                   	leaveq 
  8004210f7e:	c3                   	retq   

0000008004210f7f <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  8004210f7f:	55                   	push   %rbp
  8004210f80:	48 89 e5             	mov    %rsp,%rbp
  8004210f83:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210f87:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210f8b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004210f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f92:	48 8b 00             	mov    (%rax),%rax
  8004210f95:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210f99:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210fa0:	00 
	switch (bytes_to_read) {
  8004210fa1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210fa4:	83 f8 02             	cmp    $0x2,%eax
  8004210fa7:	0f 84 ab 00 00 00    	je     8004211058 <_dwarf_decode_lsb+0xd9>
  8004210fad:	83 f8 02             	cmp    $0x2,%eax
  8004210fb0:	7f 0e                	jg     8004210fc0 <_dwarf_decode_lsb+0x41>
  8004210fb2:	83 f8 01             	cmp    $0x1,%eax
  8004210fb5:	0f 84 b3 00 00 00    	je     800421106e <_dwarf_decode_lsb+0xef>
  8004210fbb:	e9 d9 00 00 00       	jmpq   8004211099 <_dwarf_decode_lsb+0x11a>
  8004210fc0:	83 f8 04             	cmp    $0x4,%eax
  8004210fc3:	74 65                	je     800421102a <_dwarf_decode_lsb+0xab>
  8004210fc5:	83 f8 08             	cmp    $0x8,%eax
  8004210fc8:	0f 85 cb 00 00 00    	jne    8004211099 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004210fce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fd2:	48 83 c0 04          	add    $0x4,%rax
  8004210fd6:	0f b6 00             	movzbl (%rax),%eax
  8004210fd9:	0f b6 c0             	movzbl %al,%eax
  8004210fdc:	48 c1 e0 20          	shl    $0x20,%rax
  8004210fe0:	48 89 c2             	mov    %rax,%rdx
  8004210fe3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fe7:	48 83 c0 05          	add    $0x5,%rax
  8004210feb:	0f b6 00             	movzbl (%rax),%eax
  8004210fee:	0f b6 c0             	movzbl %al,%eax
  8004210ff1:	48 c1 e0 28          	shl    $0x28,%rax
  8004210ff5:	48 09 d0             	or     %rdx,%rax
  8004210ff8:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210ffc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211000:	48 83 c0 06          	add    $0x6,%rax
  8004211004:	0f b6 00             	movzbl (%rax),%eax
  8004211007:	0f b6 c0             	movzbl %al,%eax
  800421100a:	48 c1 e0 30          	shl    $0x30,%rax
  800421100e:	48 89 c2             	mov    %rax,%rdx
  8004211011:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211015:	48 83 c0 07          	add    $0x7,%rax
  8004211019:	0f b6 00             	movzbl (%rax),%eax
  800421101c:	0f b6 c0             	movzbl %al,%eax
  800421101f:	48 c1 e0 38          	shl    $0x38,%rax
  8004211023:	48 09 d0             	or     %rdx,%rax
  8004211026:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  800421102a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421102e:	48 83 c0 02          	add    $0x2,%rax
  8004211032:	0f b6 00             	movzbl (%rax),%eax
  8004211035:	0f b6 c0             	movzbl %al,%eax
  8004211038:	48 c1 e0 10          	shl    $0x10,%rax
  800421103c:	48 89 c2             	mov    %rax,%rdx
  800421103f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211043:	48 83 c0 03          	add    $0x3,%rax
  8004211047:	0f b6 00             	movzbl (%rax),%eax
  800421104a:	0f b6 c0             	movzbl %al,%eax
  800421104d:	48 c1 e0 18          	shl    $0x18,%rax
  8004211051:	48 09 d0             	or     %rdx,%rax
  8004211054:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004211058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421105c:	48 83 c0 01          	add    $0x1,%rax
  8004211060:	0f b6 00             	movzbl (%rax),%eax
  8004211063:	0f b6 c0             	movzbl %al,%eax
  8004211066:	48 c1 e0 08          	shl    $0x8,%rax
  800421106a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421106e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211072:	0f b6 00             	movzbl (%rax),%eax
  8004211075:	0f b6 c0             	movzbl %al,%eax
  8004211078:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421107c:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800421107d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211081:	48 8b 10             	mov    (%rax),%rdx
  8004211084:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211087:	48 98                	cltq   
  8004211089:	48 01 c2             	add    %rax,%rdx
  800421108c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211090:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211093:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211097:	eb 05                	jmp    800421109e <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211099:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800421109e:	c9                   	leaveq 
  800421109f:	c3                   	retq   

00000080042110a0 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042110a0:	55                   	push   %rbp
  80042110a1:	48 89 e5             	mov    %rsp,%rbp
  80042110a4:	48 83 ec 24          	sub    $0x24,%rsp
  80042110a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042110ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042110b0:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042110b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110b7:	48 8b 10             	mov    (%rax),%rdx
  80042110ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110be:	48 01 d0             	add    %rdx,%rax
  80042110c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  80042110c5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042110c8:	83 f8 02             	cmp    $0x2,%eax
  80042110cb:	74 35                	je     8004211102 <_dwarf_read_msb+0x62>
  80042110cd:	83 f8 02             	cmp    $0x2,%eax
  80042110d0:	7f 0a                	jg     80042110dc <_dwarf_read_msb+0x3c>
  80042110d2:	83 f8 01             	cmp    $0x1,%eax
  80042110d5:	74 18                	je     80042110ef <_dwarf_read_msb+0x4f>
  80042110d7:	e9 53 01 00 00       	jmpq   800421122f <_dwarf_read_msb+0x18f>
  80042110dc:	83 f8 04             	cmp    $0x4,%eax
  80042110df:	74 49                	je     800421112a <_dwarf_read_msb+0x8a>
  80042110e1:	83 f8 08             	cmp    $0x8,%eax
  80042110e4:	0f 84 96 00 00 00    	je     8004211180 <_dwarf_read_msb+0xe0>
  80042110ea:	e9 40 01 00 00       	jmpq   800421122f <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  80042110ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110f3:	0f b6 00             	movzbl (%rax),%eax
  80042110f6:	0f b6 c0             	movzbl %al,%eax
  80042110f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042110fd:	e9 34 01 00 00       	jmpq   8004211236 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211106:	48 83 c0 01          	add    $0x1,%rax
  800421110a:	0f b6 00             	movzbl (%rax),%eax
  800421110d:	0f b6 d0             	movzbl %al,%edx
  8004211110:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211114:	0f b6 00             	movzbl (%rax),%eax
  8004211117:	0f b6 c0             	movzbl %al,%eax
  800421111a:	48 c1 e0 08          	shl    $0x8,%rax
  800421111e:	48 09 d0             	or     %rdx,%rax
  8004211121:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211125:	e9 0c 01 00 00       	jmpq   8004211236 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  800421112a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421112e:	48 83 c0 03          	add    $0x3,%rax
  8004211132:	0f b6 00             	movzbl (%rax),%eax
  8004211135:	0f b6 c0             	movzbl %al,%eax
  8004211138:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421113c:	48 83 c2 02          	add    $0x2,%rdx
  8004211140:	0f b6 12             	movzbl (%rdx),%edx
  8004211143:	0f b6 d2             	movzbl %dl,%edx
  8004211146:	48 c1 e2 08          	shl    $0x8,%rdx
  800421114a:	48 09 d0             	or     %rdx,%rax
  800421114d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211151:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211155:	48 83 c0 01          	add    $0x1,%rax
  8004211159:	0f b6 00             	movzbl (%rax),%eax
  800421115c:	0f b6 c0             	movzbl %al,%eax
  800421115f:	48 c1 e0 10          	shl    $0x10,%rax
  8004211163:	48 89 c2             	mov    %rax,%rdx
  8004211166:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421116a:	0f b6 00             	movzbl (%rax),%eax
  800421116d:	0f b6 c0             	movzbl %al,%eax
  8004211170:	48 c1 e0 18          	shl    $0x18,%rax
  8004211174:	48 09 d0             	or     %rdx,%rax
  8004211177:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421117b:	e9 b6 00 00 00       	jmpq   8004211236 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211180:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211184:	48 83 c0 07          	add    $0x7,%rax
  8004211188:	0f b6 00             	movzbl (%rax),%eax
  800421118b:	0f b6 c0             	movzbl %al,%eax
  800421118e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211192:	48 83 c2 06          	add    $0x6,%rdx
  8004211196:	0f b6 12             	movzbl (%rdx),%edx
  8004211199:	0f b6 d2             	movzbl %dl,%edx
  800421119c:	48 c1 e2 08          	shl    $0x8,%rdx
  80042111a0:	48 09 d0             	or     %rdx,%rax
  80042111a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042111a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111ab:	48 83 c0 05          	add    $0x5,%rax
  80042111af:	0f b6 00             	movzbl (%rax),%eax
  80042111b2:	0f b6 c0             	movzbl %al,%eax
  80042111b5:	48 c1 e0 10          	shl    $0x10,%rax
  80042111b9:	48 89 c2             	mov    %rax,%rdx
  80042111bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111c0:	48 83 c0 04          	add    $0x4,%rax
  80042111c4:	0f b6 00             	movzbl (%rax),%eax
  80042111c7:	0f b6 c0             	movzbl %al,%eax
  80042111ca:	48 c1 e0 18          	shl    $0x18,%rax
  80042111ce:	48 09 d0             	or     %rdx,%rax
  80042111d1:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042111d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111d9:	48 83 c0 03          	add    $0x3,%rax
  80042111dd:	0f b6 00             	movzbl (%rax),%eax
  80042111e0:	0f b6 c0             	movzbl %al,%eax
  80042111e3:	48 c1 e0 20          	shl    $0x20,%rax
  80042111e7:	48 89 c2             	mov    %rax,%rdx
  80042111ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111ee:	48 83 c0 02          	add    $0x2,%rax
  80042111f2:	0f b6 00             	movzbl (%rax),%eax
  80042111f5:	0f b6 c0             	movzbl %al,%eax
  80042111f8:	48 c1 e0 28          	shl    $0x28,%rax
  80042111fc:	48 09 d0             	or     %rdx,%rax
  80042111ff:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211203:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211207:	48 83 c0 01          	add    $0x1,%rax
  800421120b:	0f b6 00             	movzbl (%rax),%eax
  800421120e:	0f b6 c0             	movzbl %al,%eax
  8004211211:	48 c1 e0 30          	shl    $0x30,%rax
  8004211215:	48 89 c2             	mov    %rax,%rdx
  8004211218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421121c:	0f b6 00             	movzbl (%rax),%eax
  800421121f:	0f b6 c0             	movzbl %al,%eax
  8004211222:	48 c1 e0 38          	shl    $0x38,%rax
  8004211226:	48 09 d0             	or     %rdx,%rax
  8004211229:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421122d:	eb 07                	jmp    8004211236 <_dwarf_read_msb+0x196>
	default:
		return (0);
  800421122f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211234:	eb 1a                	jmp    8004211250 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004211236:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421123a:	48 8b 10             	mov    (%rax),%rdx
  800421123d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211240:	48 98                	cltq   
  8004211242:	48 01 c2             	add    %rax,%rdx
  8004211245:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211249:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421124c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211250:	c9                   	leaveq 
  8004211251:	c3                   	retq   

0000008004211252 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  8004211252:	55                   	push   %rbp
  8004211253:	48 89 e5             	mov    %rsp,%rbp
  8004211256:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421125a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421125e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211265:	48 8b 00             	mov    (%rax),%rax
  8004211268:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421126c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211273:	00 
	switch (bytes_to_read) {
  8004211274:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211277:	83 f8 02             	cmp    $0x2,%eax
  800421127a:	74 35                	je     80042112b1 <_dwarf_decode_msb+0x5f>
  800421127c:	83 f8 02             	cmp    $0x2,%eax
  800421127f:	7f 0a                	jg     800421128b <_dwarf_decode_msb+0x39>
  8004211281:	83 f8 01             	cmp    $0x1,%eax
  8004211284:	74 18                	je     800421129e <_dwarf_decode_msb+0x4c>
  8004211286:	e9 53 01 00 00       	jmpq   80042113de <_dwarf_decode_msb+0x18c>
  800421128b:	83 f8 04             	cmp    $0x4,%eax
  800421128e:	74 49                	je     80042112d9 <_dwarf_decode_msb+0x87>
  8004211290:	83 f8 08             	cmp    $0x8,%eax
  8004211293:	0f 84 96 00 00 00    	je     800421132f <_dwarf_decode_msb+0xdd>
  8004211299:	e9 40 01 00 00       	jmpq   80042113de <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  800421129e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112a2:	0f b6 00             	movzbl (%rax),%eax
  80042112a5:	0f b6 c0             	movzbl %al,%eax
  80042112a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042112ac:	e9 34 01 00 00       	jmpq   80042113e5 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042112b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112b5:	48 83 c0 01          	add    $0x1,%rax
  80042112b9:	0f b6 00             	movzbl (%rax),%eax
  80042112bc:	0f b6 d0             	movzbl %al,%edx
  80042112bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112c3:	0f b6 00             	movzbl (%rax),%eax
  80042112c6:	0f b6 c0             	movzbl %al,%eax
  80042112c9:	48 c1 e0 08          	shl    $0x8,%rax
  80042112cd:	48 09 d0             	or     %rdx,%rax
  80042112d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042112d4:	e9 0c 01 00 00       	jmpq   80042113e5 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042112d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112dd:	48 83 c0 03          	add    $0x3,%rax
  80042112e1:	0f b6 00             	movzbl (%rax),%eax
  80042112e4:	0f b6 c0             	movzbl %al,%eax
  80042112e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042112eb:	48 83 c2 02          	add    $0x2,%rdx
  80042112ef:	0f b6 12             	movzbl (%rdx),%edx
  80042112f2:	0f b6 d2             	movzbl %dl,%edx
  80042112f5:	48 c1 e2 08          	shl    $0x8,%rdx
  80042112f9:	48 09 d0             	or     %rdx,%rax
  80042112fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211300:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211304:	48 83 c0 01          	add    $0x1,%rax
  8004211308:	0f b6 00             	movzbl (%rax),%eax
  800421130b:	0f b6 c0             	movzbl %al,%eax
  800421130e:	48 c1 e0 10          	shl    $0x10,%rax
  8004211312:	48 89 c2             	mov    %rax,%rdx
  8004211315:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211319:	0f b6 00             	movzbl (%rax),%eax
  800421131c:	0f b6 c0             	movzbl %al,%eax
  800421131f:	48 c1 e0 18          	shl    $0x18,%rax
  8004211323:	48 09 d0             	or     %rdx,%rax
  8004211326:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421132a:	e9 b6 00 00 00       	jmpq   80042113e5 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421132f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211333:	48 83 c0 07          	add    $0x7,%rax
  8004211337:	0f b6 00             	movzbl (%rax),%eax
  800421133a:	0f b6 c0             	movzbl %al,%eax
  800421133d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211341:	48 83 c2 06          	add    $0x6,%rdx
  8004211345:	0f b6 12             	movzbl (%rdx),%edx
  8004211348:	0f b6 d2             	movzbl %dl,%edx
  800421134b:	48 c1 e2 08          	shl    $0x8,%rdx
  800421134f:	48 09 d0             	or     %rdx,%rax
  8004211352:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004211356:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421135a:	48 83 c0 05          	add    $0x5,%rax
  800421135e:	0f b6 00             	movzbl (%rax),%eax
  8004211361:	0f b6 c0             	movzbl %al,%eax
  8004211364:	48 c1 e0 10          	shl    $0x10,%rax
  8004211368:	48 89 c2             	mov    %rax,%rdx
  800421136b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421136f:	48 83 c0 04          	add    $0x4,%rax
  8004211373:	0f b6 00             	movzbl (%rax),%eax
  8004211376:	0f b6 c0             	movzbl %al,%eax
  8004211379:	48 c1 e0 18          	shl    $0x18,%rax
  800421137d:	48 09 d0             	or     %rdx,%rax
  8004211380:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211388:	48 83 c0 03          	add    $0x3,%rax
  800421138c:	0f b6 00             	movzbl (%rax),%eax
  800421138f:	0f b6 c0             	movzbl %al,%eax
  8004211392:	48 c1 e0 20          	shl    $0x20,%rax
  8004211396:	48 89 c2             	mov    %rax,%rdx
  8004211399:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421139d:	48 83 c0 02          	add    $0x2,%rax
  80042113a1:	0f b6 00             	movzbl (%rax),%eax
  80042113a4:	0f b6 c0             	movzbl %al,%eax
  80042113a7:	48 c1 e0 28          	shl    $0x28,%rax
  80042113ab:	48 09 d0             	or     %rdx,%rax
  80042113ae:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042113b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113b6:	48 83 c0 01          	add    $0x1,%rax
  80042113ba:	0f b6 00             	movzbl (%rax),%eax
  80042113bd:	0f b6 c0             	movzbl %al,%eax
  80042113c0:	48 c1 e0 30          	shl    $0x30,%rax
  80042113c4:	48 89 c2             	mov    %rax,%rdx
  80042113c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113cb:	0f b6 00             	movzbl (%rax),%eax
  80042113ce:	0f b6 c0             	movzbl %al,%eax
  80042113d1:	48 c1 e0 38          	shl    $0x38,%rax
  80042113d5:	48 09 d0             	or     %rdx,%rax
  80042113d8:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042113dc:	eb 07                	jmp    80042113e5 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  80042113de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042113e3:	eb 1a                	jmp    80042113ff <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  80042113e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113e9:	48 8b 10             	mov    (%rax),%rdx
  80042113ec:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042113ef:	48 98                	cltq   
  80042113f1:	48 01 c2             	add    %rax,%rdx
  80042113f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113f8:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042113fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042113ff:	c9                   	leaveq 
  8004211400:	c3                   	retq   

0000008004211401 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211401:	55                   	push   %rbp
  8004211402:	48 89 e5             	mov    %rsp,%rbp
  8004211405:	48 83 ec 30          	sub    $0x30,%rsp
  8004211409:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421140d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004211411:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211418:	00 
	uint8_t b;
	int shift = 0;
  8004211419:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211420:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211424:	48 8b 10             	mov    (%rax),%rdx
  8004211427:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421142b:	48 01 d0             	add    %rdx,%rax
  800421142e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211432:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211436:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421143a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421143e:	0f b6 00             	movzbl (%rax),%eax
  8004211441:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211444:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211448:	83 e0 7f             	and    $0x7f,%eax
  800421144b:	89 c2                	mov    %eax,%edx
  800421144d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211450:	89 c1                	mov    %eax,%ecx
  8004211452:	d3 e2                	shl    %cl,%edx
  8004211454:	89 d0                	mov    %edx,%eax
  8004211456:	48 98                	cltq   
  8004211458:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  800421145c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211460:	48 8b 00             	mov    (%rax),%rax
  8004211463:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211467:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421146b:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  800421146e:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211472:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211476:	84 c0                	test   %al,%al
  8004211478:	78 b8                	js     8004211432 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  800421147a:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800421147e:	7f 1f                	jg     800421149f <_dwarf_read_sleb128+0x9e>
  8004211480:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211484:	83 e0 40             	and    $0x40,%eax
  8004211487:	85 c0                	test   %eax,%eax
  8004211489:	74 14                	je     800421149f <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  800421148b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421148e:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211493:	89 c1                	mov    %eax,%ecx
  8004211495:	d3 e2                	shl    %cl,%edx
  8004211497:	89 d0                	mov    %edx,%eax
  8004211499:	48 98                	cltq   
  800421149b:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  800421149f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042114a3:	c9                   	leaveq 
  80042114a4:	c3                   	retq   

00000080042114a5 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  80042114a5:	55                   	push   %rbp
  80042114a6:	48 89 e5             	mov    %rsp,%rbp
  80042114a9:	48 83 ec 30          	sub    $0x30,%rsp
  80042114ad:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042114b1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  80042114b5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042114bc:	00 
	uint8_t b;
	int shift = 0;
  80042114bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042114c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042114c8:	48 8b 10             	mov    (%rax),%rdx
  80042114cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042114cf:	48 01 d0             	add    %rdx,%rax
  80042114d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042114d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042114da:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042114de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042114e2:	0f b6 00             	movzbl (%rax),%eax
  80042114e5:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042114e8:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042114ec:	83 e0 7f             	and    $0x7f,%eax
  80042114ef:	89 c2                	mov    %eax,%edx
  80042114f1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042114f4:	89 c1                	mov    %eax,%ecx
  80042114f6:	d3 e2                	shl    %cl,%edx
  80042114f8:	89 d0                	mov    %edx,%eax
  80042114fa:	48 98                	cltq   
  80042114fc:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211500:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211504:	48 8b 00             	mov    (%rax),%rax
  8004211507:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421150b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421150f:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211512:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211516:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421151a:	84 c0                	test   %al,%al
  800421151c:	78 b8                	js     80042114d6 <_dwarf_read_uleb128+0x31>

	return (ret);
  800421151e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211522:	c9                   	leaveq 
  8004211523:	c3                   	retq   

0000008004211524 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004211524:	55                   	push   %rbp
  8004211525:	48 89 e5             	mov    %rsp,%rbp
  8004211528:	48 83 ec 28          	sub    $0x28,%rsp
  800421152c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004211530:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211537:	00 
	uint8_t b;
	int shift = 0;
  8004211538:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  800421153f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211543:	48 8b 00             	mov    (%rax),%rax
  8004211546:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421154a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421154e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211552:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211556:	0f b6 00             	movzbl (%rax),%eax
  8004211559:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800421155c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211560:	83 e0 7f             	and    $0x7f,%eax
  8004211563:	89 c2                	mov    %eax,%edx
  8004211565:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211568:	89 c1                	mov    %eax,%ecx
  800421156a:	d3 e2                	shl    %cl,%edx
  800421156c:	89 d0                	mov    %edx,%eax
  800421156e:	48 98                	cltq   
  8004211570:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211574:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211578:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421157c:	84 c0                	test   %al,%al
  800421157e:	78 ca                	js     800421154a <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211580:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211584:	7f 1f                	jg     80042115a5 <_dwarf_decode_sleb128+0x81>
  8004211586:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421158a:	83 e0 40             	and    $0x40,%eax
  800421158d:	85 c0                	test   %eax,%eax
  800421158f:	74 14                	je     80042115a5 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004211591:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211594:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211599:	89 c1                	mov    %eax,%ecx
  800421159b:	d3 e2                	shl    %cl,%edx
  800421159d:	89 d0                	mov    %edx,%eax
  800421159f:	48 98                	cltq   
  80042115a1:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  80042115a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042115ad:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042115b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042115b4:	c9                   	leaveq 
  80042115b5:	c3                   	retq   

00000080042115b6 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  80042115b6:	55                   	push   %rbp
  80042115b7:	48 89 e5             	mov    %rsp,%rbp
  80042115ba:	48 83 ec 28          	sub    $0x28,%rsp
  80042115be:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  80042115c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042115c9:	00 
	uint8_t b;
	int shift = 0;
  80042115ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  80042115d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115d5:	48 8b 00             	mov    (%rax),%rax
  80042115d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042115dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115e0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042115e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042115e8:	0f b6 00             	movzbl (%rax),%eax
  80042115eb:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042115ee:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042115f2:	83 e0 7f             	and    $0x7f,%eax
  80042115f5:	89 c2                	mov    %eax,%edx
  80042115f7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042115fa:	89 c1                	mov    %eax,%ecx
  80042115fc:	d3 e2                	shl    %cl,%edx
  80042115fe:	89 d0                	mov    %edx,%eax
  8004211600:	48 98                	cltq   
  8004211602:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211606:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800421160a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421160e:	84 c0                	test   %al,%al
  8004211610:	78 ca                	js     80042115dc <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004211612:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211616:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421161a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421161d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211621:	c9                   	leaveq 
  8004211622:	c3                   	retq   

0000008004211623 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004211623:	55                   	push   %rbp
  8004211624:	48 89 e5             	mov    %rsp,%rbp
  8004211627:	48 83 ec 28          	sub    $0x28,%rsp
  800421162b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421162f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211633:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004211637:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421163b:	48 8b 10             	mov    (%rax),%rdx
  800421163e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211642:	48 01 d0             	add    %rdx,%rax
  8004211645:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211649:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421164d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211651:	eb 17                	jmp    800421166a <_dwarf_read_string+0x47>
		src++;
  8004211653:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211658:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421165c:	48 8b 00             	mov    (%rax),%rax
  800421165f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211663:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211667:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  800421166a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421166e:	0f b6 00             	movzbl (%rax),%eax
  8004211671:	84 c0                	test   %al,%al
  8004211673:	74 0d                	je     8004211682 <_dwarf_read_string+0x5f>
  8004211675:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211679:	48 8b 00             	mov    (%rax),%rax
  800421167c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211680:	72 d1                	jb     8004211653 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004211682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211686:	0f b6 00             	movzbl (%rax),%eax
  8004211689:	84 c0                	test   %al,%al
  800421168b:	75 1f                	jne    80042116ac <_dwarf_read_string+0x89>
  800421168d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211691:	48 8b 00             	mov    (%rax),%rax
  8004211694:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211698:	73 12                	jae    80042116ac <_dwarf_read_string+0x89>
		(*offsetp)++;
  800421169a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421169e:	48 8b 00             	mov    (%rax),%rax
  80042116a1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042116a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042116a9:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042116ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  80042116b0:	c9                   	leaveq 
  80042116b1:	c3                   	retq   

00000080042116b2 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  80042116b2:	55                   	push   %rbp
  80042116b3:	48 89 e5             	mov    %rsp,%rbp
  80042116b6:	48 83 ec 28          	sub    $0x28,%rsp
  80042116ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042116be:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042116c2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  80042116c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116ca:	48 8b 10             	mov    (%rax),%rdx
  80042116cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116d1:	48 01 d0             	add    %rdx,%rax
  80042116d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042116d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042116dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  80042116e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116e4:	48 8b 10             	mov    (%rax),%rdx
  80042116e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042116eb:	48 01 c2             	add    %rax,%rdx
  80042116ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116f2:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042116f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  80042116f9:	c9                   	leaveq 
  80042116fa:	c3                   	retq   

00000080042116fb <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  80042116fb:	55                   	push   %rbp
  80042116fc:	48 89 e5             	mov    %rsp,%rbp
  80042116ff:	48 83 ec 20          	sub    $0x20,%rsp
  8004211703:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004211707:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421170b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  800421170f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211714:	75 35                	jne    800421174b <_dwarf_elf_get_byte_order+0x50>
  8004211716:	48 b9 20 f3 21 04 80 	movabs $0x800421f320,%rcx
  800421171d:	00 00 00 
  8004211720:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004211727:	00 00 00 
  800421172a:	be 29 01 00 00       	mov    $0x129,%esi
  800421172f:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004211736:	00 00 00 
  8004211739:	b8 00 00 00 00       	mov    $0x0,%eax
  800421173e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211745:	00 00 00 
  8004211748:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  800421174b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421174f:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004211753:	0f b6 c0             	movzbl %al,%eax
  8004211756:	83 f8 02             	cmp    $0x2,%eax
  8004211759:	75 07                	jne    8004211762 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  800421175b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211760:	eb 05                	jmp    8004211767 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211762:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211767:	c9                   	leaveq 
  8004211768:	c3                   	retq   

0000008004211769 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211769:	55                   	push   %rbp
  800421176a:	48 89 e5             	mov    %rsp,%rbp
  800421176d:	48 83 ec 20          	sub    $0x20,%rsp
  8004211771:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211775:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211779:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  800421177d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211782:	75 35                	jne    80042117b9 <_dwarf_elf_get_pointer_size+0x50>
  8004211784:	48 b9 20 f3 21 04 80 	movabs $0x800421f320,%rcx
  800421178b:	00 00 00 
  800421178e:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004211795:	00 00 00 
  8004211798:	be 3f 01 00 00       	mov    $0x13f,%esi
  800421179d:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  80042117a4:	00 00 00 
  80042117a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042117ac:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042117b3:	00 00 00 
  80042117b6:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  80042117b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042117bd:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  80042117c1:	3c 01                	cmp    $0x1,%al
  80042117c3:	75 07                	jne    80042117cc <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  80042117c5:	b8 04 00 00 00       	mov    $0x4,%eax
  80042117ca:	eb 05                	jmp    80042117d1 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  80042117cc:	b8 08 00 00 00       	mov    $0x8,%eax
}
  80042117d1:	c9                   	leaveq 
  80042117d2:	c3                   	retq   

00000080042117d3 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  80042117d3:	55                   	push   %rbp
  80042117d4:	48 89 e5             	mov    %rsp,%rbp
  80042117d7:	53                   	push   %rbx
  80042117d8:	48 83 ec 18          	sub    $0x18,%rsp
  80042117dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042117e0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  80042117e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117e8:	ba 60 00 00 00       	mov    $0x60,%edx
  80042117ed:	be 00 00 00 00       	mov    $0x0,%esi
  80042117f2:	48 89 c7             	mov    %rax,%rdi
  80042117f5:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  80042117fc:	00 00 00 
  80042117ff:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004211801:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211805:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  800421180c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211810:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004211817:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004211818:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421181c:	48 89 c7             	mov    %rax,%rdi
  800421181f:	48 b8 69 17 21 04 80 	movabs $0x8004211769,%rax
  8004211826:	00 00 00 
  8004211829:	ff d0                	callq  *%rax
  800421182b:	0f b6 d0             	movzbl %al,%edx
  800421182e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211832:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211835:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211839:	48 89 c7             	mov    %rax,%rdi
  800421183c:	48 b8 fb 16 21 04 80 	movabs $0x80042116fb,%rax
  8004211843:	00 00 00 
  8004211846:	ff d0                	callq  *%rax
  8004211848:	85 c0                	test   %eax,%eax
  800421184a:	75 26                	jne    8004211872 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  800421184c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211850:	48 b9 a0 10 21 04 80 	movabs $0x80042110a0,%rcx
  8004211857:	00 00 00 
  800421185a:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  800421185e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211862:	48 bb 52 12 21 04 80 	movabs $0x8004211252,%rbx
  8004211869:	00 00 00 
  800421186c:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211870:	eb 24                	jmp    8004211896 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211872:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211876:	48 b9 53 0e 21 04 80 	movabs $0x8004210e53,%rcx
  800421187d:	00 00 00 
  8004211880:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211884:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211888:	48 be 7f 0f 21 04 80 	movabs $0x8004210f7f,%rsi
  800421188f:	00 00 00 
  8004211892:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211896:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421189a:	48 89 c7             	mov    %rax,%rdi
  800421189d:	48 b8 a0 2d 21 04 80 	movabs $0x8004212da0,%rax
  80042118a4:	00 00 00 
  80042118a7:	ff d0                	callq  *%rax
	return 0;
  80042118a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042118ae:	48 83 c4 18          	add    $0x18,%rsp
  80042118b2:	5b                   	pop    %rbx
  80042118b3:	5d                   	pop    %rbp
  80042118b4:	c3                   	retq   

00000080042118b5 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  80042118b5:	55                   	push   %rbp
  80042118b6:	48 89 e5             	mov    %rsp,%rbp
  80042118b9:	48 83 ec 20          	sub    $0x20,%rsp
  80042118bd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042118c1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  80042118c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118c9:	48 8b 10             	mov    (%rax),%rdx
  80042118cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118d0:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042118d4:	48 39 c2             	cmp    %rax,%rdx
  80042118d7:	76 0a                	jbe    80042118e3 <_get_next_cu+0x2e>
		return -1;
  80042118d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042118de:	e9 6b 01 00 00       	jmpq   8004211a4e <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  80042118e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118e7:	48 8b 00             	mov    (%rax),%rax
  80042118ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  80042118ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042118f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118f6:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  80042118fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118fe:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211902:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211906:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800421190a:	48 89 d1             	mov    %rdx,%rcx
  800421190d:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211911:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211916:	48 89 cf             	mov    %rcx,%rdi
  8004211919:	ff d0                	callq  *%rax
  800421191b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  800421191e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211922:	75 2a                	jne    800421194e <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211924:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211928:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421192c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211930:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211934:	48 89 d1             	mov    %rdx,%rcx
  8004211937:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800421193b:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211940:	48 89 cf             	mov    %rcx,%rdi
  8004211943:	ff d0                	callq  *%rax
  8004211945:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211948:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  800421194c:	eb 04                	jmp    8004211952 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  800421194e:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211952:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211956:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  800421195a:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  800421195d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211960:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211964:	48 01 c2             	add    %rax,%rdx
  8004211967:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421196b:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  800421196e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211972:	48 8b 10             	mov    (%rax),%rdx
  8004211975:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211979:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  800421197d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211980:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211984:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211987:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  800421198b:	75 07                	jne    8004211994 <_get_next_cu+0xdf>
  800421198d:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211992:	eb 05                	jmp    8004211999 <_get_next_cu+0xe4>
  8004211994:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211999:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421199d:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  80042119a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119a4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042119a8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042119ac:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042119b0:	48 89 d1             	mov    %rdx,%rcx
  80042119b3:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042119b7:	ba 02 00 00 00       	mov    $0x2,%edx
  80042119bc:	48 89 cf             	mov    %rcx,%rdi
  80042119bf:	ff d0                	callq  *%rax
  80042119c1:	89 c2                	mov    %eax,%edx
  80042119c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042119c7:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  80042119cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119cf:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042119d3:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  80042119d7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042119db:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  80042119df:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042119e3:	48 89 cf             	mov    %rcx,%rdi
  80042119e6:	ff d0                	callq  *%rax
  80042119e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042119ec:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  80042119f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042119f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042119fc:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211a00:	48 89 d1             	mov    %rdx,%rcx
  8004211a03:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211a07:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211a0c:	48 89 cf             	mov    %rcx,%rdi
  8004211a0f:	ff d0                	callq  *%rax
  8004211a11:	89 c2                	mov    %eax,%edx
  8004211a13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a17:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004211a1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a1e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211a22:	66 83 f8 01          	cmp    $0x1,%ax
  8004211a26:	76 0e                	jbe    8004211a36 <_get_next_cu+0x181>
  8004211a28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a2c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211a30:	66 83 f8 04          	cmp    $0x4,%ax
  8004211a34:	76 07                	jbe    8004211a3d <_get_next_cu+0x188>
		return -1;
  8004211a36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211a3b:	eb 11                	jmp    8004211a4e <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  8004211a3d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211a41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a45:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211a49:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211a4e:	c9                   	leaveq 
  8004211a4f:	c3                   	retq   

0000008004211a50 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  8004211a50:	55                   	push   %rbp
  8004211a51:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211a54:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211a58:	0f b6 c8             	movzbl %al,%ecx
  8004211a5b:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  8004211a5f:	0f b7 d0             	movzwl %ax,%edx
  8004211a62:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211a66:	48 89 c6             	mov    %rax,%rsi
  8004211a69:	48 bf 52 f3 21 04 80 	movabs $0x800421f352,%rdi
  8004211a70:	00 00 00 
  8004211a73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211a78:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004211a7f:	00 00 00 
  8004211a82:	41 ff d0             	callq  *%r8
}
  8004211a85:	5d                   	pop    %rbp
  8004211a86:	c3                   	retq   

0000008004211a87 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211a87:	55                   	push   %rbp
  8004211a88:	48 89 e5             	mov    %rsp,%rbp
  8004211a8b:	48 83 ec 60          	sub    $0x60,%rsp
  8004211a8f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211a93:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211a97:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211a9b:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211a9f:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211aa4:	75 35                	jne    8004211adb <_dwarf_abbrev_parse+0x54>
  8004211aa6:	48 b9 61 f3 21 04 80 	movabs $0x800421f361,%rcx
  8004211aad:	00 00 00 
  8004211ab0:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004211ab7:	00 00 00 
  8004211aba:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004211abf:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004211ac6:	00 00 00 
  8004211ac9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ace:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211ad5:	00 00 00 
  8004211ad8:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211adb:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004211ae0:	75 35                	jne    8004211b17 <_dwarf_abbrev_parse+0x90>
  8004211ae2:	48 b9 6d f3 21 04 80 	movabs $0x800421f36d,%rcx
  8004211ae9:	00 00 00 
  8004211aec:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004211af3:	00 00 00 
  8004211af6:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211afb:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004211b02:	00 00 00 
  8004211b05:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b0a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211b11:	00 00 00 
  8004211b14:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211b17:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211b1b:	48 8b 10             	mov    (%rax),%rdx
  8004211b1e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211b22:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b26:	48 39 c2             	cmp    %rax,%rdx
  8004211b29:	72 0a                	jb     8004211b35 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211b2b:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211b30:	e9 d3 01 00 00       	jmpq   8004211d08 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211b35:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211b39:	48 8b 00             	mov    (%rax),%rax
  8004211b3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211b40:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211b44:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211b48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211b4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b50:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211b54:	48 89 d6             	mov    %rdx,%rsi
  8004211b57:	48 89 c7             	mov    %rax,%rdi
  8004211b5a:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004211b61:	00 00 00 
  8004211b64:	ff d0                	callq  *%rax
  8004211b66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211b6a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211b6f:	75 15                	jne    8004211b86 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211b71:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b75:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211b7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b81:	e9 82 01 00 00       	jmpq   8004211d08 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211b86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b8a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211b8e:	48 89 d6             	mov    %rdx,%rsi
  8004211b91:	48 89 c7             	mov    %rax,%rdi
  8004211b94:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004211b9b:	00 00 00 
  8004211b9e:	ff d0                	callq  *%rax
  8004211ba0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211ba4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211ba8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211bac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004211bb0:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211bb4:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211bb9:	48 89 cf             	mov    %rcx,%rdi
  8004211bbc:	ff d0                	callq  *%rax
  8004211bbe:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004211bc1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211bc5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211bc9:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004211bcc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211bd0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211bd4:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  8004211bd8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211bdc:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004211be0:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004211be3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211be7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211beb:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004211bef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211bf3:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004211bfa:	00 
	abp->ab_atnum    = 0;
  8004211bfb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211bff:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004211c06:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004211c07:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211c0b:	48 8b 00             	mov    (%rax),%rax
  8004211c0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211c12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211c16:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211c1a:	48 89 d6             	mov    %rdx,%rsi
  8004211c1d:	48 89 c7             	mov    %rax,%rdi
  8004211c20:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004211c27:	00 00 00 
  8004211c2a:	ff d0                	callq  *%rax
  8004211c2c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211c30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211c34:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211c38:	48 89 d6             	mov    %rdx,%rsi
  8004211c3b:	48 89 c7             	mov    %rax,%rdi
  8004211c3e:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004211c45:	00 00 00 
  8004211c48:	ff d0                	callq  *%rax
  8004211c4a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  8004211c4e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211c53:	0f 84 89 00 00 00    	je     8004211ce2 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211c59:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c5d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211c61:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211c65:	48 89 d0             	mov    %rdx,%rax
  8004211c68:	48 01 c0             	add    %rax,%rax
  8004211c6b:	48 01 d0             	add    %rdx,%rax
  8004211c6e:	48 c1 e0 03          	shl    $0x3,%rax
  8004211c72:	48 01 c8             	add    %rcx,%rax
  8004211c75:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211c79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211c7d:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  8004211c80:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c84:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211c88:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211c8c:	48 89 d0             	mov    %rdx,%rax
  8004211c8f:	48 01 c0             	add    %rax,%rax
  8004211c92:	48 01 d0             	add    %rdx,%rax
  8004211c95:	48 c1 e0 03          	shl    $0x3,%rax
  8004211c99:	48 01 c8             	add    %rcx,%rax
  8004211c9c:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004211ca0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211ca4:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211ca7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211cab:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211caf:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211cb3:	48 89 d0             	mov    %rdx,%rax
  8004211cb6:	48 01 c0             	add    %rax,%rax
  8004211cb9:	48 01 d0             	add    %rdx,%rax
  8004211cbc:	48 c1 e0 03          	shl    $0x3,%rax
  8004211cc0:	48 01 c8             	add    %rcx,%rax
  8004211cc3:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211cc7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211ccb:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004211cce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211cd2:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004211cd6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211cda:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211cde:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004211ce2:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211ce7:	0f 85 1a ff ff ff    	jne    8004211c07 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004211ced:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211cf1:	48 8b 00             	mov    (%rax),%rax
  8004211cf4:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  8004211cf8:	48 89 c2             	mov    %rax,%rdx
  8004211cfb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211cff:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004211d03:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211d08:	c9                   	leaveq 
  8004211d09:	c3                   	retq   

0000008004211d0a <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004211d0a:	55                   	push   %rbp
  8004211d0b:	48 89 e5             	mov    %rsp,%rbp
  8004211d0e:	48 83 ec 70          	sub    $0x70,%rsp
  8004211d12:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211d16:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211d1a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  8004211d1e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211d23:	75 0a                	jne    8004211d2f <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211d25:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211d2a:	e9 0a 01 00 00       	jmpq   8004211e39 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  8004211d2f:	48 bf 78 f3 21 04 80 	movabs $0x800421f378,%rdi
  8004211d36:	00 00 00 
  8004211d39:	48 b8 6a 60 21 04 80 	movabs $0x800421606a,%rax
  8004211d40:	00 00 00 
  8004211d43:	ff d0                	callq  *%rax
  8004211d45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211d49:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211d4e:	75 35                	jne    8004211d85 <_dwarf_abbrev_find+0x7b>
  8004211d50:	48 b9 6d f3 21 04 80 	movabs $0x800421f36d,%rcx
  8004211d57:	00 00 00 
  8004211d5a:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004211d61:	00 00 00 
  8004211d64:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004211d69:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004211d70:	00 00 00 
  8004211d73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d78:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211d7f:	00 00 00 
  8004211d82:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211d85:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211d89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  8004211d8d:	e9 8d 00 00 00       	jmpq   8004211e1f <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004211d92:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211d96:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211d9a:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  8004211d9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211da2:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211da6:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004211daa:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  8004211dae:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004211db3:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  8004211db7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004211dbc:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  8004211dc0:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004211dc5:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  8004211dc9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004211dce:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004211dd2:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004211dd7:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004211ddb:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004211de0:	48 89 c7             	mov    %rax,%rdi
  8004211de3:	48 b8 87 1a 21 04 80 	movabs $0x8004211a87,%rax
  8004211dea:	00 00 00 
  8004211ded:	ff d0                	callq  *%rax
  8004211def:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  8004211df2:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004211df6:	74 05                	je     8004211dfd <_dwarf_abbrev_find+0xf3>
			return (ret);
  8004211df8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211dfb:	eb 3c                	jmp    8004211e39 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  8004211dfd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211e01:	48 8b 00             	mov    (%rax),%rax
  8004211e04:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004211e08:	75 07                	jne    8004211e11 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004211e0a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211e0f:	eb 28                	jmp    8004211e39 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004211e11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211e15:	48 8b 00             	mov    (%rax),%rax
  8004211e18:	48 85 c0             	test   %rax,%rax
  8004211e1b:	75 02                	jne    8004211e1f <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  8004211e1d:	eb 15                	jmp    8004211e34 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  8004211e1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211e23:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211e27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e2b:	48 39 c2             	cmp    %rax,%rdx
  8004211e2e:	0f 87 5e ff ff ff    	ja     8004211d92 <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  8004211e34:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211e39:	c9                   	leaveq 
  8004211e3a:	c3                   	retq   

0000008004211e3b <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004211e3b:	55                   	push   %rbp
  8004211e3c:	48 89 e5             	mov    %rsp,%rbp
  8004211e3f:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  8004211e46:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004211e4d:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004211e54:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004211e5b:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  8004211e62:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004211e69:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004211e70:	48 bf 86 f3 21 04 80 	movabs $0x800421f386,%rdi
  8004211e77:	00 00 00 
  8004211e7a:	48 b8 6a 60 21 04 80 	movabs $0x800421606a,%rax
  8004211e81:	00 00 00 
  8004211e84:	ff d0                	callq  *%rax
  8004211e86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004211e8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211e8e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211e92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  8004211e96:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211e9d:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004211ea1:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  8004211ea4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004211eab:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004211eb2:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211eb7:	be 00 00 00 00       	mov    $0x0,%esi
  8004211ebc:	48 89 c7             	mov    %rax,%rdi
  8004211ebf:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004211ec6:	00 00 00 
  8004211ec9:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004211ecb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211ed2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  8004211ed9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004211ee0:	48 8b 00             	mov    (%rax),%rax
  8004211ee3:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  8004211ee7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004211eee:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211ef2:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  8004211ef6:	8b 45 10             	mov    0x10(%rbp),%eax
  8004211ef9:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004211efc:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004211f03:	00 

	switch (form) {
  8004211f04:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004211f0b:	20 
  8004211f0c:	0f 87 82 04 00 00    	ja     8004212394 <_dwarf_attr_init+0x559>
  8004211f12:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004211f19:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004211f20:	00 
  8004211f21:	48 b8 b0 f3 21 04 80 	movabs $0x800421f3b0,%rax
  8004211f28:	00 00 00 
  8004211f2b:	48 01 d0             	add    %rdx,%rax
  8004211f2e:	48 8b 00             	mov    (%rax),%rax
  8004211f31:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211f33:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211f3a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211f3e:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211f45:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211f49:	0f b6 d2             	movzbl %dl,%edx
  8004211f4c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211f53:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211f57:	48 89 cf             	mov    %rcx,%rdi
  8004211f5a:	ff d0                	callq  *%rax
  8004211f5c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211f60:	e9 37 04 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211f65:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211f6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f70:	48 89 d6             	mov    %rdx,%rsi
  8004211f73:	48 89 c7             	mov    %rax,%rdi
  8004211f76:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004211f7d:	00 00 00 
  8004211f80:	ff d0                	callq  *%rax
  8004211f82:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211f86:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211f8a:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211f91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f95:	48 89 ce             	mov    %rcx,%rsi
  8004211f98:	48 89 c7             	mov    %rax,%rdi
  8004211f9b:	48 b8 b2 16 21 04 80 	movabs $0x80042116b2,%rax
  8004211fa2:	00 00 00 
  8004211fa5:	ff d0                	callq  *%rax
  8004211fa7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211fab:	e9 ec 03 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211fb0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211fb7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211fbb:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211fc2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211fc6:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211fcb:	48 89 cf             	mov    %rcx,%rdi
  8004211fce:	ff d0                	callq  *%rax
  8004211fd0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211fd4:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211fd8:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211fdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fe3:	48 89 ce             	mov    %rcx,%rsi
  8004211fe6:	48 89 c7             	mov    %rax,%rdi
  8004211fe9:	48 b8 b2 16 21 04 80 	movabs $0x80042116b2,%rax
  8004211ff0:	00 00 00 
  8004211ff3:	ff d0                	callq  *%rax
  8004211ff5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211ff9:	e9 9e 03 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004211ffe:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212005:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212009:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212010:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212014:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212019:	48 89 cf             	mov    %rcx,%rdi
  800421201c:	ff d0                	callq  *%rax
  800421201e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212022:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212026:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421202d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212031:	48 89 ce             	mov    %rcx,%rsi
  8004212034:	48 89 c7             	mov    %rax,%rdi
  8004212037:	48 b8 b2 16 21 04 80 	movabs $0x80042116b2,%rax
  800421203e:	00 00 00 
  8004212041:	ff d0                	callq  *%rax
  8004212043:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212047:	e9 50 03 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  800421204c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212053:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212057:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421205e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212062:	ba 04 00 00 00       	mov    $0x4,%edx
  8004212067:	48 89 cf             	mov    %rcx,%rdi
  800421206a:	ff d0                	callq  *%rax
  800421206c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212070:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212074:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421207b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421207f:	48 89 ce             	mov    %rcx,%rsi
  8004212082:	48 89 c7             	mov    %rax,%rdi
  8004212085:	48 b8 b2 16 21 04 80 	movabs $0x80042116b2,%rax
  800421208c:	00 00 00 
  800421208f:	ff d0                	callq  *%rax
  8004212091:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212095:	e9 02 03 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800421209a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042120a1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042120a5:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042120ac:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042120b0:	ba 01 00 00 00       	mov    $0x1,%edx
  80042120b5:	48 89 cf             	mov    %rcx,%rdi
  80042120b8:	ff d0                	callq  *%rax
  80042120ba:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042120be:	e9 d9 02 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042120c3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042120ca:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042120ce:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042120d5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042120d9:	ba 02 00 00 00       	mov    $0x2,%edx
  80042120de:	48 89 cf             	mov    %rcx,%rdi
  80042120e1:	ff d0                	callq  *%rax
  80042120e3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042120e7:	e9 b0 02 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042120ec:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042120f3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042120f7:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042120fe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212102:	ba 04 00 00 00       	mov    $0x4,%edx
  8004212107:	48 89 cf             	mov    %rcx,%rdi
  800421210a:	ff d0                	callq  *%rax
  800421210c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212110:	e9 87 02 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  8004212115:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421211c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212120:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212127:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421212b:	ba 08 00 00 00       	mov    $0x8,%edx
  8004212130:	48 89 cf             	mov    %rcx,%rdi
  8004212133:	ff d0                	callq  *%rax
  8004212135:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212139:	e9 5e 02 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  800421213e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212149:	48 89 d6             	mov    %rdx,%rsi
  800421214c:	48 89 c7             	mov    %rax,%rdi
  800421214f:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004212156:	00 00 00 
  8004212159:	ff d0                	callq  *%rax
  800421215b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  8004212162:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004212169:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004212170:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212177:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421217e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212185:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421218c:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004212193:	4d 89 c1             	mov    %r8,%r9
  8004212196:	49 89 f8             	mov    %rdi,%r8
  8004212199:	48 89 c7             	mov    %rax,%rdi
  800421219c:	48 b8 3b 1e 21 04 80 	movabs $0x8004211e3b,%rax
  80042121a3:	00 00 00 
  80042121a6:	ff d0                	callq  *%rax
  80042121a8:	e9 1d 03 00 00       	jmpq   80042124ca <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  80042121ad:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042121b4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042121b8:	66 83 f8 02          	cmp    $0x2,%ax
  80042121bc:	75 2f                	jne    80042121ed <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042121be:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042121c5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042121c9:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042121d0:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042121d4:	0f b6 d2             	movzbl %dl,%edx
  80042121d7:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042121de:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042121e2:	48 89 cf             	mov    %rcx,%rdi
  80042121e5:	ff d0                	callq  *%rax
  80042121e7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042121eb:	eb 39                	jmp    8004212226 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  80042121ed:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042121f4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042121f8:	66 83 f8 03          	cmp    $0x3,%ax
  80042121fc:	75 28                	jne    8004212226 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042121fe:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212205:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212209:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421220d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212214:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212218:	48 89 cf             	mov    %rcx,%rdi
  800421221b:	ff d0                	callq  *%rax
  800421221d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212221:	e9 76 01 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
  8004212226:	e9 71 01 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800421222b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212232:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212236:	48 89 d6             	mov    %rdx,%rsi
  8004212239:	48 89 c7             	mov    %rax,%rdi
  800421223c:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004212243:	00 00 00 
  8004212246:	ff d0                	callq  *%rax
  8004212248:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421224c:	e9 4b 01 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004212251:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212258:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421225c:	48 89 d6             	mov    %rdx,%rsi
  800421225f:	48 89 c7             	mov    %rax,%rdi
  8004212262:	48 b8 01 14 21 04 80 	movabs $0x8004211401,%rax
  8004212269:	00 00 00 
  800421226c:	ff d0                	callq  *%rax
  800421226e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212272:	e9 25 01 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212277:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421227e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212282:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212286:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421228d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212291:	48 89 cf             	mov    %rcx,%rdi
  8004212294:	ff d0                	callq  *%rax
  8004212296:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421229a:	e9 fd 00 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  800421229f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042122a3:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042122a7:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042122ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042122b2:	48 89 ce             	mov    %rcx,%rsi
  80042122b5:	48 89 c7             	mov    %rax,%rdi
  80042122b8:	48 b8 23 16 21 04 80 	movabs $0x8004211623,%rax
  80042122bf:	00 00 00 
  80042122c2:	ff d0                	callq  *%rax
  80042122c4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042122c8:	e9 cf 00 00 00       	jmpq   800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042122cd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042122d4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042122d8:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042122dc:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042122e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042122e7:	48 89 cf             	mov    %rcx,%rdi
  80042122ea:	ff d0                	callq  *%rax
  80042122ec:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  80042122f0:	48 bf 92 f3 21 04 80 	movabs $0x800421f392,%rdi
  80042122f7:	00 00 00 
  80042122fa:	48 b8 6a 60 21 04 80 	movabs $0x800421606a,%rax
  8004212301:	00 00 00 
  8004212304:	ff d0                	callq  *%rax
  8004212306:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  800421230a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421230f:	75 35                	jne    8004212346 <_dwarf_attr_init+0x50b>
  8004212311:	48 b9 9d f3 21 04 80 	movabs $0x800421f39d,%rcx
  8004212318:	00 00 00 
  800421231b:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004212322:	00 00 00 
  8004212325:	be 51 02 00 00       	mov    $0x251,%esi
  800421232a:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212331:	00 00 00 
  8004212334:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212339:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212340:	00 00 00 
  8004212343:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004212346:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421234a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421234e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212352:	48 01 d0             	add    %rdx,%rax
  8004212355:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212359:	eb 41                	jmp    800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  800421235b:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004212362:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004212363:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212367:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421236e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212372:	48 89 ce             	mov    %rcx,%rsi
  8004212375:	48 89 c7             	mov    %rax,%rdi
  8004212378:	48 b8 b2 16 21 04 80 	movabs $0x80042116b2,%rax
  800421237f:	00 00 00 
  8004212382:	ff d0                	callq  *%rax
  8004212384:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212388:	eb 12                	jmp    800421239c <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  800421238a:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004212391:	00 
		break;
  8004212392:	eb 08                	jmp    800421239c <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004212394:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  800421239b:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  800421239c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042123a0:	0f 85 21 01 00 00    	jne    80042124c7 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  80042123a6:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  80042123ad:	09 
  80042123ae:	74 1e                	je     80042123ce <_dwarf_attr_init+0x593>
  80042123b0:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  80042123b7:	0a 
  80042123b8:	74 14                	je     80042123ce <_dwarf_attr_init+0x593>
  80042123ba:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  80042123c1:	03 
  80042123c2:	74 0a                	je     80042123ce <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  80042123c4:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  80042123cb:	04 
  80042123cc:	75 10                	jne    80042123de <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  80042123ce:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042123d2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  80042123d6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042123da:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  80042123de:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042123e2:	48 83 f8 03          	cmp    $0x3,%rax
  80042123e6:	75 39                	jne    8004212421 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  80042123e8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042123ec:	48 83 f8 08          	cmp    $0x8,%rax
  80042123f0:	74 1c                	je     800421240e <_dwarf_attr_init+0x5d3>
  80042123f2:	48 83 f8 0e          	cmp    $0xe,%rax
  80042123f6:	74 02                	je     80042123fa <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  80042123f8:	eb 27                	jmp    8004212421 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  80042123fa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042123fe:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212405:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  800421240c:	eb 13                	jmp    8004212421 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  800421240e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212412:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212419:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212420:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004212421:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212428:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  800421242f:	8d 48 01             	lea    0x1(%rax),%ecx
  8004212432:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004212439:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  800421243f:	0f b6 c0             	movzbl %al,%eax
  8004212442:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212449:	48 63 d0             	movslq %eax,%rdx
  800421244c:	48 89 d0             	mov    %rdx,%rax
  800421244f:	48 01 c0             	add    %rax,%rax
  8004212452:	48 01 d0             	add    %rdx,%rax
  8004212455:	48 c1 e0 05          	shl    $0x5,%rax
  8004212459:	48 01 c8             	add    %rcx,%rax
  800421245c:	48 05 70 03 00 00    	add    $0x370,%rax
  8004212462:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212469:	48 89 10             	mov    %rdx,(%rax)
  800421246c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004212473:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004212477:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421247b:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421247f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004212483:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004212487:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421248b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800421248f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212493:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004212497:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421249b:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800421249f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042124a3:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042124a7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042124ab:	48 89 50 40          	mov    %rdx,0x40(%rax)
  80042124af:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042124b3:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042124b7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042124bb:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042124bf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042124c3:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  80042124c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042124ca:	c9                   	leaveq 
  80042124cb:	c3                   	retq   

00000080042124cc <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  80042124cc:	55                   	push   %rbp
  80042124cd:	48 89 e5             	mov    %rsp,%rbp
  80042124d0:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  80042124d7:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  80042124de:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  80042124e5:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  80042124ec:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  80042124f2:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  80042124f9:	00 
  80042124fa:	75 35                	jne    8004212531 <dwarf_search_die_within_cu+0x65>
  80042124fc:	48 b9 b8 f4 21 04 80 	movabs $0x800421f4b8,%rcx
  8004212503:	00 00 00 
  8004212506:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  800421250d:	00 00 00 
  8004212510:	be 86 02 00 00       	mov    $0x286,%esi
  8004212515:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  800421251c:	00 00 00 
  800421251f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212524:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421252b:	00 00 00 
  800421252e:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004212531:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004212538:	00 
  8004212539:	75 35                	jne    8004212570 <dwarf_search_die_within_cu+0xa4>
  800421253b:	48 b9 bc f4 21 04 80 	movabs $0x800421f4bc,%rcx
  8004212542:	00 00 00 
  8004212545:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  800421254c:	00 00 00 
  800421254f:	be 88 02 00 00       	mov    $0x288,%esi
  8004212554:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  800421255b:	00 00 00 
  800421255e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212563:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421256a:	00 00 00 
  800421256d:	41 ff d0             	callq  *%r8

	level = 1;
  8004212570:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212577:	e9 17 02 00 00       	jmpq   8004212793 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  800421257c:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212583:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004212587:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800421258e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212592:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004212599:	48 89 d6             	mov    %rdx,%rsi
  800421259c:	48 89 c7             	mov    %rax,%rdi
  800421259f:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  80042125a6:	00 00 00 
  80042125a9:	ff d0                	callq  *%rax
  80042125ab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  80042125af:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042125b4:	75 22                	jne    80042125d8 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  80042125b6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042125ba:	74 09                	je     80042125c5 <dwarf_search_die_within_cu+0xf9>
  80042125bc:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  80042125c3:	75 0a                	jne    80042125cf <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  80042125c5:	b8 04 00 00 00       	mov    $0x4,%eax
  80042125ca:	e9 f4 01 00 00       	jmpq   80042127c3 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  80042125cf:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  80042125d3:	e9 bb 01 00 00       	jmpq   8004212793 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  80042125d8:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  80042125df:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042125e3:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042125ea:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  80042125ee:	48 89 34 24          	mov    %rsi,(%rsp)
  80042125f2:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  80042125f6:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  80042125fb:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  80042125ff:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004212604:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004212608:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  800421260d:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212611:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004212616:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  800421261a:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  800421261f:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004212623:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212628:	48 89 ce             	mov    %rcx,%rsi
  800421262b:	48 89 c7             	mov    %rax,%rdi
  800421262e:	48 b8 0a 1d 21 04 80 	movabs $0x8004211d0a,%rax
  8004212635:	00 00 00 
  8004212638:	ff d0                	callq  *%rax
  800421263a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421263d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212641:	74 08                	je     800421264b <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004212643:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212646:	e9 78 01 00 00       	jmpq   80042127c3 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  800421264b:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212652:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212656:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212659:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212660:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212664:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212668:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421266f:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212673:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  800421267a:	b8 66 00 00 00       	mov    $0x66,%eax
  800421267f:	48 89 d6             	mov    %rdx,%rsi
  8004212682:	48 89 c1             	mov    %rax,%rcx
  8004212685:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212688:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421268f:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212696:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  800421269d:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  80042126a4:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  80042126a8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042126af:	e9 8e 00 00 00       	jmpq   8004212742 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  80042126b4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042126b7:	48 63 d0             	movslq %eax,%rdx
  80042126ba:	48 89 d0             	mov    %rdx,%rax
  80042126bd:	48 01 c0             	add    %rax,%rax
  80042126c0:	48 01 d0             	add    %rdx,%rax
  80042126c3:	48 c1 e0 03          	shl    $0x3,%rax
  80042126c7:	48 01 e8             	add    %rbp,%rax
  80042126ca:	48 2d 18 03 00 00    	sub    $0x318,%rax
  80042126d0:	48 8b 08             	mov    (%rax),%rcx
  80042126d3:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  80042126da:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042126dd:	48 63 d0             	movslq %eax,%rdx
  80042126e0:	48 89 d0             	mov    %rdx,%rax
  80042126e3:	48 01 c0             	add    %rax,%rax
  80042126e6:	48 01 d0             	add    %rdx,%rax
  80042126e9:	48 c1 e0 03          	shl    $0x3,%rax
  80042126ed:	48 83 c0 30          	add    $0x30,%rax
  80042126f1:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  80042126f5:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  80042126fc:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004212703:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800421270a:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212711:	49 89 c9             	mov    %rcx,%r9
  8004212714:	49 89 f8             	mov    %rdi,%r8
  8004212717:	48 89 d1             	mov    %rdx,%rcx
  800421271a:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  800421271e:	48 89 c7             	mov    %rax,%rdi
  8004212721:	48 b8 3b 1e 21 04 80 	movabs $0x8004211e3b,%rax
  8004212728:	00 00 00 
  800421272b:	ff d0                	callq  *%rax
  800421272d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212730:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212734:	74 08                	je     800421273e <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004212736:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212739:	e9 85 00 00 00       	jmpq   80042127c3 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  800421273e:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004212742:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212745:	48 63 d0             	movslq %eax,%rdx
  8004212748:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  800421274f:	48 39 c2             	cmp    %rax,%rdx
  8004212752:	0f 82 5c ff ff ff    	jb     80042126b4 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004212758:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  800421275f:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212766:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  800421276a:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212771:	74 19                	je     800421278c <dwarf_search_die_within_cu+0x2c0>
  8004212773:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212777:	7e 13                	jle    800421278c <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212779:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212780:	3c 01                	cmp    $0x1,%al
  8004212782:	75 06                	jne    800421278a <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212784:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212788:	eb 09                	jmp    8004212793 <dwarf_search_die_within_cu+0x2c7>
  800421278a:	eb 07                	jmp    8004212793 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  800421278c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212791:	eb 30                	jmp    80042127c3 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212793:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004212797:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421279e:	48 39 c2             	cmp    %rax,%rdx
  80042127a1:	76 1b                	jbe    80042127be <dwarf_search_die_within_cu+0x2f2>
  80042127a3:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042127aa:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042127ae:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  80042127b5:	48 39 c2             	cmp    %rax,%rdx
  80042127b8:	0f 87 be fd ff ff    	ja     800421257c <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  80042127be:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042127c3:	c9                   	leaveq 
  80042127c4:	c3                   	retq   

00000080042127c5 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  80042127c5:	55                   	push   %rbp
  80042127c6:	48 89 e5             	mov    %rsp,%rbp
  80042127c9:	48 83 ec 60          	sub    $0x60,%rsp
  80042127cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042127d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042127d5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  80042127d9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042127de:	75 35                	jne    8004212815 <dwarf_offdie+0x50>
  80042127e0:	48 b9 b8 f4 21 04 80 	movabs $0x800421f4b8,%rcx
  80042127e7:	00 00 00 
  80042127ea:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  80042127f1:	00 00 00 
  80042127f4:	be c4 02 00 00       	mov    $0x2c4,%esi
  80042127f9:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212800:	00 00 00 
  8004212803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212808:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421280f:	00 00 00 
  8004212812:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212815:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421281a:	75 35                	jne    8004212851 <dwarf_offdie+0x8c>
  800421281c:	48 b9 bc f4 21 04 80 	movabs $0x800421f4bc,%rcx
  8004212823:	00 00 00 
  8004212826:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  800421282d:	00 00 00 
  8004212830:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212835:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  800421283c:	00 00 00 
  800421283f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212844:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421284b:	00 00 00 
  800421284e:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212851:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212855:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212859:	76 66                	jbe    80042128c1 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  800421285b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421285f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212863:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212867:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  800421286b:	48 89 0c 24          	mov    %rcx,(%rsp)
  800421286f:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212873:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212878:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  800421287c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212881:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212885:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  800421288a:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  800421288e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212893:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212897:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800421289c:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  80042128a0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  80042128a5:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042128aa:	48 89 c7             	mov    %rax,%rdi
  80042128ad:	48 b8 cc 24 21 04 80 	movabs $0x80042124cc,%rax
  80042128b4:	00 00 00 
  80042128b7:	ff d0                	callq  *%rax
  80042128b9:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  80042128bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042128bf:	eb 05                	jmp    80042128c6 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  80042128c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042128c6:	c9                   	leaveq 
  80042128c7:	c3                   	retq   

00000080042128c8 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  80042128c8:	55                   	push   %rbp
  80042128c9:	48 89 e5             	mov    %rsp,%rbp
  80042128cc:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042128d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042128d4:	89 f0                	mov    %esi,%eax
  80042128d6:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  80042128da:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042128e1:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  80042128e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042128e9:	eb 57                	jmp    8004212942 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  80042128eb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042128ef:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042128f2:	48 63 d0             	movslq %eax,%rdx
  80042128f5:	48 89 d0             	mov    %rdx,%rax
  80042128f8:	48 01 c0             	add    %rax,%rax
  80042128fb:	48 01 d0             	add    %rdx,%rax
  80042128fe:	48 c1 e0 05          	shl    $0x5,%rax
  8004212902:	48 01 c8             	add    %rcx,%rax
  8004212905:	48 05 80 03 00 00    	add    $0x380,%rax
  800421290b:	48 8b 10             	mov    (%rax),%rdx
  800421290e:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212912:	48 39 c2             	cmp    %rax,%rdx
  8004212915:	75 27                	jne    800421293e <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212917:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421291a:	48 63 d0             	movslq %eax,%rdx
  800421291d:	48 89 d0             	mov    %rdx,%rax
  8004212920:	48 01 c0             	add    %rax,%rax
  8004212923:	48 01 d0             	add    %rdx,%rax
  8004212926:	48 c1 e0 05          	shl    $0x5,%rax
  800421292a:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212931:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212935:	48 01 d0             	add    %rdx,%rax
  8004212938:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  800421293c:	eb 17                	jmp    8004212955 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  800421293e:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212942:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212946:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  800421294d:	0f b6 c0             	movzbl %al,%eax
  8004212950:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212953:	7f 96                	jg     80042128eb <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004212955:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004212959:	c9                   	leaveq 
  800421295a:	c3                   	retq   

000000800421295b <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  800421295b:	55                   	push   %rbp
  800421295c:	48 89 e5             	mov    %rsp,%rbp
  800421295f:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212963:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212967:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421296b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421296f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212973:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212978:	75 35                	jne    80042129af <dwarf_siblingof+0x54>
  800421297a:	48 b9 b8 f4 21 04 80 	movabs $0x800421f4b8,%rcx
  8004212981:	00 00 00 
  8004212984:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  800421298b:	00 00 00 
  800421298e:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212993:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  800421299a:	00 00 00 
  800421299d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042129a2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042129a9:	00 00 00 
  80042129ac:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042129af:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042129b4:	75 35                	jne    80042129eb <dwarf_siblingof+0x90>
  80042129b6:	48 b9 bc f4 21 04 80 	movabs $0x800421f4bc,%rcx
  80042129bd:	00 00 00 
  80042129c0:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  80042129c7:	00 00 00 
  80042129ca:	be ed 02 00 00       	mov    $0x2ed,%esi
  80042129cf:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  80042129d6:	00 00 00 
  80042129d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042129de:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042129e5:	00 00 00 
  80042129e8:	41 ff d0             	callq  *%r8
	assert(cu);
  80042129eb:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042129f0:	75 35                	jne    8004212a27 <dwarf_siblingof+0xcc>
  80042129f2:	48 b9 c4 f4 21 04 80 	movabs $0x800421f4c4,%rcx
  80042129f9:	00 00 00 
  80042129fc:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004212a03:	00 00 00 
  8004212a06:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212a0b:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212a12:	00 00 00 
  8004212a15:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212a1a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212a21:	00 00 00 
  8004212a24:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212a27:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212a2c:	75 65                	jne    8004212a93 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  8004212a2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212a32:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212a36:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212a3a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004212a3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212a42:	48 8b 38             	mov    (%rax),%rdi
  8004212a45:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212a49:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004212a4d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212a52:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212a56:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212a5b:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004212a5f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212a64:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212a68:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212a6d:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212a71:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212a76:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212a7a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212a7f:	48 89 cf             	mov    %rcx,%rdi
  8004212a82:	48 b8 c5 27 21 04 80 	movabs $0x80042127c5,%rax
  8004212a89:	00 00 00 
  8004212a8c:	ff d0                	callq  *%rax
  8004212a8e:	e9 0a 01 00 00       	jmpq   8004212b9d <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212a93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212a9a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a9e:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212aa2:	84 c0                	test   %al,%al
  8004212aa4:	75 0e                	jne    8004212ab4 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212aa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212aaa:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212aae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212ab2:	eb 6b                	jmp    8004212b1f <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212ab4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212ab8:	be 01 00 00 00       	mov    $0x1,%esi
  8004212abd:	48 89 c7             	mov    %rax,%rdi
  8004212ac0:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  8004212ac7:	00 00 00 
  8004212aca:	ff d0                	callq  *%rax
  8004212acc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212ad0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212ad5:	74 35                	je     8004212b0c <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212adb:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212adf:	48 83 f8 10          	cmp    $0x10,%rax
  8004212ae3:	74 19                	je     8004212afe <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212ae5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212ae9:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212af1:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212af5:	48 01 d0             	add    %rdx,%rax
  8004212af8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212afc:	eb 21                	jmp    8004212b1f <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004212afe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212b02:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212b06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212b0a:	eb 13                	jmp    8004212b1f <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212b0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212b10:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212b18:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212b1f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212b22:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212b26:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212b2a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  8004212b2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212b32:	4c 8b 00             	mov    (%rax),%r8
  8004212b35:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212b39:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004212b3d:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212b42:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212b46:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212b4b:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212b4f:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212b54:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212b58:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  8004212b5d:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004212b61:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212b66:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212b6a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212b6f:	48 b8 cc 24 21 04 80 	movabs $0x80042124cc,%rax
  8004212b76:	00 00 00 
  8004212b79:	ff d0                	callq  *%rax
  8004212b7b:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  8004212b7e:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004212b82:	75 07                	jne    8004212b8b <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212b84:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212b89:	eb 12                	jmp    8004212b9d <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212b8b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212b8f:	74 07                	je     8004212b98 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004212b91:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212b96:	eb 05                	jmp    8004212b9d <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212b98:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212b9d:	c9                   	leaveq 
  8004212b9e:	c3                   	retq   

0000008004212b9f <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004212b9f:	55                   	push   %rbp
  8004212ba0:	48 89 e5             	mov    %rsp,%rbp
  8004212ba3:	48 83 ec 70          	sub    $0x70,%rsp
  8004212ba7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212bab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212baf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212bb3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212bb7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212bbc:	75 35                	jne    8004212bf3 <dwarf_child+0x54>
  8004212bbe:	48 b9 c7 f4 21 04 80 	movabs $0x800421f4c7,%rcx
  8004212bc5:	00 00 00 
  8004212bc8:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004212bcf:	00 00 00 
  8004212bd2:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212bd7:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212bde:	00 00 00 
  8004212be1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212be6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212bed:	00 00 00 
  8004212bf0:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212bf3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212bf8:	75 35                	jne    8004212c2f <dwarf_child+0x90>
  8004212bfa:	48 b9 bc f4 21 04 80 	movabs $0x800421f4bc,%rcx
  8004212c01:	00 00 00 
  8004212c04:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004212c0b:	00 00 00 
  8004212c0e:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212c13:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212c1a:	00 00 00 
  8004212c1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c29:	00 00 00 
  8004212c2c:	41 ff d0             	callq  *%r8
	assert(dbg);
  8004212c2f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212c34:	75 35                	jne    8004212c6b <dwarf_child+0xcc>
  8004212c36:	48 b9 b8 f4 21 04 80 	movabs $0x800421f4b8,%rcx
  8004212c3d:	00 00 00 
  8004212c40:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004212c47:	00 00 00 
  8004212c4a:	be 1e 03 00 00       	mov    $0x31e,%esi
  8004212c4f:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212c56:	00 00 00 
  8004212c59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c65:	00 00 00 
  8004212c68:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212c6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004212c70:	75 35                	jne    8004212ca7 <dwarf_child+0x108>
  8004212c72:	48 b9 c4 f4 21 04 80 	movabs $0x800421f4c4,%rcx
  8004212c79:	00 00 00 
  8004212c7c:	48 ba 2a f3 21 04 80 	movabs $0x800421f32a,%rdx
  8004212c83:	00 00 00 
  8004212c86:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004212c8b:	48 bf 3f f3 21 04 80 	movabs $0x800421f33f,%rdi
  8004212c92:	00 00 00 
  8004212c95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c9a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212ca1:	00 00 00 
  8004212ca4:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212cab:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212caf:	84 c0                	test   %al,%al
  8004212cb1:	75 0a                	jne    8004212cbd <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004212cb3:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212cb8:	e9 84 00 00 00       	jmpq   8004212d41 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  8004212cbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212cc1:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004212cc5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212cc9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004212ccd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212cd1:	48 8b 08             	mov    (%rax),%rcx
  8004212cd4:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212cd8:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004212cdc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212ce1:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004212ce5:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212cea:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004212cee:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212cf3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212cf7:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212cfc:	48 8b 48 28          	mov    0x28(%rax),%rcx
  8004212d00:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212d05:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212d09:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212d0e:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212d13:	48 b8 cc 24 21 04 80 	movabs $0x80042124cc,%rax
  8004212d1a:	00 00 00 
  8004212d1d:	ff d0                	callq  *%rax
  8004212d1f:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004212d22:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212d26:	75 07                	jne    8004212d2f <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212d28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212d2d:	eb 12                	jmp    8004212d41 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  8004212d2f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212d33:	74 07                	je     8004212d3c <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212d35:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212d3a:	eb 05                	jmp    8004212d41 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004212d3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212d41:	c9                   	leaveq 
  8004212d42:	c3                   	retq   

0000008004212d43 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212d43:	55                   	push   %rbp
  8004212d44:	48 89 e5             	mov    %rsp,%rbp
  8004212d47:	48 83 ec 20          	sub    $0x20,%rsp
  8004212d4b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  8004212d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d53:	48 8b 00             	mov    (%rax),%rax
  8004212d56:	48 89 c7             	mov    %rax,%rdi
  8004212d59:	48 b8 6a 60 21 04 80 	movabs $0x800421606a,%rax
  8004212d60:	00 00 00 
  8004212d63:	ff d0                	callq  *%rax
  8004212d65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004212d69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d6d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212d71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d75:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d7d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d85:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d8d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004212d91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d95:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004212d99:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212d9e:	c9                   	leaveq 
  8004212d9f:	c3                   	retq   

0000008004212da0 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004212da0:	55                   	push   %rbp
  8004212da1:	48 89 e5             	mov    %rsp,%rbp
  8004212da4:	48 83 ec 08          	sub    $0x8,%rsp
  8004212da8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004212dac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212db0:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  8004212db6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212dba:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  8004212dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212dc4:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004212dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212dce:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004212dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212dd8:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004212dde:	c9                   	leaveq 
  8004212ddf:	c3                   	retq   

0000008004212de0 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004212de0:	55                   	push   %rbp
  8004212de1:	48 89 e5             	mov    %rsp,%rbp
  8004212de4:	48 83 ec 40          	sub    $0x40,%rsp
  8004212de8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212dec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212df0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212df4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004212df8:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004212dfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212e00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004212e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e08:	ba 80 00 00 00       	mov    $0x80,%edx
  8004212e0d:	be 00 00 00 00       	mov    $0x0,%esi
  8004212e12:	48 89 c7             	mov    %rax,%rdi
  8004212e15:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004212e1c:	00 00 00 
  8004212e1f:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004212e21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e25:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e29:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  8004212e2d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212e32:	75 07                	jne    8004212e3b <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004212e34:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212e39:	eb 75                	jmp    8004212eb0 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212e3b:	eb 59                	jmp    8004212e96 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  8004212e3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004212e41:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212e49:	be 01 00 00 00       	mov    $0x1,%esi
  8004212e4e:	48 89 c7             	mov    %rax,%rdi
  8004212e51:	48 b8 f5 4f 21 04 80 	movabs $0x8004214ff5,%rax
  8004212e58:	00 00 00 
  8004212e5b:	ff d0                	callq  *%rax
  8004212e5d:	85 c0                	test   %eax,%eax
  8004212e5f:	79 07                	jns    8004212e68 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004212e61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212e66:	eb 48                	jmp    8004212eb0 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212e68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e6c:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212e70:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212e74:	77 20                	ja     8004212e96 <dwarf_get_fde_at_pc+0xb6>
  8004212e76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e7a:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  8004212e7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e82:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212e86:	48 01 d0             	add    %rdx,%rax
  8004212e89:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212e8d:	76 07                	jbe    8004212e96 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  8004212e8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e94:	eb 1a                	jmp    8004212eb0 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212e96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212e9a:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004212e9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212ea2:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004212ea6:	48 39 c2             	cmp    %rax,%rdx
  8004212ea9:	72 92                	jb     8004212e3d <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  8004212eab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  8004212eb0:	c9                   	leaveq 
  8004212eb1:	c3                   	retq   

0000008004212eb2 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  8004212eb2:	55                   	push   %rbp
  8004212eb3:	48 89 e5             	mov    %rsp,%rbp
  8004212eb6:	53                   	push   %rbx
  8004212eb7:	48 83 ec 38          	sub    $0x38,%rsp
  8004212ebb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212ebf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212ec3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212ec7:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  8004212ecb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212ed0:	75 35                	jne    8004212f07 <_dwarf_frame_regtable_copy+0x55>
  8004212ed2:	48 b9 da f4 21 04 80 	movabs $0x800421f4da,%rcx
  8004212ed9:	00 00 00 
  8004212edc:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  8004212ee3:	00 00 00 
  8004212ee6:	be 57 00 00 00       	mov    $0x57,%esi
  8004212eeb:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  8004212ef2:	00 00 00 
  8004212ef5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212efa:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212f01:	00 00 00 
  8004212f04:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  8004212f07:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212f0c:	75 35                	jne    8004212f43 <_dwarf_frame_regtable_copy+0x91>
  8004212f0e:	48 b9 12 f5 21 04 80 	movabs $0x800421f512,%rcx
  8004212f15:	00 00 00 
  8004212f18:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  8004212f1f:	00 00 00 
  8004212f22:	be 58 00 00 00       	mov    $0x58,%esi
  8004212f27:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  8004212f2e:	00 00 00 
  8004212f31:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212f36:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212f3d:	00 00 00 
  8004212f40:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004212f43:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f47:	48 8b 00             	mov    (%rax),%rax
  8004212f4a:	48 85 c0             	test   %rax,%rax
  8004212f4d:	75 39                	jne    8004212f88 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  8004212f4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f53:	48 bb e0 c6 4d 04 80 	movabs $0x80044dc6e0,%rbx
  8004212f5a:	00 00 00 
  8004212f5d:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004212f60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f64:	48 8b 00             	mov    (%rax),%rax
  8004212f67:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212f6b:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004212f6f:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004212f73:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f77:	48 8b 00             	mov    (%rax),%rax
  8004212f7a:	48 bb 00 a8 6d 04 80 	movabs $0x80046da800,%rbx
  8004212f81:	00 00 00 
  8004212f84:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004212f88:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004212f8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f90:	48 8b 00             	mov    (%rax),%rax
  8004212f93:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212f98:	48 89 ce             	mov    %rcx,%rsi
  8004212f9b:	48 89 c7             	mov    %rax,%rdi
  8004212f9e:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  8004212fa5:	00 00 00 
  8004212fa8:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212faa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004212fb1:	eb 5a                	jmp    800421300d <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  8004212fb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212fb7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212fbb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004212fbe:	48 63 d0             	movslq %eax,%rdx
  8004212fc1:	48 89 d0             	mov    %rdx,%rax
  8004212fc4:	48 01 c0             	add    %rax,%rax
  8004212fc7:	48 01 d0             	add    %rdx,%rax
  8004212fca:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fce:	48 01 c1             	add    %rax,%rcx
  8004212fd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212fd5:	48 8b 00             	mov    (%rax),%rax
  8004212fd8:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212fdc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004212fdf:	48 63 d0             	movslq %eax,%rdx
  8004212fe2:	48 89 d0             	mov    %rdx,%rax
  8004212fe5:	48 01 c0             	add    %rax,%rax
  8004212fe8:	48 01 d0             	add    %rdx,%rax
  8004212feb:	48 c1 e0 03          	shl    $0x3,%rax
  8004212fef:	48 01 f0             	add    %rsi,%rax
  8004212ff2:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212ff7:	48 89 ce             	mov    %rcx,%rsi
  8004212ffa:	48 89 c7             	mov    %rax,%rdi
  8004212ffd:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  8004213004:	00 00 00 
  8004213007:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004213009:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421300d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213011:	48 8b 00             	mov    (%rax),%rax
  8004213014:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213018:	0f b7 c0             	movzwl %ax,%eax
  800421301b:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421301e:	7e 10                	jle    8004213030 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  8004213020:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213024:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213028:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800421302b:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421302e:	7f 83                	jg     8004212fb3 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213030:	eb 32                	jmp    8004213064 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  8004213032:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213036:	48 8b 00             	mov    (%rax),%rax
  8004213039:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421303d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213040:	48 63 d0             	movslq %eax,%rdx
  8004213043:	48 89 d0             	mov    %rdx,%rax
  8004213046:	48 01 c0             	add    %rax,%rax
  8004213049:	48 01 d0             	add    %rdx,%rax
  800421304c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213050:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004213054:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213058:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  800421305c:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213060:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004213064:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213068:	48 8b 00             	mov    (%rax),%rax
  800421306b:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421306f:	0f b7 c0             	movzwl %ax,%eax
  8004213072:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213075:	7f bb                	jg     8004213032 <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  8004213077:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421307c:	48 83 c4 38          	add    $0x38,%rsp
  8004213080:	5b                   	pop    %rbx
  8004213081:	5d                   	pop    %rbp
  8004213082:	c3                   	retq   

0000008004213083 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004213083:	55                   	push   %rbp
  8004213084:	48 89 e5             	mov    %rsp,%rbp
  8004213087:	53                   	push   %rbx
  8004213088:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  800421308f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004213093:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004213097:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  800421309b:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800421309f:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  80042130a6:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  80042130ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  80042130b4:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042130bb:	00 
  80042130bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042130c0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  80042130c4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042130c8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042130cc:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  80042130cf:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042130d3:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042130d7:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  80042130db:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042130df:	48 89 c7             	mov    %rax,%rdi
  80042130e2:	48 b8 b2 2e 21 04 80 	movabs $0x8004212eb2,%rax
  80042130e9:	00 00 00 
  80042130ec:	ff d0                	callq  *%rax
	p = insts;
  80042130ee:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042130f2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  80042130f6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042130fa:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042130fe:	48 01 d0             	add    %rdx,%rax
  8004213101:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  8004213105:	e9 3a 0d 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  800421310a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421310e:	0f b6 00             	movzbl (%rax),%eax
  8004213111:	84 c0                	test   %al,%al
  8004213113:	75 11                	jne    8004213126 <_dwarf_frame_run_inst+0xa3>
			p++;
  8004213115:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213119:	48 83 c0 01          	add    $0x1,%rax
  800421311d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004213121:	e9 1e 0d 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  8004213126:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421312a:	0f b6 00             	movzbl (%rax),%eax
  800421312d:	83 e0 c0             	and    $0xffffffc0,%eax
  8004213130:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  8004213133:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213137:	0f b6 00             	movzbl (%rax),%eax
  800421313a:	83 e0 3f             	and    $0x3f,%eax
  800421313d:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  8004213140:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213144:	48 83 c0 01          	add    $0x1,%rax
  8004213148:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  800421314c:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  8004213150:	0f 84 a1 01 00 00    	je     80042132f7 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  8004213156:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421315a:	3d 80 00 00 00       	cmp    $0x80,%eax
  800421315f:	74 38                	je     8004213199 <_dwarf_frame_run_inst+0x116>
  8004213161:	3d c0 00 00 00       	cmp    $0xc0,%eax
  8004213166:	0f 84 01 01 00 00    	je     800421326d <_dwarf_frame_run_inst+0x1ea>
  800421316c:	83 f8 40             	cmp    $0x40,%eax
  800421316f:	0f 85 71 01 00 00    	jne    80042132e6 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004213175:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213179:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213180:	ff 
  8004213181:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004213185:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213189:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421318d:	73 05                	jae    8004213194 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  800421318f:	e9 be 0c 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004213194:	e9 59 01 00 00       	jmpq   80042132f2 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004213199:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421319d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042131a1:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042131a4:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042131a8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131ac:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042131b0:	66 39 c2             	cmp    %ax,%dx
  80042131b3:	72 0c                	jb     80042131c1 <_dwarf_frame_run_inst+0x13e>
  80042131b5:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042131bc:	e9 91 0c 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  80042131c1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131c5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131c9:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042131cd:	48 89 d0             	mov    %rdx,%rax
  80042131d0:	48 01 c0             	add    %rax,%rax
  80042131d3:	48 01 d0             	add    %rdx,%rax
  80042131d6:	48 c1 e0 03          	shl    $0x3,%rax
  80042131da:	48 01 c8             	add    %rcx,%rax
  80042131dd:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  80042131e0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131e4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131e8:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042131ec:	48 89 d0             	mov    %rdx,%rax
  80042131ef:	48 01 c0             	add    %rax,%rax
  80042131f2:	48 01 d0             	add    %rdx,%rax
  80042131f5:	48 c1 e0 03          	shl    $0x3,%rax
  80042131f9:	48 01 c8             	add    %rcx,%rax
  80042131fc:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213200:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213204:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213208:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421320c:	48 89 d0             	mov    %rdx,%rax
  800421320f:	48 01 c0             	add    %rax,%rax
  8004213212:	48 01 d0             	add    %rdx,%rax
  8004213215:	48 c1 e0 03          	shl    $0x3,%rax
  8004213219:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421321d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213221:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213225:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004213229:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421322d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213231:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213235:	48 89 d0             	mov    %rdx,%rax
  8004213238:	48 01 c0             	add    %rax,%rax
  800421323b:	48 01 d0             	add    %rdx,%rax
  800421323e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213242:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  8004213246:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421324a:	48 89 c7             	mov    %rax,%rdi
  800421324d:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213254:	00 00 00 
  8004213257:	ff d0                	callq  *%rax
  8004213259:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213260:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  8004213264:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004213268:	e9 85 00 00 00       	jmpq   80042132f2 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  800421326d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213271:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213275:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213278:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421327c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213280:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213284:	66 39 c2             	cmp    %ax,%dx
  8004213287:	72 0c                	jb     8004213295 <_dwarf_frame_run_inst+0x212>
  8004213289:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213290:	e9 bd 0b 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004213295:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213299:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421329d:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042132a1:	48 89 d0             	mov    %rdx,%rax
  80042132a4:	48 01 c0             	add    %rax,%rax
  80042132a7:	48 01 d0             	add    %rdx,%rax
  80042132aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042132ae:	48 01 c1             	add    %rax,%rcx
  80042132b1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132b5:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042132b9:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042132bd:	48 89 d0             	mov    %rdx,%rax
  80042132c0:	48 01 c0             	add    %rax,%rax
  80042132c3:	48 01 d0             	add    %rdx,%rax
  80042132c6:	48 c1 e0 03          	shl    $0x3,%rax
  80042132ca:	48 01 f0             	add    %rsi,%rax
  80042132cd:	ba 18 00 00 00       	mov    $0x18,%edx
  80042132d2:	48 89 ce             	mov    %rcx,%rsi
  80042132d5:	48 89 c7             	mov    %rax,%rdi
  80042132d8:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  80042132df:	00 00 00 
  80042132e2:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  80042132e4:	eb 0c                	jmp    80042132f2 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042132e6:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  80042132ed:	e9 60 0b 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  80042132f2:	e9 4d 0b 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  80042132f7:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042132fb:	83 f8 16             	cmp    $0x16,%eax
  80042132fe:	0f 87 37 0b 00 00    	ja     8004213e3b <_dwarf_frame_run_inst+0xdb8>
  8004213304:	89 c0                	mov    %eax,%eax
  8004213306:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421330d:	00 
  800421330e:	48 b8 20 f5 21 04 80 	movabs $0x800421f520,%rax
  8004213315:	00 00 00 
  8004213318:	48 01 d0             	add    %rdx,%rax
  800421331b:	48 8b 00             	mov    (%rax),%rax
  800421331e:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  8004213320:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213324:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213328:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421332c:	8b 4a 28             	mov    0x28(%rdx),%ecx
  800421332f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213333:	89 ce                	mov    %ecx,%esi
  8004213335:	48 89 d7             	mov    %rdx,%rdi
  8004213338:	ff d0                	callq  *%rax
  800421333a:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421333e:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213342:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213346:	73 05                	jae    800421334d <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004213348:	e9 05 0b 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			break;
  800421334d:	e9 f2 0a 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  8004213352:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213356:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421335a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421335e:	be 01 00 00 00       	mov    $0x1,%esi
  8004213363:	48 89 d7             	mov    %rdx,%rdi
  8004213366:	ff d0                	callq  *%rax
  8004213368:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421336f:	ff 
  8004213370:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213374:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213378:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421337c:	73 05                	jae    8004213383 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  800421337e:	e9 cf 0a 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213383:	e9 bc 0a 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004213388:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421338c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213390:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213394:	be 02 00 00 00       	mov    $0x2,%esi
  8004213399:	48 89 d7             	mov    %rdx,%rdi
  800421339c:	ff d0                	callq  *%rax
  800421339e:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042133a5:	ff 
  80042133a6:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042133aa:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042133ae:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042133b2:	73 05                	jae    80042133b9 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  80042133b4:	e9 99 0a 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042133b9:	e9 86 0a 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  80042133be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042133c2:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042133c6:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042133ca:	be 04 00 00 00       	mov    $0x4,%esi
  80042133cf:	48 89 d7             	mov    %rdx,%rdi
  80042133d2:	ff d0                	callq  *%rax
  80042133d4:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042133db:	ff 
  80042133dc:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042133e0:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042133e4:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042133e8:	73 05                	jae    80042133ef <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  80042133ea:	e9 63 0a 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042133ef:	e9 50 0a 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  80042133f4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042133f8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042133fc:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042133ff:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213403:	48 89 c7             	mov    %rax,%rdi
  8004213406:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421340d:	00 00 00 
  8004213410:	ff d0                	callq  *%rax
  8004213412:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213416:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421341a:	48 89 c7             	mov    %rax,%rdi
  800421341d:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213424:	00 00 00 
  8004213427:	ff d0                	callq  *%rax
  8004213429:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421342d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213431:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213435:	0f b7 c0             	movzwl %ax,%eax
  8004213438:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421343c:	77 0c                	ja     800421344a <_dwarf_frame_run_inst+0x3c7>
  800421343e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213445:	e9 08 0a 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421344a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421344e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213452:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213456:	48 89 d0             	mov    %rdx,%rax
  8004213459:	48 01 c0             	add    %rax,%rax
  800421345c:	48 01 d0             	add    %rdx,%rax
  800421345f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213463:	48 01 c8             	add    %rcx,%rax
  8004213466:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213469:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421346d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213471:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213475:	48 89 d0             	mov    %rdx,%rax
  8004213478:	48 01 c0             	add    %rax,%rax
  800421347b:	48 01 d0             	add    %rdx,%rax
  800421347e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213482:	48 01 c8             	add    %rcx,%rax
  8004213485:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213489:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421348d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213491:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213495:	48 89 d0             	mov    %rdx,%rax
  8004213498:	48 01 c0             	add    %rax,%rax
  800421349b:	48 01 d0             	add    %rdx,%rax
  800421349e:	48 c1 e0 03          	shl    $0x3,%rax
  80042134a2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042134a6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042134aa:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042134ae:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  80042134b2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134b6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134be:	48 89 d0             	mov    %rdx,%rax
  80042134c1:	48 01 c0             	add    %rax,%rax
  80042134c4:	48 01 d0             	add    %rdx,%rax
  80042134c7:	48 c1 e0 03          	shl    $0x3,%rax
  80042134cb:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042134cf:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042134d6:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  80042134db:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042134df:	e9 60 09 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  80042134e4:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042134e8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042134ec:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042134ef:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042134f3:	48 89 c7             	mov    %rax,%rdi
  80042134f6:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042134fd:	00 00 00 
  8004213500:	ff d0                	callq  *%rax
  8004213502:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213506:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421350a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421350e:	0f b7 c0             	movzwl %ax,%eax
  8004213511:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213515:	77 0c                	ja     8004213523 <_dwarf_frame_run_inst+0x4a0>
  8004213517:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421351e:	e9 2f 09 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004213523:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213527:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421352b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421352f:	48 89 d0             	mov    %rdx,%rax
  8004213532:	48 01 c0             	add    %rax,%rax
  8004213535:	48 01 d0             	add    %rdx,%rax
  8004213538:	48 c1 e0 03          	shl    $0x3,%rax
  800421353c:	48 01 c1             	add    %rax,%rcx
  800421353f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213543:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213547:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421354b:	48 89 d0             	mov    %rdx,%rax
  800421354e:	48 01 c0             	add    %rax,%rax
  8004213551:	48 01 d0             	add    %rdx,%rax
  8004213554:	48 c1 e0 03          	shl    $0x3,%rax
  8004213558:	48 01 f0             	add    %rsi,%rax
  800421355b:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213560:	48 89 ce             	mov    %rcx,%rsi
  8004213563:	48 89 c7             	mov    %rax,%rdi
  8004213566:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  800421356d:	00 00 00 
  8004213570:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004213572:	e9 cd 08 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004213577:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421357b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421357f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213582:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213586:	48 89 c7             	mov    %rax,%rdi
  8004213589:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213590:	00 00 00 
  8004213593:	ff d0                	callq  *%rax
  8004213595:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213599:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421359d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042135a1:	0f b7 c0             	movzwl %ax,%eax
  80042135a4:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042135a8:	77 0c                	ja     80042135b6 <_dwarf_frame_run_inst+0x533>
  80042135aa:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042135b1:	e9 9c 08 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042135b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135ba:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042135c2:	48 89 d0             	mov    %rdx,%rax
  80042135c5:	48 01 c0             	add    %rax,%rax
  80042135c8:	48 01 d0             	add    %rdx,%rax
  80042135cb:	48 c1 e0 03          	shl    $0x3,%rax
  80042135cf:	48 01 c8             	add    %rcx,%rax
  80042135d2:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  80042135d5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135d9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135dd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042135e1:	48 89 d0             	mov    %rdx,%rax
  80042135e4:	48 01 c0             	add    %rax,%rax
  80042135e7:	48 01 d0             	add    %rdx,%rax
  80042135ea:	48 c1 e0 03          	shl    $0x3,%rax
  80042135ee:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042135f2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042135f6:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  80042135fa:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  80042135fe:	e9 41 08 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004213603:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213607:	48 89 c7             	mov    %rax,%rdi
  800421360a:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213611:	00 00 00 
  8004213614:	ff d0                	callq  *%rax
  8004213616:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421361a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421361e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213622:	0f b7 c0             	movzwl %ax,%eax
  8004213625:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213629:	77 0c                	ja     8004213637 <_dwarf_frame_run_inst+0x5b4>
  800421362b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213632:	e9 1b 08 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213637:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421363b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421363f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213643:	48 89 d0             	mov    %rdx,%rax
  8004213646:	48 01 c0             	add    %rax,%rax
  8004213649:	48 01 d0             	add    %rdx,%rax
  800421364c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213650:	48 01 c8             	add    %rcx,%rax
  8004213653:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004213656:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421365a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421365e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213662:	48 89 d0             	mov    %rdx,%rax
  8004213665:	48 01 c0             	add    %rax,%rax
  8004213668:	48 01 d0             	add    %rdx,%rax
  800421366b:	48 c1 e0 03          	shl    $0x3,%rax
  800421366f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213673:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213677:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  800421367b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800421367f:	e9 c0 07 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213684:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213688:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421368c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421368f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213693:	48 89 c7             	mov    %rax,%rdi
  8004213696:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421369d:	00 00 00 
  80042136a0:	ff d0                	callq  *%rax
  80042136a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  80042136a6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042136aa:	48 89 c7             	mov    %rax,%rdi
  80042136ad:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042136b4:	00 00 00 
  80042136b7:	ff d0                	callq  *%rax
  80042136b9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042136bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136c1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042136c5:	0f b7 c0             	movzwl %ax,%eax
  80042136c8:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042136cc:	77 0c                	ja     80042136da <_dwarf_frame_run_inst+0x657>
  80042136ce:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042136d5:	e9 78 07 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042136da:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136de:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136e2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042136e6:	48 89 d0             	mov    %rdx,%rax
  80042136e9:	48 01 c0             	add    %rax,%rax
  80042136ec:	48 01 d0             	add    %rdx,%rax
  80042136ef:	48 c1 e0 03          	shl    $0x3,%rax
  80042136f3:	48 01 c8             	add    %rcx,%rax
  80042136f6:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  80042136f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136fd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213701:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213705:	48 89 d0             	mov    %rdx,%rax
  8004213708:	48 01 c0             	add    %rax,%rax
  800421370b:	48 01 d0             	add    %rdx,%rax
  800421370e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213712:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213716:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421371a:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800421371e:	e9 21 07 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004213723:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213727:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421372b:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  800421372f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213733:	48 89 c7             	mov    %rax,%rdi
  8004213736:	48 b8 b2 2e 21 04 80 	movabs $0x8004212eb2,%rax
  800421373d:	00 00 00 
  8004213740:	ff d0                	callq  *%rax
			break;
  8004213742:	e9 fd 06 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004213747:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421374b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421374f:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004213752:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004213756:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421375a:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800421375e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213762:	48 89 c7             	mov    %rax,%rdi
  8004213765:	48 b8 b2 2e 21 04 80 	movabs $0x8004212eb2,%rax
  800421376c:	00 00 00 
  800421376f:	ff d0                	callq  *%rax
			break;
  8004213771:	e9 ce 06 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213776:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421377a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421377e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213781:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213785:	48 89 c7             	mov    %rax,%rdi
  8004213788:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421378f:	00 00 00 
  8004213792:	ff d0                	callq  *%rax
  8004213794:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213798:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421379c:	48 89 c7             	mov    %rax,%rdi
  800421379f:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042137a6:	00 00 00 
  80042137a9:	ff d0                	callq  *%rax
  80042137ab:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  80042137af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137b3:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042137b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137ba:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042137be:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137c2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137c6:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  80042137ca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137ce:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042137d2:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042137d6:	e9 69 06 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  80042137db:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042137df:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042137e3:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042137e6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042137ea:	48 89 c7             	mov    %rax,%rdi
  80042137ed:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042137f4:	00 00 00 
  80042137f7:	ff d0                	callq  *%rax
  80042137f9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  80042137fd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213801:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213805:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004213809:	e9 36 06 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  800421380e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213812:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213816:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004213819:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421381d:	48 89 c7             	mov    %rax,%rdi
  8004213820:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213827:	00 00 00 
  800421382a:	ff d0                	callq  *%rax
  800421382c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213830:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213834:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213837:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421383b:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  800421383f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213843:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213847:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421384b:	e9 f4 05 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213850:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213854:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213858:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  800421385b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421385f:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213862:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213866:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  800421386a:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  800421386e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213872:	48 89 c7             	mov    %rax,%rdi
  8004213875:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421387c:	00 00 00 
  800421387f:	ff d0                	callq  *%rax
  8004213881:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213885:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213889:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421388d:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213891:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213895:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213899:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421389d:	48 01 d0             	add    %rdx,%rax
  80042138a0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  80042138a4:	e9 9b 05 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  80042138a9:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042138ad:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042138b1:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042138b4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042138b8:	48 89 c7             	mov    %rax,%rdi
  80042138bb:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042138c2:	00 00 00 
  80042138c5:	ff d0                	callq  *%rax
  80042138c7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042138cb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138cf:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042138d3:	0f b7 c0             	movzwl %ax,%eax
  80042138d6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042138da:	77 0c                	ja     80042138e8 <_dwarf_frame_run_inst+0x865>
  80042138dc:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042138e3:	e9 6a 05 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042138e8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138ec:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138f0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138f4:	48 89 d0             	mov    %rdx,%rax
  80042138f7:	48 01 c0             	add    %rax,%rax
  80042138fa:	48 01 d0             	add    %rdx,%rax
  80042138fd:	48 c1 e0 03          	shl    $0x3,%rax
  8004213901:	48 01 c8             	add    %rcx,%rax
  8004213904:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004213907:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421390b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421390f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213913:	48 89 d0             	mov    %rdx,%rax
  8004213916:	48 01 c0             	add    %rax,%rax
  8004213919:	48 01 d0             	add    %rdx,%rax
  800421391c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213920:	48 01 c8             	add    %rcx,%rax
  8004213923:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213927:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421392b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421392f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213933:	48 89 d0             	mov    %rdx,%rax
  8004213936:	48 01 c0             	add    %rax,%rax
  8004213939:	48 01 d0             	add    %rdx,%rax
  800421393c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213940:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213944:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213948:	48 89 c7             	mov    %rax,%rdi
  800421394b:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213952:	00 00 00 
  8004213955:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213957:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  800421395b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421395f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213963:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213967:	48 89 d0             	mov    %rdx,%rax
  800421396a:	48 01 c0             	add    %rax,%rax
  800421396d:	48 01 d0             	add    %rdx,%rax
  8004213970:	48 c1 e0 03          	shl    $0x3,%rax
  8004213974:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213978:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421397c:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213980:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213984:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213988:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421398c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213990:	48 89 d0             	mov    %rdx,%rax
  8004213993:	48 01 c0             	add    %rax,%rax
  8004213996:	48 01 d0             	add    %rdx,%rax
  8004213999:	48 c1 e0 03          	shl    $0x3,%rax
  800421399d:	48 01 f0             	add    %rsi,%rax
  80042139a0:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042139a4:	48 01 c8             	add    %rcx,%rax
  80042139a7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  80042139ab:	e9 94 04 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  80042139b0:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042139b4:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042139b8:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042139bb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042139bf:	48 89 c7             	mov    %rax,%rdi
  80042139c2:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042139c9:	00 00 00 
  80042139cc:	ff d0                	callq  *%rax
  80042139ce:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042139d2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042139d6:	48 89 c7             	mov    %rax,%rdi
  80042139d9:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  80042139e0:	00 00 00 
  80042139e3:	ff d0                	callq  *%rax
  80042139e5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042139e9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139ed:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042139f1:	0f b7 c0             	movzwl %ax,%eax
  80042139f4:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042139f8:	77 0c                	ja     8004213a06 <_dwarf_frame_run_inst+0x983>
  80042139fa:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213a01:	e9 4c 04 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213a06:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a0a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a0e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a12:	48 89 d0             	mov    %rdx,%rax
  8004213a15:	48 01 c0             	add    %rax,%rax
  8004213a18:	48 01 d0             	add    %rdx,%rax
  8004213a1b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a1f:	48 01 c8             	add    %rcx,%rax
  8004213a22:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213a25:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a29:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a2d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a31:	48 89 d0             	mov    %rdx,%rax
  8004213a34:	48 01 c0             	add    %rax,%rax
  8004213a37:	48 01 d0             	add    %rdx,%rax
  8004213a3a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a3e:	48 01 c8             	add    %rcx,%rax
  8004213a41:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213a45:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a49:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a4d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a51:	48 89 d0             	mov    %rdx,%rax
  8004213a54:	48 01 c0             	add    %rax,%rax
  8004213a57:	48 01 d0             	add    %rdx,%rax
  8004213a5a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a5e:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a62:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213a66:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213a6a:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213a6e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a72:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a76:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a7a:	48 89 d0             	mov    %rdx,%rax
  8004213a7d:	48 01 c0             	add    %rax,%rax
  8004213a80:	48 01 d0             	add    %rdx,%rax
  8004213a83:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a87:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a8b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213a92:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213a97:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213a9b:	e9 a4 03 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213aa0:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213aa4:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213aa8:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213aab:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213aaf:	48 89 c7             	mov    %rax,%rdi
  8004213ab2:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213ab9:	00 00 00 
  8004213abc:	ff d0                	callq  *%rax
  8004213abe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213ac2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ac6:	48 89 c7             	mov    %rax,%rdi
  8004213ac9:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  8004213ad0:	00 00 00 
  8004213ad3:	ff d0                	callq  *%rax
  8004213ad5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213ad9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213add:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213ae0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ae4:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213ae8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213aec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213af0:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213af4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213af8:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213aff:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213b04:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213b08:	e9 37 03 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213b0d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213b11:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213b15:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213b18:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b1c:	48 89 c7             	mov    %rax,%rdi
  8004213b1f:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  8004213b26:	00 00 00 
  8004213b29:	ff d0                	callq  *%rax
  8004213b2b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213b2f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b33:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213b36:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b3a:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213b3e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b42:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213b49:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213b4e:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213b52:	e9 ed 02 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213b57:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213b5b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213b5f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213b62:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b66:	48 89 c7             	mov    %rax,%rdi
  8004213b69:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213b70:	00 00 00 
  8004213b73:	ff d0                	callq  *%rax
  8004213b75:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213b79:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b7d:	48 89 c7             	mov    %rax,%rdi
  8004213b80:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213b87:	00 00 00 
  8004213b8a:	ff d0                	callq  *%rax
  8004213b8c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213b90:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b94:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213b98:	0f b7 c0             	movzwl %ax,%eax
  8004213b9b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213b9f:	77 0c                	ja     8004213bad <_dwarf_frame_run_inst+0xb2a>
  8004213ba1:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213ba8:	e9 a5 02 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213bad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bb1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213bb5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bb9:	48 89 d0             	mov    %rdx,%rax
  8004213bbc:	48 01 c0             	add    %rax,%rax
  8004213bbf:	48 01 d0             	add    %rdx,%rax
  8004213bc2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bc6:	48 01 c8             	add    %rcx,%rax
  8004213bc9:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213bcc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bd0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213bd4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bd8:	48 89 d0             	mov    %rdx,%rax
  8004213bdb:	48 01 c0             	add    %rax,%rax
  8004213bde:	48 01 d0             	add    %rdx,%rax
  8004213be1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213be5:	48 01 c8             	add    %rcx,%rax
  8004213be8:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213bec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bf0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213bf4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bf8:	48 89 d0             	mov    %rdx,%rax
  8004213bfb:	48 01 c0             	add    %rax,%rax
  8004213bfe:	48 01 d0             	add    %rdx,%rax
  8004213c01:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c05:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c09:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c0d:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213c11:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213c15:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c19:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c1d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c21:	48 89 d0             	mov    %rdx,%rax
  8004213c24:	48 01 c0             	add    %rax,%rax
  8004213c27:	48 01 d0             	add    %rdx,%rax
  8004213c2a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c2e:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c32:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213c39:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213c3e:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213c42:	e9 fd 01 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213c47:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c4b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c4f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c52:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c56:	48 89 c7             	mov    %rax,%rdi
  8004213c59:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213c60:	00 00 00 
  8004213c63:	ff d0                	callq  *%rax
  8004213c65:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213c69:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c6d:	48 89 c7             	mov    %rax,%rdi
  8004213c70:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  8004213c77:	00 00 00 
  8004213c7a:	ff d0                	callq  *%rax
  8004213c7c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213c80:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c84:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213c88:	0f b7 c0             	movzwl %ax,%eax
  8004213c8b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213c8f:	77 0c                	ja     8004213c9d <_dwarf_frame_run_inst+0xc1a>
  8004213c91:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213c98:	e9 b5 01 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213c9d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ca1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ca5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ca9:	48 89 d0             	mov    %rdx,%rax
  8004213cac:	48 01 c0             	add    %rax,%rax
  8004213caf:	48 01 d0             	add    %rdx,%rax
  8004213cb2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cb6:	48 01 c8             	add    %rcx,%rax
  8004213cb9:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213cbc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cc0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213cc4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213cc8:	48 89 d0             	mov    %rdx,%rax
  8004213ccb:	48 01 c0             	add    %rax,%rax
  8004213cce:	48 01 d0             	add    %rdx,%rax
  8004213cd1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cd5:	48 01 c8             	add    %rcx,%rax
  8004213cd8:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213cdc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ce0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ce4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ce8:	48 89 d0             	mov    %rdx,%rax
  8004213ceb:	48 01 c0             	add    %rax,%rax
  8004213cee:	48 01 d0             	add    %rdx,%rax
  8004213cf1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cf5:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213cf9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213cfd:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213d01:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213d05:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d09:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d0d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d11:	48 89 d0             	mov    %rdx,%rax
  8004213d14:	48 01 c0             	add    %rax,%rax
  8004213d17:	48 01 d0             	add    %rdx,%rax
  8004213d1a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d1e:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213d22:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213d29:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213d2e:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213d32:	e9 0d 01 00 00       	jmpq   8004213e44 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213d37:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d3b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d3f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213d42:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d46:	48 89 c7             	mov    %rax,%rdi
  8004213d49:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213d50:	00 00 00 
  8004213d53:	ff d0                	callq  *%rax
  8004213d55:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213d59:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d5d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213d61:	0f b7 c0             	movzwl %ax,%eax
  8004213d64:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213d68:	77 0c                	ja     8004213d76 <_dwarf_frame_run_inst+0xcf3>
  8004213d6a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213d71:	e9 dc 00 00 00       	jmpq   8004213e52 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213d76:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d7a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d7e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d82:	48 89 d0             	mov    %rdx,%rax
  8004213d85:	48 01 c0             	add    %rax,%rax
  8004213d88:	48 01 d0             	add    %rdx,%rax
  8004213d8b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d8f:	48 01 c8             	add    %rcx,%rax
  8004213d92:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213d95:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d99:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d9d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213da1:	48 89 d0             	mov    %rdx,%rax
  8004213da4:	48 01 c0             	add    %rax,%rax
  8004213da7:	48 01 d0             	add    %rdx,%rax
  8004213daa:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dae:	48 01 c8             	add    %rcx,%rax
  8004213db1:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213db5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213db9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213dbd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dc1:	48 89 d0             	mov    %rdx,%rax
  8004213dc4:	48 01 c0             	add    %rax,%rax
  8004213dc7:	48 01 d0             	add    %rdx,%rax
  8004213dca:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dce:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213dd2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213dd6:	48 89 c7             	mov    %rax,%rdi
  8004213dd9:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004213de0:	00 00 00 
  8004213de3:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213de5:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213de9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ded:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213df1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213df5:	48 89 d0             	mov    %rdx,%rax
  8004213df8:	48 01 c0             	add    %rax,%rax
  8004213dfb:	48 01 d0             	add    %rdx,%rax
  8004213dfe:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e02:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e06:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213e0a:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213e0e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213e12:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e16:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213e1a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e1e:	48 89 d0             	mov    %rdx,%rax
  8004213e21:	48 01 c0             	add    %rax,%rax
  8004213e24:	48 01 d0             	add    %rdx,%rax
  8004213e27:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e2b:	48 01 f0             	add    %rsi,%rax
  8004213e2e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213e32:	48 01 c8             	add    %rcx,%rax
  8004213e35:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213e39:	eb 09                	jmp    8004213e44 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213e3b:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  8004213e42:	eb 0e                	jmp    8004213e52 <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004213e44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213e48:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213e4c:	0f 82 b8 f2 ff ff    	jb     800421310a <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  8004213e52:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004213e55:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004213e5c:	5b                   	pop    %rbx
  8004213e5d:	5d                   	pop    %rbp
  8004213e5e:	c3                   	retq   

0000008004213e5f <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004213e5f:	55                   	push   %rbp
  8004213e60:	48 89 e5             	mov    %rsp,%rbp
  8004213e63:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004213e67:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213e6b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213e6f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213e73:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213e77:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  8004213e7b:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004213e7f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213e84:	75 35                	jne    8004213ebb <_dwarf_frame_get_internal_table+0x5c>
  8004213e86:	48 b9 d8 f5 21 04 80 	movabs $0x800421f5d8,%rcx
  8004213e8d:	00 00 00 
  8004213e90:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  8004213e97:	00 00 00 
  8004213e9a:	be 83 01 00 00       	mov    $0x183,%esi
  8004213e9f:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  8004213ea6:	00 00 00 
  8004213ea9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213eae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213eb5:	00 00 00 
  8004213eb8:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  8004213ebb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004213ec0:	75 35                	jne    8004213ef7 <_dwarf_frame_get_internal_table+0x98>
  8004213ec2:	48 b9 e7 f5 21 04 80 	movabs $0x800421f5e7,%rcx
  8004213ec9:	00 00 00 
  8004213ecc:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  8004213ed3:	00 00 00 
  8004213ed6:	be 86 01 00 00       	mov    $0x186,%esi
  8004213edb:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  8004213ee2:	00 00 00 
  8004213ee5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213eea:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213ef1:	00 00 00 
  8004213ef4:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  8004213ef7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213efb:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213eff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004213f03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f07:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213f0c:	be 00 00 00 00       	mov    $0x0,%esi
  8004213f11:	48 89 c7             	mov    %rax,%rdi
  8004213f14:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004213f1b:	00 00 00 
  8004213f1e:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004213f20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f24:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213f28:	0f b7 d0             	movzwl %ax,%edx
  8004213f2b:	48 89 d0             	mov    %rdx,%rax
  8004213f2e:	48 01 c0             	add    %rax,%rax
  8004213f31:	48 01 d0             	add    %rdx,%rax
  8004213f34:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f38:	48 89 c2             	mov    %rax,%rdx
  8004213f3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f3f:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213f43:	be 00 00 00 00       	mov    $0x0,%esi
  8004213f48:	48 89 c7             	mov    %rax,%rdi
  8004213f4b:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004213f52:	00 00 00 
  8004213f55:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213f57:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004213f5e:	eb 2f                	jmp    8004213f8f <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004213f60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f64:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f68:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213f6b:	48 63 d0             	movslq %eax,%rdx
  8004213f6e:	48 89 d0             	mov    %rdx,%rax
  8004213f71:	48 01 c0             	add    %rax,%rax
  8004213f74:	48 01 d0             	add    %rdx,%rax
  8004213f77:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f7b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f83:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004213f87:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213f8b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004213f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f93:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213f97:	0f b7 c0             	movzwl %ax,%eax
  8004213f9a:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213f9d:	7f c1                	jg     8004213f60 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  8004213f9f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213fa3:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213fa7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  8004213fab:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004213fb0:	75 35                	jne    8004213fe7 <_dwarf_frame_get_internal_table+0x188>
  8004213fb2:	48 b9 f3 f5 21 04 80 	movabs $0x800421f5f3,%rcx
  8004213fb9:	00 00 00 
  8004213fbc:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  8004213fc3:	00 00 00 
  8004213fc6:	be 95 01 00 00       	mov    $0x195,%esi
  8004213fcb:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  8004213fd2:	00 00 00 
  8004213fd5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213fda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213fe1:	00 00 00 
  8004213fe4:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  8004213fe7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213feb:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004213fef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ff3:	4c 8b 40 38          	mov    0x38(%rax),%r8
  8004213ff7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ffb:	48 8b 48 70          	mov    0x70(%rax),%rcx
  8004213fff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214003:	48 8b 50 68          	mov    0x68(%rax),%rdx
  8004214007:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421400b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421400f:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004214013:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004214018:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  800421401c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004214021:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004214028:	ff ff 
  800421402a:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004214031:	00 
  8004214032:	48 89 c7             	mov    %rax,%rdi
  8004214035:	48 b8 83 30 21 04 80 	movabs $0x8004213083,%rax
  800421403c:	00 00 00 
  800421403f:	ff d0                	callq  *%rax
  8004214041:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004214044:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004214048:	74 08                	je     8004214052 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  800421404a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421404d:	e9 98 00 00 00       	jmpq   80042140ea <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  8004214052:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214056:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421405a:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800421405e:	77 6f                	ja     80042140cf <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004214060:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214064:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004214068:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421406c:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214070:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214074:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004214078:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421407c:	48 8b 48 58          	mov    0x58(%rax),%rcx
  8004214080:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214084:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004214088:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421408c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214090:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004214094:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004214099:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  800421409d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042140a2:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  80042140a6:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042140ab:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042140af:	4d 89 d0             	mov    %r10,%r8
  80042140b2:	48 89 c7             	mov    %rax,%rdi
  80042140b5:	48 b8 83 30 21 04 80 	movabs $0x8004213083,%rax
  80042140bc:	00 00 00 
  80042140bf:	ff d0                	callq  *%rax
  80042140c1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  80042140c4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042140c8:	74 05                	je     80042140cf <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  80042140ca:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042140cd:	eb 1b                	jmp    80042140ea <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  80042140cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042140d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042140d7:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  80042140da:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042140de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042140e2:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042140e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042140ea:	c9                   	leaveq 
  80042140eb:	c3                   	retq   

00000080042140ec <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  80042140ec:	55                   	push   %rbp
  80042140ed:	48 89 e5             	mov    %rsp,%rbp
  80042140f0:	48 83 ec 50          	sub    $0x50,%rsp
  80042140f4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042140f8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042140fc:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214100:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004214104:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  8004214108:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  800421410c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004214111:	74 07                	je     800421411a <dwarf_get_fde_info_for_all_regs+0x2e>
  8004214113:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004214118:	75 0a                	jne    8004214124 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421411a:	b8 01 00 00 00       	mov    $0x1,%eax
  800421411f:	e9 eb 02 00 00       	jmpq   800421440f <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  8004214124:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004214129:	75 35                	jne    8004214160 <dwarf_get_fde_info_for_all_regs+0x74>
  800421412b:	48 b9 e7 f5 21 04 80 	movabs $0x800421f5e7,%rcx
  8004214132:	00 00 00 
  8004214135:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  800421413c:	00 00 00 
  800421413f:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004214144:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  800421414b:	00 00 00 
  800421414e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214153:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421415a:	00 00 00 
  800421415d:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004214160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214164:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214168:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800421416c:	77 19                	ja     8004214187 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  800421416e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214172:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004214176:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421417a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421417e:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004214181:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214185:	77 0a                	ja     8004214191 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004214187:	b8 01 00 00 00       	mov    $0x1,%eax
  800421418c:	e9 7e 02 00 00       	jmpq   800421440f <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004214191:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004214195:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004214199:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421419d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042141a1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042141a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042141a9:	4d 89 c1             	mov    %r8,%r9
  80042141ac:	49 89 f8             	mov    %rdi,%r8
  80042141af:	48 89 c7             	mov    %rax,%rdi
  80042141b2:	48 b8 5f 3e 21 04 80 	movabs $0x8004213e5f,%rax
  80042141b9:	00 00 00 
  80042141bc:	ff d0                	callq  *%rax
  80042141be:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  80042141c1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042141c5:	74 0a                	je     80042141d1 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  80042141c7:	b8 01 00 00 00       	mov    $0x1,%eax
  80042141cc:	e9 3e 02 00 00       	jmpq   800421440f <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  80042141d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042141d5:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042141d9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  80042141dd:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  80042141e2:	0f 87 b1 00 00 00    	ja     8004214299 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  80042141e8:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  80042141ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141f0:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  80042141f3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042141f7:	48 63 c9             	movslq %ecx,%rcx
  80042141fa:	48 83 c1 01          	add    $0x1,%rcx
  80042141fe:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214202:	48 01 ca             	add    %rcx,%rdx
  8004214205:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  8004214207:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421420b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421420f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004214213:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214217:	48 63 c9             	movslq %ecx,%rcx
  800421421a:	48 83 c1 01          	add    $0x1,%rcx
  800421421e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214222:	48 01 ca             	add    %rcx,%rdx
  8004214225:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004214228:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421422c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214230:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214234:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214238:	48 63 c9             	movslq %ecx,%rcx
  800421423b:	48 83 c1 01          	add    $0x1,%rcx
  800421423f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214243:	48 01 ca             	add    %rcx,%rdx
  8004214246:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  800421424a:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421424e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214252:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004214256:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421425a:	48 63 c9             	movslq %ecx,%rcx
  800421425d:	48 83 c1 01          	add    $0x1,%rcx
  8004214261:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214265:	48 01 ca             	add    %rcx,%rdx
  8004214268:	48 83 c2 08          	add    $0x8,%rdx
  800421426c:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  800421426f:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004214273:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004214277:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421427b:	48 63 d2             	movslq %edx,%rdx
  800421427e:	48 83 c2 01          	add    $0x1,%rdx
  8004214282:	48 c1 e2 04          	shl    $0x4,%rdx
  8004214286:	48 01 d0             	add    %rdx,%rax
  8004214289:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421428d:	48 8b 00             	mov    (%rax),%rax
  8004214290:	48 89 01             	mov    %rax,(%rcx)
  8004214293:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004214297:	eb 3c                	jmp    80042142d5 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004214299:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421429d:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  80042142a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042142a4:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  80042142a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142aa:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  80042142ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042142b2:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  80042142b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142b9:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  80042142bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042142c1:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  80042142c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142c9:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042142cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042142d1:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042142d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042142dc:	e9 fd 00 00 00       	jmpq   80042143de <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  80042142e1:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  80042142e5:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042142e8:	75 05                	jne    80042142ef <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  80042142ea:	e9 eb 00 00 00       	jmpq   80042143da <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  80042142ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142f3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142f7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042142fa:	48 63 d0             	movslq %eax,%rdx
  80042142fd:	48 89 d0             	mov    %rdx,%rax
  8004214300:	48 01 c0             	add    %rax,%rax
  8004214303:	48 01 d0             	add    %rdx,%rax
  8004214306:	48 c1 e0 03          	shl    $0x3,%rax
  800421430a:	48 01 c8             	add    %rcx,%rax
  800421430d:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  8004214310:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214314:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214317:	48 63 c9             	movslq %ecx,%rcx
  800421431a:	48 83 c1 01          	add    $0x1,%rcx
  800421431e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214322:	48 01 ca             	add    %rcx,%rdx
  8004214325:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004214327:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421432b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421432f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214332:	48 63 d0             	movslq %eax,%rdx
  8004214335:	48 89 d0             	mov    %rdx,%rax
  8004214338:	48 01 c0             	add    %rax,%rax
  800421433b:	48 01 d0             	add    %rdx,%rax
  800421433e:	48 c1 e0 03          	shl    $0x3,%rax
  8004214342:	48 01 c8             	add    %rcx,%rax
  8004214345:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004214349:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421434d:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214350:	48 63 c9             	movslq %ecx,%rcx
  8004214353:	48 83 c1 01          	add    $0x1,%rcx
  8004214357:	48 c1 e1 04          	shl    $0x4,%rcx
  800421435b:	48 01 ca             	add    %rcx,%rdx
  800421435e:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214361:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214365:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214369:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421436c:	48 63 d0             	movslq %eax,%rdx
  800421436f:	48 89 d0             	mov    %rdx,%rax
  8004214372:	48 01 c0             	add    %rax,%rax
  8004214375:	48 01 d0             	add    %rdx,%rax
  8004214378:	48 c1 e0 03          	shl    $0x3,%rax
  800421437c:	48 01 c8             	add    %rcx,%rax
  800421437f:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214383:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214387:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421438a:	48 63 c9             	movslq %ecx,%rcx
  800421438d:	48 83 c1 01          	add    $0x1,%rcx
  8004214391:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214395:	48 01 ca             	add    %rcx,%rdx
  8004214398:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  800421439c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143a0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042143a4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042143a7:	48 63 d0             	movslq %eax,%rdx
  80042143aa:	48 89 d0             	mov    %rdx,%rax
  80042143ad:	48 01 c0             	add    %rax,%rax
  80042143b0:	48 01 d0             	add    %rdx,%rax
  80042143b3:	48 c1 e0 03          	shl    $0x3,%rax
  80042143b7:	48 01 c8             	add    %rcx,%rax
  80042143ba:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  80042143be:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042143c2:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042143c5:	48 63 c9             	movslq %ecx,%rcx
  80042143c8:	48 83 c1 01          	add    $0x1,%rcx
  80042143cc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042143d0:	48 01 ca             	add    %rcx,%rdx
  80042143d3:	48 83 c2 08          	add    $0x8,%rdx
  80042143d7:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  80042143da:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042143de:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  80042143e2:	7f 14                	jg     80042143f8 <dwarf_get_fde_info_for_all_regs+0x30c>
  80042143e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042143e8:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  80042143ec:	0f b7 c0             	movzwl %ax,%eax
  80042143ef:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042143f2:	0f 8f e9 fe ff ff    	jg     80042142e1 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  80042143f8:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  80042143fd:	74 0b                	je     800421440a <dwarf_get_fde_info_for_all_regs+0x31e>
  80042143ff:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214403:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214407:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  800421440a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421440f:	c9                   	leaveq 
  8004214410:	c3                   	retq   

0000008004214411 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214411:	55                   	push   %rbp
  8004214412:	48 89 e5             	mov    %rsp,%rbp
  8004214415:	48 83 ec 40          	sub    $0x40,%rsp
  8004214419:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421441d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004214421:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004214425:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004214429:	44 89 c0             	mov    %r8d,%eax
  800421442c:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004214430:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004214433:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004214437:	75 0a                	jne    8004214443 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004214439:	b8 00 00 00 00       	mov    $0x0,%eax
  800421443e:	e9 e6 01 00 00       	jmpq   8004214629 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004214443:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214447:	83 e0 f0             	and    $0xfffffff0,%eax
  800421444a:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  800421444d:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004214451:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214455:	83 f8 0c             	cmp    $0xc,%eax
  8004214458:	0f 87 72 01 00 00    	ja     80042145d0 <_dwarf_frame_read_lsb_encoded+0x1bf>
  800421445e:	89 c0                	mov    %eax,%eax
  8004214460:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214467:	00 
  8004214468:	48 b8 00 f6 21 04 80 	movabs $0x800421f600,%rax
  800421446f:	00 00 00 
  8004214472:	48 01 d0             	add    %rdx,%rax
  8004214475:	48 8b 00             	mov    (%rax),%rax
  8004214478:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  800421447a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421447e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214482:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214486:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214489:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421448d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214491:	48 89 cf             	mov    %rcx,%rdi
  8004214494:	ff d0                	callq  *%rax
  8004214496:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421449a:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421449d:	e9 35 01 00 00       	jmpq   80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  80042144a2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042144a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042144aa:	48 89 d6             	mov    %rdx,%rsi
  80042144ad:	48 89 c7             	mov    %rax,%rdi
  80042144b0:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  80042144b7:	00 00 00 
  80042144ba:	ff d0                	callq  *%rax
  80042144bc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042144c0:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042144c3:	e9 0f 01 00 00       	jmpq   80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  80042144c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144cc:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042144d0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042144d4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042144d8:	ba 02 00 00 00       	mov    $0x2,%edx
  80042144dd:	48 89 cf             	mov    %rcx,%rdi
  80042144e0:	ff d0                	callq  *%rax
  80042144e2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042144e6:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042144e9:	e9 e9 00 00 00       	jmpq   80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  80042144ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144f2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042144f6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042144fa:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042144fe:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214503:	48 89 cf             	mov    %rcx,%rdi
  8004214506:	ff d0                	callq  *%rax
  8004214508:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421450c:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421450f:	e9 c3 00 00 00       	jmpq   80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004214514:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214518:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421451c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214520:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214524:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214529:	48 89 cf             	mov    %rcx,%rdi
  800421452c:	ff d0                	callq  *%rax
  800421452e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214532:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214535:	e9 9d 00 00 00       	jmpq   80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  800421453a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421453e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214542:	48 89 d6             	mov    %rdx,%rsi
  8004214545:	48 89 c7             	mov    %rax,%rdi
  8004214548:	48 b8 01 14 21 04 80 	movabs $0x8004211401,%rax
  800421454f:	00 00 00 
  8004214552:	ff d0                	callq  *%rax
  8004214554:	48 89 c2             	mov    %rax,%rdx
  8004214557:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421455b:	48 89 10             	mov    %rdx,(%rax)
		break;
  800421455e:	eb 77                	jmp    80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214560:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214564:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214568:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421456c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214570:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214575:	48 89 cf             	mov    %rcx,%rdi
  8004214578:	ff d0                	callq  *%rax
  800421457a:	48 0f bf d0          	movswq %ax,%rdx
  800421457e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214582:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214585:	eb 50                	jmp    80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004214587:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421458b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421458f:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214593:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214597:	ba 04 00 00 00       	mov    $0x4,%edx
  800421459c:	48 89 cf             	mov    %rcx,%rdi
  800421459f:	ff d0                	callq  *%rax
  80042145a1:	48 63 d0             	movslq %eax,%rdx
  80042145a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042145a8:	48 89 10             	mov    %rdx,(%rax)
		break;
  80042145ab:	eb 2a                	jmp    80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  80042145ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145b1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042145b5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042145b9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042145bd:	ba 08 00 00 00       	mov    $0x8,%edx
  80042145c2:	48 89 cf             	mov    %rcx,%rdi
  80042145c5:	ff d0                	callq  *%rax
  80042145c7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042145cb:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042145ce:	eb 07                	jmp    80042145d7 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  80042145d0:	b8 14 00 00 00       	mov    $0x14,%eax
  80042145d5:	eb 52                	jmp    8004214629 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  80042145d7:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  80042145db:	75 47                	jne    8004214624 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  80042145dd:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042145e1:	83 f8 01             	cmp    $0x1,%eax
  80042145e4:	7c 3d                	jl     8004214623 <_dwarf_frame_read_lsb_encoded+0x212>
  80042145e6:	83 f8 04             	cmp    $0x4,%eax
  80042145e9:	7e 0a                	jle    80042145f5 <_dwarf_frame_read_lsb_encoded+0x1e4>
  80042145eb:	83 e8 09             	sub    $0x9,%eax
  80042145ee:	83 f8 03             	cmp    $0x3,%eax
  80042145f1:	77 30                	ja     8004214623 <_dwarf_frame_read_lsb_encoded+0x212>
  80042145f3:	eb 17                	jmp    800421460c <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  80042145f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042145f9:	48 8b 10             	mov    (%rax),%rdx
  80042145fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214600:	48 01 c2             	add    %rax,%rdx
  8004214603:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214607:	48 89 10             	mov    %rdx,(%rax)
			break;
  800421460a:	eb 18                	jmp    8004214624 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  800421460c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214610:	48 8b 10             	mov    (%rax),%rdx
  8004214613:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214617:	48 01 c2             	add    %rax,%rdx
  800421461a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421461e:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214621:	eb 01                	jmp    8004214624 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004214623:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004214624:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214629:	c9                   	leaveq 
  800421462a:	c3                   	retq   

000000800421462b <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  800421462b:	55                   	push   %rbp
  800421462c:	48 89 e5             	mov    %rsp,%rbp
  800421462f:	48 83 ec 50          	sub    $0x50,%rsp
  8004214633:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214637:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421463b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  800421463f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214643:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214647:	48 85 c0             	test   %rax,%rax
  800421464a:	74 0f                	je     800421465b <_dwarf_frame_parse_lsb_cie_augment+0x30>
  800421464c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214650:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214654:	0f b6 00             	movzbl (%rax),%eax
  8004214657:	3c 7a                	cmp    $0x7a,%al
  8004214659:	74 35                	je     8004214690 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  800421465b:	48 b9 68 f6 21 04 80 	movabs $0x800421f668,%rcx
  8004214662:	00 00 00 
  8004214665:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  800421466c:	00 00 00 
  800421466f:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214674:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  800421467b:	00 00 00 
  800421467e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214683:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421468a:	00 00 00 
  800421468d:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214690:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214694:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214698:	48 83 c0 01          	add    $0x1,%rax
  800421469c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  80042146a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042146a4:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042146a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  80042146ac:	e9 af 00 00 00       	jmpq   8004214760 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  80042146b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042146b5:	0f b6 00             	movzbl (%rax),%eax
  80042146b8:	0f b6 c0             	movzbl %al,%eax
  80042146bb:	83 f8 50             	cmp    $0x50,%eax
  80042146be:	74 18                	je     80042146d8 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  80042146c0:	83 f8 52             	cmp    $0x52,%eax
  80042146c3:	74 77                	je     800421473c <_dwarf_frame_parse_lsb_cie_augment+0x111>
  80042146c5:	83 f8 4c             	cmp    $0x4c,%eax
  80042146c8:	0f 85 86 00 00 00    	jne    8004214754 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  80042146ce:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  80042146d3:	e9 83 00 00 00       	jmpq   800421475b <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  80042146d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042146dc:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042146e0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  80042146e4:	0f b6 00             	movzbl (%rax),%eax
  80042146e7:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  80042146ea:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042146f1:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042146f2:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  80042146f7:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  80042146fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042146ff:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004214703:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214707:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421470b:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421470f:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214715:	48 89 c7             	mov    %rax,%rdi
  8004214718:	48 b8 11 44 21 04 80 	movabs $0x8004214411,%rax
  800421471f:	00 00 00 
  8004214722:	ff d0                	callq  *%rax
  8004214724:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004214727:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800421472b:	74 05                	je     8004214732 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  800421472d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214730:	eb 42                	jmp    8004214774 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004214732:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214736:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  800421473a:	eb 1f                	jmp    800421475b <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  800421473c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214740:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214744:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214748:	0f b6 10             	movzbl (%rax),%edx
  800421474b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421474f:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004214752:	eb 07                	jmp    800421475b <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214754:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214759:	eb 19                	jmp    8004214774 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  800421475b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214760:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214764:	0f b6 00             	movzbl (%rax),%eax
  8004214767:	84 c0                	test   %al,%al
  8004214769:	0f 85 42 ff ff ff    	jne    80042146b1 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  800421476f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214774:	c9                   	leaveq 
  8004214775:	c3                   	retq   

0000008004214776 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214776:	55                   	push   %rbp
  8004214777:	48 89 e5             	mov    %rsp,%rbp
  800421477a:	48 83 ec 60          	sub    $0x60,%rsp
  800421477e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214782:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214786:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421478a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421478e:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004214792:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214797:	75 35                	jne    80042147ce <_dwarf_frame_set_cie+0x58>
  8004214799:	48 b9 9d f6 21 04 80 	movabs $0x800421f69d,%rcx
  80042147a0:	00 00 00 
  80042147a3:	48 ba e7 f4 21 04 80 	movabs $0x800421f4e7,%rdx
  80042147aa:	00 00 00 
  80042147ad:	be 7b 02 00 00       	mov    $0x27b,%esi
  80042147b2:	48 bf fc f4 21 04 80 	movabs $0x800421f4fc,%rdi
  80042147b9:	00 00 00 
  80042147bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042147c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042147c8:	00 00 00 
  80042147cb:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  80042147ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042147d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  80042147d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147da:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042147de:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  80042147e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042147e5:	48 8b 10             	mov    (%rax),%rdx
  80042147e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147ec:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042147f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042147f8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042147fc:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214800:	48 89 d1             	mov    %rdx,%rcx
  8004214803:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214807:	ba 04 00 00 00       	mov    $0x4,%edx
  800421480c:	48 89 cf             	mov    %rcx,%rdi
  800421480f:	ff d0                	callq  *%rax
  8004214811:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214815:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421481a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421481e:	75 2e                	jne    800421484e <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004214820:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214827:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421482b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421482f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214833:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214837:	48 89 d1             	mov    %rdx,%rcx
  800421483a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421483e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214843:	48 89 cf             	mov    %rcx,%rdi
  8004214846:	ff d0                	callq  *%rax
  8004214848:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421484c:	eb 07                	jmp    8004214855 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  800421484e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214855:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214859:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421485d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214861:	48 8b 00             	mov    (%rax),%rax
  8004214864:	48 29 c2             	sub    %rax,%rdx
  8004214867:	48 89 d0             	mov    %rdx,%rax
  800421486a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421486e:	73 0a                	jae    800421487a <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214870:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214875:	e9 5d 03 00 00       	jmpq   8004214bd7 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  800421487a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421487e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214882:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214886:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421488a:	48 89 d1             	mov    %rdx,%rcx
  800421488d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214890:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214894:	48 89 cf             	mov    %rcx,%rdi
  8004214897:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214899:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421489d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042148a1:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  80042148a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042148ad:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042148b1:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042148b5:	48 89 d1             	mov    %rdx,%rcx
  80042148b8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042148bc:	ba 01 00 00 00       	mov    $0x1,%edx
  80042148c1:	48 89 cf             	mov    %rcx,%rdi
  80042148c4:	ff d0                	callq  *%rax
  80042148c6:	89 c2                	mov    %eax,%edx
  80042148c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148cc:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  80042148d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148d4:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042148d8:	66 83 f8 01          	cmp    $0x1,%ax
  80042148dc:	74 26                	je     8004214904 <_dwarf_frame_set_cie+0x18e>
  80042148de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148e2:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042148e6:	66 83 f8 03          	cmp    $0x3,%ax
  80042148ea:	74 18                	je     8004214904 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  80042148ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148f0:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  80042148f4:	66 83 f8 04          	cmp    $0x4,%ax
  80042148f8:	74 0a                	je     8004214904 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  80042148fa:	b8 16 00 00 00       	mov    $0x16,%eax
  80042148ff:	e9 d3 02 00 00       	jmpq   8004214bd7 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214904:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214908:	48 8b 10             	mov    (%rax),%rdx
  800421490b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421490f:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214913:	48 01 d0             	add    %rdx,%rax
  8004214916:	48 89 c2             	mov    %rax,%rdx
  8004214919:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421491d:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214921:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214925:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214929:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  800421492d:	90                   	nop
  800421492e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214932:	48 8b 00             	mov    (%rax),%rax
  8004214935:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004214939:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421493d:	48 89 0a             	mov    %rcx,(%rdx)
  8004214940:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214944:	48 01 d0             	add    %rdx,%rax
  8004214947:	0f b6 00             	movzbl (%rax),%eax
  800421494a:	84 c0                	test   %al,%al
  800421494c:	75 e0                	jne    800421492e <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  800421494e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214952:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214956:	0f b6 00             	movzbl (%rax),%eax
  8004214959:	84 c0                	test   %al,%al
  800421495b:	74 48                	je     80042149a5 <_dwarf_frame_set_cie+0x22f>
  800421495d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214961:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214965:	0f b6 00             	movzbl (%rax),%eax
  8004214968:	3c 7a                	cmp    $0x7a,%al
  800421496a:	74 39                	je     80042149a5 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  800421496c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214970:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214974:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214978:	75 07                	jne    8004214981 <_dwarf_frame_set_cie+0x20b>
  800421497a:	b8 04 00 00 00       	mov    $0x4,%eax
  800421497f:	eb 05                	jmp    8004214986 <_dwarf_frame_set_cie+0x210>
  8004214981:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214986:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214989:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421498d:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214991:	48 01 c2             	add    %rax,%rdx
  8004214994:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214998:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  800421499b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042149a0:	e9 32 02 00 00       	jmpq   8004214bd7 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  80042149a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149a9:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042149ad:	48 be a5 f6 21 04 80 	movabs $0x800421f6a5,%rsi
  80042149b4:	00 00 00 
  80042149b7:	48 89 c7             	mov    %rax,%rdi
  80042149ba:	48 b8 b8 0d 21 04 80 	movabs $0x8004210db8,%rax
  80042149c1:	00 00 00 
  80042149c4:	ff d0                	callq  *%rax
  80042149c6:	48 85 c0             	test   %rax,%rax
  80042149c9:	74 28                	je     80042149f3 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042149cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042149cf:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042149d3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042149d7:	8b 52 28             	mov    0x28(%rdx),%edx
  80042149da:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042149de:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042149e2:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042149e6:	48 89 cf             	mov    %rcx,%rdi
  80042149e9:	ff d0                	callq  *%rax
  80042149eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042149ef:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042149f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042149f7:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042149fb:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042149ff:	48 89 d6             	mov    %rdx,%rsi
  8004214a02:	48 89 c7             	mov    %rax,%rdi
  8004214a05:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004214a0c:	00 00 00 
  8004214a0f:	ff d0                	callq  *%rax
  8004214a11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a15:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214a19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a1d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214a21:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214a25:	48 89 d6             	mov    %rdx,%rsi
  8004214a28:	48 89 c7             	mov    %rax,%rdi
  8004214a2b:	48 b8 01 14 21 04 80 	movabs $0x8004211401,%rax
  8004214a32:	00 00 00 
  8004214a35:	ff d0                	callq  *%rax
  8004214a37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a3b:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214a3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a43:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214a47:	66 83 f8 01          	cmp    $0x1,%ax
  8004214a4b:	75 2b                	jne    8004214a78 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214a4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a51:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a55:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a59:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a5d:	48 89 d1             	mov    %rdx,%rcx
  8004214a60:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a64:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214a69:	48 89 cf             	mov    %rcx,%rdi
  8004214a6c:	ff d0                	callq  *%rax
  8004214a6e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a72:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214a76:	eb 26                	jmp    8004214a9e <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214a78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a7c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214a80:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214a84:	48 89 d6             	mov    %rdx,%rsi
  8004214a87:	48 89 c7             	mov    %rax,%rdi
  8004214a8a:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004214a91:	00 00 00 
  8004214a94:	ff d0                	callq  *%rax
  8004214a96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a9a:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004214a9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aa2:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214aa6:	0f b6 00             	movzbl (%rax),%eax
  8004214aa9:	3c 7a                	cmp    $0x7a,%al
  8004214aab:	0f 85 93 00 00 00    	jne    8004214b44 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214ab1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ab5:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ab9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214abd:	48 89 d6             	mov    %rdx,%rsi
  8004214ac0:	48 89 c7             	mov    %rax,%rdi
  8004214ac3:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004214aca:	00 00 00 
  8004214acd:	ff d0                	callq  *%rax
  8004214acf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214ad3:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214ad7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214adb:	48 8b 10             	mov    (%rax),%rdx
  8004214ade:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ae2:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ae6:	48 01 d0             	add    %rdx,%rax
  8004214ae9:	48 89 c2             	mov    %rax,%rdx
  8004214aec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214af0:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214af4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214af8:	48 8b 10             	mov    (%rax),%rdx
  8004214afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aff:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214b03:	48 01 c2             	add    %rax,%rdx
  8004214b06:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b0a:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214b0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b11:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214b15:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214b19:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214b1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b21:	48 89 ce             	mov    %rcx,%rsi
  8004214b24:	48 89 c7             	mov    %rax,%rdi
  8004214b27:	48 b8 2b 46 21 04 80 	movabs $0x800421462b,%rax
  8004214b2e:	00 00 00 
  8004214b31:	ff d0                	callq  *%rax
  8004214b33:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214b36:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214b3a:	74 08                	je     8004214b44 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214b3c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214b3f:	e9 93 00 00 00       	jmpq   8004214bd7 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214b44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b48:	48 8b 10             	mov    (%rax),%rdx
  8004214b4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b4f:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214b53:	48 01 d0             	add    %rdx,%rax
  8004214b56:	48 89 c2             	mov    %rax,%rdx
  8004214b59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b5d:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214b61:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214b65:	75 2a                	jne    8004214b91 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214b67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b6b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214b73:	48 01 c2             	add    %rax,%rdx
  8004214b76:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b7a:	48 8b 00             	mov    (%rax),%rax
  8004214b7d:	48 29 c2             	sub    %rax,%rdx
  8004214b80:	48 89 d0             	mov    %rdx,%rax
  8004214b83:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b8b:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004214b8f:	eb 28                	jmp    8004214bb9 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004214b91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b95:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214b9d:	48 01 c2             	add    %rax,%rdx
  8004214ba0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ba4:	48 8b 00             	mov    (%rax),%rax
  8004214ba7:	48 29 c2             	sub    %rax,%rdx
  8004214baa:	48 89 d0             	mov    %rdx,%rax
  8004214bad:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214bb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bb5:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214bb9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bbd:	48 8b 10             	mov    (%rax),%rdx
  8004214bc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bc4:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214bc8:	48 01 c2             	add    %rax,%rdx
  8004214bcb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bcf:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214bd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214bd7:	c9                   	leaveq 
  8004214bd8:	c3                   	retq   

0000008004214bd9 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  8004214bd9:	55                   	push   %rbp
  8004214bda:	48 89 e5             	mov    %rsp,%rbp
  8004214bdd:	48 83 ec 70          	sub    $0x70,%rsp
  8004214be1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214be5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214be9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214bed:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214bf1:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004214bf5:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  8004214bf9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214bfd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004214c01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c05:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c09:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214c0c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214c10:	48 8b 10             	mov    (%rax),%rdx
  8004214c13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c17:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214c1b:	48 01 d0             	add    %rdx,%rax
  8004214c1e:	48 89 c2             	mov    %rax,%rdx
  8004214c21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c25:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004214c29:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214c2d:	48 8b 10             	mov    (%rax),%rdx
  8004214c30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c34:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214c38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c3c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c40:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c44:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c48:	48 89 d1             	mov    %rdx,%rcx
  8004214c4b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214c4f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214c54:	48 89 cf             	mov    %rcx,%rdi
  8004214c57:	ff d0                	callq  *%rax
  8004214c59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214c5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214c62:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214c66:	75 2e                	jne    8004214c96 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004214c68:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214c6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c73:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c77:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c7b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c7f:	48 89 d1             	mov    %rdx,%rcx
  8004214c82:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214c86:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214c8b:	48 89 cf             	mov    %rcx,%rdi
  8004214c8e:	ff d0                	callq  *%rax
  8004214c90:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214c94:	eb 07                	jmp    8004214c9d <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214c96:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214c9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ca1:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214ca5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ca9:	48 8b 00             	mov    (%rax),%rax
  8004214cac:	48 29 c2             	sub    %rax,%rdx
  8004214caf:	48 89 d0             	mov    %rdx,%rax
  8004214cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214cb6:	73 0a                	jae    8004214cc2 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214cb8:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214cbd:	e9 ca 02 00 00       	jmpq   8004214f8c <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  8004214cc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cc6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214cca:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004214cce:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214cd2:	74 5e                	je     8004214d32 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214cd4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cd8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214cdc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ce0:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214ce4:	48 89 d1             	mov    %rdx,%rcx
  8004214ce7:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214ceb:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214cf0:	48 89 cf             	mov    %rcx,%rdi
  8004214cf3:	ff d0                	callq  *%rax
  8004214cf5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214cf9:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004214cfd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214d01:	48 8b 10             	mov    (%rax),%rdx
  8004214d04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d08:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214d0c:	48 29 c2             	sub    %rax,%rdx
  8004214d0f:	48 89 d0             	mov    %rdx,%rax
  8004214d12:	48 83 e8 04          	sub    $0x4,%rax
  8004214d16:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004214d1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d1e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d22:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214d26:	75 3d                	jne    8004214d65 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214d28:	b8 13 00 00 00       	mov    $0x13,%eax
  8004214d2d:	e9 5a 02 00 00       	jmpq   8004214f8c <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004214d32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d36:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214d3a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214d3e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214d42:	48 89 d1             	mov    %rdx,%rcx
  8004214d45:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214d48:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214d4c:	48 89 cf             	mov    %rcx,%rdi
  8004214d4f:	ff d0                	callq  *%rax
  8004214d51:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214d55:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004214d59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d5d:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214d61:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004214d65:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214d69:	0f 84 c9 00 00 00    	je     8004214e38 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214d6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d73:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214d77:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214d7b:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d7e:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214d82:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214d86:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d8a:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214d8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d92:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d96:	48 89 c2             	mov    %rax,%rdx
  8004214d99:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214d9d:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214da1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214da5:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214da9:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214dad:	48 89 c7             	mov    %rax,%rdi
  8004214db0:	48 b8 11 44 21 04 80 	movabs $0x8004214411,%rax
  8004214db7:	00 00 00 
  8004214dba:	ff d0                	callq  *%rax
  8004214dbc:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  8004214dbf:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214dc3:	74 08                	je     8004214dcd <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004214dc5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214dc8:	e9 bf 01 00 00       	jmpq   8004214f8c <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004214dcd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214dd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dd5:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214dd9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214ddd:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214de1:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214de5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214de9:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214ded:	48 89 c2             	mov    %rax,%rdx
  8004214df0:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214df4:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214df8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214dfc:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214e00:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214e04:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214e0a:	48 89 c7             	mov    %rax,%rdi
  8004214e0d:	48 b8 11 44 21 04 80 	movabs $0x8004214411,%rax
  8004214e14:	00 00 00 
  8004214e17:	ff d0                	callq  *%rax
  8004214e19:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004214e1c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214e20:	74 08                	je     8004214e2a <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004214e22:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214e25:	e9 62 01 00 00       	jmpq   8004214f8c <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004214e2a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214e2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e32:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004214e36:	eb 50                	jmp    8004214e88 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214e38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e3c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e40:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e44:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214e47:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214e4b:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214e4f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e53:	48 89 cf             	mov    %rcx,%rdi
  8004214e56:	ff d0                	callq  *%rax
  8004214e58:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e5c:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214e60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e64:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e68:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e6c:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214e6f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214e73:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214e77:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e7b:	48 89 cf             	mov    %rcx,%rdi
  8004214e7e:	ff d0                	callq  *%rax
  8004214e80:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e84:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004214e88:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214e8c:	74 6b                	je     8004214ef9 <_dwarf_frame_set_fde+0x320>
  8004214e8e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214e92:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214e96:	0f b6 00             	movzbl (%rax),%eax
  8004214e99:	3c 7a                	cmp    $0x7a,%al
  8004214e9b:	75 5c                	jne    8004214ef9 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214e9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ea1:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ea5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004214ea9:	48 89 d6             	mov    %rdx,%rsi
  8004214eac:	48 89 c7             	mov    %rax,%rdi
  8004214eaf:	48 b8 a5 14 21 04 80 	movabs $0x80042114a5,%rax
  8004214eb6:	00 00 00 
  8004214eb9:	ff d0                	callq  *%rax
  8004214ebb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214ebf:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214ec3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ec7:	48 8b 10             	mov    (%rax),%rdx
  8004214eca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ece:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ed2:	48 01 d0             	add    %rdx,%rax
  8004214ed5:	48 89 c2             	mov    %rax,%rdx
  8004214ed8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214edc:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  8004214ee0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ee4:	48 8b 10             	mov    (%rax),%rdx
  8004214ee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214eeb:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004214eef:	48 01 c2             	add    %rax,%rdx
  8004214ef2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ef6:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214ef9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214efd:	48 8b 10             	mov    (%rax),%rdx
  8004214f00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f04:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f08:	48 01 d0             	add    %rdx,%rax
  8004214f0b:	48 89 c2             	mov    %rax,%rdx
  8004214f0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f12:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  8004214f16:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214f1a:	75 2a                	jne    8004214f46 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004214f1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f20:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214f24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214f28:	48 01 c2             	add    %rax,%rdx
  8004214f2b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f2f:	48 8b 00             	mov    (%rax),%rax
  8004214f32:	48 29 c2             	sub    %rax,%rdx
  8004214f35:	48 89 d0             	mov    %rdx,%rax
  8004214f38:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214f3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f40:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004214f44:	eb 28                	jmp    8004214f6e <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  8004214f46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f4a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214f4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214f52:	48 01 c2             	add    %rax,%rdx
  8004214f55:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f59:	48 8b 00             	mov    (%rax),%rax
  8004214f5c:	48 29 c2             	sub    %rax,%rdx
  8004214f5f:	48 89 d0             	mov    %rdx,%rax
  8004214f62:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214f66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f6a:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  8004214f6e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f72:	48 8b 10             	mov    (%rax),%rdx
  8004214f75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f79:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214f7d:	48 01 c2             	add    %rax,%rdx
  8004214f80:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f84:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214f87:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214f8c:	c9                   	leaveq 
  8004214f8d:	c3                   	retq   

0000008004214f8e <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004214f8e:	55                   	push   %rbp
  8004214f8f:	48 89 e5             	mov    %rsp,%rbp
  8004214f92:	48 83 ec 20          	sub    $0x20,%rsp
  8004214f96:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214f9a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  8004214f9e:	48 b8 a0 c6 4d 04 80 	movabs $0x80044dc6a0,%rax
  8004214fa5:	00 00 00 
  8004214fa8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004214fac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fb0:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214fb4:	48 85 c0             	test   %rax,%rax
  8004214fb7:	74 07                	je     8004214fc0 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  8004214fb9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214fbe:	eb 33                	jmp    8004214ff3 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  8004214fc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fc4:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  8004214fc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214fcc:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  8004214fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214fd4:	48 b9 40 ae 6d 04 80 	movabs $0x80046dae40,%rcx
  8004214fdb:	00 00 00 
  8004214fde:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  8004214fe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fe6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214fea:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004214fee:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214ff3:	c9                   	leaveq 
  8004214ff4:	c3                   	retq   

0000008004214ff5 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  8004214ff5:	55                   	push   %rbp
  8004214ff6:	48 89 e5             	mov    %rsp,%rbp
  8004214ff9:	48 83 ec 60          	sub    $0x60,%rsp
  8004214ffd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215001:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004215004:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215008:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  800421500c:	48 b8 a0 36 23 04 80 	movabs $0x80042336a0,%rax
  8004215013:	00 00 00 
  8004215016:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  800421501a:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004215021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215025:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004215029:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  800421502d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215031:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004215035:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215039:	48 39 c2             	cmp    %rax,%rdx
  800421503c:	0f 86 fe 01 00 00    	jbe    8004215240 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  8004215042:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215046:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  800421504a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421504e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215052:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215056:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421505a:	48 89 d1             	mov    %rdx,%rcx
  800421505d:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215061:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215066:	48 89 cf             	mov    %rcx,%rdi
  8004215069:	ff d0                	callq  *%rax
  800421506b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  800421506f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215074:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215078:	75 2e                	jne    80042150a8 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  800421507a:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004215081:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215085:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215089:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421508d:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215091:	48 89 d1             	mov    %rdx,%rcx
  8004215094:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215098:	ba 08 00 00 00       	mov    $0x8,%edx
  800421509d:	48 89 cf             	mov    %rcx,%rdi
  80042150a0:	ff d0                	callq  *%rax
  80042150a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042150a6:	eb 07                	jmp    80042150af <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  80042150a8:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  80042150af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150b3:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042150b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042150bb:	48 29 c2             	sub    %rax,%rdx
  80042150be:	48 89 d0             	mov    %rdx,%rax
  80042150c1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042150c5:	72 0d                	jb     80042150d4 <_dwarf_get_next_fde+0xdf>
  80042150c7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042150cc:	75 10                	jne    80042150de <_dwarf_get_next_fde+0xe9>
  80042150ce:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042150d2:	75 0a                	jne    80042150de <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042150d4:	b8 12 00 00 00       	mov    $0x12,%eax
  80042150d9:	e9 67 01 00 00       	jmpq   8004215245 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  80042150de:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042150e2:	74 11                	je     80042150f5 <_dwarf_get_next_fde+0x100>
  80042150e4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042150e9:	75 0a                	jne    80042150f5 <_dwarf_get_next_fde+0x100>
			return(-1);
  80042150eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042150f0:	e9 50 01 00 00       	jmpq   8004215245 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  80042150f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150f9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150fd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215101:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215105:	48 89 d1             	mov    %rdx,%rcx
  8004215108:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421510b:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800421510f:	48 89 cf             	mov    %rcx,%rdi
  8004215112:	ff d0                	callq  *%rax
  8004215114:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  8004215118:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421511c:	74 79                	je     8004215197 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  800421511e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004215123:	75 32                	jne    8004215157 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004215125:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215129:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421512d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215131:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004215135:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004215139:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421513d:	49 89 f8             	mov    %rdi,%r8
  8004215140:	48 89 c7             	mov    %rax,%rdi
  8004215143:	48 b8 76 47 21 04 80 	movabs $0x8004214776,%rax
  800421514a:	00 00 00 
  800421514d:	ff d0                	callq  *%rax
  800421514f:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215152:	e9 c8 00 00 00       	jmpq   800421521f <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  8004215157:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421515b:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421515f:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215163:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215167:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421516b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421516f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215173:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215177:	4d 89 c1             	mov    %r8,%r9
  800421517a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004215180:	48 89 c7             	mov    %rax,%rdi
  8004215183:	48 b8 d9 4b 21 04 80 	movabs $0x8004214bd9,%rax
  800421518a:	00 00 00 
  800421518d:	ff d0                	callq  *%rax
  800421518f:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215192:	e9 88 00 00 00       	jmpq   800421521f <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004215197:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421519b:	75 0b                	jne    80042151a8 <_dwarf_get_next_fde+0x1b3>
  800421519d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042151a2:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042151a6:	74 0d                	je     80042151b5 <_dwarf_get_next_fde+0x1c0>
  80042151a8:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042151ac:	75 36                	jne    80042151e4 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  80042151ae:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  80042151b3:	75 2f                	jne    80042151e4 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042151b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042151b9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042151bd:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042151c1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042151c5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042151c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151cd:	49 89 f8             	mov    %rdi,%r8
  80042151d0:	48 89 c7             	mov    %rax,%rdi
  80042151d3:	48 b8 76 47 21 04 80 	movabs $0x8004214776,%rax
  80042151da:	00 00 00 
  80042151dd:	ff d0                	callq  *%rax
  80042151df:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042151e2:	eb 3b                	jmp    800421521f <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  80042151e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042151e8:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042151ec:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042151f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042151f4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042151f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151fc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215200:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215204:	4d 89 c1             	mov    %r8,%r9
  8004215207:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421520d:	48 89 c7             	mov    %rax,%rdi
  8004215210:	48 b8 d9 4b 21 04 80 	movabs $0x8004214bd9,%rax
  8004215217:	00 00 00 
  800421521a:	ff d0                	callq  *%rax
  800421521c:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  800421521f:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004215223:	74 07                	je     800421522c <_dwarf_get_next_fde+0x237>
			return(-1);
  8004215225:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421522a:	eb 19                	jmp    8004215245 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  800421522c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215230:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004215234:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215238:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421523c:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  8004215240:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215245:	c9                   	leaveq 
  8004215246:	c3                   	retq   

0000008004215247 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  8004215247:	55                   	push   %rbp
  8004215248:	48 89 e5             	mov    %rsp,%rbp
  800421524b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421524f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215253:	89 f0                	mov    %esi,%eax
  8004215255:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004215259:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421525d:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215261:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004215265:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215269:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  800421526d:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215271:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004215275:	c9                   	leaveq 
  8004215276:	c3                   	retq   

0000008004215277 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215277:	55                   	push   %rbp
  8004215278:	48 89 e5             	mov    %rsp,%rbp
  800421527b:	48 83 ec 10          	sub    $0x10,%rsp
  800421527f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004215283:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004215287:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421528c:	75 0a                	jne    8004215298 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421528e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215293:	e9 85 00 00 00       	jmpq   800421531d <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004215298:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421529c:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042152a0:	48 85 c0             	test   %rax,%rax
  80042152a3:	75 25                	jne    80042152ca <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  80042152a5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042152a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042152ad:	48 89 d6             	mov    %rdx,%rsi
  80042152b0:	48 89 c7             	mov    %rax,%rdi
  80042152b3:	48 b8 8e 4f 21 04 80 	movabs $0x8004214f8e,%rax
  80042152ba:	00 00 00 
  80042152bd:	ff d0                	callq  *%rax
  80042152bf:	85 c0                	test   %eax,%eax
  80042152c1:	74 07                	je     80042152ca <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  80042152c3:	b8 01 00 00 00       	mov    $0x1,%eax
  80042152c8:	eb 53                	jmp    800421531d <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  80042152ca:	48 bf a0 36 23 04 80 	movabs $0x80042336a0,%rdi
  80042152d1:	00 00 00 
  80042152d4:	48 b8 43 2d 21 04 80 	movabs $0x8004212d43,%rax
  80042152db:	00 00 00 
  80042152de:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  80042152e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042152e4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  80042152eb:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  80042152ec:	48 b8 a0 36 23 04 80 	movabs $0x80042336a0,%rax
  80042152f3:	00 00 00 
  80042152f6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042152fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042152fe:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  8004215302:	48 b8 a0 36 23 04 80 	movabs $0x80042336a0,%rax
  8004215309:	00 00 00 
  800421530c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215314:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004215318:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421531d:	c9                   	leaveq 
  800421531e:	c3                   	retq   

000000800421531f <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  800421531f:	55                   	push   %rbp
  8004215320:	48 89 e5             	mov    %rsp,%rbp
  8004215323:	53                   	push   %rbx
  8004215324:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  800421532b:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  800421532f:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004215333:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  800421533a:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004215341:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004215348:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  800421534f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215353:	48 83 c0 48          	add    $0x48,%rax
  8004215357:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  800421535b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215362:	00 
  8004215363:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800421536a:	00 
  800421536b:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215372:	00 
  8004215373:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421537a:	00 
  800421537b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421537f:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215383:	0f b6 c0             	movzbl %al,%eax
  8004215386:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215389:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215390:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215397:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800421539e:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042153a5:	e9 0a 05 00 00       	jmpq   80042158b4 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  80042153aa:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042153b1:	0f b6 00             	movzbl (%rax),%eax
  80042153b4:	84 c0                	test   %al,%al
  80042153b6:	0f 85 78 01 00 00    	jne    8004215534 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  80042153bc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042153c3:	48 83 c0 01          	add    $0x1,%rax
  80042153c7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  80042153ce:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042153d5:	48 89 c7             	mov    %rax,%rdi
  80042153d8:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042153df:	00 00 00 
  80042153e2:	ff d0                	callq  *%rax
  80042153e4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  80042153e8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042153ef:	0f b6 00             	movzbl (%rax),%eax
  80042153f2:	0f b6 c0             	movzbl %al,%eax
  80042153f5:	83 f8 02             	cmp    $0x2,%eax
  80042153f8:	74 7a                	je     8004215474 <_dwarf_lineno_run_program+0x155>
  80042153fa:	83 f8 03             	cmp    $0x3,%eax
  80042153fd:	0f 84 b3 00 00 00    	je     80042154b6 <_dwarf_lineno_run_program+0x197>
  8004215403:	83 f8 01             	cmp    $0x1,%eax
  8004215406:	0f 85 09 01 00 00    	jne    8004215515 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  800421540c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215413:	48 83 c0 01          	add    $0x1,%rax
  8004215417:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  800421541e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  8004215425:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421542c:	00 
  800421542d:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215434:	00 
  8004215435:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  800421543c:	00 
  800421543d:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215444:	00 
  8004215445:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215449:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800421544d:	0f b6 c0             	movzbl %al,%eax
  8004215450:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215453:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  800421545a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215461:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215468:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  800421546f:	e9 bb 00 00 00       	jmpq   800421552f <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004215474:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421547b:	48 83 c0 01          	add    $0x1,%rax
  800421547f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004215486:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800421548d:	00 00 00 
  8004215490:	48 8b 00             	mov    (%rax),%rax
  8004215493:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215497:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421549b:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800421549f:	0f b6 ca             	movzbl %dl,%ecx
  80042154a2:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  80042154a9:	89 ce                	mov    %ecx,%esi
  80042154ab:	48 89 d7             	mov    %rdx,%rdi
  80042154ae:	ff d0                	callq  *%rax
  80042154b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  80042154b4:	eb 79                	jmp    800421552f <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  80042154b6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042154bd:	48 83 c0 01          	add    $0x1,%rax
  80042154c1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  80042154c8:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  80042154cf:	00 00 00 
  80042154d2:	48 8b 08             	mov    (%rax),%rcx
  80042154d5:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042154dc:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  80042154e3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042154e7:	49 89 c8             	mov    %rcx,%r8
  80042154ea:	48 89 d1             	mov    %rdx,%rcx
  80042154ed:	ba 00 00 00 00       	mov    $0x0,%edx
  80042154f2:	48 89 c7             	mov    %rax,%rdi
  80042154f5:	48 b8 d7 58 21 04 80 	movabs $0x80042158d7,%rax
  80042154fc:	00 00 00 
  80042154ff:	ff d0                	callq  *%rax
  8004215501:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004215504:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004215508:	74 09                	je     8004215513 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  800421550a:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  800421550b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421550e:	e9 ba 03 00 00       	jmpq   80042158cd <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004215513:	eb 1a                	jmp    800421552f <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004215515:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800421551c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215520:	48 01 d0             	add    %rdx,%rax
  8004215523:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421552a:	e9 85 03 00 00       	jmpq   80042158b4 <_dwarf_lineno_run_program+0x595>
  800421552f:	e9 80 03 00 00       	jmpq   80042158b4 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004215534:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421553b:	0f b6 00             	movzbl (%rax),%eax
  800421553e:	84 c0                	test   %al,%al
  8004215540:	0f 84 3c 02 00 00    	je     8004215782 <_dwarf_lineno_run_program+0x463>
  8004215546:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421554d:	0f b6 10             	movzbl (%rax),%edx
  8004215550:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215554:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215558:	38 c2                	cmp    %al,%dl
  800421555a:	0f 83 22 02 00 00    	jae    8004215782 <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215560:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215567:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421556b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215572:	0f b6 00             	movzbl (%rax),%eax
  8004215575:	0f b6 c0             	movzbl %al,%eax
  8004215578:	83 f8 0c             	cmp    $0xc,%eax
  800421557b:	0f 87 fb 01 00 00    	ja     800421577c <_dwarf_lineno_run_program+0x45d>
  8004215581:	89 c0                	mov    %eax,%eax
  8004215583:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421558a:	00 
  800421558b:	48 b8 a8 f6 21 04 80 	movabs $0x800421f6a8,%rax
  8004215592:	00 00 00 
  8004215595:	48 01 d0             	add    %rdx,%rax
  8004215598:	48 8b 00             	mov    (%rax),%rax
  800421559b:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  800421559d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042155a4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042155a8:	73 0a                	jae    80042155b4 <_dwarf_lineno_run_program+0x295>
  80042155aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042155af:	e9 19 03 00 00       	jmpq   80042158cd <_dwarf_lineno_run_program+0x5ae>
  80042155b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155b8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042155bc:	48 89 10             	mov    %rdx,(%rax)
  80042155bf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155c3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042155ca:	00 
  80042155cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155cf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042155d3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042155d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155db:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042155df:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042155e3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042155e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155eb:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042155ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155f3:	8b 55 c8             	mov    -0x38(%rbp),%edx
  80042155f6:	89 50 28             	mov    %edx,0x28(%rax)
  80042155f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155fd:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215600:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215603:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215607:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421560a:	89 50 30             	mov    %edx,0x30(%rax)
  800421560d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215611:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215618:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421561c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215620:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004215627:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  800421562e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004215635:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  800421563c:	e9 3c 01 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215641:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215648:	48 89 c7             	mov    %rax,%rdi
  800421564b:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004215652:	00 00 00 
  8004215655:	ff d0                	callq  *%rax
					li->li_minlen;
  8004215657:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421565b:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  800421565f:	0f b6 d2             	movzbl %dl,%edx
  8004215662:	48 0f af c2          	imul   %rdx,%rax
  8004215666:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  800421566a:	e9 0e 01 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  800421566f:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215676:	48 89 c7             	mov    %rax,%rdi
  8004215679:	48 b8 24 15 21 04 80 	movabs $0x8004211524,%rax
  8004215680:	00 00 00 
  8004215683:	ff d0                	callq  *%rax
  8004215685:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215689:	e9 ef 00 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  800421568e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215695:	48 89 c7             	mov    %rax,%rdi
  8004215698:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421569f:	00 00 00 
  80042156a2:	ff d0                	callq  *%rax
  80042156a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  80042156a8:	e9 d0 00 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  80042156ad:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042156b4:	48 89 c7             	mov    %rax,%rdi
  80042156b7:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  80042156be:	00 00 00 
  80042156c1:	ff d0                	callq  *%rax
  80042156c3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  80042156c7:	e9 b1 00 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  80042156cc:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042156d0:	0f 94 c0             	sete   %al
  80042156d3:	0f b6 c0             	movzbl %al,%eax
  80042156d6:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  80042156d9:	e9 9f 00 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  80042156de:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  80042156e5:	e9 93 00 00 00       	jmpq   800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  80042156ea:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042156ee:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042156f2:	0f b6 c0             	movzbl %al,%eax
  80042156f5:	ba ff 00 00 00       	mov    $0xff,%edx
  80042156fa:	89 d1                	mov    %edx,%ecx
  80042156fc:	29 c1                	sub    %eax,%ecx
  80042156fe:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215702:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215706:	0f b6 d8             	movzbl %al,%ebx
  8004215709:	89 c8                	mov    %ecx,%eax
  800421570b:	99                   	cltd   
  800421570c:	f7 fb                	idiv   %ebx
  800421570e:	89 c2                	mov    %eax,%edx
  8004215710:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215714:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215718:	0f b6 c0             	movzbl %al,%eax
  800421571b:	0f af c2             	imul   %edx,%eax
  800421571e:	48 98                	cltq   
  8004215720:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215724:	eb 57                	jmp    800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004215726:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800421572d:	00 00 00 
  8004215730:	48 8b 00             	mov    (%rax),%rax
  8004215733:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215737:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  800421573e:	be 02 00 00 00       	mov    $0x2,%esi
  8004215743:	48 89 d7             	mov    %rdx,%rdi
  8004215746:	ff d0                	callq  *%rax
  8004215748:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  800421574c:	eb 2f                	jmp    800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  800421574e:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004215755:	eb 26                	jmp    800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004215757:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  800421575e:	eb 1d                	jmp    800421577d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215760:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215767:	48 89 c7             	mov    %rax,%rdi
  800421576a:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004215771:	00 00 00 
  8004215774:	ff d0                	callq  *%rax
  8004215776:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  800421577a:	eb 01                	jmp    800421577d <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  800421577c:	90                   	nop
			}

		} else {
  800421577d:	e9 32 01 00 00       	jmpq   80042158b4 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004215782:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215786:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  800421578a:	0f be c8             	movsbl %al,%ecx
  800421578d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215794:	0f b6 00             	movzbl (%rax),%eax
  8004215797:	0f b6 d0             	movzbl %al,%edx
  800421579a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421579e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042157a2:	0f b6 c0             	movzbl %al,%eax
  80042157a5:	29 c2                	sub    %eax,%edx
  80042157a7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157ab:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042157af:	0f b6 f0             	movzbl %al,%esi
  80042157b2:	89 d0                	mov    %edx,%eax
  80042157b4:	99                   	cltd   
  80042157b5:	f7 fe                	idiv   %esi
  80042157b7:	89 d0                	mov    %edx,%eax
  80042157b9:	01 c8                	add    %ecx,%eax
  80042157bb:	48 98                	cltq   
  80042157bd:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  80042157c1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042157c8:	0f b6 00             	movzbl (%rax),%eax
  80042157cb:	0f b6 d0             	movzbl %al,%edx
  80042157ce:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157d2:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042157d6:	0f b6 c0             	movzbl %al,%eax
  80042157d9:	89 d1                	mov    %edx,%ecx
  80042157db:	29 c1                	sub    %eax,%ecx
  80042157dd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157e1:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042157e5:	0f b6 d8             	movzbl %al,%ebx
  80042157e8:	89 c8                	mov    %ecx,%eax
  80042157ea:	99                   	cltd   
  80042157eb:	f7 fb                	idiv   %ebx
  80042157ed:	89 c2                	mov    %eax,%edx
  80042157ef:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157f3:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  80042157f7:	0f b6 c0             	movzbl %al,%eax
  80042157fa:	0f af c2             	imul   %edx,%eax
  80042157fd:	48 98                	cltq   
  80042157ff:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004215803:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421580a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421580e:	73 0a                	jae    800421581a <_dwarf_lineno_run_program+0x4fb>
  8004215810:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215815:	e9 b3 00 00 00       	jmpq   80042158cd <_dwarf_lineno_run_program+0x5ae>
  800421581a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421581e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215822:	48 89 10             	mov    %rdx,(%rax)
  8004215825:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215829:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215830:	00 
  8004215831:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215835:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215839:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421583d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215841:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215845:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215849:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421584d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215851:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215855:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215859:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421585c:	89 50 28             	mov    %edx,0x28(%rax)
  800421585f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215863:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215866:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215869:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421586d:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215870:	89 50 30             	mov    %edx,0x30(%rax)
  8004215873:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215877:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  800421587e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215882:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215886:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  800421588d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215894:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  800421589b:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  80042158a2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042158a9:	48 83 c0 01          	add    $0x1,%rax
  80042158ad:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042158b4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042158bb:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  80042158c2:	0f 82 e2 fa ff ff    	jb     80042153aa <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  80042158c8:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  80042158cd:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  80042158d4:	5b                   	pop    %rbx
  80042158d5:	5d                   	pop    %rbp
  80042158d6:	c3                   	retq   

00000080042158d7 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  80042158d7:	55                   	push   %rbp
  80042158d8:	48 89 e5             	mov    %rsp,%rbp
  80042158db:	53                   	push   %rbx
  80042158dc:	48 83 ec 48          	sub    $0x48,%rsp
  80042158e0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042158e4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042158e8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042158ec:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042158f0:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  80042158f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042158f8:	48 8b 00             	mov    (%rax),%rax
  80042158fb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  80042158ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215903:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004215907:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800421590b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421590f:	48 89 c7             	mov    %rax,%rdi
  8004215912:	48 b8 8e 06 21 04 80 	movabs $0x800421068e,%rax
  8004215919:	00 00 00 
  800421591c:	ff d0                	callq  *%rax
  800421591e:	48 98                	cltq   
  8004215920:	48 83 c0 01          	add    $0x1,%rax
  8004215924:	48 01 d8             	add    %rbx,%rax
  8004215927:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  800421592b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421592f:	48 89 c7             	mov    %rax,%rdi
  8004215932:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  8004215939:	00 00 00 
  800421593c:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  800421593e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215942:	48 89 c7             	mov    %rax,%rdi
  8004215945:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421594c:	00 00 00 
  800421594f:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215951:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215955:	48 89 c7             	mov    %rax,%rdi
  8004215958:	48 b8 b6 15 21 04 80 	movabs $0x80042115b6,%rax
  800421595f:	00 00 00 
  8004215962:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215964:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215968:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421596c:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  800421596f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215974:	48 83 c4 48          	add    $0x48,%rsp
  8004215978:	5b                   	pop    %rbx
  8004215979:	5d                   	pop    %rbp
  800421597a:	c3                   	retq   

000000800421597b <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  800421597b:	55                   	push   %rbp
  800421597c:	48 89 e5             	mov    %rsp,%rbp
  800421597f:	53                   	push   %rbx
  8004215980:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215987:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  800421598e:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215995:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  800421599c:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  80042159a3:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  80042159aa:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  80042159b1:	00 
  80042159b2:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  80042159b9:	00 
  80042159ba:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  80042159c1:	00 
  80042159c2:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042159c9:	00 
  80042159ca:	48 b8 10 f7 21 04 80 	movabs $0x800421f710,%rax
  80042159d1:	00 00 00 
  80042159d4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  80042159d8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  80042159dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  80042159e0:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042159e7:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  80042159ee:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  80042159f2:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042159f7:	75 35                	jne    8004215a2e <_dwarf_lineno_init+0xb3>
  80042159f9:	48 b9 1c f7 21 04 80 	movabs $0x800421f71c,%rcx
  8004215a00:	00 00 00 
  8004215a03:	48 ba 27 f7 21 04 80 	movabs $0x800421f727,%rdx
  8004215a0a:	00 00 00 
  8004215a0d:	be 13 01 00 00       	mov    $0x113,%esi
  8004215a12:	48 bf 3c f7 21 04 80 	movabs $0x800421f73c,%rdi
  8004215a19:	00 00 00 
  8004215a1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215a28:	00 00 00 
  8004215a2b:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  8004215a2e:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215a35:	00 00 00 
  8004215a38:	48 8b 00             	mov    (%rax),%rax
  8004215a3b:	48 85 c0             	test   %rax,%rax
  8004215a3e:	75 35                	jne    8004215a75 <_dwarf_lineno_init+0xfa>
  8004215a40:	48 b9 53 f7 21 04 80 	movabs $0x800421f753,%rcx
  8004215a47:	00 00 00 
  8004215a4a:	48 ba 27 f7 21 04 80 	movabs $0x800421f727,%rdx
  8004215a51:	00 00 00 
  8004215a54:	be 14 01 00 00       	mov    $0x114,%esi
  8004215a59:	48 bf 3c f7 21 04 80 	movabs $0x800421f73c,%rdi
  8004215a60:	00 00 00 
  8004215a63:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a68:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215a6f:	00 00 00 
  8004215a72:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215a75:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215a79:	48 89 c7             	mov    %rax,%rdi
  8004215a7c:	48 b8 43 2d 21 04 80 	movabs $0x8004212d43,%rax
  8004215a83:	00 00 00 
  8004215a86:	ff d0                	callq  *%rax
  8004215a88:	85 c0                	test   %eax,%eax
  8004215a8a:	74 0a                	je     8004215a96 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215a8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a91:	e9 4f 04 00 00       	jmpq   8004215ee5 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215a96:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004215a9d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215aa1:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215aa8:	00 00 00 
  8004215aab:	48 8b 00             	mov    (%rax),%rax
  8004215aae:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ab2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215ab6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215aba:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215ac1:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215ac6:	48 89 cf             	mov    %rcx,%rdi
  8004215ac9:	ff d0                	callq  *%rax
  8004215acb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004215acf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215ad4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215ad8:	75 37                	jne    8004215b11 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215ada:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004215ae1:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215ae8:	00 00 00 
  8004215aeb:	48 8b 00             	mov    (%rax),%rax
  8004215aee:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215af2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215af6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215afa:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215b01:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215b06:	48 89 cf             	mov    %rcx,%rdi
  8004215b09:	ff d0                	callq  *%rax
  8004215b0b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215b0f:	eb 07                	jmp    8004215b18 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215b11:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215b18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b1c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215b20:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215b27:	48 29 c2             	sub    %rax,%rdx
  8004215b2a:	48 89 d0             	mov    %rdx,%rax
  8004215b2d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215b31:	73 0a                	jae    8004215b3d <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215b33:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215b38:	e9 a8 03 00 00       	jmpq   8004215ee5 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  8004215b3d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215b41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215b45:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215b48:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215b4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215b53:	48 01 d0             	add    %rdx,%rax
  8004215b56:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215b5a:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215b61:	00 00 00 
  8004215b64:	48 8b 00             	mov    (%rax),%rax
  8004215b67:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215b6b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215b6f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215b73:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215b7a:	ba 02 00 00 00       	mov    $0x2,%edx
  8004215b7f:	48 89 cf             	mov    %rcx,%rdi
  8004215b82:	ff d0                	callq  *%rax
  8004215b84:	89 c2                	mov    %eax,%edx
  8004215b86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215b8a:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004215b8e:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215b95:	00 00 00 
  8004215b98:	48 8b 00             	mov    (%rax),%rax
  8004215b9b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215b9f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215ba3:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215ba7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215baa:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215bb1:	48 89 cf             	mov    %rcx,%rdi
  8004215bb4:	ff d0                	callq  *%rax
  8004215bb6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215bba:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004215bbe:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215bc5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215bc9:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215bd0:	00 00 00 
  8004215bd3:	48 8b 00             	mov    (%rax),%rax
  8004215bd6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215bda:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215bde:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215be2:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215be9:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215bee:	48 89 cf             	mov    %rcx,%rdi
  8004215bf1:	ff d0                	callq  *%rax
  8004215bf3:	89 c2                	mov    %eax,%edx
  8004215bf5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215bf9:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004215bfc:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215c03:	00 00 00 
  8004215c06:	48 8b 00             	mov    (%rax),%rax
  8004215c09:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c0d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c11:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215c15:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215c1c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215c21:	48 89 cf             	mov    %rcx,%rdi
  8004215c24:	ff d0                	callq  *%rax
  8004215c26:	89 c2                	mov    %eax,%edx
  8004215c28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c2c:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004215c2f:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215c36:	00 00 00 
  8004215c39:	48 8b 00             	mov    (%rax),%rax
  8004215c3c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c40:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c44:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215c48:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215c4f:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215c54:	48 89 cf             	mov    %rcx,%rdi
  8004215c57:	ff d0                	callq  *%rax
  8004215c59:	89 c2                	mov    %eax,%edx
  8004215c5b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c5f:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004215c62:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215c69:	00 00 00 
  8004215c6c:	48 8b 00             	mov    (%rax),%rax
  8004215c6f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c73:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c77:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215c7b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215c82:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215c87:	48 89 cf             	mov    %rcx,%rdi
  8004215c8a:	ff d0                	callq  *%rax
  8004215c8c:	89 c2                	mov    %eax,%edx
  8004215c8e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c92:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215c95:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215c9c:	00 00 00 
  8004215c9f:	48 8b 00             	mov    (%rax),%rax
  8004215ca2:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ca6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215caa:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215cae:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215cb5:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215cba:	48 89 cf             	mov    %rcx,%rdi
  8004215cbd:	ff d0                	callq  *%rax
  8004215cbf:	89 c2                	mov    %eax,%edx
  8004215cc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215cc5:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  8004215cc8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ccc:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215cd0:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004215cd3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215cd7:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215cdb:	0f b6 c0             	movzbl %al,%eax
  8004215cde:	83 e8 01             	sub    $0x1,%eax
  8004215ce1:	39 c2                	cmp    %eax,%edx
  8004215ce3:	7d 0c                	jge    8004215cf1 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215ce5:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215cec:	e9 f1 01 00 00       	jmpq   8004215ee2 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004215cf1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215cf5:	48 bb 80 b4 6d 04 80 	movabs $0x80046db480,%rbx
  8004215cfc:	00 00 00 
  8004215cff:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215d03:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004215d0a:	eb 41                	jmp    8004215d4d <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004215d0c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215d10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215d14:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004215d17:	48 98                	cltq   
  8004215d19:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004215d1d:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215d24:	00 00 00 
  8004215d27:	48 8b 00             	mov    (%rax),%rax
  8004215d2a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d2e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215d32:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215d36:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215d3d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215d42:	48 89 cf             	mov    %rcx,%rdi
  8004215d45:	ff d0                	callq  *%rax
  8004215d47:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215d49:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004215d4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215d51:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215d55:	0f b6 c0             	movzbl %al,%eax
  8004215d58:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004215d5b:	7f af                	jg     8004215d0c <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004215d5d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215d64:	00 
	p = ds->ds_data + offset;
  8004215d65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d69:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215d6d:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215d74:	48 01 d0             	add    %rdx,%rax
  8004215d77:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  8004215d7e:	eb 1f                	jmp    8004215d9f <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  8004215d80:	90                   	nop
  8004215d81:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215d88:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215d8c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215d93:	0f b6 00             	movzbl (%rax),%eax
  8004215d96:	84 c0                	test   %al,%al
  8004215d98:	75 e7                	jne    8004215d81 <_dwarf_lineno_init+0x406>
			;
		length++;
  8004215d9a:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  8004215d9f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215da6:	0f b6 00             	movzbl (%rax),%eax
  8004215da9:	84 c0                	test   %al,%al
  8004215dab:	75 d3                	jne    8004215d80 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  8004215dad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215db1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215db5:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  8004215db9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215dc0:	48 89 c2             	mov    %rax,%rdx
  8004215dc3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215dc7:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215dcb:	48 29 c2             	sub    %rax,%rdx
  8004215dce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215dd2:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215dd6:	48 98                	cltq   
  8004215dd8:	48 39 c2             	cmp    %rax,%rdx
  8004215ddb:	7e 0c                	jle    8004215de9 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215ddd:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215de4:	e9 f9 00 00 00       	jmpq   8004215ee2 <_dwarf_lineno_init+0x567>
	}
	p++;
  8004215de9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215df0:	48 83 c0 01          	add    $0x1,%rax
  8004215df4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215dfb:	eb 3c                	jmp    8004215e39 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004215dfd:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215e04:	00 00 00 
  8004215e07:	48 8b 08             	mov    (%rax),%rcx
  8004215e0a:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004215e11:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004215e18:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e1c:	49 89 c8             	mov    %rcx,%r8
  8004215e1f:	48 89 d1             	mov    %rdx,%rcx
  8004215e22:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215e27:	48 89 c7             	mov    %rax,%rdi
  8004215e2a:	48 b8 d7 58 21 04 80 	movabs $0x80042158d7,%rax
  8004215e31:	00 00 00 
  8004215e34:	ff d0                	callq  *%rax
  8004215e36:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215e39:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215e40:	0f b6 00             	movzbl (%rax),%eax
  8004215e43:	84 c0                	test   %al,%al
  8004215e45:	75 b6                	jne    8004215dfd <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  8004215e47:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215e4e:	48 83 c0 01          	add    $0x1,%rax
  8004215e52:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004215e59:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215e60:	48 89 c2             	mov    %rax,%rdx
  8004215e63:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215e67:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215e6b:	48 29 c2             	sub    %rax,%rdx
  8004215e6e:	48 89 d0             	mov    %rdx,%rax
  8004215e71:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004215e75:	48 89 c2             	mov    %rax,%rdx
  8004215e78:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e7c:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215e80:	48 39 c2             	cmp    %rax,%rdx
  8004215e83:	74 09                	je     8004215e8e <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215e85:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215e8c:	eb 54                	jmp    8004215ee2 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  8004215e8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215e92:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215e96:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e9a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004215e9e:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004215ea5:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004215eac:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  8004215eb3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004215eb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215ebb:	4d 89 c1             	mov    %r8,%r9
  8004215ebe:	49 89 f8             	mov    %rdi,%r8
  8004215ec1:	48 89 c7             	mov    %rax,%rdi
  8004215ec4:	48 b8 1f 53 21 04 80 	movabs $0x800421531f,%rax
  8004215ecb:	00 00 00 
  8004215ece:	ff d0                	callq  *%rax
  8004215ed0:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004215ed3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215ed7:	74 02                	je     8004215edb <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  8004215ed9:	eb 07                	jmp    8004215ee2 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  8004215edb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215ee0:	eb 03                	jmp    8004215ee5 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  8004215ee2:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  8004215ee5:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004215eec:	5b                   	pop    %rbx
  8004215eed:	5d                   	pop    %rbp
  8004215eee:	c3                   	retq   

0000008004215eef <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004215eef:	55                   	push   %rbp
  8004215ef0:	48 89 e5             	mov    %rsp,%rbp
  8004215ef3:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004215efa:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004215f01:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004215f08:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004215f0f:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004215f16:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  8004215f1d:	00 
  8004215f1e:	75 35                	jne    8004215f55 <dwarf_srclines+0x66>
  8004215f20:	48 b9 5f f7 21 04 80 	movabs $0x800421f75f,%rcx
  8004215f27:	00 00 00 
  8004215f2a:	48 ba 27 f7 21 04 80 	movabs $0x800421f727,%rdx
  8004215f31:	00 00 00 
  8004215f34:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004215f39:	48 bf 3c f7 21 04 80 	movabs $0x800421f73c,%rdi
  8004215f40:	00 00 00 
  8004215f43:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215f48:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215f4f:	00 00 00 
  8004215f52:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004215f55:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004215f5c:	00 
  8004215f5d:	75 35                	jne    8004215f94 <dwarf_srclines+0xa5>
  8004215f5f:	48 b9 63 f7 21 04 80 	movabs $0x800421f763,%rcx
  8004215f66:	00 00 00 
  8004215f69:	48 ba 27 f7 21 04 80 	movabs $0x800421f727,%rdx
  8004215f70:	00 00 00 
  8004215f73:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004215f78:	48 bf 3c f7 21 04 80 	movabs $0x800421f73c,%rdi
  8004215f7f:	00 00 00 
  8004215f82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215f87:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215f8e:	00 00 00 
  8004215f91:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004215f94:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004215f9b:	ba 88 00 00 00       	mov    $0x88,%edx
  8004215fa0:	be 00 00 00 00       	mov    $0x0,%esi
  8004215fa5:	48 89 c7             	mov    %rax,%rdi
  8004215fa8:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004215faf:	00 00 00 
  8004215fb2:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  8004215fb4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215fbb:	be 10 00 00 00       	mov    $0x10,%esi
  8004215fc0:	48 89 c7             	mov    %rax,%rdi
  8004215fc3:	48 b8 c8 28 21 04 80 	movabs $0x80042128c8,%rax
  8004215fca:	00 00 00 
  8004215fcd:	ff d0                	callq  *%rax
  8004215fcf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215fd3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215fd8:	75 0a                	jne    8004215fe4 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004215fda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215fdf:	e9 84 00 00 00       	jmpq   8004216068 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004215fe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215fe8:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004215fec:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004215ff3:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004215ffa:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004216001:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216008:	49 89 f8             	mov    %rdi,%r8
  800421600b:	48 89 c7             	mov    %rax,%rdi
  800421600e:	48 b8 7b 59 21 04 80 	movabs $0x800421597b,%rax
  8004216015:	00 00 00 
  8004216018:	ff d0                	callq  *%rax
  800421601a:	85 c0                	test   %eax,%eax
  800421601c:	74 07                	je     8004216025 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  800421601e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004216023:	eb 43                	jmp    8004216068 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004216025:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421602c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004216030:	48 89 10             	mov    %rdx,(%rax)
  8004216033:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004216037:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421603b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421603f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216043:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216047:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421604b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421604f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004216053:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216057:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421605b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421605f:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004216063:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004216068:	c9                   	leaveq 
  8004216069:	c3                   	retq   

000000800421606a <_dwarf_find_section>:
  800421606a:	55                   	push   %rbp
  800421606b:	48 89 e5             	mov    %rsp,%rbp
  800421606e:	48 83 ec 20          	sub    $0x20,%rsp
  8004216072:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216076:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421607d:	00 
  800421607e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216085:	eb 57                	jmp    80042160de <_dwarf_find_section+0x74>
  8004216087:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421608e:	00 00 00 
  8004216091:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216094:	48 63 d2             	movslq %edx,%rdx
  8004216097:	48 c1 e2 05          	shl    $0x5,%rdx
  800421609b:	48 01 d0             	add    %rdx,%rax
  800421609e:	48 8b 00             	mov    (%rax),%rax
  80042160a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042160a5:	48 89 d6             	mov    %rdx,%rsi
  80042160a8:	48 89 c7             	mov    %rax,%rdi
  80042160ab:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  80042160b2:	00 00 00 
  80042160b5:	ff d0                	callq  *%rax
  80042160b7:	85 c0                	test   %eax,%eax
  80042160b9:	75 1f                	jne    80042160da <_dwarf_find_section+0x70>
  80042160bb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160be:	48 98                	cltq   
  80042160c0:	48 c1 e0 05          	shl    $0x5,%rax
  80042160c4:	48 89 c2             	mov    %rax,%rdx
  80042160c7:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042160ce:	00 00 00 
  80042160d1:	48 01 d0             	add    %rdx,%rax
  80042160d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042160d8:	eb 0a                	jmp    80042160e4 <_dwarf_find_section+0x7a>
  80042160da:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042160de:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042160e2:	7e a3                	jle    8004216087 <_dwarf_find_section+0x1d>
  80042160e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042160e8:	c9                   	leaveq 
  80042160e9:	c3                   	retq   

00000080042160ea <find_debug_sections>:
  80042160ea:	55                   	push   %rbp
  80042160eb:	48 89 e5             	mov    %rsp,%rbp
  80042160ee:	48 83 ec 40          	sub    $0x40,%rsp
  80042160f2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042160f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042160fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042160fe:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004216105:	00 
  8004216106:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421610a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421610e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216112:	48 01 d0             	add    %rdx,%rax
  8004216115:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421611d:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216121:	0f b7 c0             	movzwl %ax,%eax
  8004216124:	48 c1 e0 06          	shl    $0x6,%rax
  8004216128:	48 89 c2             	mov    %rax,%rdx
  800421612b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421612f:	48 01 d0             	add    %rdx,%rax
  8004216132:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421613a:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800421613e:	0f b7 c0             	movzwl %ax,%eax
  8004216141:	48 c1 e0 06          	shl    $0x6,%rax
  8004216145:	48 89 c2             	mov    %rax,%rdx
  8004216148:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421614c:	48 01 d0             	add    %rdx,%rax
  800421614f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216153:	e9 4b 02 00 00       	jmpq   80042163a3 <find_debug_sections+0x2b9>
  8004216158:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421615c:	8b 00                	mov    (%rax),%eax
  800421615e:	89 c2                	mov    %eax,%edx
  8004216160:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216164:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004216168:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421616c:	48 01 c8             	add    %rcx,%rax
  800421616f:	48 01 d0             	add    %rdx,%rax
  8004216172:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216176:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421617a:	48 be 6b f7 21 04 80 	movabs $0x800421f76b,%rsi
  8004216181:	00 00 00 
  8004216184:	48 89 c7             	mov    %rax,%rdi
  8004216187:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  800421618e:	00 00 00 
  8004216191:	ff d0                	callq  *%rax
  8004216193:	85 c0                	test   %eax,%eax
  8004216195:	75 4b                	jne    80042161e2 <find_debug_sections+0xf8>
  8004216197:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421619b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042161a2:	00 00 00 
  80042161a5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042161a9:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042161b0:	00 00 00 
  80042161b3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042161b7:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042161bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042161bf:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042161c3:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042161ca:	00 00 00 
  80042161cd:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042161d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042161d5:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042161d9:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042161dd:	e9 bc 01 00 00       	jmpq   800421639e <find_debug_sections+0x2b4>
  80042161e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161e6:	48 be 77 f7 21 04 80 	movabs $0x800421f777,%rsi
  80042161ed:	00 00 00 
  80042161f0:	48 89 c7             	mov    %rax,%rdi
  80042161f3:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  80042161fa:	00 00 00 
  80042161fd:	ff d0                	callq  *%rax
  80042161ff:	85 c0                	test   %eax,%eax
  8004216201:	75 4b                	jne    800421624e <find_debug_sections+0x164>
  8004216203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216207:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421620e:	00 00 00 
  8004216211:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216215:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421621c:	00 00 00 
  800421621f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216223:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216227:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421622b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421622f:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216236:	00 00 00 
  8004216239:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421623d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216241:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216245:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216249:	e9 50 01 00 00       	jmpq   800421639e <find_debug_sections+0x2b4>
  800421624e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216252:	48 be 8f f7 21 04 80 	movabs $0x800421f78f,%rsi
  8004216259:	00 00 00 
  800421625c:	48 89 c7             	mov    %rax,%rdi
  800421625f:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004216266:	00 00 00 
  8004216269:	ff d0                	callq  *%rax
  800421626b:	85 c0                	test   %eax,%eax
  800421626d:	75 4b                	jne    80042162ba <find_debug_sections+0x1d0>
  800421626f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216273:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421627a:	00 00 00 
  800421627d:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216281:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216288:	00 00 00 
  800421628b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421628f:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216293:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216297:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421629b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042162a2:	00 00 00 
  80042162a5:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042162a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042162ad:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042162b1:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042162b5:	e9 e4 00 00 00       	jmpq   800421639e <find_debug_sections+0x2b4>
  80042162ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042162be:	48 be 85 f7 21 04 80 	movabs $0x800421f785,%rsi
  80042162c5:	00 00 00 
  80042162c8:	48 89 c7             	mov    %rax,%rdi
  80042162cb:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  80042162d2:	00 00 00 
  80042162d5:	ff d0                	callq  *%rax
  80042162d7:	85 c0                	test   %eax,%eax
  80042162d9:	75 53                	jne    800421632e <find_debug_sections+0x244>
  80042162db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042162df:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042162e3:	48 89 c2             	mov    %rax,%rdx
  80042162e6:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042162ed:	00 00 00 
  80042162f0:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042162f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042162f8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042162fc:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216303:	00 00 00 
  8004216306:	48 89 50 50          	mov    %rdx,0x50(%rax)
  800421630a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421630e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216312:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216319:	00 00 00 
  800421631c:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216320:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216324:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216328:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421632c:	eb 70                	jmp    800421639e <find_debug_sections+0x2b4>
  800421632e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216332:	48 be 9b f7 21 04 80 	movabs $0x800421f79b,%rsi
  8004216339:	00 00 00 
  800421633c:	48 89 c7             	mov    %rax,%rdi
  800421633f:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004216346:	00 00 00 
  8004216349:	ff d0                	callq  *%rax
  800421634b:	85 c0                	test   %eax,%eax
  800421634d:	75 4f                	jne    800421639e <find_debug_sections+0x2b4>
  800421634f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216353:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421635a:	00 00 00 
  800421635d:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216364:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421636b:	00 00 00 
  800421636e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216372:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421637d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216381:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216388:	00 00 00 
  800421638b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216392:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216396:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421639a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421639e:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  80042163a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042163a7:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042163ab:	0f 82 a7 fd ff ff    	jb     8004216158 <find_debug_sections+0x6e>
  80042163b1:	c9                   	leaveq 
  80042163b2:	c3                   	retq   

00000080042163b3 <read_section_headers>:
  80042163b3:	55                   	push   %rbp
  80042163b4:	48 89 e5             	mov    %rsp,%rbp
  80042163b7:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  80042163be:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  80042163c5:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  80042163cc:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  80042163d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042163d8:	ba 14 00 00 00       	mov    $0x14,%edx
  80042163dd:	48 89 f7             	mov    %rsi,%rdi
  80042163e0:	48 89 d1             	mov    %rdx,%rcx
  80042163e3:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  80042163e6:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  80042163ed:	00 
  80042163ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042163f2:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  80042163f9:	48 01 d0             	add    %rdx,%rax
  80042163fc:	48 83 e8 01          	sub    $0x1,%rax
  8004216400:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216404:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216408:	ba 00 00 00 00       	mov    $0x0,%edx
  800421640d:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004216411:	48 89 d0             	mov    %rdx,%rax
  8004216414:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216418:	48 29 c2             	sub    %rax,%rdx
  800421641b:	48 89 d0             	mov    %rdx,%rax
  800421641e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216422:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004216429:	00 00 00 00 
  800421642d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216431:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216435:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421643c:	00 
  800421643d:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004216444:	00 00 00 
  8004216447:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  800421644e:	75 11                	jne    8004216461 <read_section_headers+0xae>
  8004216450:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216457:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421645b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421645f:	eb 26                	jmp    8004216487 <read_section_headers+0xd4>
  8004216461:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216468:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421646c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216473:	48 01 c2             	add    %rax,%rdx
  8004216476:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  800421647d:	ff ff ff 
  8004216480:	48 01 d0             	add    %rdx,%rax
  8004216483:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216487:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421648e:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216492:	0f b7 c0             	movzwl %ax,%eax
  8004216495:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004216498:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421649f:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  80042164a3:	0f b7 c0             	movzwl %ax,%eax
  80042164a6:	89 45 c0             	mov    %eax,-0x40(%rbp)
  80042164a9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042164b0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042164b4:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042164b7:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  80042164bb:	48 63 f0             	movslq %eax,%rsi
  80042164be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042164c2:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042164c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042164cd:	48 89 c7             	mov    %rax,%rdi
  80042164d0:	48 b8 f2 6a 21 04 80 	movabs $0x8004216af2,%rax
  80042164d7:	00 00 00 
  80042164da:	ff d0                	callq  *%rax
  80042164dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042164e0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042164e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042164e8:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042164ee:	48 89 c2             	mov    %rax,%rdx
  80042164f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042164f5:	48 29 d0             	sub    %rdx,%rax
  80042164f8:	48 89 c2             	mov    %rax,%rdx
  80042164fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042164ff:	48 01 d0             	add    %rdx,%rax
  8004216502:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004216506:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421650d:	eb 24                	jmp    8004216533 <read_section_headers+0x180>
  800421650f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216512:	48 98                	cltq   
  8004216514:	48 c1 e0 06          	shl    $0x6,%rax
  8004216518:	48 89 c2             	mov    %rax,%rdx
  800421651b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421651f:	48 01 c2             	add    %rax,%rdx
  8004216522:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216525:	48 98                	cltq   
  8004216527:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  800421652e:	ff 
  800421652f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216533:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216536:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216539:	7c d4                	jl     800421650f <read_section_headers+0x15c>
  800421653b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421653f:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216543:	0f b7 c0             	movzwl %ax,%eax
  8004216546:	48 98                	cltq   
  8004216548:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421654f:	ff 
  8004216550:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004216554:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421655b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421655f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216563:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216567:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421656b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421656f:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216576:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421657a:	48 01 c8             	add    %rcx,%rax
  800421657d:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216584:	48 89 c7             	mov    %rax,%rdi
  8004216587:	48 b8 f2 6a 21 04 80 	movabs $0x8004216af2,%rax
  800421658e:	00 00 00 
  8004216591:	ff d0                	callq  *%rax
  8004216593:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216597:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421659b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421659f:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042165a3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042165a7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042165ab:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042165b1:	48 29 c2             	sub    %rax,%rdx
  80042165b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042165b8:	48 01 c2             	add    %rax,%rdx
  80042165bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042165bf:	48 01 d0             	add    %rdx,%rax
  80042165c2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042165c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042165cd:	e9 04 05 00 00       	jmpq   8004216ad6 <read_section_headers+0x723>
  80042165d2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042165d5:	48 98                	cltq   
  80042165d7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042165de:	ff 
  80042165df:	8b 00                	mov    (%rax),%eax
  80042165e1:	89 c2                	mov    %eax,%edx
  80042165e3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042165e7:	48 01 d0             	add    %rdx,%rax
  80042165ea:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042165ee:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042165f5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042165fa:	48 85 c0             	test   %rax,%rax
  80042165fd:	74 35                	je     8004216634 <read_section_headers+0x281>
  80042165ff:	48 b9 a6 f7 21 04 80 	movabs $0x800421f7a6,%rcx
  8004216606:	00 00 00 
  8004216609:	48 ba bf f7 21 04 80 	movabs $0x800421f7bf,%rdx
  8004216610:	00 00 00 
  8004216613:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216618:	48 bf d4 f7 21 04 80 	movabs $0x800421f7d4,%rdi
  800421661f:	00 00 00 
  8004216622:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216627:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421662e:	00 00 00 
  8004216631:	41 ff d0             	callq  *%r8
  8004216634:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421663b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421663f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216643:	48 be 6b f7 21 04 80 	movabs $0x800421f76b,%rsi
  800421664a:	00 00 00 
  800421664d:	48 89 c7             	mov    %rax,%rdi
  8004216650:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004216657:	00 00 00 
  800421665a:	ff d0                	callq  *%rax
  800421665c:	85 c0                	test   %eax,%eax
  800421665e:	0f 85 d8 00 00 00    	jne    800421673c <read_section_headers+0x389>
  8004216664:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216667:	48 98                	cltq   
  8004216669:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216670:	ff 
  8004216671:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216675:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216678:	48 98                	cltq   
  800421667a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216681:	ff 
  8004216682:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216686:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421668d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216691:	48 01 c8             	add    %rcx,%rax
  8004216694:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421669b:	48 89 c7             	mov    %rax,%rdi
  800421669e:	48 b8 f2 6a 21 04 80 	movabs $0x8004216af2,%rax
  80042166a5:	00 00 00 
  80042166a8:	ff d0                	callq  *%rax
  80042166aa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042166ad:	48 98                	cltq   
  80042166af:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042166b6:	ff 
  80042166b7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042166bb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042166be:	48 98                	cltq   
  80042166c0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042166c7:	ff 
  80042166c8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042166cc:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042166d0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042166d4:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042166da:	48 29 c2             	sub    %rax,%rdx
  80042166dd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042166e1:	48 01 c2             	add    %rax,%rdx
  80042166e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042166e8:	48 01 c2             	add    %rax,%rdx
  80042166eb:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042166f2:	00 00 00 
  80042166f5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042166f9:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216700:	00 00 00 
  8004216703:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216707:	48 89 c2             	mov    %rax,%rdx
  800421670a:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216711:	00 00 00 
  8004216714:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216718:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421671b:	48 98                	cltq   
  800421671d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216724:	ff 
  8004216725:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216729:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216730:	00 00 00 
  8004216733:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216737:	e9 96 03 00 00       	jmpq   8004216ad2 <read_section_headers+0x71f>
  800421673c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216740:	48 be 77 f7 21 04 80 	movabs $0x800421f777,%rsi
  8004216747:	00 00 00 
  800421674a:	48 89 c7             	mov    %rax,%rdi
  800421674d:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004216754:	00 00 00 
  8004216757:	ff d0                	callq  *%rax
  8004216759:	85 c0                	test   %eax,%eax
  800421675b:	0f 85 de 00 00 00    	jne    800421683f <read_section_headers+0x48c>
  8004216761:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216764:	48 98                	cltq   
  8004216766:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421676d:	ff 
  800421676e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216772:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216775:	48 98                	cltq   
  8004216777:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421677e:	ff 
  800421677f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216783:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421678a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421678e:	48 01 c8             	add    %rcx,%rax
  8004216791:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216798:	48 89 c7             	mov    %rax,%rdi
  800421679b:	48 b8 f2 6a 21 04 80 	movabs $0x8004216af2,%rax
  80042167a2:	00 00 00 
  80042167a5:	ff d0                	callq  *%rax
  80042167a7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042167aa:	48 98                	cltq   
  80042167ac:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042167b3:	ff 
  80042167b4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042167b8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042167bb:	48 98                	cltq   
  80042167bd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042167c4:	ff 
  80042167c5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042167c9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042167d0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042167d7:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042167dd:	48 29 c2             	sub    %rax,%rdx
  80042167e0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042167e4:	48 01 c2             	add    %rax,%rdx
  80042167e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042167eb:	48 01 c2             	add    %rax,%rdx
  80042167ee:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042167f5:	00 00 00 
  80042167f8:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042167fc:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216803:	00 00 00 
  8004216806:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421680a:	48 89 c2             	mov    %rax,%rdx
  800421680d:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216814:	00 00 00 
  8004216817:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800421681b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421681e:	48 98                	cltq   
  8004216820:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216827:	ff 
  8004216828:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421682c:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216833:	00 00 00 
  8004216836:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421683a:	e9 93 02 00 00       	jmpq   8004216ad2 <read_section_headers+0x71f>
  800421683f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216843:	48 be 8f f7 21 04 80 	movabs $0x800421f78f,%rsi
  800421684a:	00 00 00 
  800421684d:	48 89 c7             	mov    %rax,%rdi
  8004216850:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  8004216857:	00 00 00 
  800421685a:	ff d0                	callq  *%rax
  800421685c:	85 c0                	test   %eax,%eax
  800421685e:	0f 85 de 00 00 00    	jne    8004216942 <read_section_headers+0x58f>
  8004216864:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216867:	48 98                	cltq   
  8004216869:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216870:	ff 
  8004216871:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216875:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216878:	48 98                	cltq   
  800421687a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216881:	ff 
  8004216882:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216886:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421688d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216891:	48 01 c8             	add    %rcx,%rax
  8004216894:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421689b:	48 89 c7             	mov    %rax,%rdi
  800421689e:	48 b8 f2 6a 21 04 80 	movabs $0x8004216af2,%rax
  80042168a5:	00 00 00 
  80042168a8:	ff d0                	callq  *%rax
  80042168aa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042168ad:	48 98                	cltq   
  80042168af:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042168b6:	ff 
  80042168b7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042168bb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042168be:	48 98                	cltq   
  80042168c0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042168c7:	ff 
  80042168c8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042168cc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  80042168d3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042168da:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042168e0:	48 29 c2             	sub    %rax,%rdx
  80042168e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042168e7:	48 01 c2             	add    %rax,%rdx
  80042168ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042168ee:	48 01 c2             	add    %rax,%rdx
  80042168f1:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042168f8:	00 00 00 
  80042168fb:	48 89 50 68          	mov    %rdx,0x68(%rax)
  80042168ff:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216906:	00 00 00 
  8004216909:	48 8b 40 68          	mov    0x68(%rax),%rax
  800421690d:	48 89 c2             	mov    %rax,%rdx
  8004216910:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216917:	00 00 00 
  800421691a:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421691e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216921:	48 98                	cltq   
  8004216923:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421692a:	ff 
  800421692b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421692f:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216936:	00 00 00 
  8004216939:	48 89 50 78          	mov    %rdx,0x78(%rax)
  800421693d:	e9 90 01 00 00       	jmpq   8004216ad2 <read_section_headers+0x71f>
  8004216942:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216946:	48 be 85 f7 21 04 80 	movabs $0x800421f785,%rsi
  800421694d:	00 00 00 
  8004216950:	48 89 c7             	mov    %rax,%rdi
  8004216953:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  800421695a:	00 00 00 
  800421695d:	ff d0                	callq  *%rax
  800421695f:	85 c0                	test   %eax,%eax
  8004216961:	75 65                	jne    80042169c8 <read_section_headers+0x615>
  8004216963:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216966:	48 98                	cltq   
  8004216968:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421696f:	ff 
  8004216970:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216974:	48 89 c2             	mov    %rax,%rdx
  8004216977:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421697e:	00 00 00 
  8004216981:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216985:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421698c:	00 00 00 
  800421698f:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216993:	48 89 c2             	mov    %rax,%rdx
  8004216996:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421699d:	00 00 00 
  80042169a0:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042169a4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169a7:	48 98                	cltq   
  80042169a9:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169b0:	ff 
  80042169b1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042169b5:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042169bc:	00 00 00 
  80042169bf:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042169c3:	e9 0a 01 00 00       	jmpq   8004216ad2 <read_section_headers+0x71f>
  80042169c8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042169cc:	48 be 9b f7 21 04 80 	movabs $0x800421f79b,%rsi
  80042169d3:	00 00 00 
  80042169d6:	48 89 c7             	mov    %rax,%rdi
  80042169d9:	48 b8 5c 08 21 04 80 	movabs $0x800421085c,%rax
  80042169e0:	00 00 00 
  80042169e3:	ff d0                	callq  *%rax
  80042169e5:	85 c0                	test   %eax,%eax
  80042169e7:	0f 85 e5 00 00 00    	jne    8004216ad2 <read_section_headers+0x71f>
  80042169ed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169f0:	48 98                	cltq   
  80042169f2:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169f9:	ff 
  80042169fa:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042169fe:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a01:	48 98                	cltq   
  8004216a03:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a0a:	ff 
  8004216a0b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216a0f:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216a16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a1a:	48 01 c8             	add    %rcx,%rax
  8004216a1d:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216a24:	48 89 c7             	mov    %rax,%rdi
  8004216a27:	48 b8 f2 6a 21 04 80 	movabs $0x8004216af2,%rax
  8004216a2e:	00 00 00 
  8004216a31:	ff d0                	callq  *%rax
  8004216a33:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a36:	48 98                	cltq   
  8004216a38:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a3f:	ff 
  8004216a40:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216a44:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a47:	48 98                	cltq   
  8004216a49:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a50:	ff 
  8004216a51:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216a55:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216a5c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216a63:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216a69:	48 29 c2             	sub    %rax,%rdx
  8004216a6c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216a70:	48 01 c2             	add    %rax,%rdx
  8004216a73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a77:	48 01 c2             	add    %rax,%rdx
  8004216a7a:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216a81:	00 00 00 
  8004216a84:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216a8b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216a92:	00 00 00 
  8004216a95:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216a9c:	48 89 c2             	mov    %rax,%rdx
  8004216a9f:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216aa6:	00 00 00 
  8004216aa9:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216ab0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ab3:	48 98                	cltq   
  8004216ab5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216abc:	ff 
  8004216abd:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216ac1:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216ac8:	00 00 00 
  8004216acb:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216ad2:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216ad6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ad9:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216adc:	0f 8c f0 fa ff ff    	jl     80042165d2 <read_section_headers+0x21f>
  8004216ae2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216ae6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216aed:	48 01 d0             	add    %rdx,%rax
  8004216af0:	c9                   	leaveq 
  8004216af1:	c3                   	retq   

0000008004216af2 <readseg>:
  8004216af2:	55                   	push   %rbp
  8004216af3:	48 89 e5             	mov    %rsp,%rbp
  8004216af6:	48 83 ec 30          	sub    $0x30,%rsp
  8004216afa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216afe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004216b02:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216b06:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216b0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216b12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216b1a:	48 01 d0             	add    %rdx,%rax
  8004216b1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216b25:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216b2a:	48 85 c0             	test   %rax,%rax
  8004216b2d:	74 35                	je     8004216b64 <readseg+0x72>
  8004216b2f:	48 b9 e5 f7 21 04 80 	movabs $0x800421f7e5,%rcx
  8004216b36:	00 00 00 
  8004216b39:	48 ba bf f7 21 04 80 	movabs $0x800421f7bf,%rdx
  8004216b40:	00 00 00 
  8004216b43:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216b48:	48 bf d4 f7 21 04 80 	movabs $0x800421f7d4,%rdi
  8004216b4f:	00 00 00 
  8004216b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216b5e:	00 00 00 
  8004216b61:	41 ff d0             	callq  *%r8
  8004216b64:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216b6b:	ff 
  8004216b6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b70:	48 c1 e8 09          	shr    $0x9,%rax
  8004216b74:	48 83 c0 01          	add    $0x1,%rax
  8004216b78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216b7c:	eb 3c                	jmp    8004216bba <readseg+0xc8>
  8004216b7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216b82:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216b86:	48 89 d6             	mov    %rdx,%rsi
  8004216b89:	48 89 c7             	mov    %rax,%rdi
  8004216b8c:	48 b8 82 6c 21 04 80 	movabs $0x8004216c82,%rax
  8004216b93:	00 00 00 
  8004216b96:	ff d0                	callq  *%rax
  8004216b98:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004216b9f:	00 
  8004216ba0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216ba4:	48 8b 00             	mov    (%rax),%rax
  8004216ba7:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216bae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216bb2:	48 89 10             	mov    %rdx,(%rax)
  8004216bb5:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216bba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216bbe:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004216bc2:	72 ba                	jb     8004216b7e <readseg+0x8c>
  8004216bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216bc8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216bcd:	48 89 c2             	mov    %rax,%rdx
  8004216bd0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216bd4:	48 01 d0             	add    %rdx,%rax
  8004216bd7:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004216bdd:	76 2f                	jbe    8004216c0e <readseg+0x11c>
  8004216bdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216be3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216be7:	48 89 d6             	mov    %rdx,%rsi
  8004216bea:	48 89 c7             	mov    %rax,%rdi
  8004216bed:	48 b8 82 6c 21 04 80 	movabs $0x8004216c82,%rax
  8004216bf4:	00 00 00 
  8004216bf7:	ff d0                	callq  *%rax
  8004216bf9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216bfd:	48 8b 00             	mov    (%rax),%rax
  8004216c00:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216c07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216c0b:	48 89 10             	mov    %rdx,(%rax)
  8004216c0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216c12:	48 8b 00             	mov    (%rax),%rax
  8004216c15:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216c1a:	48 85 c0             	test   %rax,%rax
  8004216c1d:	74 35                	je     8004216c54 <readseg+0x162>
  8004216c1f:	48 b9 f8 f7 21 04 80 	movabs $0x800421f7f8,%rcx
  8004216c26:	00 00 00 
  8004216c29:	48 ba bf f7 21 04 80 	movabs $0x800421f7bf,%rdx
  8004216c30:	00 00 00 
  8004216c33:	be da 00 00 00       	mov    $0xda,%esi
  8004216c38:	48 bf d4 f7 21 04 80 	movabs $0x800421f7d4,%rdi
  8004216c3f:	00 00 00 
  8004216c42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216c4e:	00 00 00 
  8004216c51:	41 ff d0             	callq  *%r8
  8004216c54:	c9                   	leaveq 
  8004216c55:	c3                   	retq   

0000008004216c56 <waitdisk>:
  8004216c56:	55                   	push   %rbp
  8004216c57:	48 89 e5             	mov    %rsp,%rbp
  8004216c5a:	48 83 ec 10          	sub    $0x10,%rsp
  8004216c5e:	90                   	nop
  8004216c5f:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216c66:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216c69:	89 c2                	mov    %eax,%edx
  8004216c6b:	ec                   	in     (%dx),%al
  8004216c6c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004216c6f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216c73:	0f b6 c0             	movzbl %al,%eax
  8004216c76:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216c7b:	83 f8 40             	cmp    $0x40,%eax
  8004216c7e:	75 df                	jne    8004216c5f <waitdisk+0x9>
  8004216c80:	c9                   	leaveq 
  8004216c81:	c3                   	retq   

0000008004216c82 <readsect>:
  8004216c82:	55                   	push   %rbp
  8004216c83:	48 89 e5             	mov    %rsp,%rbp
  8004216c86:	48 83 ec 60          	sub    $0x60,%rsp
  8004216c8a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004216c8e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004216c92:	48 b8 56 6c 21 04 80 	movabs $0x8004216c56,%rax
  8004216c99:	00 00 00 
  8004216c9c:	ff d0                	callq  *%rax
  8004216c9e:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216ca5:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216ca9:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216cad:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216cb0:	ee                   	out    %al,(%dx)
  8004216cb1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216cb5:	0f b6 c0             	movzbl %al,%eax
  8004216cb8:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  8004216cbf:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004216cc2:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004216cc6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216cc9:	ee                   	out    %al,(%dx)
  8004216cca:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216cce:	48 c1 e8 08          	shr    $0x8,%rax
  8004216cd2:	0f b6 c0             	movzbl %al,%eax
  8004216cd5:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004216cdc:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004216cdf:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004216ce3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216ce6:	ee                   	out    %al,(%dx)
  8004216ce7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ceb:	48 c1 e8 10          	shr    $0x10,%rax
  8004216cef:	0f b6 c0             	movzbl %al,%eax
  8004216cf2:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  8004216cf9:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004216cfc:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004216d00:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216d03:	ee                   	out    %al,(%dx)
  8004216d04:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216d08:	48 c1 e8 18          	shr    $0x18,%rax
  8004216d0c:	83 c8 e0             	or     $0xffffffe0,%eax
  8004216d0f:	0f b6 c0             	movzbl %al,%eax
  8004216d12:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  8004216d19:	88 45 db             	mov    %al,-0x25(%rbp)
  8004216d1c:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004216d20:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216d23:	ee                   	out    %al,(%dx)
  8004216d24:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004216d2b:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004216d2f:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216d33:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216d36:	ee                   	out    %al,(%dx)
  8004216d37:	48 b8 56 6c 21 04 80 	movabs $0x8004216c56,%rax
  8004216d3e:	00 00 00 
  8004216d41:	ff d0                	callq  *%rax
  8004216d43:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004216d4a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216d4e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004216d52:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216d59:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216d5c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004216d60:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004216d63:	48 89 ce             	mov    %rcx,%rsi
  8004216d66:	48 89 f7             	mov    %rsi,%rdi
  8004216d69:	89 c1                	mov    %eax,%ecx
  8004216d6b:	fc                   	cld    
  8004216d6c:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  8004216d6e:	89 c8                	mov    %ecx,%eax
  8004216d70:	48 89 fe             	mov    %rdi,%rsi
  8004216d73:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216d77:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004216d7a:	c9                   	leaveq 
  8004216d7b:	c3                   	retq   
  8004216d7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000008004216d80 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216d80:	fa                   	cli    
	xorw    %ax, %ax
  8004216d81:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216d83:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216d85:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216d87:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216d89:	0f 01 16             	lgdt   (%rsi)
  8004216d8c:	e0 70                	loopne 8004216dfe <start64+0x10>
	movl    %cr0, %eax
  8004216d8e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216d91:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216d95:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216d98:	ea                   	(bad)  
  8004216d99:	1d                   	.byte 0x1d
  8004216d9a:	70 08                	jo     8004216da4 <start32+0x7>
	...

0000008004216d9d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  8004216d9d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216da1:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216da3:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216da5:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216da7:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216dab:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216dad:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  8004216daf:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  8004216db4:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004216db7:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421de7e <etext+0xfe6>
	movl    %cr0, %eax
  8004216dbe:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216dc1:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004216dc4:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004216dc7:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  8004216dcc:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  8004216dcf:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004216dd4:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004216dd6:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  8004216dda:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  8004216ddc:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  8004216ddf:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004216de4:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004216de7:	ea                   	(bad)  
  8004216de8:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004216de9:	70 00                	jo     8004216deb <start32+0x4e>
  8004216deb:	00 08                	add    %cl,(%rax)
	...

0000008004216dee <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  8004216dee:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216df2:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216df4:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216df6:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216df8:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216dfc:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216dfe:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004216e00:	48 a1 e0 a5 6d 04 80 	movabs 0x80046da5e0,%rax
  8004216e07:	00 00 00 
	movq    %rax,%rsp
  8004216e0a:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004216e0d:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  8004216e14:	48 b8 03 04 20 04 80 	movabs $0x8004200403,%rax
  8004216e1b:	00 00 00 
	call    *%rax
  8004216e1e:	ff d0                	callq  *%rax

0000008004216e20 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216e20:	eb fe                	jmp    8004216e20 <spin>
  8004216e22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004216e28 <gdt>:
	...
  8004216e30:	ff                   	(bad)  
  8004216e31:	ff 00                	incl   (%rax)
  8004216e33:	00 00                	add    %al,(%rax)
  8004216e35:	9a                   	(bad)  
  8004216e36:	af                   	scas   %es:(%rdi),%eax
  8004216e37:	00 ff                	add    %bh,%bh
  8004216e39:	ff 00                	incl   (%rax)
  8004216e3b:	00 00                	add    %al,(%rax)
  8004216e3d:	92                   	xchg   %eax,%edx
  8004216e3e:	af                   	scas   %es:(%rdi),%eax
	...

0000008004216e40 <gdtdesc>:
  8004216e40:	17                   	(bad)  
  8004216e41:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  8004216e47:	90                   	nop

0000008004216e48 <gdt32>:
	...
  8004216e50:	ff                   	(bad)  
  8004216e51:	ff 00                	incl   (%rax)
  8004216e53:	00 00                	add    %al,(%rax)
  8004216e55:	9a                   	(bad)  
  8004216e56:	cf                   	iret   
  8004216e57:	00 ff                	add    %bh,%bh
  8004216e59:	ff 00                	incl   (%rax)
  8004216e5b:	00 00                	add    %al,(%rax)
  8004216e5d:	92                   	xchg   %eax,%edx
  8004216e5e:	cf                   	iret   
	...

0000008004216e60 <gdt32desc>:
  8004216e60:	17                   	(bad)  
  8004216e61:	00 c8                	add    %cl,%al
  8004216e63:	70 00                	jo     8004216e65 <gdt32desc+0x5>
	...

0000008004216e66 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  8004216e66:	90                   	nop

0000008004216e67 <sum>:
  8004216e67:	55                   	push   %rbp
  8004216e68:	48 89 e5             	mov    %rsp,%rbp
  8004216e6b:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004216e6f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216e73:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004216e76:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004216e7d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004216e84:	eb 1a                	jmp    8004216ea0 <sum+0x39>
  8004216e86:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216e89:	48 63 d0             	movslq %eax,%rdx
  8004216e8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216e90:	48 01 d0             	add    %rdx,%rax
  8004216e93:	0f b6 00             	movzbl (%rax),%eax
  8004216e96:	0f b6 c0             	movzbl %al,%eax
  8004216e99:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004216e9c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004216ea0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216ea3:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216ea6:	7c de                	jl     8004216e86 <sum+0x1f>
  8004216ea8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004216eab:	c9                   	leaveq 
  8004216eac:	c3                   	retq   

0000008004216ead <mpsearch1>:
  8004216ead:	55                   	push   %rbp
  8004216eae:	48 89 e5             	mov    %rsp,%rbp
  8004216eb1:	48 83 ec 40          	sub    $0x40,%rsp
  8004216eb5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004216eb9:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004216ebc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216ec0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216ec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216ec8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216ecc:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004216ecf:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216ed2:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004216ed9:	00 00 00 
  8004216edc:	48 8b 00             	mov    (%rax),%rax
  8004216edf:	48 39 c2             	cmp    %rax,%rdx
  8004216ee2:	72 32                	jb     8004216f16 <mpsearch1+0x69>
  8004216ee4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216ee8:	48 89 c1             	mov    %rax,%rcx
  8004216eeb:	48 ba 18 f8 21 04 80 	movabs $0x800421f818,%rdx
  8004216ef2:	00 00 00 
  8004216ef5:	be 74 00 00 00       	mov    $0x74,%esi
  8004216efa:	48 bf 3b f8 21 04 80 	movabs $0x800421f83b,%rdi
  8004216f01:	00 00 00 
  8004216f04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f09:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216f10:	00 00 00 
  8004216f13:	41 ff d0             	callq  *%r8
  8004216f16:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216f1d:	00 00 00 
  8004216f20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216f24:	48 01 d0             	add    %rdx,%rax
  8004216f27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216f2b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216f2e:	48 63 d0             	movslq %eax,%rdx
  8004216f31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216f35:	48 01 d0             	add    %rdx,%rax
  8004216f38:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216f3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216f40:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216f44:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004216f47:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216f4a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004216f51:	00 00 00 
  8004216f54:	48 8b 00             	mov    (%rax),%rax
  8004216f57:	48 39 c2             	cmp    %rax,%rdx
  8004216f5a:	72 32                	jb     8004216f8e <mpsearch1+0xe1>
  8004216f5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216f60:	48 89 c1             	mov    %rax,%rcx
  8004216f63:	48 ba 18 f8 21 04 80 	movabs $0x800421f818,%rdx
  8004216f6a:	00 00 00 
  8004216f6d:	be 74 00 00 00       	mov    $0x74,%esi
  8004216f72:	48 bf 3b f8 21 04 80 	movabs $0x800421f83b,%rdi
  8004216f79:	00 00 00 
  8004216f7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f81:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216f88:	00 00 00 
  8004216f8b:	41 ff d0             	callq  *%r8
  8004216f8e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216f95:	00 00 00 
  8004216f98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216f9c:	48 01 d0             	add    %rdx,%rax
  8004216f9f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216fa3:	eb 4d                	jmp    8004216ff2 <mpsearch1+0x145>
  8004216fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216fa9:	ba 04 00 00 00       	mov    $0x4,%edx
  8004216fae:	48 be 4e f8 21 04 80 	movabs $0x800421f84e,%rsi
  8004216fb5:	00 00 00 
  8004216fb8:	48 89 c7             	mov    %rax,%rdi
  8004216fbb:	48 b8 69 0b 21 04 80 	movabs $0x8004210b69,%rax
  8004216fc2:	00 00 00 
  8004216fc5:	ff d0                	callq  *%rax
  8004216fc7:	85 c0                	test   %eax,%eax
  8004216fc9:	75 22                	jne    8004216fed <mpsearch1+0x140>
  8004216fcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216fcf:	be 10 00 00 00       	mov    $0x10,%esi
  8004216fd4:	48 89 c7             	mov    %rax,%rdi
  8004216fd7:	48 b8 67 6e 21 04 80 	movabs $0x8004216e67,%rax
  8004216fde:	00 00 00 
  8004216fe1:	ff d0                	callq  *%rax
  8004216fe3:	84 c0                	test   %al,%al
  8004216fe5:	75 06                	jne    8004216fed <mpsearch1+0x140>
  8004216fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216feb:	eb 14                	jmp    8004217001 <mpsearch1+0x154>
  8004216fed:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  8004216ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216ff6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004216ffa:	72 a9                	jb     8004216fa5 <mpsearch1+0xf8>
  8004216ffc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217001:	c9                   	leaveq 
  8004217002:	c3                   	retq   

0000008004217003 <mpsearch>:
  8004217003:	55                   	push   %rbp
  8004217004:	48 89 e5             	mov    %rsp,%rbp
  8004217007:	48 83 ec 30          	sub    $0x30,%rsp
  800421700b:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004217012:	00 
  8004217013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217017:	48 c1 e8 0c          	shr    $0xc,%rax
  800421701b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421701e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004217021:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004217028:	00 00 00 
  800421702b:	48 8b 00             	mov    (%rax),%rax
  800421702e:	48 39 c2             	cmp    %rax,%rdx
  8004217031:	72 32                	jb     8004217065 <mpsearch+0x62>
  8004217033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217037:	48 89 c1             	mov    %rax,%rcx
  800421703a:	48 ba 18 f8 21 04 80 	movabs $0x800421f818,%rdx
  8004217041:	00 00 00 
  8004217044:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004217049:	48 bf 3b f8 21 04 80 	movabs $0x800421f83b,%rdi
  8004217050:	00 00 00 
  8004217053:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217058:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421705f:	00 00 00 
  8004217062:	41 ff d0             	callq  *%r8
  8004217065:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421706c:	00 00 00 
  800421706f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217073:	48 01 d0             	add    %rdx,%rax
  8004217076:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421707a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421707e:	48 83 c0 0e          	add    $0xe,%rax
  8004217082:	0f b7 00             	movzwl (%rax),%eax
  8004217085:	0f b7 c0             	movzwl %ax,%eax
  8004217088:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421708b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421708f:	74 2c                	je     80042170bd <mpsearch+0xba>
  8004217091:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004217095:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217098:	be 00 04 00 00       	mov    $0x400,%esi
  800421709d:	48 89 c7             	mov    %rax,%rdi
  80042170a0:	48 b8 ad 6e 21 04 80 	movabs $0x8004216ead,%rax
  80042170a7:	00 00 00 
  80042170aa:	ff d0                	callq  *%rax
  80042170ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042170b0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042170b5:	74 49                	je     8004217100 <mpsearch+0xfd>
  80042170b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042170bb:	eb 59                	jmp    8004217116 <mpsearch+0x113>
  80042170bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042170c1:	48 83 c0 13          	add    $0x13,%rax
  80042170c5:	0f b7 00             	movzwl (%rax),%eax
  80042170c8:	0f b7 c0             	movzwl %ax,%eax
  80042170cb:	c1 e0 0a             	shl    $0xa,%eax
  80042170ce:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042170d1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042170d4:	2d 00 04 00 00       	sub    $0x400,%eax
  80042170d9:	89 c0                	mov    %eax,%eax
  80042170db:	be 00 04 00 00       	mov    $0x400,%esi
  80042170e0:	48 89 c7             	mov    %rax,%rdi
  80042170e3:	48 b8 ad 6e 21 04 80 	movabs $0x8004216ead,%rax
  80042170ea:	00 00 00 
  80042170ed:	ff d0                	callq  *%rax
  80042170ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042170f3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042170f8:	74 06                	je     8004217100 <mpsearch+0xfd>
  80042170fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042170fe:	eb 16                	jmp    8004217116 <mpsearch+0x113>
  8004217100:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217105:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  800421710a:	48 b8 ad 6e 21 04 80 	movabs $0x8004216ead,%rax
  8004217111:	00 00 00 
  8004217114:	ff d0                	callq  *%rax
  8004217116:	c9                   	leaveq 
  8004217117:	c3                   	retq   

0000008004217118 <mpconfig>:
  8004217118:	55                   	push   %rbp
  8004217119:	48 89 e5             	mov    %rsp,%rbp
  800421711c:	48 83 ec 30          	sub    $0x30,%rsp
  8004217120:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004217124:	48 b8 03 70 21 04 80 	movabs $0x8004217003,%rax
  800421712b:	00 00 00 
  800421712e:	ff d0                	callq  *%rax
  8004217130:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217134:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217139:	75 0a                	jne    8004217145 <mpconfig+0x2d>
  800421713b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217140:	e9 f6 01 00 00       	jmpq   800421733b <mpconfig+0x223>
  8004217145:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217149:	8b 40 04             	mov    0x4(%rax),%eax
  800421714c:	85 c0                	test   %eax,%eax
  800421714e:	74 0c                	je     800421715c <mpconfig+0x44>
  8004217150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217154:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004217158:	84 c0                	test   %al,%al
  800421715a:	74 25                	je     8004217181 <mpconfig+0x69>
  800421715c:	48 bf 58 f8 21 04 80 	movabs $0x800421f858,%rdi
  8004217163:	00 00 00 
  8004217166:	b8 00 00 00 00       	mov    $0x0,%eax
  800421716b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217172:	00 00 00 
  8004217175:	ff d2                	callq  *%rdx
  8004217177:	b8 00 00 00 00       	mov    $0x0,%eax
  800421717c:	e9 ba 01 00 00       	jmpq   800421733b <mpconfig+0x223>
  8004217181:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217185:	8b 40 04             	mov    0x4(%rax),%eax
  8004217188:	89 c0                	mov    %eax,%eax
  800421718a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421718e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217192:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217196:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217199:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421719c:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042171a3:	00 00 00 
  80042171a6:	48 8b 00             	mov    (%rax),%rax
  80042171a9:	48 39 c2             	cmp    %rax,%rdx
  80042171ac:	72 32                	jb     80042171e0 <mpconfig+0xc8>
  80042171ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042171b2:	48 89 c1             	mov    %rax,%rcx
  80042171b5:	48 ba 18 f8 21 04 80 	movabs $0x800421f818,%rdx
  80042171bc:	00 00 00 
  80042171bf:	be ad 00 00 00       	mov    $0xad,%esi
  80042171c4:	48 bf 3b f8 21 04 80 	movabs $0x800421f83b,%rdi
  80042171cb:	00 00 00 
  80042171ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042171d3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042171da:	00 00 00 
  80042171dd:	41 ff d0             	callq  *%r8
  80042171e0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042171e7:	00 00 00 
  80042171ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042171ee:	48 01 d0             	add    %rdx,%rax
  80042171f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042171f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171f9:	ba 04 00 00 00       	mov    $0x4,%edx
  80042171fe:	48 be 85 f8 21 04 80 	movabs $0x800421f885,%rsi
  8004217205:	00 00 00 
  8004217208:	48 89 c7             	mov    %rax,%rdi
  800421720b:	48 b8 69 0b 21 04 80 	movabs $0x8004210b69,%rax
  8004217212:	00 00 00 
  8004217215:	ff d0                	callq  *%rax
  8004217217:	85 c0                	test   %eax,%eax
  8004217219:	74 25                	je     8004217240 <mpconfig+0x128>
  800421721b:	48 bf 90 f8 21 04 80 	movabs $0x800421f890,%rdi
  8004217222:	00 00 00 
  8004217225:	b8 00 00 00 00       	mov    $0x0,%eax
  800421722a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217231:	00 00 00 
  8004217234:	ff d2                	callq  *%rdx
  8004217236:	b8 00 00 00 00       	mov    $0x0,%eax
  800421723b:	e9 fb 00 00 00       	jmpq   800421733b <mpconfig+0x223>
  8004217240:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217244:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004217248:	0f b7 d0             	movzwl %ax,%edx
  800421724b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421724f:	89 d6                	mov    %edx,%esi
  8004217251:	48 89 c7             	mov    %rax,%rdi
  8004217254:	48 b8 67 6e 21 04 80 	movabs $0x8004216e67,%rax
  800421725b:	00 00 00 
  800421725e:	ff d0                	callq  *%rax
  8004217260:	84 c0                	test   %al,%al
  8004217262:	74 25                	je     8004217289 <mpconfig+0x171>
  8004217264:	48 bf c8 f8 21 04 80 	movabs $0x800421f8c8,%rdi
  800421726b:	00 00 00 
  800421726e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217273:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421727a:	00 00 00 
  800421727d:	ff d2                	callq  *%rdx
  800421727f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217284:	e9 b2 00 00 00       	jmpq   800421733b <mpconfig+0x223>
  8004217289:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421728d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217291:	3c 01                	cmp    $0x1,%al
  8004217293:	74 3b                	je     80042172d0 <mpconfig+0x1b8>
  8004217295:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217299:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  800421729d:	3c 04                	cmp    $0x4,%al
  800421729f:	74 2f                	je     80042172d0 <mpconfig+0x1b8>
  80042172a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042172a5:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042172a9:	0f b6 c0             	movzbl %al,%eax
  80042172ac:	89 c6                	mov    %eax,%esi
  80042172ae:	48 bf f0 f8 21 04 80 	movabs $0x800421f8f0,%rdi
  80042172b5:	00 00 00 
  80042172b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042172bd:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042172c4:	00 00 00 
  80042172c7:	ff d2                	callq  *%rdx
  80042172c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042172ce:	eb 6b                	jmp    800421733b <mpconfig+0x223>
  80042172d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042172d4:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  80042172d8:	0f b7 c0             	movzwl %ax,%eax
  80042172db:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042172df:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  80042172e3:	0f b7 ca             	movzwl %dx,%ecx
  80042172e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042172ea:	48 01 ca             	add    %rcx,%rdx
  80042172ed:	89 c6                	mov    %eax,%esi
  80042172ef:	48 89 d7             	mov    %rdx,%rdi
  80042172f2:	48 b8 67 6e 21 04 80 	movabs $0x8004216e67,%rax
  80042172f9:	00 00 00 
  80042172fc:	ff d0                	callq  *%rax
  80042172fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217302:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  8004217306:	38 d0                	cmp    %dl,%al
  8004217308:	74 22                	je     800421732c <mpconfig+0x214>
  800421730a:	48 bf 10 f9 21 04 80 	movabs $0x800421f910,%rdi
  8004217311:	00 00 00 
  8004217314:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217319:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217320:	00 00 00 
  8004217323:	ff d2                	callq  *%rdx
  8004217325:	b8 00 00 00 00       	mov    $0x0,%eax
  800421732a:	eb 0f                	jmp    800421733b <mpconfig+0x223>
  800421732c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217330:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004217334:	48 89 10             	mov    %rdx,(%rax)
  8004217337:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421733b:	c9                   	leaveq 
  800421733c:	c3                   	retq   

000000800421733d <mp_init>:
  800421733d:	55                   	push   %rbp
  800421733e:	48 89 e5             	mov    %rsp,%rbp
  8004217341:	53                   	push   %rbx
  8004217342:	48 83 ec 58          	sub    $0x58,%rsp
  8004217346:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  800421734d:	00 00 00 
  8004217350:	48 bb 20 c0 6d 04 80 	movabs $0x80046dc020,%rbx
  8004217357:	00 00 00 
  800421735a:	48 89 18             	mov    %rbx,(%rax)
  800421735d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217361:	48 89 c7             	mov    %rax,%rdi
  8004217364:	48 b8 18 71 21 04 80 	movabs $0x8004217118,%rax
  800421736b:	00 00 00 
  800421736e:	ff d0                	callq  *%rax
  8004217370:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217374:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217379:	75 05                	jne    8004217380 <mp_init+0x43>
  800421737b:	e9 d2 03 00 00       	jmpq   8004217752 <mp_init+0x415>
  8004217380:	48 b8 00 c0 6d 04 80 	movabs $0x80046dc000,%rax
  8004217387:	00 00 00 
  800421738a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217390:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217394:	8b 40 24             	mov    0x24(%rax),%eax
  8004217397:	89 c2                	mov    %eax,%edx
  8004217399:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  80042173a0:	00 00 00 
  80042173a3:	48 89 10             	mov    %rdx,(%rax)
  80042173a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042173aa:	48 83 c0 2c          	add    $0x2c,%rax
  80042173ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042173b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042173b9:	e9 17 02 00 00       	jmpq   80042175d5 <mp_init+0x298>
  80042173be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173c2:	0f b6 00             	movzbl (%rax),%eax
  80042173c5:	0f b6 c0             	movzbl %al,%eax
  80042173c8:	85 c0                	test   %eax,%eax
  80042173ca:	74 16                	je     80042173e2 <mp_init+0xa5>
  80042173cc:	85 c0                	test   %eax,%eax
  80042173ce:	0f 88 b8 01 00 00    	js     800421758c <mp_init+0x24f>
  80042173d4:	83 f8 04             	cmp    $0x4,%eax
  80042173d7:	0f 8f af 01 00 00    	jg     800421758c <mp_init+0x24f>
  80042173dd:	e9 a3 01 00 00       	jmpq   8004217585 <mp_init+0x248>
  80042173e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042173ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042173ee:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042173f2:	0f b6 c0             	movzbl %al,%eax
  80042173f5:	83 e0 02             	and    $0x2,%eax
  80042173f8:	85 c0                	test   %eax,%eax
  80042173fa:	74 51                	je     800421744d <mp_init+0x110>
  80042173fc:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217403:	00 00 00 
  8004217406:	8b 00                	mov    (%rax),%eax
  8004217408:	48 98                	cltq   
  800421740a:	48 c1 e0 03          	shl    $0x3,%rax
  800421740e:	48 89 c2             	mov    %rax,%rdx
  8004217411:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217415:	48 01 d0             	add    %rdx,%rax
  8004217418:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421741f:	00 00 00 
  8004217422:	48 01 c2             	add    %rax,%rdx
  8004217425:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  800421742c:	00 00 00 
  800421742f:	48 89 10             	mov    %rdx,(%rax)
  8004217432:	48 bf 3d f9 21 04 80 	movabs $0x800421f93d,%rdi
  8004217439:	00 00 00 
  800421743c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217441:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217448:	00 00 00 
  800421744b:	ff d2                	callq  *%rdx
  800421744d:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217454:	00 00 00 
  8004217457:	8b 00                	mov    (%rax),%eax
  8004217459:	83 f8 03             	cmp    $0x3,%eax
  800421745c:	0f 8f f4 00 00 00    	jg     8004217556 <mp_init+0x219>
  8004217462:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217466:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  800421746a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421746e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217472:	0f b6 f0             	movzbl %al,%esi
  8004217475:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217479:	8b 78 08             	mov    0x8(%rax),%edi
  800421747c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217480:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004217484:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217488:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  800421748c:	0f b6 c8             	movzbl %al,%ecx
  800421748f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217493:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217497:	0f b6 d0             	movzbl %al,%edx
  800421749a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421749e:	0f b6 00             	movzbl (%rax),%eax
  80042174a1:	0f b6 c0             	movzbl %al,%eax
  80042174a4:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042174a9:	89 34 24             	mov    %esi,(%rsp)
  80042174ac:	41 89 f9             	mov    %edi,%r9d
  80042174af:	4d 89 d0             	mov    %r10,%r8
  80042174b2:	89 c6                	mov    %eax,%esi
  80042174b4:	48 bf 50 f9 21 04 80 	movabs $0x800421f950,%rdi
  80042174bb:	00 00 00 
  80042174be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174c3:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042174ca:	00 00 00 
  80042174cd:	41 ff d2             	callq  *%r10
  80042174d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042174d4:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042174d8:	0f b6 c0             	movzbl %al,%eax
  80042174db:	83 e0 01             	and    $0x1,%eax
  80042174de:	85 c0                	test   %eax,%eax
  80042174e0:	74 57                	je     8004217539 <mp_init+0x1fc>
  80042174e2:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042174e9:	00 00 00 
  80042174ec:	8b 30                	mov    (%rax),%esi
  80042174ee:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042174f5:	00 00 00 
  80042174f8:	8b 00                	mov    (%rax),%eax
  80042174fa:	89 c2                	mov    %eax,%edx
  80042174fc:	48 b9 20 c0 6d 04 80 	movabs $0x80046dc020,%rcx
  8004217503:	00 00 00 
  8004217506:	48 63 c6             	movslq %esi,%rax
  8004217509:	48 c1 e0 03          	shl    $0x3,%rax
  800421750d:	48 89 c6             	mov    %rax,%rsi
  8004217510:	48 c1 e6 04          	shl    $0x4,%rsi
  8004217514:	48 01 f0             	add    %rsi,%rax
  8004217517:	48 01 c8             	add    %rcx,%rax
  800421751a:	88 10                	mov    %dl,(%rax)
  800421751c:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217523:	00 00 00 
  8004217526:	8b 00                	mov    (%rax),%eax
  8004217528:	8d 50 01             	lea    0x1(%rax),%edx
  800421752b:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217532:	00 00 00 
  8004217535:	89 10                	mov    %edx,(%rax)
  8004217537:	eb 45                	jmp    800421757e <mp_init+0x241>
  8004217539:	48 bf a0 f9 21 04 80 	movabs $0x800421f9a0,%rdi
  8004217540:	00 00 00 
  8004217543:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217548:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421754f:	00 00 00 
  8004217552:	ff d2                	callq  *%rdx
  8004217554:	eb 28                	jmp    800421757e <mp_init+0x241>
  8004217556:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421755a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  800421755e:	0f b6 c0             	movzbl %al,%eax
  8004217561:	89 c6                	mov    %eax,%esi
  8004217563:	48 bf d0 f9 21 04 80 	movabs $0x800421f9d0,%rdi
  800421756a:	00 00 00 
  800421756d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217572:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217579:	00 00 00 
  800421757c:	ff d2                	callq  *%rdx
  800421757e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004217583:	eb 4c                	jmp    80042175d1 <mp_init+0x294>
  8004217585:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  800421758a:	eb 45                	jmp    80042175d1 <mp_init+0x294>
  800421758c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217590:	0f b6 00             	movzbl (%rax),%eax
  8004217593:	0f b6 c0             	movzbl %al,%eax
  8004217596:	89 c6                	mov    %eax,%esi
  8004217598:	48 bf f8 f9 21 04 80 	movabs $0x800421f9f8,%rdi
  800421759f:	00 00 00 
  80042175a2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175a7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042175ae:	00 00 00 
  80042175b1:	ff d2                	callq  *%rdx
  80042175b3:	48 b8 00 c0 6d 04 80 	movabs $0x80046dc000,%rax
  80042175ba:	00 00 00 
  80042175bd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042175c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042175c7:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  80042175cb:	0f b7 c0             	movzwl %ax,%eax
  80042175ce:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042175d1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  80042175d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042175d9:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  80042175dd:	0f b7 c0             	movzwl %ax,%eax
  80042175e0:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042175e3:	0f 87 d5 fd ff ff    	ja     80042173be <mp_init+0x81>
  80042175e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042175f0:	eb 53                	jmp    8004217645 <mp_init+0x308>
  80042175f2:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042175f9:	00 00 00 
  80042175fc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042175ff:	48 c1 e0 03          	shl    $0x3,%rax
  8004217603:	48 89 c1             	mov    %rax,%rcx
  8004217606:	48 c1 e1 04          	shl    $0x4,%rcx
  800421760a:	48 01 c8             	add    %rcx,%rax
  800421760d:	48 01 d0             	add    %rdx,%rax
  8004217610:	48 83 c0 70          	add    $0x70,%rax
  8004217614:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217618:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421761f:	00 00 00 
  8004217622:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217625:	48 c1 e0 03          	shl    $0x3,%rax
  8004217629:	48 89 c1             	mov    %rax,%rcx
  800421762c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217630:	48 01 c8             	add    %rcx,%rax
  8004217633:	48 01 d0             	add    %rdx,%rax
  8004217636:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421763a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217641:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217645:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217649:	76 a7                	jbe    80042175f2 <mp_init+0x2b5>
  800421764b:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  8004217652:	00 00 00 
  8004217655:	48 8b 00             	mov    (%rax),%rax
  8004217658:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  800421765f:	48 b8 00 c0 6d 04 80 	movabs $0x80046dc000,%rax
  8004217666:	00 00 00 
  8004217669:	8b 00                	mov    (%rax),%eax
  800421766b:	85 c0                	test   %eax,%eax
  800421766d:	75 41                	jne    80042176b0 <mp_init+0x373>
  800421766f:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217676:	00 00 00 
  8004217679:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  800421767f:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  8004217686:	00 00 00 
  8004217689:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217690:	48 bf 18 fa 21 04 80 	movabs $0x800421fa18,%rdi
  8004217697:	00 00 00 
  800421769a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421769f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042176a6:	00 00 00 
  80042176a9:	ff d2                	callq  *%rdx
  80042176ab:	e9 a2 00 00 00       	jmpq   8004217752 <mp_init+0x415>
  80042176b0:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042176b7:	00 00 00 
  80042176ba:	8b 10                	mov    (%rax),%edx
  80042176bc:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  80042176c3:	00 00 00 
  80042176c6:	48 8b 00             	mov    (%rax),%rax
  80042176c9:	0f b6 00             	movzbl (%rax),%eax
  80042176cc:	0f b6 c0             	movzbl %al,%eax
  80042176cf:	89 c6                	mov    %eax,%esi
  80042176d1:	48 bf 44 fa 21 04 80 	movabs $0x800421fa44,%rdi
  80042176d8:	00 00 00 
  80042176db:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176e0:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042176e7:	00 00 00 
  80042176ea:	ff d1                	callq  *%rcx
  80042176ec:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042176f0:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042176f4:	84 c0                	test   %al,%al
  80042176f6:	74 5a                	je     8004217752 <mp_init+0x415>
  80042176f8:	48 bf 68 fa 21 04 80 	movabs $0x800421fa68,%rdi
  80042176ff:	00 00 00 
  8004217702:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217707:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421770e:	00 00 00 
  8004217711:	ff d2                	callq  *%rdx
  8004217713:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  800421771a:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421771e:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004217722:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217725:	ee                   	out    %al,(%dx)
  8004217726:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800421772d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217730:	89 c2                	mov    %eax,%edx
  8004217732:	ec                   	in     (%dx),%al
  8004217733:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004217736:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  800421773a:	83 c8 01             	or     $0x1,%eax
  800421773d:	0f b6 c0             	movzbl %al,%eax
  8004217740:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004217747:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800421774a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  800421774e:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217751:	ee                   	out    %al,(%dx)
  8004217752:	48 83 c4 58          	add    $0x58,%rsp
  8004217756:	5b                   	pop    %rbx
  8004217757:	5d                   	pop    %rbp
  8004217758:	c3                   	retq   

0000008004217759 <lapicw>:
  8004217759:	55                   	push   %rbp
  800421775a:	48 89 e5             	mov    %rsp,%rbp
  800421775d:	48 83 ec 08          	sub    $0x8,%rsp
  8004217761:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217764:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217767:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421776e:	00 00 00 
  8004217771:	48 8b 00             	mov    (%rax),%rax
  8004217774:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217777:	48 63 d2             	movslq %edx,%rdx
  800421777a:	48 c1 e2 02          	shl    $0x2,%rdx
  800421777e:	48 01 c2             	add    %rax,%rdx
  8004217781:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217784:	89 02                	mov    %eax,(%rdx)
  8004217786:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421778d:	00 00 00 
  8004217790:	48 8b 00             	mov    (%rax),%rax
  8004217793:	48 83 c0 20          	add    $0x20,%rax
  8004217797:	8b 00                	mov    (%rax),%eax
  8004217799:	c9                   	leaveq 
  800421779a:	c3                   	retq   

000000800421779b <lapic_init>:
  800421779b:	55                   	push   %rbp
  800421779c:	48 89 e5             	mov    %rsp,%rbp
  800421779f:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  80042177a6:	00 00 00 
  80042177a9:	48 8b 00             	mov    (%rax),%rax
  80042177ac:	48 85 c0             	test   %rax,%rax
  80042177af:	75 05                	jne    80042177b6 <lapic_init+0x1b>
  80042177b1:	e9 da 01 00 00       	jmpq   8004217990 <lapic_init+0x1f5>
  80042177b6:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  80042177bd:	00 00 00 
  80042177c0:	48 8b 00             	mov    (%rax),%rax
  80042177c3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042177c8:	48 89 c7             	mov    %rax,%rdi
  80042177cb:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042177d2:	00 00 00 
  80042177d5:	ff d0                	callq  *%rax
  80042177d7:	48 ba 08 d0 71 04 80 	movabs $0x800471d008,%rdx
  80042177de:	00 00 00 
  80042177e1:	48 89 02             	mov    %rax,(%rdx)
  80042177e4:	be 27 01 00 00       	mov    $0x127,%esi
  80042177e9:	bf 3c 00 00 00       	mov    $0x3c,%edi
  80042177ee:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  80042177f5:	00 00 00 
  80042177f8:	ff d0                	callq  *%rax
  80042177fa:	be 0b 00 00 00       	mov    $0xb,%esi
  80042177ff:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004217804:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  800421780b:	00 00 00 
  800421780e:	ff d0                	callq  *%rax
  8004217810:	be 20 00 02 00       	mov    $0x20020,%esi
  8004217815:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421781a:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217821:	00 00 00 
  8004217824:	ff d0                	callq  *%rax
  8004217826:	be 80 96 98 00       	mov    $0x989680,%esi
  800421782b:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217830:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217837:	00 00 00 
  800421783a:	ff d0                	callq  *%rax
  800421783c:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004217843:	00 00 00 
  8004217846:	ff d0                	callq  *%rax
  8004217848:	48 98                	cltq   
  800421784a:	48 c1 e0 03          	shl    $0x3,%rax
  800421784e:	48 89 c2             	mov    %rax,%rdx
  8004217851:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217855:	48 01 d0             	add    %rdx,%rax
  8004217858:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421785f:	00 00 00 
  8004217862:	48 01 c2             	add    %rax,%rdx
  8004217865:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  800421786c:	00 00 00 
  800421786f:	48 8b 00             	mov    (%rax),%rax
  8004217872:	48 39 c2             	cmp    %rax,%rdx
  8004217875:	74 16                	je     800421788d <lapic_init+0xf2>
  8004217877:	be 00 00 01 00       	mov    $0x10000,%esi
  800421787c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217881:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217888:	00 00 00 
  800421788b:	ff d0                	callq  *%rax
  800421788d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217892:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217897:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  800421789e:	00 00 00 
  80042178a1:	ff d0                	callq  *%rax
  80042178a3:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  80042178aa:	00 00 00 
  80042178ad:	48 8b 00             	mov    (%rax),%rax
  80042178b0:	48 83 c0 30          	add    $0x30,%rax
  80042178b4:	8b 00                	mov    (%rax),%eax
  80042178b6:	c1 e8 10             	shr    $0x10,%eax
  80042178b9:	0f b6 c0             	movzbl %al,%eax
  80042178bc:	83 f8 03             	cmp    $0x3,%eax
  80042178bf:	76 16                	jbe    80042178d7 <lapic_init+0x13c>
  80042178c1:	be 00 00 01 00       	mov    $0x10000,%esi
  80042178c6:	bf d0 00 00 00       	mov    $0xd0,%edi
  80042178cb:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  80042178d2:	00 00 00 
  80042178d5:	ff d0                	callq  *%rax
  80042178d7:	be 33 00 00 00       	mov    $0x33,%esi
  80042178dc:	bf dc 00 00 00       	mov    $0xdc,%edi
  80042178e1:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  80042178e8:	00 00 00 
  80042178eb:	ff d0                	callq  *%rax
  80042178ed:	be 00 00 00 00       	mov    $0x0,%esi
  80042178f2:	bf a0 00 00 00       	mov    $0xa0,%edi
  80042178f7:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  80042178fe:	00 00 00 
  8004217901:	ff d0                	callq  *%rax
  8004217903:	be 00 00 00 00       	mov    $0x0,%esi
  8004217908:	bf a0 00 00 00       	mov    $0xa0,%edi
  800421790d:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217914:	00 00 00 
  8004217917:	ff d0                	callq  *%rax
  8004217919:	be 00 00 00 00       	mov    $0x0,%esi
  800421791e:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217923:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  800421792a:	00 00 00 
  800421792d:	ff d0                	callq  *%rax
  800421792f:	be 00 00 00 00       	mov    $0x0,%esi
  8004217934:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217939:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217940:	00 00 00 
  8004217943:	ff d0                	callq  *%rax
  8004217945:	be 00 85 08 00       	mov    $0x88500,%esi
  800421794a:	bf c0 00 00 00       	mov    $0xc0,%edi
  800421794f:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217956:	00 00 00 
  8004217959:	ff d0                	callq  *%rax
  800421795b:	90                   	nop
  800421795c:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  8004217963:	00 00 00 
  8004217966:	48 8b 00             	mov    (%rax),%rax
  8004217969:	48 05 00 03 00 00    	add    $0x300,%rax
  800421796f:	8b 00                	mov    (%rax),%eax
  8004217971:	25 00 10 00 00       	and    $0x1000,%eax
  8004217976:	85 c0                	test   %eax,%eax
  8004217978:	75 e2                	jne    800421795c <lapic_init+0x1c1>
  800421797a:	be 00 00 00 00       	mov    $0x0,%esi
  800421797f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217984:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  800421798b:	00 00 00 
  800421798e:	ff d0                	callq  *%rax
  8004217990:	5d                   	pop    %rbp
  8004217991:	c3                   	retq   

0000008004217992 <cpunum>:
  8004217992:	55                   	push   %rbp
  8004217993:	48 89 e5             	mov    %rsp,%rbp
  8004217996:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421799d:	00 00 00 
  80042179a0:	48 8b 00             	mov    (%rax),%rax
  80042179a3:	48 85 c0             	test   %rax,%rax
  80042179a6:	74 18                	je     80042179c0 <cpunum+0x2e>
  80042179a8:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  80042179af:	00 00 00 
  80042179b2:	48 8b 00             	mov    (%rax),%rax
  80042179b5:	48 83 c0 20          	add    $0x20,%rax
  80042179b9:	8b 00                	mov    (%rax),%eax
  80042179bb:	c1 e8 18             	shr    $0x18,%eax
  80042179be:	eb 05                	jmp    80042179c5 <cpunum+0x33>
  80042179c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179c5:	5d                   	pop    %rbp
  80042179c6:	c3                   	retq   

00000080042179c7 <lapic_eoi>:
  80042179c7:	55                   	push   %rbp
  80042179c8:	48 89 e5             	mov    %rsp,%rbp
  80042179cb:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  80042179d2:	00 00 00 
  80042179d5:	48 8b 00             	mov    (%rax),%rax
  80042179d8:	48 85 c0             	test   %rax,%rax
  80042179db:	74 16                	je     80042179f3 <lapic_eoi+0x2c>
  80042179dd:	be 00 00 00 00       	mov    $0x0,%esi
  80042179e2:	bf 2c 00 00 00       	mov    $0x2c,%edi
  80042179e7:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  80042179ee:	00 00 00 
  80042179f1:	ff d0                	callq  *%rax
  80042179f3:	5d                   	pop    %rbp
  80042179f4:	c3                   	retq   

00000080042179f5 <microdelay>:
  80042179f5:	55                   	push   %rbp
  80042179f6:	48 89 e5             	mov    %rsp,%rbp
  80042179f9:	48 83 ec 04          	sub    $0x4,%rsp
  80042179fd:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217a00:	c9                   	leaveq 
  8004217a01:	c3                   	retq   

0000008004217a02 <lapic_startap>:
  8004217a02:	55                   	push   %rbp
  8004217a03:	48 89 e5             	mov    %rsp,%rbp
  8004217a06:	48 83 ec 40          	sub    $0x40,%rsp
  8004217a0a:	89 f8                	mov    %edi,%eax
  8004217a0c:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004217a0f:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217a12:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217a19:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004217a1d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217a21:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217a24:	ee                   	out    %al,(%dx)
  8004217a25:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  8004217a2c:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217a30:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217a34:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217a37:	ee                   	out    %al,(%dx)
  8004217a38:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  8004217a3f:	00 
  8004217a40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a44:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217a48:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217a4b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217a4e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004217a55:	00 00 00 
  8004217a58:	48 8b 00             	mov    (%rax),%rax
  8004217a5b:	48 39 c2             	cmp    %rax,%rdx
  8004217a5e:	72 32                	jb     8004217a92 <lapic_startap+0x90>
  8004217a60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a64:	48 89 c1             	mov    %rax,%rcx
  8004217a67:	48 ba b0 fa 21 04 80 	movabs $0x800421fab0,%rdx
  8004217a6e:	00 00 00 
  8004217a71:	be 99 00 00 00       	mov    $0x99,%esi
  8004217a76:	48 bf d3 fa 21 04 80 	movabs $0x800421fad3,%rdi
  8004217a7d:	00 00 00 
  8004217a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217a8c:	00 00 00 
  8004217a8f:	41 ff d0             	callq  *%r8
  8004217a92:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217a99:	00 00 00 
  8004217a9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217aa0:	48 01 d0             	add    %rdx,%rax
  8004217aa3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217aa7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217aab:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217ab0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217ab4:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217ab8:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217abb:	c1 e8 04             	shr    $0x4,%eax
  8004217abe:	66 89 02             	mov    %ax,(%rdx)
  8004217ac1:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217ac5:	c1 e0 18             	shl    $0x18,%eax
  8004217ac8:	89 c6                	mov    %eax,%esi
  8004217aca:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217acf:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217ad6:	00 00 00 
  8004217ad9:	ff d0                	callq  *%rax
  8004217adb:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217ae0:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217ae5:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217aec:	00 00 00 
  8004217aef:	ff d0                	callq  *%rax
  8004217af1:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217af6:	48 b8 f5 79 21 04 80 	movabs $0x80042179f5,%rax
  8004217afd:	00 00 00 
  8004217b00:	ff d0                	callq  *%rax
  8004217b02:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217b07:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217b0c:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217b13:	00 00 00 
  8004217b16:	ff d0                	callq  *%rax
  8004217b18:	bf 64 00 00 00       	mov    $0x64,%edi
  8004217b1d:	48 b8 f5 79 21 04 80 	movabs $0x80042179f5,%rax
  8004217b24:	00 00 00 
  8004217b27:	ff d0                	callq  *%rax
  8004217b29:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217b30:	eb 4b                	jmp    8004217b7d <lapic_startap+0x17b>
  8004217b32:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217b36:	c1 e0 18             	shl    $0x18,%eax
  8004217b39:	89 c6                	mov    %eax,%esi
  8004217b3b:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217b40:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217b47:	00 00 00 
  8004217b4a:	ff d0                	callq  *%rax
  8004217b4c:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217b4f:	c1 e8 0c             	shr    $0xc,%eax
  8004217b52:	80 cc 06             	or     $0x6,%ah
  8004217b55:	89 c6                	mov    %eax,%esi
  8004217b57:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217b5c:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217b63:	00 00 00 
  8004217b66:	ff d0                	callq  *%rax
  8004217b68:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217b6d:	48 b8 f5 79 21 04 80 	movabs $0x80042179f5,%rax
  8004217b74:	00 00 00 
  8004217b77:	ff d0                	callq  *%rax
  8004217b79:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217b7d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217b81:	7e af                	jle    8004217b32 <lapic_startap+0x130>
  8004217b83:	c9                   	leaveq 
  8004217b84:	c3                   	retq   

0000008004217b85 <lapic_ipi>:
  8004217b85:	55                   	push   %rbp
  8004217b86:	48 89 e5             	mov    %rsp,%rbp
  8004217b89:	48 83 ec 08          	sub    $0x8,%rsp
  8004217b8d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217b90:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217b93:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217b98:	89 c6                	mov    %eax,%esi
  8004217b9a:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217b9f:	48 b8 59 77 21 04 80 	movabs $0x8004217759,%rax
  8004217ba6:	00 00 00 
  8004217ba9:	ff d0                	callq  *%rax
  8004217bab:	90                   	nop
  8004217bac:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  8004217bb3:	00 00 00 
  8004217bb6:	48 8b 00             	mov    (%rax),%rax
  8004217bb9:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217bbf:	8b 00                	mov    (%rax),%eax
  8004217bc1:	25 00 10 00 00       	and    $0x1000,%eax
  8004217bc6:	85 c0                	test   %eax,%eax
  8004217bc8:	75 e2                	jne    8004217bac <lapic_ipi+0x27>
  8004217bca:	c9                   	leaveq 
  8004217bcb:	c3                   	retq   

0000008004217bcc <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004217bcc:	55                   	push   %rbp
  8004217bcd:	48 89 e5             	mov    %rsp,%rbp
  8004217bd0:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217bd4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217bd8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004217bdb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004217bdf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217be2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004217be6:	f0 87 02             	lock xchg %eax,(%rdx)
  8004217be9:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004217bec:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004217bef:	c9                   	leaveq 
  8004217bf0:	c3                   	retq   

0000008004217bf1 <get_caller_pcs>:
  8004217bf1:	55                   	push   %rbp
  8004217bf2:	48 89 e5             	mov    %rsp,%rbp
  8004217bf5:	48 83 ec 28          	sub    $0x28,%rsp
  8004217bf9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004217bfd:	48 89 e8             	mov    %rbp,%rax
  8004217c00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217c04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217c0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217c13:	eb 45                	jmp    8004217c5a <get_caller_pcs+0x69>
  8004217c15:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217c1a:	74 44                	je     8004217c60 <get_caller_pcs+0x6f>
  8004217c1c:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217c23:	00 00 00 
  8004217c26:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004217c2a:	76 34                	jbe    8004217c60 <get_caller_pcs+0x6f>
  8004217c2c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217c2f:	48 98                	cltq   
  8004217c31:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217c38:	00 
  8004217c39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217c3d:	48 01 c2             	add    %rax,%rdx
  8004217c40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217c44:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217c48:	48 89 02             	mov    %rax,(%rdx)
  8004217c4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217c4f:	48 8b 00             	mov    (%rax),%rax
  8004217c52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217c56:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217c5a:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217c5e:	7e b5                	jle    8004217c15 <get_caller_pcs+0x24>
  8004217c60:	eb 1f                	jmp    8004217c81 <get_caller_pcs+0x90>
  8004217c62:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217c65:	48 98                	cltq   
  8004217c67:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217c6e:	00 
  8004217c6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217c73:	48 01 d0             	add    %rdx,%rax
  8004217c76:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217c7d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217c81:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217c85:	7e db                	jle    8004217c62 <get_caller_pcs+0x71>
  8004217c87:	c9                   	leaveq 
  8004217c88:	c3                   	retq   

0000008004217c89 <holding>:
  8004217c89:	55                   	push   %rbp
  8004217c8a:	48 89 e5             	mov    %rsp,%rbp
  8004217c8d:	53                   	push   %rbx
  8004217c8e:	48 83 ec 18          	sub    $0x18,%rsp
  8004217c92:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217c96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c9a:	8b 00                	mov    (%rax),%eax
  8004217c9c:	85 c0                	test   %eax,%eax
  8004217c9e:	74 3d                	je     8004217cdd <holding+0x54>
  8004217ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ca4:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217ca8:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004217caf:	00 00 00 
  8004217cb2:	ff d0                	callq  *%rax
  8004217cb4:	48 98                	cltq   
  8004217cb6:	48 c1 e0 03          	shl    $0x3,%rax
  8004217cba:	48 89 c2             	mov    %rax,%rdx
  8004217cbd:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217cc1:	48 01 d0             	add    %rdx,%rax
  8004217cc4:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004217ccb:	00 00 00 
  8004217cce:	48 01 d0             	add    %rdx,%rax
  8004217cd1:	48 39 c3             	cmp    %rax,%rbx
  8004217cd4:	75 07                	jne    8004217cdd <holding+0x54>
  8004217cd6:	b8 01 00 00 00       	mov    $0x1,%eax
  8004217cdb:	eb 05                	jmp    8004217ce2 <holding+0x59>
  8004217cdd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ce2:	48 83 c4 18          	add    $0x18,%rsp
  8004217ce6:	5b                   	pop    %rbx
  8004217ce7:	5d                   	pop    %rbp
  8004217ce8:	c3                   	retq   

0000008004217ce9 <__spin_initlock>:
  8004217ce9:	55                   	push   %rbp
  8004217cea:	48 89 e5             	mov    %rsp,%rbp
  8004217ced:	48 83 ec 10          	sub    $0x10,%rsp
  8004217cf1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217cf5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217cf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217cfd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217d03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217d07:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004217d0b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004217d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217d13:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217d1a:	00 
  8004217d1b:	c9                   	leaveq 
  8004217d1c:	c3                   	retq   

0000008004217d1d <spin_lock>:
  8004217d1d:	55                   	push   %rbp
  8004217d1e:	48 89 e5             	mov    %rsp,%rbp
  8004217d21:	53                   	push   %rbx
  8004217d22:	48 83 ec 18          	sub    $0x18,%rsp
  8004217d26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217d2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d2e:	48 89 c7             	mov    %rax,%rdi
  8004217d31:	48 b8 89 7c 21 04 80 	movabs $0x8004217c89,%rax
  8004217d38:	00 00 00 
  8004217d3b:	ff d0                	callq  *%rax
  8004217d3d:	85 c0                	test   %eax,%eax
  8004217d3f:	74 44                	je     8004217d85 <spin_lock+0x68>
  8004217d41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d45:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217d49:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004217d50:	00 00 00 
  8004217d53:	ff d0                	callq  *%rax
  8004217d55:	49 89 d8             	mov    %rbx,%r8
  8004217d58:	89 c1                	mov    %eax,%ecx
  8004217d5a:	48 ba f8 fa 21 04 80 	movabs $0x800421faf8,%rdx
  8004217d61:	00 00 00 
  8004217d64:	be 42 00 00 00       	mov    $0x42,%esi
  8004217d69:	48 bf 22 fb 21 04 80 	movabs $0x800421fb22,%rdi
  8004217d70:	00 00 00 
  8004217d73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d78:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  8004217d7f:	00 00 00 
  8004217d82:	41 ff d1             	callq  *%r9
  8004217d85:	eb 02                	jmp    8004217d89 <spin_lock+0x6c>
  8004217d87:	f3 90                	pause  
  8004217d89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d8d:	be 01 00 00 00       	mov    $0x1,%esi
  8004217d92:	48 89 c7             	mov    %rax,%rdi
  8004217d95:	48 b8 cc 7b 21 04 80 	movabs $0x8004217bcc,%rax
  8004217d9c:	00 00 00 
  8004217d9f:	ff d0                	callq  *%rax
  8004217da1:	85 c0                	test   %eax,%eax
  8004217da3:	75 e2                	jne    8004217d87 <spin_lock+0x6a>
  8004217da5:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004217dac:	00 00 00 
  8004217daf:	ff d0                	callq  *%rax
  8004217db1:	48 98                	cltq   
  8004217db3:	48 c1 e0 03          	shl    $0x3,%rax
  8004217db7:	48 89 c2             	mov    %rax,%rdx
  8004217dba:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217dbe:	48 01 d0             	add    %rdx,%rax
  8004217dc1:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004217dc8:	00 00 00 
  8004217dcb:	48 01 c2             	add    %rax,%rdx
  8004217dce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217dd2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004217dd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217dda:	48 83 c0 18          	add    $0x18,%rax
  8004217dde:	48 89 c7             	mov    %rax,%rdi
  8004217de1:	48 b8 f1 7b 21 04 80 	movabs $0x8004217bf1,%rax
  8004217de8:	00 00 00 
  8004217deb:	ff d0                	callq  *%rax
  8004217ded:	48 83 c4 18          	add    $0x18,%rsp
  8004217df1:	5b                   	pop    %rbx
  8004217df2:	5d                   	pop    %rbp
  8004217df3:	c3                   	retq   

0000008004217df4 <spin_unlock>:
  8004217df4:	55                   	push   %rbp
  8004217df5:	48 89 e5             	mov    %rsp,%rbp
  8004217df8:	41 54                	push   %r12
  8004217dfa:	53                   	push   %rbx
  8004217dfb:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004217e02:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004217e09:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e10:	48 89 c7             	mov    %rax,%rdi
  8004217e13:	48 b8 89 7c 21 04 80 	movabs $0x8004217c89,%rax
  8004217e1a:	00 00 00 
  8004217e1d:	ff d0                	callq  *%rax
  8004217e1f:	85 c0                	test   %eax,%eax
  8004217e21:	0f 85 d2 01 00 00    	jne    8004217ff9 <spin_unlock+0x205>
  8004217e27:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e2e:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004217e32:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004217e39:	ba 28 00 00 00       	mov    $0x28,%edx
  8004217e3e:	48 89 ce             	mov    %rcx,%rsi
  8004217e41:	48 89 c7             	mov    %rax,%rdi
  8004217e44:	48 b8 1e 0a 21 04 80 	movabs $0x8004210a1e,%rax
  8004217e4b:	00 00 00 
  8004217e4e:	ff d0                	callq  *%rax
  8004217e50:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e57:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217e5b:	48 85 c0             	test   %rax,%rax
  8004217e5e:	75 39                	jne    8004217e99 <spin_unlock+0xa5>
  8004217e60:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e67:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217e6b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004217e72:	00 00 00 
  8004217e75:	ff d0                	callq  *%rax
  8004217e77:	48 89 da             	mov    %rbx,%rdx
  8004217e7a:	89 c6                	mov    %eax,%esi
  8004217e7c:	48 bf 38 fb 21 04 80 	movabs $0x800421fb38,%rdi
  8004217e83:	00 00 00 
  8004217e86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e8b:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004217e92:	00 00 00 
  8004217e95:	ff d1                	callq  *%rcx
  8004217e97:	eb 4d                	jmp    8004217ee6 <spin_unlock+0xf2>
  8004217e99:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217ea0:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217ea4:	0f b6 00             	movzbl (%rax),%eax
  8004217ea7:	44 0f b6 e0          	movzbl %al,%r12d
  8004217eab:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217eb2:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217eb6:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  8004217ebd:	00 00 00 
  8004217ec0:	ff d0                	callq  *%rax
  8004217ec2:	44 89 e1             	mov    %r12d,%ecx
  8004217ec5:	48 89 da             	mov    %rbx,%rdx
  8004217ec8:	89 c6                	mov    %eax,%esi
  8004217eca:	48 bf 78 fb 21 04 80 	movabs $0x800421fb78,%rdi
  8004217ed1:	00 00 00 
  8004217ed4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ed9:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004217ee0:	00 00 00 
  8004217ee3:	41 ff d0             	callq  *%r8
  8004217ee6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004217eed:	e9 c3 00 00 00       	jmpq   8004217fb5 <spin_unlock+0x1c1>
  8004217ef2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217ef5:	48 98                	cltq   
  8004217ef7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217efe:	89 c0                	mov    %eax,%eax
  8004217f00:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  8004217f07:	48 89 d6             	mov    %rdx,%rsi
  8004217f0a:	48 89 c7             	mov    %rax,%rdi
  8004217f0d:	48 b8 ff f5 20 04 80 	movabs $0x800420f5ff,%rax
  8004217f14:	00 00 00 
  8004217f17:	ff d0                	callq  *%rax
  8004217f19:	85 c0                	test   %eax,%eax
  8004217f1b:	78 6b                	js     8004217f88 <spin_unlock+0x194>
  8004217f1d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f20:	48 98                	cltq   
  8004217f22:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217f29:	89 c2                	mov    %eax,%edx
  8004217f2b:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004217f32:	48 29 c2             	sub    %rax,%rdx
  8004217f35:	49 89 d0             	mov    %rdx,%r8
  8004217f38:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  8004217f3f:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004217f45:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  8004217f4b:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004217f52:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f55:	48 98                	cltq   
  8004217f57:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217f5e:	4c 89 04 24          	mov    %r8,(%rsp)
  8004217f62:	49 89 f9             	mov    %rdi,%r9
  8004217f65:	41 89 f0             	mov    %esi,%r8d
  8004217f68:	89 c6                	mov    %eax,%esi
  8004217f6a:	48 bf ae fb 21 04 80 	movabs $0x800421fbae,%rdi
  8004217f71:	00 00 00 
  8004217f74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f79:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004217f80:	00 00 00 
  8004217f83:	41 ff d2             	callq  *%r10
  8004217f86:	eb 29                	jmp    8004217fb1 <spin_unlock+0x1bd>
  8004217f88:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f8b:	48 98                	cltq   
  8004217f8d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217f94:	89 c6                	mov    %eax,%esi
  8004217f96:	48 bf c5 fb 21 04 80 	movabs $0x800421fbc5,%rdi
  8004217f9d:	00 00 00 
  8004217fa0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217fa5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217fac:	00 00 00 
  8004217faf:	ff d2                	callq  *%rdx
  8004217fb1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004217fb5:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004217fb9:	7f 14                	jg     8004217fcf <spin_unlock+0x1db>
  8004217fbb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217fbe:	48 98                	cltq   
  8004217fc0:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217fc7:	85 c0                	test   %eax,%eax
  8004217fc9:	0f 85 23 ff ff ff    	jne    8004217ef2 <spin_unlock+0xfe>
  8004217fcf:	48 ba cd fb 21 04 80 	movabs $0x800421fbcd,%rdx
  8004217fd6:	00 00 00 
  8004217fd9:	be 6c 00 00 00       	mov    $0x6c,%esi
  8004217fde:	48 bf 22 fb 21 04 80 	movabs $0x800421fb22,%rdi
  8004217fe5:	00 00 00 
  8004217fe8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217fed:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004217ff4:	00 00 00 
  8004217ff7:	ff d1                	callq  *%rcx
  8004217ff9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218000:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  8004218007:	00 
  8004218008:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421800f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004218016:	00 
  8004218017:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421801e:	be 00 00 00 00       	mov    $0x0,%esi
  8004218023:	48 89 c7             	mov    %rax,%rdi
  8004218026:	48 b8 cc 7b 21 04 80 	movabs $0x8004217bcc,%rax
  800421802d:	00 00 00 
  8004218030:	ff d0                	callq  *%rax
  8004218032:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004218039:	5b                   	pop    %rbx
  800421803a:	41 5c                	pop    %r12
  800421803c:	5d                   	pop    %rbp
  800421803d:	c3                   	retq   

000000800421803e <e1000_attach>:
  800421803e:	55                   	push   %rbp
  800421803f:	48 89 e5             	mov    %rsp,%rbp
  8004218042:	48 83 ec 40          	sub    $0x40,%rsp
  8004218046:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421804a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421804e:	48 89 c7             	mov    %rax,%rdi
  8004218051:	48 b8 fb 8e 21 04 80 	movabs $0x8004218efb,%rax
  8004218058:	00 00 00 
  800421805b:	ff d0                	callq  *%rax
  800421805d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218061:	8b 40 30             	mov    0x30(%rax),%eax
  8004218064:	89 c2                	mov    %eax,%edx
  8004218066:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421806a:	8b 40 18             	mov    0x18(%rax),%eax
  800421806d:	89 c0                	mov    %eax,%eax
  800421806f:	48 89 d6             	mov    %rdx,%rsi
  8004218072:	48 89 c7             	mov    %rax,%rdi
  8004218075:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  800421807c:	00 00 00 
  800421807f:	ff d0                	callq  *%rax
  8004218081:	48 ba 20 c7 4d 04 80 	movabs $0x80044dc720,%rdx
  8004218088:	00 00 00 
  800421808b:	48 89 02             	mov    %rax,(%rdx)
  800421808e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218095:	e9 a9 00 00 00       	jmpq   8004218143 <e1000_attach+0x105>
  800421809a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421809d:	48 98                	cltq   
  800421809f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  80042180a6:	48 b8 40 c8 4d 04 80 	movabs $0x80044dc840,%rax
  80042180ad:	00 00 00 
  80042180b0:	48 01 d0             	add    %rdx,%rax
  80042180b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042180b7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042180be:	00 00 00 
  80042180c1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042180c5:	77 32                	ja     80042180f9 <e1000_attach+0xbb>
  80042180c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042180cb:	48 89 c1             	mov    %rax,%rcx
  80042180ce:	48 ba e0 fb 21 04 80 	movabs $0x800421fbe0,%rdx
  80042180d5:	00 00 00 
  80042180d8:	be 97 00 00 00       	mov    $0x97,%esi
  80042180dd:	48 bf 04 fc 21 04 80 	movabs $0x800421fc04,%rdi
  80042180e4:	00 00 00 
  80042180e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180ec:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042180f3:	00 00 00 
  80042180f6:	41 ff d0             	callq  *%r8
  80042180f9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218100:	ff ff ff 
  8004218103:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218107:	48 01 c2             	add    %rax,%rdx
  800421810a:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  8004218111:	00 00 00 
  8004218114:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218117:	48 63 c9             	movslq %ecx,%rcx
  800421811a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421811e:	48 01 c8             	add    %rcx,%rax
  8004218121:	48 89 10             	mov    %rdx,(%rax)
  8004218124:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  800421812b:	00 00 00 
  800421812e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218131:	48 63 d2             	movslq %edx,%rdx
  8004218134:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218138:	48 01 d0             	add    %rdx,%rax
  800421813b:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  800421813f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218143:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004218147:	0f 8e 4d ff ff ff    	jle    800421809a <e1000_attach+0x5c>
  800421814d:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218154:	00 00 00 
  8004218157:	48 8b 00             	mov    (%rax),%rax
  800421815a:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218161:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  8004218168:	00 00 00 
  800421816b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421816f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218176:	00 00 00 
  8004218179:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421817d:	77 32                	ja     80042181b1 <e1000_attach+0x173>
  800421817f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218183:	48 89 c1             	mov    %rax,%rcx
  8004218186:	48 ba e0 fb 21 04 80 	movabs $0x800421fbe0,%rdx
  800421818d:	00 00 00 
  8004218190:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004218195:	48 bf 04 fc 21 04 80 	movabs $0x800421fc04,%rdi
  800421819c:	00 00 00 
  800421819f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181a4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042181ab:	00 00 00 
  80042181ae:	41 ff d0             	callq  *%r8
  80042181b1:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042181b8:	ff ff ff 
  80042181bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181bf:	48 01 c8             	add    %rcx,%rax
  80042181c2:	89 02                	mov    %eax,(%rdx)
  80042181c4:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042181cb:	00 00 00 
  80042181ce:	48 8b 00             	mov    (%rax),%rax
  80042181d1:	48 05 08 38 00 00    	add    $0x3808,%rax
  80042181d7:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  80042181dd:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042181e4:	00 00 00 
  80042181e7:	48 8b 00             	mov    (%rax),%rax
  80042181ea:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  80042181f1:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042181f8:	00 00 00 
  80042181fb:	48 8b 00             	mov    (%rax),%rax
  80042181fe:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218205:	b8 00 00 00 00       	mov    $0x0,%eax
  800421820a:	89 01                	mov    %eax,(%rcx)
  800421820c:	89 02                	mov    %eax,(%rdx)
  800421820e:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218215:	00 00 00 
  8004218218:	48 8b 00             	mov    (%rax),%rax
  800421821b:	48 05 00 04 00 00    	add    $0x400,%rax
  8004218221:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004218227:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421822e:	00 00 00 
  8004218231:	48 8b 00             	mov    (%rax),%rax
  8004218234:	48 05 10 04 00 00    	add    $0x410,%rax
  800421823a:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004218240:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218247:	e9 8e 00 00 00       	jmpq   80042182da <e1000_attach+0x29c>
  800421824c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421824f:	48 98                	cltq   
  8004218251:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218255:	48 89 c2             	mov    %rax,%rdx
  8004218258:	48 b8 a0 65 4e 04 80 	movabs $0x80044e65a0,%rax
  800421825f:	00 00 00 
  8004218262:	48 01 d0             	add    %rdx,%rax
  8004218265:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218269:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218270:	00 00 00 
  8004218273:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004218277:	77 32                	ja     80042182ab <e1000_attach+0x26d>
  8004218279:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421827d:	48 89 c1             	mov    %rax,%rcx
  8004218280:	48 ba e0 fb 21 04 80 	movabs $0x800421fbe0,%rdx
  8004218287:	00 00 00 
  800421828a:	be b8 00 00 00       	mov    $0xb8,%esi
  800421828f:	48 bf 04 fc 21 04 80 	movabs $0x800421fc04,%rdi
  8004218296:	00 00 00 
  8004218299:	b8 00 00 00 00       	mov    $0x0,%eax
  800421829e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042182a5:	00 00 00 
  80042182a8:	41 ff d0             	callq  *%r8
  80042182ab:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042182b2:	ff ff ff 
  80042182b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042182b9:	48 01 c2             	add    %rax,%rdx
  80042182bc:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  80042182c3:	00 00 00 
  80042182c6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042182c9:	48 63 c9             	movslq %ecx,%rcx
  80042182cc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042182d0:	48 01 c8             	add    %rcx,%rax
  80042182d3:	48 89 10             	mov    %rdx,(%rax)
  80042182d6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042182da:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  80042182e1:	0f 8e 65 ff ff ff    	jle    800421824c <e1000_attach+0x20e>
  80042182e7:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042182ee:	00 00 00 
  80042182f1:	48 8b 00             	mov    (%rax),%rax
  80042182f4:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  80042182fb:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  8004218302:	00 00 00 
  8004218305:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004218309:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218310:	00 00 00 
  8004218313:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004218317:	77 32                	ja     800421834b <e1000_attach+0x30d>
  8004218319:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421831d:	48 89 c1             	mov    %rax,%rcx
  8004218320:	48 ba e0 fb 21 04 80 	movabs $0x800421fbe0,%rdx
  8004218327:	00 00 00 
  800421832a:	be ba 00 00 00       	mov    $0xba,%esi
  800421832f:	48 bf 04 fc 21 04 80 	movabs $0x800421fc04,%rdi
  8004218336:	00 00 00 
  8004218339:	b8 00 00 00 00       	mov    $0x0,%eax
  800421833e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218345:	00 00 00 
  8004218348:	41 ff d0             	callq  *%r8
  800421834b:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218352:	ff ff ff 
  8004218355:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218359:	48 01 c8             	add    %rcx,%rax
  800421835c:	89 02                	mov    %eax,(%rdx)
  800421835e:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218365:	00 00 00 
  8004218368:	48 8b 00             	mov    (%rax),%rax
  800421836b:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218371:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004218377:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421837e:	00 00 00 
  8004218381:	48 8b 00             	mov    (%rax),%rax
  8004218384:	48 05 10 28 00 00    	add    $0x2810,%rax
  800421838a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218390:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218397:	00 00 00 
  800421839a:	48 8b 00             	mov    (%rax),%rax
  800421839d:	48 05 18 28 00 00    	add    $0x2818,%rax
  80042183a3:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  80042183a9:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042183b0:	00 00 00 
  80042183b3:	48 8b 00             	mov    (%rax),%rax
  80042183b6:	48 05 00 01 00 00    	add    $0x100,%rax
  80042183bc:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  80042183c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183c7:	c9                   	leaveq 
  80042183c8:	c3                   	retq   

00000080042183c9 <e1000_transmit>:
  80042183c9:	55                   	push   %rbp
  80042183ca:	48 89 e5             	mov    %rsp,%rbp
  80042183cd:	48 83 ec 20          	sub    $0x20,%rsp
  80042183d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042183d5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042183d8:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042183df:	00 00 00 
  80042183e2:	48 8b 00             	mov    (%rax),%rax
  80042183e5:	48 85 c0             	test   %rax,%rax
  80042183e8:	74 09                	je     80042183f3 <e1000_transmit+0x2a>
  80042183ea:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  80042183f1:	76 0a                	jbe    80042183fd <e1000_transmit+0x34>
  80042183f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042183f8:	e9 39 01 00 00       	jmpq   8004218536 <e1000_transmit+0x16d>
  80042183fd:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218404:	00 00 00 
  8004218407:	48 8b 00             	mov    (%rax),%rax
  800421840a:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004218410:	8b 00                	mov    (%rax),%eax
  8004218412:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218415:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  800421841c:	00 00 00 
  800421841f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218422:	48 63 d2             	movslq %edx,%rdx
  8004218425:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218429:	48 01 d0             	add    %rdx,%rax
  800421842c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218430:	0f b6 c0             	movzbl %al,%eax
  8004218433:	83 e0 01             	and    $0x1,%eax
  8004218436:	85 c0                	test   %eax,%eax
  8004218438:	75 25                	jne    800421845f <e1000_transmit+0x96>
  800421843a:	48 bf 14 fc 21 04 80 	movabs $0x800421fc14,%rdi
  8004218441:	00 00 00 
  8004218444:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218449:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004218450:	00 00 00 
  8004218453:	ff d2                	callq  *%rdx
  8004218455:	b8 00 00 00 00       	mov    $0x0,%eax
  800421845a:	e9 d7 00 00 00       	jmpq   8004218536 <e1000_transmit+0x16d>
  800421845f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218462:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218465:	48 98                	cltq   
  8004218467:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  800421846e:	48 b8 40 c8 4d 04 80 	movabs $0x80044dc840,%rax
  8004218475:	00 00 00 
  8004218478:	48 01 c1             	add    %rax,%rcx
  800421847b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421847f:	48 89 c6             	mov    %rax,%rsi
  8004218482:	48 89 cf             	mov    %rcx,%rdi
  8004218485:	48 b8 1e 0a 21 04 80 	movabs $0x8004210a1e,%rax
  800421848c:	00 00 00 
  800421848f:	ff d0                	callq  *%rax
  8004218491:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218494:	48 ba 30 c7 4d 04 80 	movabs $0x80044dc730,%rdx
  800421849b:	00 00 00 
  800421849e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042184a1:	48 63 c9             	movslq %ecx,%rcx
  80042184a4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042184a8:	48 01 ca             	add    %rcx,%rdx
  80042184ab:	66 89 42 08          	mov    %ax,0x8(%rdx)
  80042184af:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  80042184b6:	00 00 00 
  80042184b9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042184bc:	48 63 d2             	movslq %edx,%rdx
  80042184bf:	48 c1 e2 04          	shl    $0x4,%rdx
  80042184c3:	48 01 d0             	add    %rdx,%rax
  80042184c6:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042184ca:	83 e0 fe             	and    $0xfffffffe,%eax
  80042184cd:	89 c2                	mov    %eax,%edx
  80042184cf:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  80042184d6:	00 00 00 
  80042184d9:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042184dc:	48 63 c9             	movslq %ecx,%rcx
  80042184df:	48 c1 e1 04          	shl    $0x4,%rcx
  80042184e3:	48 01 c8             	add    %rcx,%rax
  80042184e6:	88 50 0c             	mov    %dl,0xc(%rax)
  80042184e9:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  80042184f0:	00 00 00 
  80042184f3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042184f6:	48 63 d2             	movslq %edx,%rdx
  80042184f9:	48 c1 e2 04          	shl    $0x4,%rdx
  80042184fd:	48 01 d0             	add    %rdx,%rax
  8004218500:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  8004218504:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421850b:	00 00 00 
  800421850e:	48 8b 00             	mov    (%rax),%rax
  8004218511:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218518:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421851b:	8d 50 01             	lea    0x1(%rax),%edx
  800421851e:	89 d0                	mov    %edx,%eax
  8004218520:	c1 f8 1f             	sar    $0x1f,%eax
  8004218523:	c1 e8 1c             	shr    $0x1c,%eax
  8004218526:	01 c2                	add    %eax,%edx
  8004218528:	83 e2 0f             	and    $0xf,%edx
  800421852b:	29 c2                	sub    %eax,%edx
  800421852d:	89 d0                	mov    %edx,%eax
  800421852f:	89 01                	mov    %eax,(%rcx)
  8004218531:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218536:	c9                   	leaveq 
  8004218537:	c3                   	retq   

0000008004218538 <e1000_receive>:
  8004218538:	55                   	push   %rbp
  8004218539:	48 89 e5             	mov    %rsp,%rbp
  800421853c:	48 83 ec 20          	sub    $0x20,%rsp
  8004218540:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218544:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218547:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421854e:	00 00 00 
  8004218551:	48 8b 00             	mov    (%rax),%rax
  8004218554:	48 85 c0             	test   %rax,%rax
  8004218557:	75 0a                	jne    8004218563 <e1000_receive+0x2b>
  8004218559:	b8 00 00 00 00       	mov    $0x0,%eax
  800421855e:	e9 59 01 00 00       	jmpq   80042186bc <e1000_receive+0x184>
  8004218563:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421856a:	00 00 00 
  800421856d:	48 8b 00             	mov    (%rax),%rax
  8004218570:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218576:	8b 00                	mov    (%rax),%eax
  8004218578:	8d 48 01             	lea    0x1(%rax),%ecx
  800421857b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218580:	89 c8                	mov    %ecx,%eax
  8004218582:	f7 e2                	mul    %edx
  8004218584:	89 d0                	mov    %edx,%eax
  8004218586:	c1 e8 06             	shr    $0x6,%eax
  8004218589:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  800421858f:	29 c1                	sub    %eax,%ecx
  8004218591:	89 c8                	mov    %ecx,%eax
  8004218593:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218596:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  800421859d:	00 00 00 
  80042185a0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042185a3:	48 63 d2             	movslq %edx,%rdx
  80042185a6:	48 c1 e2 04          	shl    $0x4,%rdx
  80042185aa:	48 01 d0             	add    %rdx,%rax
  80042185ad:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042185b1:	0f b6 c0             	movzbl %al,%eax
  80042185b4:	83 e0 01             	and    $0x1,%eax
  80042185b7:	85 c0                	test   %eax,%eax
  80042185b9:	75 0a                	jne    80042185c5 <e1000_receive+0x8d>
  80042185bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185c0:	e9 f7 00 00 00       	jmpq   80042186bc <e1000_receive+0x184>
  80042185c5:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  80042185cc:	00 00 00 
  80042185cf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042185d2:	48 63 d2             	movslq %edx,%rdx
  80042185d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042185d9:	48 01 d0             	add    %rdx,%rax
  80042185dc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042185e0:	0f b6 c0             	movzbl %al,%eax
  80042185e3:	83 e0 02             	and    $0x2,%eax
  80042185e6:	85 c0                	test   %eax,%eax
  80042185e8:	75 35                	jne    800421861f <e1000_receive+0xe7>
  80042185ea:	48 b9 28 fc 21 04 80 	movabs $0x800421fc28,%rcx
  80042185f1:	00 00 00 
  80042185f4:	48 ba 52 fc 21 04 80 	movabs $0x800421fc52,%rdx
  80042185fb:	00 00 00 
  80042185fe:	be ef 00 00 00       	mov    $0xef,%esi
  8004218603:	48 bf 04 fc 21 04 80 	movabs $0x800421fc04,%rdi
  800421860a:	00 00 00 
  800421860d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218612:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218619:	00 00 00 
  800421861c:	41 ff d0             	callq  *%r8
  800421861f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218622:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218625:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  800421862c:	00 00 00 
  800421862f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218632:	48 63 d2             	movslq %edx,%rdx
  8004218635:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218639:	48 01 d0             	add    %rdx,%rax
  800421863c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218640:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004218644:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218648:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421864b:	39 c2                	cmp    %eax,%edx
  800421864d:	0f 46 c2             	cmovbe %edx,%eax
  8004218650:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218653:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218656:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218659:	48 98                	cltq   
  800421865b:	48 c1 e0 0b          	shl    $0xb,%rax
  800421865f:	48 89 c1             	mov    %rax,%rcx
  8004218662:	48 b8 a0 65 4e 04 80 	movabs $0x80044e65a0,%rax
  8004218669:	00 00 00 
  800421866c:	48 01 c1             	add    %rax,%rcx
  800421866f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218673:	48 89 ce             	mov    %rcx,%rsi
  8004218676:	48 89 c7             	mov    %rax,%rdi
  8004218679:	48 b8 1e 0a 21 04 80 	movabs $0x8004210a1e,%rax
  8004218680:	00 00 00 
  8004218683:	ff d0                	callq  *%rax
  8004218685:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  800421868c:	00 00 00 
  800421868f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218692:	48 63 d2             	movslq %edx,%rdx
  8004218695:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218699:	48 01 d0             	add    %rdx,%rax
  800421869c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  80042186a0:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042186a7:	00 00 00 
  80042186aa:	48 8b 00             	mov    (%rax),%rax
  80042186ad:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  80042186b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042186b7:	89 02                	mov    %eax,(%rdx)
  80042186b9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042186bc:	c9                   	leaveq 
  80042186bd:	c3                   	retq   

00000080042186be <pci_conf1_set_addr>:
  80042186be:	55                   	push   %rbp
  80042186bf:	48 89 e5             	mov    %rsp,%rbp
  80042186c2:	48 83 ec 20          	sub    $0x20,%rsp
  80042186c6:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042186c9:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042186cc:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  80042186cf:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  80042186d2:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  80042186d9:	76 35                	jbe    8004218710 <pci_conf1_set_addr+0x52>
  80042186db:	48 b9 68 fc 21 04 80 	movabs $0x800421fc68,%rcx
  80042186e2:	00 00 00 
  80042186e5:	48 ba 72 fc 21 04 80 	movabs $0x800421fc72,%rdx
  80042186ec:	00 00 00 
  80042186ef:	be 31 00 00 00       	mov    $0x31,%esi
  80042186f4:	48 bf 87 fc 21 04 80 	movabs $0x800421fc87,%rdi
  80042186fb:	00 00 00 
  80042186fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218703:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421870a:	00 00 00 
  800421870d:	41 ff d0             	callq  *%r8
  8004218710:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004218714:	76 35                	jbe    800421874b <pci_conf1_set_addr+0x8d>
  8004218716:	48 b9 95 fc 21 04 80 	movabs $0x800421fc95,%rcx
  800421871d:	00 00 00 
  8004218720:	48 ba 72 fc 21 04 80 	movabs $0x800421fc72,%rdx
  8004218727:	00 00 00 
  800421872a:	be 32 00 00 00       	mov    $0x32,%esi
  800421872f:	48 bf 87 fc 21 04 80 	movabs $0x800421fc87,%rdi
  8004218736:	00 00 00 
  8004218739:	b8 00 00 00 00       	mov    $0x0,%eax
  800421873e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218745:	00 00 00 
  8004218748:	41 ff d0             	callq  *%r8
  800421874b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  800421874f:	76 35                	jbe    8004218786 <pci_conf1_set_addr+0xc8>
  8004218751:	48 b9 9e fc 21 04 80 	movabs $0x800421fc9e,%rcx
  8004218758:	00 00 00 
  800421875b:	48 ba 72 fc 21 04 80 	movabs $0x800421fc72,%rdx
  8004218762:	00 00 00 
  8004218765:	be 33 00 00 00       	mov    $0x33,%esi
  800421876a:	48 bf 87 fc 21 04 80 	movabs $0x800421fc87,%rdi
  8004218771:	00 00 00 
  8004218774:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218779:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218780:	00 00 00 
  8004218783:	41 ff d0             	callq  *%r8
  8004218786:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  800421878d:	76 35                	jbe    80042187c4 <pci_conf1_set_addr+0x106>
  800421878f:	48 b9 a7 fc 21 04 80 	movabs $0x800421fca7,%rcx
  8004218796:	00 00 00 
  8004218799:	48 ba 72 fc 21 04 80 	movabs $0x800421fc72,%rdx
  80042187a0:	00 00 00 
  80042187a3:	be 34 00 00 00       	mov    $0x34,%esi
  80042187a8:	48 bf 87 fc 21 04 80 	movabs $0x800421fc87,%rdi
  80042187af:	00 00 00 
  80042187b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187b7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042187be:	00 00 00 
  80042187c1:	41 ff d0             	callq  *%r8
  80042187c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042187c7:	83 e0 03             	and    $0x3,%eax
  80042187ca:	85 c0                	test   %eax,%eax
  80042187cc:	74 35                	je     8004218803 <pci_conf1_set_addr+0x145>
  80042187ce:	48 b9 b4 fc 21 04 80 	movabs $0x800421fcb4,%rcx
  80042187d5:	00 00 00 
  80042187d8:	48 ba 72 fc 21 04 80 	movabs $0x800421fc72,%rdx
  80042187df:	00 00 00 
  80042187e2:	be 35 00 00 00       	mov    $0x35,%esi
  80042187e7:	48 bf 87 fc 21 04 80 	movabs $0x800421fc87,%rdi
  80042187ee:	00 00 00 
  80042187f1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187f6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042187fd:	00 00 00 
  8004218800:	41 ff d0             	callq  *%r8
  8004218803:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218806:	c1 e0 10             	shl    $0x10,%eax
  8004218809:	89 c2                	mov    %eax,%edx
  800421880b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421880e:	c1 e0 0b             	shl    $0xb,%eax
  8004218811:	09 c2                	or     %eax,%edx
  8004218813:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218816:	c1 e0 08             	shl    $0x8,%eax
  8004218819:	09 d0                	or     %edx,%eax
  800421881b:	0b 45 e0             	or     -0x20(%rbp),%eax
  800421881e:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004218823:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218826:	48 b8 e4 37 23 04 80 	movabs $0x80042337e4,%rax
  800421882d:	00 00 00 
  8004218830:	8b 00                	mov    (%rax),%eax
  8004218832:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218835:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218838:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  800421883b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421883e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218841:	ef                   	out    %eax,(%dx)
  8004218842:	c9                   	leaveq 
  8004218843:	c3                   	retq   

0000008004218844 <pci_conf_read>:
  8004218844:	55                   	push   %rbp
  8004218845:	48 89 e5             	mov    %rsp,%rbp
  8004218848:	48 83 ec 20          	sub    $0x20,%rsp
  800421884c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218850:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218853:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218857:	8b 50 0c             	mov    0xc(%rax),%edx
  800421885a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421885e:	8b 70 08             	mov    0x8(%rax),%esi
  8004218861:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218865:	48 8b 00             	mov    (%rax),%rax
  8004218868:	8b 40 08             	mov    0x8(%rax),%eax
  800421886b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421886e:	89 c7                	mov    %eax,%edi
  8004218870:	48 b8 be 86 21 04 80 	movabs $0x80042186be,%rax
  8004218877:	00 00 00 
  800421887a:	ff d0                	callq  *%rax
  800421887c:	48 b8 e8 37 23 04 80 	movabs $0x80042337e8,%rax
  8004218883:	00 00 00 
  8004218886:	8b 00                	mov    (%rax),%eax
  8004218888:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  800421888b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421888e:	89 c2                	mov    %eax,%edx
  8004218890:	ed                   	in     (%dx),%eax
  8004218891:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218894:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218897:	c9                   	leaveq 
  8004218898:	c3                   	retq   

0000008004218899 <pci_conf_write>:
  8004218899:	55                   	push   %rbp
  800421889a:	48 89 e5             	mov    %rsp,%rbp
  800421889d:	48 83 ec 20          	sub    $0x20,%rsp
  80042188a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042188a5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042188a8:	89 55 e0             	mov    %edx,-0x20(%rbp)
  80042188ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042188af:	8b 50 0c             	mov    0xc(%rax),%edx
  80042188b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042188b6:	8b 70 08             	mov    0x8(%rax),%esi
  80042188b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042188bd:	48 8b 00             	mov    (%rax),%rax
  80042188c0:	8b 40 08             	mov    0x8(%rax),%eax
  80042188c3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  80042188c6:	89 c7                	mov    %eax,%edi
  80042188c8:	48 b8 be 86 21 04 80 	movabs $0x80042186be,%rax
  80042188cf:	00 00 00 
  80042188d2:	ff d0                	callq  *%rax
  80042188d4:	48 b8 e8 37 23 04 80 	movabs $0x80042337e8,%rax
  80042188db:	00 00 00 
  80042188de:	8b 00                	mov    (%rax),%eax
  80042188e0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042188e3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042188e6:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  80042188e9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042188ec:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042188ef:	ef                   	out    %eax,(%dx)
  80042188f0:	c9                   	leaveq 
  80042188f1:	c3                   	retq   

00000080042188f2 <pci_attach_match>:
  80042188f2:	55                   	push   %rbp
  80042188f3:	48 89 e5             	mov    %rsp,%rbp
  80042188f6:	48 83 ec 30          	sub    $0x30,%rsp
  80042188fa:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042188fd:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218900:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004218904:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218908:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421890f:	e9 aa 00 00 00       	jmpq   80042189be <pci_attach_match+0xcc>
  8004218914:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218917:	48 c1 e0 04          	shl    $0x4,%rax
  800421891b:	48 89 c2             	mov    %rax,%rdx
  800421891e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218922:	48 01 d0             	add    %rdx,%rax
  8004218925:	8b 00                	mov    (%rax),%eax
  8004218927:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421892a:	0f 85 8a 00 00 00    	jne    80042189ba <pci_attach_match+0xc8>
  8004218930:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218933:	48 c1 e0 04          	shl    $0x4,%rax
  8004218937:	48 89 c2             	mov    %rax,%rdx
  800421893a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421893e:	48 01 d0             	add    %rdx,%rax
  8004218941:	8b 40 04             	mov    0x4(%rax),%eax
  8004218944:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218947:	75 71                	jne    80042189ba <pci_attach_match+0xc8>
  8004218949:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421894c:	48 c1 e0 04          	shl    $0x4,%rax
  8004218950:	48 89 c2             	mov    %rax,%rdx
  8004218953:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218957:	48 01 d0             	add    %rdx,%rax
  800421895a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421895e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218962:	48 89 d7             	mov    %rdx,%rdi
  8004218965:	ff d0                	callq  *%rax
  8004218967:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421896a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421896e:	7e 05                	jle    8004218975 <pci_attach_match+0x83>
  8004218970:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218973:	eb 6c                	jmp    80042189e1 <pci_attach_match+0xef>
  8004218975:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218979:	79 3f                	jns    80042189ba <pci_attach_match+0xc8>
  800421897b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421897e:	48 c1 e0 04          	shl    $0x4,%rax
  8004218982:	48 89 c2             	mov    %rax,%rdx
  8004218985:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218989:	48 01 d0             	add    %rdx,%rax
  800421898c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218990:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218993:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218996:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218999:	41 89 f0             	mov    %esi,%r8d
  800421899c:	89 c6                	mov    %eax,%esi
  800421899e:	48 bf c8 fc 21 04 80 	movabs $0x800421fcc8,%rdi
  80042189a5:	00 00 00 
  80042189a8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189ad:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  80042189b4:	00 00 00 
  80042189b7:	41 ff d1             	callq  *%r9
  80042189ba:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042189be:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042189c1:	48 c1 e0 04          	shl    $0x4,%rax
  80042189c5:	48 89 c2             	mov    %rax,%rdx
  80042189c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042189cc:	48 01 d0             	add    %rdx,%rax
  80042189cf:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042189d3:	48 85 c0             	test   %rax,%rax
  80042189d6:	0f 85 38 ff ff ff    	jne    8004218914 <pci_attach_match+0x22>
  80042189dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189e1:	c9                   	leaveq 
  80042189e2:	c3                   	retq   

00000080042189e3 <pci_attach>:
  80042189e3:	55                   	push   %rbp
  80042189e4:	48 89 e5             	mov    %rsp,%rbp
  80042189e7:	48 83 ec 10          	sub    $0x10,%rsp
  80042189eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042189ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042189f3:	8b 40 14             	mov    0x14(%rax),%eax
  80042189f6:	c1 e8 10             	shr    $0x10,%eax
  80042189f9:	0f b6 c0             	movzbl %al,%eax
  80042189fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218a00:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218a03:	89 d7                	mov    %edx,%edi
  8004218a05:	c1 ef 18             	shr    $0x18,%edi
  8004218a08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218a0c:	48 89 d1             	mov    %rdx,%rcx
  8004218a0f:	48 ba 00 38 23 04 80 	movabs $0x8004233800,%rdx
  8004218a16:	00 00 00 
  8004218a19:	89 c6                	mov    %eax,%esi
  8004218a1b:	48 b8 f2 88 21 04 80 	movabs $0x80042188f2,%rax
  8004218a22:	00 00 00 
  8004218a25:	ff d0                	callq  *%rax
  8004218a27:	85 c0                	test   %eax,%eax
  8004218a29:	75 39                	jne    8004218a64 <pci_attach+0x81>
  8004218a2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218a2f:	8b 40 10             	mov    0x10(%rax),%eax
  8004218a32:	c1 e8 10             	shr    $0x10,%eax
  8004218a35:	89 c6                	mov    %eax,%esi
  8004218a37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218a3b:	8b 40 10             	mov    0x10(%rax),%eax
  8004218a3e:	0f b7 c0             	movzwl %ax,%eax
  8004218a41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218a45:	48 89 d1             	mov    %rdx,%rcx
  8004218a48:	48 ba 20 38 23 04 80 	movabs $0x8004233820,%rdx
  8004218a4f:	00 00 00 
  8004218a52:	89 c7                	mov    %eax,%edi
  8004218a54:	48 b8 f2 88 21 04 80 	movabs $0x80042188f2,%rax
  8004218a5b:	00 00 00 
  8004218a5e:	ff d0                	callq  *%rax
  8004218a60:	85 c0                	test   %eax,%eax
  8004218a62:	74 07                	je     8004218a6b <pci_attach+0x88>
  8004218a64:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218a69:	eb 05                	jmp    8004218a70 <pci_attach+0x8d>
  8004218a6b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a70:	c9                   	leaveq 
  8004218a71:	c3                   	retq   

0000008004218a72 <pci_print_func>:
  8004218a72:	55                   	push   %rbp
  8004218a73:	48 89 e5             	mov    %rsp,%rbp
  8004218a76:	48 83 ec 40          	sub    $0x40,%rsp
  8004218a7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218a7e:	48 b8 40 38 23 04 80 	movabs $0x8004233840,%rax
  8004218a85:	00 00 00 
  8004218a88:	48 8b 00             	mov    (%rax),%rax
  8004218a8b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218a8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a93:	8b 40 14             	mov    0x14(%rax),%eax
  8004218a96:	c1 e8 18             	shr    $0x18,%eax
  8004218a99:	83 f8 06             	cmp    $0x6,%eax
  8004218a9c:	77 20                	ja     8004218abe <pci_print_func+0x4c>
  8004218a9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218aa2:	8b 40 14             	mov    0x14(%rax),%eax
  8004218aa5:	c1 e8 18             	shr    $0x18,%eax
  8004218aa8:	89 c2                	mov    %eax,%edx
  8004218aaa:	48 b8 40 38 23 04 80 	movabs $0x8004233840,%rax
  8004218ab1:	00 00 00 
  8004218ab4:	89 d2                	mov    %edx,%edx
  8004218ab6:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004218aba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218abe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ac2:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218ac6:	0f b6 f8             	movzbl %al,%edi
  8004218ac9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218acd:	8b 40 14             	mov    0x14(%rax),%eax
  8004218ad0:	c1 e8 10             	shr    $0x10,%eax
  8004218ad3:	0f b6 f0             	movzbl %al,%esi
  8004218ad6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ada:	8b 40 14             	mov    0x14(%rax),%eax
  8004218add:	c1 e8 18             	shr    $0x18,%eax
  8004218ae0:	41 89 c1             	mov    %eax,%r9d
  8004218ae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ae7:	8b 40 10             	mov    0x10(%rax),%eax
  8004218aea:	c1 e8 10             	shr    $0x10,%eax
  8004218aed:	41 89 c2             	mov    %eax,%r10d
  8004218af0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218af4:	8b 40 10             	mov    0x10(%rax),%eax
  8004218af7:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218aff:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218b02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218b06:	8b 50 08             	mov    0x8(%rax),%edx
  8004218b09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218b0d:	48 8b 00             	mov    (%rax),%rax
  8004218b10:	8b 40 08             	mov    0x8(%rax),%eax
  8004218b13:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218b17:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004218b1b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218b20:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218b24:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218b28:	45 89 d1             	mov    %r10d,%r9d
  8004218b2b:	89 c6                	mov    %eax,%esi
  8004218b2d:	48 bf 68 fd 21 04 80 	movabs $0x800421fd68,%rdi
  8004218b34:	00 00 00 
  8004218b37:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b3c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004218b43:	00 00 00 
  8004218b46:	41 ff d2             	callq  *%r10
  8004218b49:	c9                   	leaveq 
  8004218b4a:	c3                   	retq   

0000008004218b4b <pci_scan_bus>:
  8004218b4b:	55                   	push   %rbp
  8004218b4c:	48 89 e5             	mov    %rsp,%rbp
  8004218b4f:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218b56:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  8004218b5d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218b64:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218b68:	ba 50 00 00 00       	mov    $0x50,%edx
  8004218b6d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218b72:	48 89 c7             	mov    %rax,%rdi
  8004218b75:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004218b7c:	00 00 00 
  8004218b7f:	ff d0                	callq  *%rax
  8004218b81:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218b88:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004218b8c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218b93:	e9 22 02 00 00       	jmpq   8004218dba <pci_scan_bus+0x26f>
  8004218b98:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218b9c:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218ba1:	48 89 c7             	mov    %rax,%rdi
  8004218ba4:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218bab:	00 00 00 
  8004218bae:	ff d0                	callq  *%rax
  8004218bb0:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218bb3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218bb6:	c1 e8 10             	shr    $0x10,%eax
  8004218bb9:	83 e0 7f             	and    $0x7f,%eax
  8004218bbc:	83 f8 01             	cmp    $0x1,%eax
  8004218bbf:	0f 87 ec 01 00 00    	ja     8004218db1 <pci_scan_bus+0x266>
  8004218bc5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218bc9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004218bcd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218bd4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218bd8:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004218bdf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218be3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004218bea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004218bee:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218bf5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004218bf9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218c00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218c04:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004218c0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004218c0f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218c16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218c1a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218c25:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004218c2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c30:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218c37:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  8004218c3e:	00 00 00 
  8004218c41:	e9 45 01 00 00       	jmpq   8004218d8b <pci_scan_bus+0x240>
  8004218c46:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004218c4d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218c54:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004218c5b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218c62:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004218c69:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218c70:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218c77:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004218c7e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218c85:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004218c8c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218c93:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004218c9a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218ca1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218ca5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004218cac:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004218cb0:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004218cb7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004218cbb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004218cc2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004218cc6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  8004218ccd:	be 00 00 00 00       	mov    $0x0,%esi
  8004218cd2:	48 89 c7             	mov    %rax,%rdi
  8004218cd5:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218cdc:	00 00 00 
  8004218cdf:	ff d0                	callq  *%rax
  8004218ce1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218ce7:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  8004218ced:	0f b7 c0             	movzwl %ax,%eax
  8004218cf0:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218cf5:	0f 84 81 00 00 00    	je     8004218d7c <pci_scan_bus+0x231>
  8004218cfb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218d02:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218d07:	48 89 c7             	mov    %rax,%rdi
  8004218d0a:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218d11:	00 00 00 
  8004218d14:	ff d0                	callq  *%rax
  8004218d16:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218d19:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218d1c:	88 45 98             	mov    %al,-0x68(%rbp)
  8004218d1f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218d26:	be 08 00 00 00       	mov    $0x8,%esi
  8004218d2b:	48 89 c7             	mov    %rax,%rdi
  8004218d2e:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218d35:	00 00 00 
  8004218d38:	ff d0                	callq  *%rax
  8004218d3a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218d40:	48 b8 e0 37 23 04 80 	movabs $0x80042337e0,%rax
  8004218d47:	00 00 00 
  8004218d4a:	8b 00                	mov    (%rax),%eax
  8004218d4c:	85 c0                	test   %eax,%eax
  8004218d4e:	74 16                	je     8004218d66 <pci_scan_bus+0x21b>
  8004218d50:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218d57:	48 89 c7             	mov    %rax,%rdi
  8004218d5a:	48 b8 72 8a 21 04 80 	movabs $0x8004218a72,%rax
  8004218d61:	00 00 00 
  8004218d64:	ff d0                	callq  *%rax
  8004218d66:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218d6d:	48 89 c7             	mov    %rax,%rdi
  8004218d70:	48 b8 e3 89 21 04 80 	movabs $0x80042189e3,%rax
  8004218d77:	00 00 00 
  8004218d7a:	ff d0                	callq  *%rax
  8004218d7c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218d82:	83 c0 01             	add    $0x1,%eax
  8004218d85:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004218d8b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218d91:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218d94:	25 00 00 80 00       	and    $0x800000,%eax
  8004218d99:	85 c0                	test   %eax,%eax
  8004218d9b:	74 07                	je     8004218da4 <pci_scan_bus+0x259>
  8004218d9d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218da2:	eb 05                	jmp    8004218da9 <pci_scan_bus+0x25e>
  8004218da4:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218da9:	39 c2                	cmp    %eax,%edx
  8004218dab:	0f 82 95 fe ff ff    	jb     8004218c46 <pci_scan_bus+0xfb>
  8004218db1:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218db4:	83 c0 01             	add    $0x1,%eax
  8004218db7:	89 45 a8             	mov    %eax,-0x58(%rbp)
  8004218dba:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218dbd:	83 f8 1f             	cmp    $0x1f,%eax
  8004218dc0:	0f 86 d2 fd ff ff    	jbe    8004218b98 <pci_scan_bus+0x4d>
  8004218dc6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218dc9:	c9                   	leaveq 
  8004218dca:	c3                   	retq   

0000008004218dcb <pci_bridge_attach>:
  8004218dcb:	55                   	push   %rbp
  8004218dcc:	48 89 e5             	mov    %rsp,%rbp
  8004218dcf:	48 83 ec 30          	sub    $0x30,%rsp
  8004218dd3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218dd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ddb:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218de0:	48 89 c7             	mov    %rax,%rdi
  8004218de3:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218dea:	00 00 00 
  8004218ded:	ff d0                	callq  *%rax
  8004218def:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218df2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218df6:	be 18 00 00 00       	mov    $0x18,%esi
  8004218dfb:	48 89 c7             	mov    %rax,%rdi
  8004218dfe:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218e05:	00 00 00 
  8004218e08:	ff d0                	callq  *%rax
  8004218e0a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218e0d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218e10:	83 e0 0f             	and    $0xf,%eax
  8004218e13:	83 f8 01             	cmp    $0x1,%eax
  8004218e16:	75 40                	jne    8004218e58 <pci_bridge_attach+0x8d>
  8004218e18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e1c:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218e1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e23:	8b 50 08             	mov    0x8(%rax),%edx
  8004218e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e2a:	48 8b 00             	mov    (%rax),%rax
  8004218e2d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218e30:	89 c6                	mov    %eax,%esi
  8004218e32:	48 bf a8 fd 21 04 80 	movabs $0x800421fda8,%rdi
  8004218e39:	00 00 00 
  8004218e3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e41:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004218e48:	00 00 00 
  8004218e4b:	41 ff d0             	callq  *%r8
  8004218e4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e53:	e9 a1 00 00 00       	jmpq   8004218ef9 <pci_bridge_attach+0x12e>
  8004218e58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218e5c:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218e61:	be 00 00 00 00       	mov    $0x0,%esi
  8004218e66:	48 89 c7             	mov    %rax,%rdi
  8004218e69:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  8004218e70:	00 00 00 
  8004218e73:	ff d0                	callq  *%rax
  8004218e75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e79:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218e7d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218e80:	c1 e8 08             	shr    $0x8,%eax
  8004218e83:	0f b6 c0             	movzbl %al,%eax
  8004218e86:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218e89:	48 b8 e0 37 23 04 80 	movabs $0x80042337e0,%rax
  8004218e90:	00 00 00 
  8004218e93:	8b 00                	mov    (%rax),%eax
  8004218e95:	85 c0                	test   %eax,%eax
  8004218e97:	74 48                	je     8004218ee1 <pci_bridge_attach+0x116>
  8004218e99:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218e9c:	c1 e8 10             	shr    $0x10,%eax
  8004218e9f:	0f b6 f8             	movzbl %al,%edi
  8004218ea2:	8b 75 e8             	mov    -0x18(%rbp),%esi
  8004218ea5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ea9:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218eac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218eb0:	8b 50 08             	mov    0x8(%rax),%edx
  8004218eb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218eb7:	48 8b 00             	mov    (%rax),%rax
  8004218eba:	8b 40 08             	mov    0x8(%rax),%eax
  8004218ebd:	41 89 f9             	mov    %edi,%r9d
  8004218ec0:	41 89 f0             	mov    %esi,%r8d
  8004218ec3:	89 c6                	mov    %eax,%esi
  8004218ec5:	48 bf e0 fd 21 04 80 	movabs $0x800421fde0,%rdi
  8004218ecc:	00 00 00 
  8004218ecf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218ed4:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004218edb:	00 00 00 
  8004218ede:	41 ff d2             	callq  *%r10
  8004218ee1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218ee5:	48 89 c7             	mov    %rax,%rdi
  8004218ee8:	48 b8 4b 8b 21 04 80 	movabs $0x8004218b4b,%rax
  8004218eef:	00 00 00 
  8004218ef2:	ff d0                	callq  *%rax
  8004218ef4:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218ef9:	c9                   	leaveq 
  8004218efa:	c3                   	retq   

0000008004218efb <pci_func_enable>:
  8004218efb:	55                   	push   %rbp
  8004218efc:	48 89 e5             	mov    %rsp,%rbp
  8004218eff:	48 83 ec 40          	sub    $0x40,%rsp
  8004218f03:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218f07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218f0b:	ba 07 00 00 00       	mov    $0x7,%edx
  8004218f10:	be 04 00 00 00       	mov    $0x4,%esi
  8004218f15:	48 89 c7             	mov    %rax,%rdi
  8004218f18:	48 b8 99 88 21 04 80 	movabs $0x8004218899,%rax
  8004218f1f:	00 00 00 
  8004218f22:	ff d0                	callq  *%rax
  8004218f24:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  8004218f2b:	e9 ee 01 00 00       	jmpq   800421911e <pci_func_enable+0x223>
  8004218f30:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218f33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218f37:	89 d6                	mov    %edx,%esi
  8004218f39:	48 89 c7             	mov    %rax,%rdi
  8004218f3c:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218f43:	00 00 00 
  8004218f46:	ff d0                	callq  *%rax
  8004218f48:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004218f4b:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  8004218f52:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218f55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218f59:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004218f5e:	89 ce                	mov    %ecx,%esi
  8004218f60:	48 89 c7             	mov    %rax,%rdi
  8004218f63:	48 b8 99 88 21 04 80 	movabs $0x8004218899,%rax
  8004218f6a:	00 00 00 
  8004218f6d:	ff d0                	callq  *%rax
  8004218f6f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218f72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218f76:	89 d6                	mov    %edx,%esi
  8004218f78:	48 89 c7             	mov    %rax,%rdi
  8004218f7b:	48 b8 44 88 21 04 80 	movabs $0x8004218844,%rax
  8004218f82:	00 00 00 
  8004218f85:	ff d0                	callq  *%rax
  8004218f87:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218f8a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004218f8e:	75 05                	jne    8004218f95 <pci_func_enable+0x9a>
  8004218f90:	e9 83 01 00 00       	jmpq   8004219118 <pci_func_enable+0x21d>
  8004218f95:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218f98:	83 e8 10             	sub    $0x10,%eax
  8004218f9b:	c1 e8 02             	shr    $0x2,%eax
  8004218f9e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218fa1:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218fa4:	83 e0 01             	and    $0x1,%eax
  8004218fa7:	85 c0                	test   %eax,%eax
  8004218fa9:	75 65                	jne    8004219010 <pci_func_enable+0x115>
  8004218fab:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218fae:	83 e0 06             	and    $0x6,%eax
  8004218fb1:	83 f8 04             	cmp    $0x4,%eax
  8004218fb4:	75 07                	jne    8004218fbd <pci_func_enable+0xc2>
  8004218fb6:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  8004218fbd:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218fc0:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218fc3:	f7 d8                	neg    %eax
  8004218fc5:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218fc8:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218fcb:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218fce:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218fd1:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218fd4:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218fd7:	48 b8 a0 a5 6d 04 80 	movabs $0x80046da5a0,%rax
  8004218fde:	00 00 00 
  8004218fe1:	8b 00                	mov    (%rax),%eax
  8004218fe3:	85 c0                	test   %eax,%eax
  8004218fe5:	74 7a                	je     8004219061 <pci_func_enable+0x166>
  8004218fe7:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004218fea:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218fed:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218ff0:	89 c6                	mov    %eax,%esi
  8004218ff2:	48 bf 10 fe 21 04 80 	movabs $0x800421fe10,%rdi
  8004218ff9:	00 00 00 
  8004218ffc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219001:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219008:	00 00 00 
  800421900b:	41 ff d0             	callq  *%r8
  800421900e:	eb 51                	jmp    8004219061 <pci_func_enable+0x166>
  8004219010:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219013:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219016:	f7 d8                	neg    %eax
  8004219018:	23 45 e8             	and    -0x18(%rbp),%eax
  800421901b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421901e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219021:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219024:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219027:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421902a:	48 b8 a0 a5 6d 04 80 	movabs $0x80046da5a0,%rax
  8004219031:	00 00 00 
  8004219034:	8b 00                	mov    (%rax),%eax
  8004219036:	85 c0                	test   %eax,%eax
  8004219038:	74 27                	je     8004219061 <pci_func_enable+0x166>
  800421903a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421903d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219040:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219043:	89 c6                	mov    %eax,%esi
  8004219045:	48 bf 38 fe 21 04 80 	movabs $0x800421fe38,%rdi
  800421904c:	00 00 00 
  800421904f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219054:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421905b:	00 00 00 
  800421905e:	41 ff d0             	callq  *%r8
  8004219061:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219064:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219067:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421906b:	89 ce                	mov    %ecx,%esi
  800421906d:	48 89 c7             	mov    %rax,%rdi
  8004219070:	48 b8 99 88 21 04 80 	movabs $0x8004218899,%rax
  8004219077:	00 00 00 
  800421907a:	ff d0                	callq  *%rax
  800421907c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219080:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219083:	48 63 d2             	movslq %edx,%rdx
  8004219086:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  800421908a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421908d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004219091:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219095:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219098:	48 63 d2             	movslq %edx,%rdx
  800421909b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  800421909f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042190a2:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  80042190a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042190a9:	74 6d                	je     8004219118 <pci_func_enable+0x21d>
  80042190ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042190af:	75 67                	jne    8004219118 <pci_func_enable+0x21d>
  80042190b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190b5:	8b 40 10             	mov    0x10(%rax),%eax
  80042190b8:	c1 e8 10             	shr    $0x10,%eax
  80042190bb:	41 89 c0             	mov    %eax,%r8d
  80042190be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190c2:	8b 40 10             	mov    0x10(%rax),%eax
  80042190c5:	0f b7 f8             	movzwl %ax,%edi
  80042190c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190cc:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042190cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190d3:	8b 50 08             	mov    0x8(%rax),%edx
  80042190d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190da:	48 8b 00             	mov    (%rax),%rax
  80042190dd:	8b 40 08             	mov    0x8(%rax),%eax
  80042190e0:	8b 75 f0             	mov    -0x10(%rbp),%esi
  80042190e3:	89 74 24 10          	mov    %esi,0x10(%rsp)
  80042190e7:	8b 75 f4             	mov    -0xc(%rbp),%esi
  80042190ea:	89 74 24 08          	mov    %esi,0x8(%rsp)
  80042190ee:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  80042190f1:	89 34 24             	mov    %esi,(%rsp)
  80042190f4:	45 89 c1             	mov    %r8d,%r9d
  80042190f7:	41 89 f8             	mov    %edi,%r8d
  80042190fa:	89 c6                	mov    %eax,%esi
  80042190fc:	48 bf 60 fe 21 04 80 	movabs $0x800421fe60,%rdi
  8004219103:	00 00 00 
  8004219106:	b8 00 00 00 00       	mov    $0x0,%eax
  800421910b:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004219112:	00 00 00 
  8004219115:	41 ff d2             	callq  *%r10
  8004219118:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421911b:	01 45 f8             	add    %eax,-0x8(%rbp)
  800421911e:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  8004219122:	0f 86 08 fe ff ff    	jbe    8004218f30 <pci_func_enable+0x35>
  8004219128:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421912c:	8b 40 10             	mov    0x10(%rax),%eax
  800421912f:	c1 e8 10             	shr    $0x10,%eax
  8004219132:	89 c7                	mov    %eax,%edi
  8004219134:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219138:	8b 40 10             	mov    0x10(%rax),%eax
  800421913b:	0f b7 f0             	movzwl %ax,%esi
  800421913e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219142:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219145:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219149:	8b 50 08             	mov    0x8(%rax),%edx
  800421914c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219150:	48 8b 00             	mov    (%rax),%rax
  8004219153:	8b 40 08             	mov    0x8(%rax),%eax
  8004219156:	41 89 f9             	mov    %edi,%r9d
  8004219159:	41 89 f0             	mov    %esi,%r8d
  800421915c:	89 c6                	mov    %eax,%esi
  800421915e:	48 bf c0 fe 21 04 80 	movabs $0x800421fec0,%rdi
  8004219165:	00 00 00 
  8004219168:	b8 00 00 00 00       	mov    $0x0,%eax
  800421916d:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004219174:	00 00 00 
  8004219177:	41 ff d2             	callq  *%r10
  800421917a:	c9                   	leaveq 
  800421917b:	c3                   	retq   

000000800421917c <pci_init>:
  800421917c:	55                   	push   %rbp
  800421917d:	48 89 e5             	mov    %rsp,%rbp
  8004219180:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219185:	be 00 00 00 00       	mov    $0x0,%esi
  800421918a:	48 bf b0 a5 6d 04 80 	movabs $0x80046da5b0,%rdi
  8004219191:	00 00 00 
  8004219194:	48 b8 93 09 21 04 80 	movabs $0x8004210993,%rax
  800421919b:	00 00 00 
  800421919e:	ff d0                	callq  *%rax
  80042191a0:	48 bf b0 a5 6d 04 80 	movabs $0x80046da5b0,%rdi
  80042191a7:	00 00 00 
  80042191aa:	48 b8 4b 8b 21 04 80 	movabs $0x8004218b4b,%rax
  80042191b1:	00 00 00 
  80042191b4:	ff d0                	callq  *%rax
  80042191b6:	5d                   	pop    %rbp
  80042191b7:	c3                   	retq   

00000080042191b8 <time_init>:
  80042191b8:	55                   	push   %rbp
  80042191b9:	48 89 e5             	mov    %rsp,%rbp
  80042191bc:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  80042191c3:	00 00 00 
  80042191c6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042191cc:	5d                   	pop    %rbp
  80042191cd:	c3                   	retq   

00000080042191ce <time_tick>:
  80042191ce:	55                   	push   %rbp
  80042191cf:	48 89 e5             	mov    %rsp,%rbp
  80042191d2:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  80042191d9:	00 00 00 
  80042191dc:	8b 00                	mov    (%rax),%eax
  80042191de:	8d 50 01             	lea    0x1(%rax),%edx
  80042191e1:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  80042191e8:	00 00 00 
  80042191eb:	89 10                	mov    %edx,(%rax)
  80042191ed:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  80042191f4:	00 00 00 
  80042191f7:	8b 10                	mov    (%rax),%edx
  80042191f9:	89 d0                	mov    %edx,%eax
  80042191fb:	c1 e0 02             	shl    $0x2,%eax
  80042191fe:	01 d0                	add    %edx,%eax
  8004219200:	01 c0                	add    %eax,%eax
  8004219202:	89 c2                	mov    %eax,%edx
  8004219204:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  800421920b:	00 00 00 
  800421920e:	8b 00                	mov    (%rax),%eax
  8004219210:	39 c2                	cmp    %eax,%edx
  8004219212:	73 2a                	jae    800421923e <time_tick+0x70>
  8004219214:	48 ba ef fe 21 04 80 	movabs $0x800421feef,%rdx
  800421921b:	00 00 00 
  800421921e:	be 14 00 00 00       	mov    $0x14,%esi
  8004219223:	48 bf 0a ff 21 04 80 	movabs $0x800421ff0a,%rdi
  800421922a:	00 00 00 
  800421922d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219232:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219239:	00 00 00 
  800421923c:	ff d1                	callq  *%rcx
  800421923e:	5d                   	pop    %rbp
  800421923f:	c3                   	retq   

0000008004219240 <time_msec>:
  8004219240:	55                   	push   %rbp
  8004219241:	48 89 e5             	mov    %rsp,%rbp
  8004219244:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  800421924b:	00 00 00 
  800421924e:	8b 10                	mov    (%rax),%edx
  8004219250:	89 d0                	mov    %edx,%eax
  8004219252:	c1 e0 02             	shl    $0x2,%eax
  8004219255:	01 d0                	add    %edx,%eax
  8004219257:	01 c0                	add    %eax,%eax
  8004219259:	5d                   	pop    %rbp
  800421925a:	c3                   	retq   

000000800421925b <page2ppn>:
  800421925b:	55                   	push   %rbp
  800421925c:	48 89 e5             	mov    %rsp,%rbp
  800421925f:	48 83 ec 08          	sub    $0x8,%rsp
  8004219263:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219267:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421926b:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004219272:	00 00 00 
  8004219275:	48 8b 00             	mov    (%rax),%rax
  8004219278:	48 29 c2             	sub    %rax,%rdx
  800421927b:	48 89 d0             	mov    %rdx,%rax
  800421927e:	48 c1 f8 04          	sar    $0x4,%rax
  8004219282:	c9                   	leaveq 
  8004219283:	c3                   	retq   

0000008004219284 <page2pa>:
  8004219284:	55                   	push   %rbp
  8004219285:	48 89 e5             	mov    %rsp,%rbp
  8004219288:	48 83 ec 08          	sub    $0x8,%rsp
  800421928c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219294:	48 89 c7             	mov    %rax,%rdi
  8004219297:	48 b8 5b 92 21 04 80 	movabs $0x800421925b,%rax
  800421929e:	00 00 00 
  80042192a1:	ff d0                	callq  *%rax
  80042192a3:	48 c1 e0 0c          	shl    $0xc,%rax
  80042192a7:	c9                   	leaveq 
  80042192a8:	c3                   	retq   

00000080042192a9 <pa2page>:
  80042192a9:	55                   	push   %rbp
  80042192aa:	48 89 e5             	mov    %rsp,%rbp
  80042192ad:	48 83 ec 10          	sub    $0x10,%rsp
  80042192b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042192b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042192b9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042192bd:	48 89 c2             	mov    %rax,%rdx
  80042192c0:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042192c7:	00 00 00 
  80042192ca:	48 8b 00             	mov    (%rax),%rax
  80042192cd:	48 39 c2             	cmp    %rax,%rdx
  80042192d0:	72 2a                	jb     80042192fc <pa2page+0x53>
  80042192d2:	48 ba 20 ff 21 04 80 	movabs $0x800421ff20,%rdx
  80042192d9:	00 00 00 
  80042192dc:	be 5b 00 00 00       	mov    $0x5b,%esi
  80042192e1:	48 bf 3f ff 21 04 80 	movabs $0x800421ff3f,%rdi
  80042192e8:	00 00 00 
  80042192eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042192f0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042192f7:	00 00 00 
  80042192fa:	ff d1                	callq  *%rcx
  80042192fc:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004219303:	00 00 00 
  8004219306:	48 8b 00             	mov    (%rax),%rax
  8004219309:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421930d:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004219311:	48 c1 e2 04          	shl    $0x4,%rdx
  8004219315:	48 01 d0             	add    %rdx,%rax
  8004219318:	c9                   	leaveq 
  8004219319:	c3                   	retq   

000000800421931a <page2kva>:
  800421931a:	55                   	push   %rbp
  800421931b:	48 89 e5             	mov    %rsp,%rbp
  800421931e:	48 83 ec 20          	sub    $0x20,%rsp
  8004219322:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421932a:	48 89 c7             	mov    %rax,%rdi
  800421932d:	48 b8 84 92 21 04 80 	movabs $0x8004219284,%rax
  8004219334:	00 00 00 
  8004219337:	ff d0                	callq  *%rax
  8004219339:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421933d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219341:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219345:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219348:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421934b:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004219352:	00 00 00 
  8004219355:	48 8b 00             	mov    (%rax),%rax
  8004219358:	48 39 c2             	cmp    %rax,%rdx
  800421935b:	72 32                	jb     800421938f <page2kva+0x75>
  800421935d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219361:	48 89 c1             	mov    %rax,%rcx
  8004219364:	48 ba 50 ff 21 04 80 	movabs $0x800421ff50,%rdx
  800421936b:	00 00 00 
  800421936e:	be 62 00 00 00       	mov    $0x62,%esi
  8004219373:	48 bf 3f ff 21 04 80 	movabs $0x800421ff3f,%rdi
  800421937a:	00 00 00 
  800421937d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219382:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219389:	00 00 00 
  800421938c:	41 ff d0             	callq  *%r8
  800421938f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219396:	00 00 00 
  8004219399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421939d:	48 01 d0             	add    %rdx,%rax
  80042193a0:	c9                   	leaveq 
  80042193a1:	c3                   	retq   

00000080042193a2 <epte_addr>:
  80042193a2:	55                   	push   %rbp
  80042193a3:	48 89 e5             	mov    %rsp,%rbp
  80042193a6:	48 83 ec 08          	sub    $0x8,%rsp
  80042193aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042193ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042193b2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042193b8:	c9                   	leaveq 
  80042193b9:	c3                   	retq   

00000080042193ba <epte_present>:
  80042193ba:	55                   	push   %rbp
  80042193bb:	48 89 e5             	mov    %rsp,%rbp
  80042193be:	48 83 ec 08          	sub    $0x8,%rsp
  80042193c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042193c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042193ca:	83 e0 07             	and    $0x7,%eax
  80042193cd:	48 85 c0             	test   %rax,%rax
  80042193d0:	0f 95 c0             	setne  %al
  80042193d3:	0f b6 c0             	movzbl %al,%eax
  80042193d6:	c9                   	leaveq 
  80042193d7:	c3                   	retq   

00000080042193d8 <ept_lookup_gpa>:
  80042193d8:	55                   	push   %rbp
  80042193d9:	48 89 e5             	mov    %rsp,%rbp
  80042193dc:	48 83 ec 20          	sub    $0x20,%rsp
  80042193e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042193e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042193e8:	89 55 ec             	mov    %edx,-0x14(%rbp)
  80042193eb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  80042193ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042193f4:	c9                   	leaveq 
  80042193f5:	c3                   	retq   

00000080042193f6 <ept_gpa2hva>:
  80042193f6:	55                   	push   %rbp
  80042193f7:	48 89 e5             	mov    %rsp,%rbp
  80042193fa:	48 83 ec 40          	sub    $0x40,%rsp
  80042193fe:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219402:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004219406:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421940a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  800421940e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004219412:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219416:	48 89 d1             	mov    %rdx,%rcx
  8004219419:	ba 00 00 00 00       	mov    $0x0,%edx
  800421941e:	48 89 c7             	mov    %rax,%rdi
  8004219421:	48 b8 d8 93 21 04 80 	movabs $0x80042193d8,%rax
  8004219428:	00 00 00 
  800421942b:	ff d0                	callq  *%rax
  800421942d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004219430:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004219434:	79 10                	jns    8004219446 <ept_gpa2hva+0x50>
  8004219436:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421943a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219441:	e9 b1 00 00 00       	jmpq   80042194f7 <ept_gpa2hva+0x101>
  8004219446:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421944a:	48 8b 00             	mov    (%rax),%rax
  800421944d:	48 89 c7             	mov    %rax,%rdi
  8004219450:	48 b8 ba 93 21 04 80 	movabs $0x80042193ba,%rax
  8004219457:	00 00 00 
  800421945a:	ff d0                	callq  *%rax
  800421945c:	85 c0                	test   %eax,%eax
  800421945e:	75 10                	jne    8004219470 <ept_gpa2hva+0x7a>
  8004219460:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219464:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421946b:	e9 87 00 00 00       	jmpq   80042194f7 <ept_gpa2hva+0x101>
  8004219470:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219474:	48 8b 00             	mov    (%rax),%rax
  8004219477:	48 89 c7             	mov    %rax,%rdi
  800421947a:	48 b8 a2 93 21 04 80 	movabs $0x80042193a2,%rax
  8004219481:	00 00 00 
  8004219484:	ff d0                	callq  *%rax
  8004219486:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421948a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421948e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219492:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219495:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219498:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800421949f:	00 00 00 
  80042194a2:	48 8b 00             	mov    (%rax),%rax
  80042194a5:	48 39 c2             	cmp    %rax,%rdx
  80042194a8:	72 32                	jb     80042194dc <ept_gpa2hva+0xe6>
  80042194aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042194ae:	48 89 c1             	mov    %rax,%rcx
  80042194b1:	48 ba 50 ff 21 04 80 	movabs $0x800421ff50,%rdx
  80042194b8:	00 00 00 
  80042194bb:	be 40 00 00 00       	mov    $0x40,%esi
  80042194c0:	48 bf 73 ff 21 04 80 	movabs $0x800421ff73,%rdi
  80042194c7:	00 00 00 
  80042194ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042194cf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042194d6:	00 00 00 
  80042194d9:	41 ff d0             	callq  *%r8
  80042194dc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042194e3:	00 00 00 
  80042194e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042194ea:	48 01 d0             	add    %rdx,%rax
  80042194ed:	48 89 c2             	mov    %rax,%rdx
  80042194f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042194f4:	48 89 10             	mov    %rdx,(%rax)
  80042194f7:	c9                   	leaveq 
  80042194f8:	c3                   	retq   

00000080042194f9 <free_ept_level>:
  80042194f9:	55                   	push   %rbp
  80042194fa:	48 89 e5             	mov    %rsp,%rbp
  80042194fd:	48 83 ec 40          	sub    $0x40,%rsp
  8004219501:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004219505:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004219508:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421950c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219510:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219517:	e9 82 01 00 00       	jmpq   800421969e <free_ept_level+0x1a5>
  800421951c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004219520:	0f 84 fe 00 00 00    	je     8004219624 <free_ept_level+0x12b>
  8004219526:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219529:	48 98                	cltq   
  800421952b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219532:	00 
  8004219533:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219537:	48 01 d0             	add    %rdx,%rax
  800421953a:	48 8b 00             	mov    (%rax),%rax
  800421953d:	48 89 c7             	mov    %rax,%rdi
  8004219540:	48 b8 ba 93 21 04 80 	movabs $0x80042193ba,%rax
  8004219547:	00 00 00 
  800421954a:	ff d0                	callq  *%rax
  800421954c:	85 c0                	test   %eax,%eax
  800421954e:	0f 84 46 01 00 00    	je     800421969a <free_ept_level+0x1a1>
  8004219554:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219557:	48 98                	cltq   
  8004219559:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219560:	00 
  8004219561:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219565:	48 01 d0             	add    %rdx,%rax
  8004219568:	48 8b 00             	mov    (%rax),%rax
  800421956b:	48 89 c7             	mov    %rax,%rdi
  800421956e:	48 b8 a2 93 21 04 80 	movabs $0x80042193a2,%rax
  8004219575:	00 00 00 
  8004219578:	ff d0                	callq  *%rax
  800421957a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421957e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004219581:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004219584:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219588:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421958c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219590:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219594:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219597:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  800421959a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042195a1:	00 00 00 
  80042195a4:	48 8b 00             	mov    (%rax),%rax
  80042195a7:	48 39 c1             	cmp    %rax,%rcx
  80042195aa:	72 32                	jb     80042195de <free_ept_level+0xe5>
  80042195ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042195b0:	48 89 c1             	mov    %rax,%rcx
  80042195b3:	48 ba 50 ff 21 04 80 	movabs $0x800421ff50,%rdx
  80042195ba:	00 00 00 
  80042195bd:	be 4d 00 00 00       	mov    $0x4d,%esi
  80042195c2:	48 bf 73 ff 21 04 80 	movabs $0x800421ff73,%rdi
  80042195c9:	00 00 00 
  80042195cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042195d1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042195d8:	00 00 00 
  80042195db:	41 ff d0             	callq  *%r8
  80042195de:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  80042195e5:	00 00 00 
  80042195e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042195ec:	48 01 c8             	add    %rcx,%rax
  80042195ef:	89 d6                	mov    %edx,%esi
  80042195f1:	48 89 c7             	mov    %rax,%rdi
  80042195f4:	48 b8 f9 94 21 04 80 	movabs $0x80042194f9,%rax
  80042195fb:	00 00 00 
  80042195fe:	ff d0                	callq  *%rax
  8004219600:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219604:	48 89 c7             	mov    %rax,%rdi
  8004219607:	48 b8 a9 92 21 04 80 	movabs $0x80042192a9,%rax
  800421960e:	00 00 00 
  8004219611:	ff d0                	callq  *%rax
  8004219613:	48 89 c7             	mov    %rax,%rdi
  8004219616:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421961d:	00 00 00 
  8004219620:	ff d0                	callq  *%rax
  8004219622:	eb 76                	jmp    800421969a <free_ept_level+0x1a1>
  8004219624:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219627:	48 98                	cltq   
  8004219629:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219630:	00 
  8004219631:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219635:	48 01 d0             	add    %rdx,%rax
  8004219638:	48 8b 00             	mov    (%rax),%rax
  800421963b:	48 89 c7             	mov    %rax,%rdi
  800421963e:	48 b8 ba 93 21 04 80 	movabs $0x80042193ba,%rax
  8004219645:	00 00 00 
  8004219648:	ff d0                	callq  *%rax
  800421964a:	85 c0                	test   %eax,%eax
  800421964c:	74 4c                	je     800421969a <free_ept_level+0x1a1>
  800421964e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219651:	48 98                	cltq   
  8004219653:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421965a:	00 
  800421965b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421965f:	48 01 d0             	add    %rdx,%rax
  8004219662:	48 8b 00             	mov    (%rax),%rax
  8004219665:	48 89 c7             	mov    %rax,%rdi
  8004219668:	48 b8 a2 93 21 04 80 	movabs $0x80042193a2,%rax
  800421966f:	00 00 00 
  8004219672:	ff d0                	callq  *%rax
  8004219674:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219678:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421967c:	48 89 c7             	mov    %rax,%rdi
  800421967f:	48 b8 a9 92 21 04 80 	movabs $0x80042192a9,%rax
  8004219686:	00 00 00 
  8004219689:	ff d0                	callq  *%rax
  800421968b:	48 89 c7             	mov    %rax,%rdi
  800421968e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219695:	00 00 00 
  8004219698:	ff d0                	callq  *%rax
  800421969a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421969e:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  80042196a5:	0f 8e 71 fe ff ff    	jle    800421951c <free_ept_level+0x23>
  80042196ab:	90                   	nop
  80042196ac:	c9                   	leaveq 
  80042196ad:	c3                   	retq   

00000080042196ae <free_guest_mem>:
  80042196ae:	55                   	push   %rbp
  80042196af:	48 89 e5             	mov    %rsp,%rbp
  80042196b2:	48 83 ec 20          	sub    $0x20,%rsp
  80042196b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042196ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042196be:	be 03 00 00 00       	mov    $0x3,%esi
  80042196c3:	48 89 c7             	mov    %rax,%rdi
  80042196c6:	48 b8 f9 94 21 04 80 	movabs $0x80042194f9,%rax
  80042196cd:	00 00 00 
  80042196d0:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  80042196d2:	0f 20 d8             	mov    %cr3,%rax
  80042196d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  80042196d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042196dd:	0f 22 d8             	mov    %rax,%cr3
  80042196e0:	c9                   	leaveq 
  80042196e1:	c3                   	retq   

00000080042196e2 <ept_page_insert>:
  80042196e2:	55                   	push   %rbp
  80042196e3:	48 89 e5             	mov    %rsp,%rbp
  80042196e6:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042196ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042196ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042196f2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042196f6:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042196f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042196fe:	c9                   	leaveq 
  80042196ff:	c3                   	retq   

0000008004219700 <ept_map_hva2gpa>:
  8004219700:	55                   	push   %rbp
  8004219701:	48 89 e5             	mov    %rsp,%rbp
  8004219704:	48 83 ec 20          	sub    $0x20,%rsp
  8004219708:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421970c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219710:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004219714:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004219717:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
  800421971b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219720:	c9                   	leaveq 
  8004219721:	c3                   	retq   

0000008004219722 <ept_alloc_static>:
  8004219722:	55                   	push   %rbp
  8004219723:	48 89 e5             	mov    %rsp,%rbp
  8004219726:	53                   	push   %rbx
  8004219727:	48 83 ec 48          	sub    $0x48,%rsp
  800421972b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421972f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219733:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421973a:	00 
  800421973b:	eb 6e                	jmp    80042197ab <ept_alloc_static+0x89>
  800421973d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219742:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219749:	00 00 00 
  800421974c:	ff d0                	callq  *%rax
  800421974e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219752:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219756:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421975a:	8d 50 01             	lea    0x1(%rax),%edx
  800421975d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219761:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219765:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219769:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421976d:	48 89 c7             	mov    %rax,%rdi
  8004219770:	48 b8 1a 93 21 04 80 	movabs $0x800421931a,%rax
  8004219777:	00 00 00 
  800421977a:	ff d0                	callq  *%rax
  800421977c:	48 89 c6             	mov    %rax,%rsi
  800421977f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219783:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219789:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421978e:	48 89 da             	mov    %rbx,%rdx
  8004219791:	48 89 c7             	mov    %rax,%rdi
  8004219794:	48 b8 00 97 21 04 80 	movabs $0x8004219700,%rax
  800421979b:	00 00 00 
  800421979e:	ff d0                	callq  *%rax
  80042197a0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042197a3:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  80042197aa:	00 
  80042197ab:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  80042197b2:	00 
  80042197b3:	76 88                	jbe    800421973d <ept_alloc_static+0x1b>
  80042197b5:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  80042197bc:	00 
  80042197bd:	eb 6e                	jmp    800421982d <ept_alloc_static+0x10b>
  80042197bf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042197c4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042197cb:	00 00 00 
  80042197ce:	ff d0                	callq  *%rax
  80042197d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042197d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042197d8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042197dc:	8d 50 01             	lea    0x1(%rax),%edx
  80042197df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042197e3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042197e7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  80042197eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042197ef:	48 89 c7             	mov    %rax,%rdi
  80042197f2:	48 b8 1a 93 21 04 80 	movabs $0x800421931a,%rax
  80042197f9:	00 00 00 
  80042197fc:	ff d0                	callq  *%rax
  80042197fe:	48 89 c6             	mov    %rax,%rsi
  8004219801:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219805:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421980b:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004219810:	48 89 da             	mov    %rbx,%rdx
  8004219813:	48 89 c7             	mov    %rax,%rdi
  8004219816:	48 b8 00 97 21 04 80 	movabs $0x8004219700,%rax
  800421981d:	00 00 00 
  8004219820:	ff d0                	callq  *%rax
  8004219822:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004219825:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421982c:	00 
  800421982d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219831:	48 8b 00             	mov    (%rax),%rax
  8004219834:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004219838:	77 85                	ja     80042197bf <ept_alloc_static+0x9d>
  800421983a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421983f:	48 83 c4 48          	add    $0x48,%rsp
  8004219843:	5b                   	pop    %rbx
  8004219844:	5d                   	pop    %rbp
  8004219845:	c3                   	retq   

0000008004219846 <vmcs_writel>:
  8004219846:	55                   	push   %rbp
  8004219847:	48 89 e5             	mov    %rsp,%rbp
  800421984a:	48 83 ec 20          	sub    $0x20,%rsp
  800421984e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004219851:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004219855:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219859:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421985c:	f8                   	clc    
  800421985d:	0f 79 d0             	vmwrite %rax,%rdx
  8004219860:	0f 96 c0             	setbe  %al
  8004219863:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004219866:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421986a:	c9                   	leaveq 
  800421986b:	c3                   	retq   

000000800421986c <vmcs_readl>:
  800421986c:	55                   	push   %rbp
  800421986d:	48 89 e5             	mov    %rsp,%rbp
  8004219870:	48 83 ec 14          	sub    $0x14,%rsp
  8004219874:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004219877:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421987a:	89 c2                	mov    %eax,%edx
  800421987c:	0f 78 d0             	vmread %rdx,%rax
  800421987f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219887:	c9                   	leaveq 
  8004219888:	c3                   	retq   

0000008004219889 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004219889:	55                   	push   %rbp
  800421988a:	48 89 e5             	mov    %rsp,%rbp
  800421988d:	53                   	push   %rbx
  800421988e:	48 83 ec 38          	sub    $0x38,%rsp
  8004219892:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004219895:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004219899:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421989d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  80042198a1:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  80042198a5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042198a8:	0f a2                	cpuid  
  80042198aa:	89 de                	mov    %ebx,%esi
  80042198ac:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042198af:	89 75 f0             	mov    %esi,-0x10(%rbp)
  80042198b2:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  80042198b5:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  80042198b8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042198bd:	74 09                	je     80042198c8 <cpuid+0x3f>
		*eaxp = eax;
  80042198bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042198c3:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042198c6:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  80042198c8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042198cd:	74 09                	je     80042198d8 <cpuid+0x4f>
		*ebxp = ebx;
  80042198cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042198d3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042198d6:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  80042198d8:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042198dd:	74 09                	je     80042198e8 <cpuid+0x5f>
		*ecxp = ecx;
  80042198df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042198e3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042198e6:	89 10                	mov    %edx,(%rax)
	if (edxp)
  80042198e8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042198ed:	74 09                	je     80042198f8 <cpuid+0x6f>
		*edxp = edx;
  80042198ef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042198f3:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042198f6:	89 10                	mov    %edx,(%rax)
}
  80042198f8:	48 83 c4 38          	add    $0x38,%rsp
  80042198fc:	5b                   	pop    %rbx
  80042198fd:	5d                   	pop    %rbp
  80042198fe:	c3                   	retq   

00000080042198ff <page2ppn>:
  80042198ff:	55                   	push   %rbp
  8004219900:	48 89 e5             	mov    %rsp,%rbp
  8004219903:	48 83 ec 08          	sub    $0x8,%rsp
  8004219907:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421990b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421990f:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004219916:	00 00 00 
  8004219919:	48 8b 00             	mov    (%rax),%rax
  800421991c:	48 29 c2             	sub    %rax,%rdx
  800421991f:	48 89 d0             	mov    %rdx,%rax
  8004219922:	48 c1 f8 04          	sar    $0x4,%rax
  8004219926:	c9                   	leaveq 
  8004219927:	c3                   	retq   

0000008004219928 <page2pa>:
  8004219928:	55                   	push   %rbp
  8004219929:	48 89 e5             	mov    %rsp,%rbp
  800421992c:	48 83 ec 08          	sub    $0x8,%rsp
  8004219930:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219934:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219938:	48 89 c7             	mov    %rax,%rdi
  800421993b:	48 b8 ff 98 21 04 80 	movabs $0x80042198ff,%rax
  8004219942:	00 00 00 
  8004219945:	ff d0                	callq  *%rax
  8004219947:	48 c1 e0 0c          	shl    $0xc,%rax
  800421994b:	c9                   	leaveq 
  800421994c:	c3                   	retq   

000000800421994d <page2kva>:
  800421994d:	55                   	push   %rbp
  800421994e:	48 89 e5             	mov    %rsp,%rbp
  8004219951:	48 83 ec 20          	sub    $0x20,%rsp
  8004219955:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421995d:	48 89 c7             	mov    %rax,%rdi
  8004219960:	48 b8 28 99 21 04 80 	movabs $0x8004219928,%rax
  8004219967:	00 00 00 
  800421996a:	ff d0                	callq  *%rax
  800421996c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219974:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219978:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421997b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421997e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004219985:	00 00 00 
  8004219988:	48 8b 00             	mov    (%rax),%rax
  800421998b:	48 39 c2             	cmp    %rax,%rdx
  800421998e:	72 32                	jb     80042199c2 <page2kva+0x75>
  8004219990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219994:	48 89 c1             	mov    %rax,%rcx
  8004219997:	48 ba 80 ff 21 04 80 	movabs $0x800421ff80,%rdx
  800421999e:	00 00 00 
  80042199a1:	be 62 00 00 00       	mov    $0x62,%esi
  80042199a6:	48 bf a3 ff 21 04 80 	movabs $0x800421ffa3,%rdi
  80042199ad:	00 00 00 
  80042199b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042199b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042199bc:	00 00 00 
  80042199bf:	41 ff d0             	callq  *%r8
  80042199c2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042199c9:	00 00 00 
  80042199cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042199d0:	48 01 d0             	add    %rdx,%rax
  80042199d3:	c9                   	leaveq 
  80042199d4:	c3                   	retq   

00000080042199d5 <lock_kernel>:
  80042199d5:	55                   	push   %rbp
  80042199d6:	48 89 e5             	mov    %rsp,%rbp
  80042199d9:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  80042199e0:	00 00 00 
  80042199e3:	48 b8 1d 7d 21 04 80 	movabs $0x8004217d1d,%rax
  80042199ea:	00 00 00 
  80042199ed:	ff d0                	callq  *%rax
  80042199ef:	5d                   	pop    %rbp
  80042199f0:	c3                   	retq   

00000080042199f1 <unlock_kernel>:
  80042199f1:	55                   	push   %rbp
  80042199f2:	48 89 e5             	mov    %rsp,%rbp
  80042199f5:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  80042199fc:	00 00 00 
  80042199ff:	48 b8 f4 7d 21 04 80 	movabs $0x8004217df4,%rax
  8004219a06:	00 00 00 
  8004219a09:	ff d0                	callq  *%rax
  8004219a0b:	f3 90                	pause  
  8004219a0d:	5d                   	pop    %rbp
  8004219a0e:	c3                   	retq   

0000008004219a0f <vmx_list_vms>:
  8004219a0f:	55                   	push   %rbp
  8004219a10:	48 89 e5             	mov    %rsp,%rbp
  8004219a13:	48 83 ec 10          	sub    $0x10,%rsp
  8004219a17:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004219a1e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219a25:	e9 96 00 00 00       	jmpq   8004219ac0 <vmx_list_vms+0xb1>
  8004219a2a:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219a31:	00 00 00 
  8004219a34:	48 8b 10             	mov    (%rax),%rdx
  8004219a37:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219a3a:	48 98                	cltq   
  8004219a3c:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219a43:	48 01 d0             	add    %rdx,%rax
  8004219a46:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004219a4c:	83 f8 03             	cmp    $0x3,%eax
  8004219a4f:	75 6b                	jne    8004219abc <vmx_list_vms+0xad>
  8004219a51:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004219a55:	75 1b                	jne    8004219a72 <vmx_list_vms+0x63>
  8004219a57:	48 bf b2 ff 21 04 80 	movabs $0x800421ffb2,%rdi
  8004219a5e:	00 00 00 
  8004219a61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a66:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219a6d:	00 00 00 
  8004219a70:	ff d2                	callq  *%rdx
  8004219a72:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004219a76:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219a7d:	00 00 00 
  8004219a80:	48 8b 10             	mov    (%rax),%rdx
  8004219a83:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219a86:	48 98                	cltq   
  8004219a88:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219a8f:	48 01 d0             	add    %rdx,%rax
  8004219a92:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219a98:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219a9b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219a9e:	89 c6                	mov    %eax,%esi
  8004219aa0:	48 bf c0 ff 21 04 80 	movabs $0x800421ffc0,%rdi
  8004219aa7:	00 00 00 
  8004219aaa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219aaf:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219ab6:	00 00 00 
  8004219ab9:	41 ff d0             	callq  *%r8
  8004219abc:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219ac0:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004219ac7:	0f 8e 5d ff ff ff    	jle    8004219a2a <vmx_list_vms+0x1b>
  8004219acd:	c9                   	leaveq 
  8004219ace:	c3                   	retq   

0000008004219acf <vmx_sel_resume>:
  8004219acf:	55                   	push   %rbp
  8004219ad0:	48 89 e5             	mov    %rsp,%rbp
  8004219ad3:	48 83 ec 20          	sub    $0x20,%rsp
  8004219ad7:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004219ada:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004219ae1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219ae8:	e9 84 00 00 00       	jmpq   8004219b71 <vmx_sel_resume+0xa2>
  8004219aed:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219af4:	00 00 00 
  8004219af7:	48 8b 10             	mov    (%rax),%rdx
  8004219afa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219afd:	48 98                	cltq   
  8004219aff:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219b06:	48 01 d0             	add    %rdx,%rax
  8004219b09:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004219b0f:	83 f8 03             	cmp    $0x3,%eax
  8004219b12:	75 59                	jne    8004219b6d <vmx_sel_resume+0x9e>
  8004219b14:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004219b18:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219b1b:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004219b1e:	75 4d                	jne    8004219b6d <vmx_sel_resume+0x9e>
  8004219b20:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219b23:	89 c6                	mov    %eax,%esi
  8004219b25:	48 bf cd ff 21 04 80 	movabs $0x800421ffcd,%rdi
  8004219b2c:	00 00 00 
  8004219b2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b34:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219b3b:	00 00 00 
  8004219b3e:	ff d2                	callq  *%rdx
  8004219b40:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219b47:	00 00 00 
  8004219b4a:	48 8b 10             	mov    (%rax),%rdx
  8004219b4d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219b50:	48 98                	cltq   
  8004219b52:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219b59:	48 01 d0             	add    %rdx,%rax
  8004219b5c:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004219b63:	00 00 00 
  8004219b66:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219b6b:	eb 36                	jmp    8004219ba3 <vmx_sel_resume+0xd4>
  8004219b6d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219b71:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004219b78:	0f 8e 6f ff ff ff    	jle    8004219aed <vmx_sel_resume+0x1e>
  8004219b7e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219b81:	89 c6                	mov    %eax,%esi
  8004219b83:	48 bf e0 ff 21 04 80 	movabs $0x800421ffe0,%rdi
  8004219b8a:	00 00 00 
  8004219b8d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b92:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219b99:	00 00 00 
  8004219b9c:	ff d2                	callq  *%rdx
  8004219b9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ba3:	c9                   	leaveq 
  8004219ba4:	c3                   	retq   

0000008004219ba5 <vmx_check_support>:
  8004219ba5:	55                   	push   %rbp
  8004219ba6:	48 89 e5             	mov    %rsp,%rbp
  8004219ba9:	48 83 ec 20          	sub    $0x20,%rsp
  8004219bad:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  8004219bb1:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  8004219bb5:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  8004219bb9:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  8004219bbd:	49 89 f0             	mov    %rsi,%r8
  8004219bc0:	48 89 c6             	mov    %rax,%rsi
  8004219bc3:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219bc8:	48 b8 89 98 21 04 80 	movabs $0x8004219889,%rax
  8004219bcf:	00 00 00 
  8004219bd2:	ff d0                	callq  *%rax
  8004219bd4:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004219bd7:	83 e0 20             	and    $0x20,%eax
  8004219bda:	85 c0                	test   %eax,%eax
  8004219bdc:	0f 95 c0             	setne  %al
  8004219bdf:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004219be2:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004219be6:	74 1d                	je     8004219c05 <vmx_check_support+0x60>
  8004219be8:	48 bf 02 00 22 04 80 	movabs $0x8004220002,%rdi
  8004219bef:	00 00 00 
  8004219bf2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219bf7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219bfe:	00 00 00 
  8004219c01:	ff d2                	callq  *%rdx
  8004219c03:	eb 1b                	jmp    8004219c20 <vmx_check_support+0x7b>
  8004219c05:	48 bf 20 00 22 04 80 	movabs $0x8004220020,%rdi
  8004219c0c:	00 00 00 
  8004219c0f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c14:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219c1b:	00 00 00 
  8004219c1e:	ff d2                	callq  *%rdx
  8004219c20:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  8004219c24:	c9                   	leaveq 
  8004219c25:	c3                   	retq   

0000008004219c26 <vmx_check_ept>:
  8004219c26:	55                   	push   %rbp
  8004219c27:	48 89 e5             	mov    %rsp,%rbp
  8004219c2a:	48 83 ec 50          	sub    $0x50,%rsp
  8004219c2e:	c7 45 e0 82 04 00 00 	movl   $0x482,-0x20(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219c35:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004219c38:	89 c1                	mov    %eax,%ecx
  8004219c3a:	0f 32                	rdmsr  
  8004219c3c:	89 55 dc             	mov    %edx,-0x24(%rbp)
  8004219c3f:	89 45 d8             	mov    %eax,-0x28(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219c42:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004219c49:	00 
	ret = edx;
  8004219c4a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219c4d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  8004219c51:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  8004219c56:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004219c59:	48 09 45 d0          	or     %rax,-0x30(%rbp)

	return ret;
  8004219c5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219c61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219c65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219c69:	48 c1 e8 3f          	shr    $0x3f,%rax
  8004219c6d:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004219c70:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  8004219c74:	0f 84 b5 00 00 00    	je     8004219d2f <vmx_check_ept+0x109>
  8004219c7a:	c7 45 cc 8b 04 00 00 	movl   $0x48b,-0x34(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219c81:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004219c84:	89 c1                	mov    %eax,%ecx
  8004219c86:	0f 32                	rdmsr  
  8004219c88:	89 55 c8             	mov    %edx,-0x38(%rbp)
  8004219c8b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219c8e:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004219c95:	00 
	ret = edx;
  8004219c96:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004219c99:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ret = ret << 32;
  8004219c9d:	48 c1 65 b8 20       	shlq   $0x20,-0x48(%rbp)
	ret |= eax;
  8004219ca2:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004219ca5:	48 09 45 b8          	or     %rax,-0x48(%rbp)

	return ret;
  8004219ca9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219cad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219cb1:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  8004219cb8:	00 00 00 
  8004219cbb:	48 23 45 e8          	and    -0x18(%rbp),%rax
  8004219cbf:	48 85 c0             	test   %rax,%rax
  8004219cc2:	0f 95 c0             	setne  %al
  8004219cc5:	88 45 e7             	mov    %al,-0x19(%rbp)
  8004219cc8:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  8004219ccc:	74 22                	je     8004219cf0 <vmx_check_ept+0xca>
  8004219cce:	48 bf 40 00 22 04 80 	movabs $0x8004220040,%rdi
  8004219cd5:	00 00 00 
  8004219cd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219cdd:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219ce4:	00 00 00 
  8004219ce7:	ff d2                	callq  *%rdx
  8004219ce9:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219cee:	eb 5f                	jmp    8004219d4f <vmx_check_ept+0x129>
  8004219cf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219cf4:	48 89 c6             	mov    %rax,%rsi
  8004219cf7:	48 bf 67 00 22 04 80 	movabs $0x8004220067,%rdi
  8004219cfe:	00 00 00 
  8004219d01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d06:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219d0d:	00 00 00 
  8004219d10:	ff d2                	callq  *%rdx
  8004219d12:	48 bf 6c 00 22 04 80 	movabs $0x800422006c,%rdi
  8004219d19:	00 00 00 
  8004219d1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d21:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219d28:	00 00 00 
  8004219d2b:	ff d2                	callq  *%rdx
  8004219d2d:	eb 1b                	jmp    8004219d4a <vmx_check_ept+0x124>
  8004219d2f:	48 bf 7c 00 22 04 80 	movabs $0x800422007c,%rdi
  8004219d36:	00 00 00 
  8004219d39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d3e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219d45:	00 00 00 
  8004219d48:	ff d2                	callq  *%rdx
  8004219d4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d4f:	c9                   	leaveq 
  8004219d50:	c3                   	retq   

0000008004219d51 <check_fixed_bits>:
  8004219d51:	55                   	push   %rbp
  8004219d52:	48 89 e5             	mov    %rsp,%rbp
  8004219d55:	48 83 ec 30          	sub    $0x30,%rsp
  8004219d59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219d5d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004219d61:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004219d65:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219d6c:	e9 96 00 00 00       	jmpq   8004219e07 <check_fixed_bits+0xb6>
  8004219d71:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219d74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004219d78:	89 c1                	mov    %eax,%ecx
  8004219d7a:	48 d3 ea             	shr    %cl,%rdx
  8004219d7d:	48 89 d0             	mov    %rdx,%rax
  8004219d80:	83 e0 01             	and    $0x1,%eax
  8004219d83:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004219d86:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  8004219d8a:	75 1e                	jne    8004219daa <check_fixed_bits+0x59>
  8004219d8c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219d8f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004219d93:	89 c1                	mov    %eax,%ecx
  8004219d95:	48 d3 ea             	shr    %cl,%rdx
  8004219d98:	48 89 d0             	mov    %rdx,%rax
  8004219d9b:	83 e0 01             	and    $0x1,%eax
  8004219d9e:	48 85 c0             	test   %rax,%rax
  8004219da1:	75 60                	jne    8004219e03 <check_fixed_bits+0xb2>
  8004219da3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219da8:	eb 6e                	jmp    8004219e18 <check_fixed_bits+0xc7>
  8004219daa:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004219dae:	75 1e                	jne    8004219dce <check_fixed_bits+0x7d>
  8004219db0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219db3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004219db7:	89 c1                	mov    %eax,%ecx
  8004219db9:	48 d3 ea             	shr    %cl,%rdx
  8004219dbc:	48 89 d0             	mov    %rdx,%rax
  8004219dbf:	83 e0 01             	and    $0x1,%eax
  8004219dc2:	48 85 c0             	test   %rax,%rax
  8004219dc5:	74 3c                	je     8004219e03 <check_fixed_bits+0xb2>
  8004219dc7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219dcc:	eb 4a                	jmp    8004219e18 <check_fixed_bits+0xc7>
  8004219dce:	48 b9 96 00 22 04 80 	movabs $0x8004220096,%rcx
  8004219dd5:	00 00 00 
  8004219dd8:	48 ba 9c 00 22 04 80 	movabs $0x800422009c,%rdx
  8004219ddf:	00 00 00 
  8004219de2:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004219de7:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  8004219dee:	00 00 00 
  8004219df1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219df6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219dfd:	00 00 00 
  8004219e00:	41 ff d0             	callq  *%r8
  8004219e03:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219e07:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219e0a:	83 f8 3f             	cmp    $0x3f,%eax
  8004219e0d:	0f 86 5e ff ff ff    	jbe    8004219d71 <check_fixed_bits+0x20>
  8004219e13:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219e18:	c9                   	leaveq 
  8004219e19:	c3                   	retq   

0000008004219e1a <vmx_init_vmcs>:
  8004219e1a:	55                   	push   %rbp
  8004219e1b:	48 89 e5             	mov    %rsp,%rbp
  8004219e1e:	48 83 ec 40          	sub    $0x40,%rsp
  8004219e22:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219e29:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219e2c:	89 c1                	mov    %eax,%ecx
  8004219e2e:	0f 32                	rdmsr  
  8004219e30:	89 55 d8             	mov    %edx,-0x28(%rbp)
  8004219e33:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219e36:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004219e3d:	00 
	ret = edx;
  8004219e3e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004219e41:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  8004219e45:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  8004219e4a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004219e4d:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  8004219e51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219e55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219e59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219e5d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004219e60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219e64:	48 c1 e8 20          	shr    $0x20,%rax
  8004219e68:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004219e6d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219e70:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  8004219e77:	76 35                	jbe    8004219eae <vmx_init_vmcs+0x94>
  8004219e79:	48 b9 be 00 22 04 80 	movabs $0x80042200be,%rcx
  8004219e80:	00 00 00 
  8004219e83:	48 ba 9c 00 22 04 80 	movabs $0x800422009c,%rdx
  8004219e8a:	00 00 00 
  8004219e8d:	be 9c 00 00 00       	mov    $0x9c,%esi
  8004219e92:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  8004219e99:	00 00 00 
  8004219e9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ea1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219ea8:	00 00 00 
  8004219eab:	41 ff d0             	callq  *%r8
  8004219eae:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219eb3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219eba:	00 00 00 
  8004219ebd:	ff d0                	callq  *%rax
  8004219ebf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219ec3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004219ec8:	75 07                	jne    8004219ed1 <vmx_init_vmcs+0xb7>
  8004219eca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ecf:	eb 4d                	jmp    8004219f1e <vmx_init_vmcs+0x104>
  8004219ed1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219ed5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219ed9:	8d 50 01             	lea    0x1(%rax),%edx
  8004219edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219ee0:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219ee4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219ee8:	48 89 c7             	mov    %rax,%rdi
  8004219eeb:	48 b8 4d 99 21 04 80 	movabs $0x800421994d,%rax
  8004219ef2:	00 00 00 
  8004219ef5:	ff d0                	callq  *%rax
  8004219ef7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219efb:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  8004219eff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219f03:	ba 04 00 00 00       	mov    $0x4,%edx
  8004219f08:	48 89 ce             	mov    %rcx,%rsi
  8004219f0b:	48 89 c7             	mov    %rax,%rdi
  8004219f0e:	48 b8 35 0b 21 04 80 	movabs $0x8004210b35,%rax
  8004219f15:	00 00 00 
  8004219f18:	ff d0                	callq  *%rax
  8004219f1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219f1e:	c9                   	leaveq 
  8004219f1f:	c3                   	retq   

0000008004219f20 <vmx_init_vmxon>:
  8004219f20:	55                   	push   %rbp
  8004219f21:	48 89 e5             	mov    %rsp,%rbp
  8004219f24:	53                   	push   %rbx
  8004219f25:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  8004219f2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219f31:	48 ba 1a 9e 21 04 80 	movabs $0x8004219e1a,%rdx
  8004219f38:	00 00 00 
  8004219f3b:	ff d2                	callq  *%rdx
  8004219f3d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219f41:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004219f46:	75 0a                	jne    8004219f52 <vmx_init_vmxon+0x32>
  8004219f48:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004219f4d:	e9 75 04 00 00       	jmpq   800421a3c7 <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  8004219f52:	0f 20 c0             	mov    %cr0,%rax
  8004219f55:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  8004219f59:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219f5d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  8004219f61:	0f 20 e0             	mov    %cr4,%rax
  8004219f64:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  8004219f68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219f6c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219f70:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  8004219f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219f79:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  8004219f7d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219f81:	0f 22 c0             	mov    %rax,%cr0
  8004219f84:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219f8b:	8b 45 ac             	mov    -0x54(%rbp),%eax
  8004219f8e:	89 c1                	mov    %eax,%ecx
  8004219f90:	0f 32                	rdmsr  
  8004219f92:	89 55 a8             	mov    %edx,-0x58(%rbp)
  8004219f95:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219f98:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004219f9f:	00 
	ret = edx;
  8004219fa0:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004219fa3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  8004219fa7:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  8004219fac:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004219faf:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  8004219fb3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004219fb7:	48 89 c6             	mov    %rax,%rsi
  8004219fba:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219fc1:	8b 45 94             	mov    -0x6c(%rbp),%eax
  8004219fc4:	89 c1                	mov    %eax,%ecx
  8004219fc6:	0f 32                	rdmsr  
  8004219fc8:	89 55 90             	mov    %edx,-0x70(%rbp)
  8004219fcb:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219fce:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  8004219fd5:	00 
	ret = edx;
  8004219fd6:	8b 45 90             	mov    -0x70(%rbp),%eax
  8004219fd9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  8004219fdd:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  8004219fe2:	8b 45 8c             	mov    -0x74(%rbp),%eax
  8004219fe5:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  8004219fe9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004219fed:	48 89 c1             	mov    %rax,%rcx
  8004219ff0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219ff4:	48 89 f2             	mov    %rsi,%rdx
  8004219ff7:	48 89 ce             	mov    %rcx,%rsi
  8004219ffa:	48 89 c7             	mov    %rax,%rdi
  8004219ffd:	48 b8 51 9d 21 04 80 	movabs $0x8004219d51,%rax
  800421a004:	00 00 00 
  800421a007:	ff d0                	callq  *%rax
  800421a009:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421a00c:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421a010:	83 f0 01             	xor    $0x1,%eax
  800421a013:	84 c0                	test   %al,%al
  800421a015:	74 1d                	je     800421a034 <vmx_init_vmxon+0x114>
  800421a017:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a01b:	48 89 c7             	mov    %rax,%rdi
  800421a01e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a025:	00 00 00 
  800421a028:	ff d0                	callq  *%rax
  800421a02a:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421a02f:	e9 93 03 00 00       	jmpq   800421a3c7 <vmx_init_vmxon+0x4a7>
  800421a034:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421a03b:	00 
  800421a03c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a040:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421a047:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421a04e:	0f 22 e0             	mov    %rax,%cr4
  800421a051:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421a058:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421a05b:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421a061:	89 c1                	mov    %eax,%ecx
  800421a063:	0f 32                	rdmsr  
  800421a065:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421a06b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421a071:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421a078:	00 00 00 00 
	ret = edx;
  800421a07c:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421a082:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421a089:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421a090:	20 
	ret |= eax;
  800421a091:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421a097:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  800421a09e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421a0a5:	48 89 c6             	mov    %rax,%rsi
  800421a0a8:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421a0af:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421a0b2:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421a0b8:	89 c1                	mov    %eax,%ecx
  800421a0ba:	0f 32                	rdmsr  
  800421a0bc:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421a0c2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421a0c8:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421a0cf:	00 00 00 00 
	ret = edx;
  800421a0d3:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421a0d9:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421a0e0:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421a0e7:	20 
	ret |= eax;
  800421a0e8:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421a0ee:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  800421a0f5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421a0fc:	48 89 c1             	mov    %rax,%rcx
  800421a0ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a103:	48 89 f2             	mov    %rsi,%rdx
  800421a106:	48 89 ce             	mov    %rcx,%rsi
  800421a109:	48 89 c7             	mov    %rax,%rdi
  800421a10c:	48 b8 51 9d 21 04 80 	movabs $0x8004219d51,%rax
  800421a113:	00 00 00 
  800421a116:	ff d0                	callq  *%rax
  800421a118:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421a11b:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421a11f:	83 f0 01             	xor    $0x1,%eax
  800421a122:	84 c0                	test   %al,%al
  800421a124:	74 1d                	je     800421a143 <vmx_init_vmxon+0x223>
  800421a126:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a12a:	48 89 c7             	mov    %rax,%rdi
  800421a12d:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a134:	00 00 00 
  800421a137:	ff d0                	callq  *%rax
  800421a139:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421a13e:	e9 84 02 00 00       	jmpq   800421a3c7 <vmx_init_vmxon+0x4a7>
  800421a143:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421a14a:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421a14d:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421a153:	89 c1                	mov    %eax,%ecx
  800421a155:	0f 32                	rdmsr  
  800421a157:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421a15d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421a163:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421a16a:	00 00 00 00 
	ret = edx;
  800421a16e:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421a174:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421a17b:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421a182:	20 
	ret |= eax;
  800421a183:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421a189:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421a190:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421a197:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a19b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a19f:	83 e0 04             	and    $0x4,%eax
  800421a1a2:	48 85 c0             	test   %rax,%rax
  800421a1a5:	0f 85 e8 00 00 00    	jne    800421a293 <vmx_init_vmxon+0x373>
  800421a1ab:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421a1b0:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421a1b7:	00 00 00 
  800421a1ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a1be:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421a1c5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421a1cc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421a1d2:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421a1d9:	48 c1 e8 20          	shr    $0x20,%rax
  800421a1dd:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421a1e3:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421a1e9:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421a1ef:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421a1f5:	0f 30                	wrmsr  
  800421a1f7:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421a1fe:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421a201:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421a207:	89 c1                	mov    %eax,%ecx
  800421a209:	0f 32                	rdmsr  
  800421a20b:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421a211:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421a217:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421a21e:	00 00 00 00 
	ret = edx;
  800421a222:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421a228:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421a22f:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421a236:	20 
	ret |= eax;
  800421a237:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421a23d:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421a244:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421a24b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a24f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a253:	83 e0 04             	and    $0x4,%eax
  800421a256:	48 85 c0             	test   %rax,%rax
  800421a259:	75 38                	jne    800421a293 <vmx_init_vmxon+0x373>
  800421a25b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a25f:	48 89 c7             	mov    %rax,%rdi
  800421a262:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a269:	00 00 00 
  800421a26c:	ff d0                	callq  *%rax
  800421a26e:	48 bf d8 00 22 04 80 	movabs $0x80042200d8,%rdi
  800421a275:	00 00 00 
  800421a278:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a27d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a284:	00 00 00 
  800421a287:	ff d2                	callq  *%rdx
  800421a289:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421a28e:	e9 34 01 00 00       	jmpq   800421a3c7 <vmx_init_vmxon+0x4a7>
  800421a293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a297:	83 e0 01             	and    $0x1,%eax
  800421a29a:	48 85 c0             	test   %rax,%rax
  800421a29d:	75 4c                	jne    800421a2eb <vmx_init_vmxon+0x3cb>
  800421a29f:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421a2a4:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421a2ab:	00 00 00 
  800421a2ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a2b2:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421a2b9:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a2c0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421a2c6:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a2cd:	48 c1 e8 20          	shr    $0x20,%rax
  800421a2d1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421a2d7:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421a2dd:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421a2e3:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421a2e9:	0f 30                	wrmsr  
  800421a2eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a2ef:	48 89 c7             	mov    %rax,%rdi
  800421a2f2:	48 b8 28 99 21 04 80 	movabs $0x8004219928,%rax
  800421a2f9:	00 00 00 
  800421a2fc:	ff d0                	callq  *%rax
  800421a2fe:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421a305:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421a30c:	f8                   	clc    
  800421a30d:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421a314:	ff 
  800421a315:	0f 96 c0             	setbe  %al
  800421a318:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421a31e:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421a325:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421a328:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421a32c:	74 1a                	je     800421a348 <vmx_init_vmxon+0x428>
  800421a32e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a332:	48 89 c7             	mov    %rax,%rdi
  800421a335:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a33c:	00 00 00 
  800421a33f:	ff d0                	callq  *%rax
  800421a341:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421a346:	eb 7f                	jmp    800421a3c7 <vmx_init_vmxon+0x4a7>
  800421a348:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421a34f:	00 00 00 
  800421a352:	ff d0                	callq  *%rax
  800421a354:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421a35b:	00 00 00 
  800421a35e:	48 98                	cltq   
  800421a360:	48 c1 e0 03          	shl    $0x3,%rax
  800421a364:	48 89 c1             	mov    %rax,%rcx
  800421a367:	48 c1 e1 04          	shl    $0x4,%rcx
  800421a36b:	48 01 c8             	add    %rcx,%rax
  800421a36e:	48 01 d0             	add    %rdx,%rax
  800421a371:	48 83 c0 70          	add    $0x70,%rax
  800421a375:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421a379:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421a380:	00 00 00 
  800421a383:	ff d0                	callq  *%rax
  800421a385:	89 c3                	mov    %eax,%ebx
  800421a387:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a38b:	48 89 c7             	mov    %rax,%rdi
  800421a38e:	48 b8 4d 99 21 04 80 	movabs $0x800421994d,%rax
  800421a395:	00 00 00 
  800421a398:	ff d0                	callq  *%rax
  800421a39a:	48 89 c2             	mov    %rax,%rdx
  800421a39d:	48 b9 20 c0 6d 04 80 	movabs $0x80046dc020,%rcx
  800421a3a4:	00 00 00 
  800421a3a7:	48 63 c3             	movslq %ebx,%rax
  800421a3aa:	48 c1 e0 03          	shl    $0x3,%rax
  800421a3ae:	48 89 c6             	mov    %rax,%rsi
  800421a3b1:	48 c1 e6 04          	shl    $0x4,%rsi
  800421a3b5:	48 01 f0             	add    %rsi,%rax
  800421a3b8:	48 01 c8             	add    %rcx,%rax
  800421a3bb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421a3bf:	48 89 10             	mov    %rdx,(%rax)
  800421a3c2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a3c7:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421a3ce:	5b                   	pop    %rbx
  800421a3cf:	5d                   	pop    %rbp
  800421a3d0:	c3                   	retq   

000000800421a3d1 <vmcs_host_init>:
  800421a3d1:	55                   	push   %rbp
  800421a3d2:	48 89 e5             	mov    %rsp,%rbp
  800421a3d5:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421a3dc:	0f 20 c0             	mov    %cr0,%rax
  800421a3df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421a3e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a3e7:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421a3ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421a3f2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421a3f6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a3f9:	48 89 d6             	mov    %rdx,%rsi
  800421a3fc:	89 c7                	mov    %eax,%edi
  800421a3fe:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a405:	00 00 00 
  800421a408:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421a40a:	0f 20 d8             	mov    %cr3,%rax
  800421a40d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421a411:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a415:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421a41c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421a420:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421a424:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421a427:	48 89 d6             	mov    %rdx,%rsi
  800421a42a:	89 c7                	mov    %eax,%edi
  800421a42c:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a433:	00 00 00 
  800421a436:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421a438:	0f 20 e0             	mov    %cr4,%rax
  800421a43b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421a43f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a443:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421a44a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421a44e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421a452:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421a455:	48 89 d6             	mov    %rdx,%rsi
  800421a458:	89 c7                	mov    %eax,%edi
  800421a45a:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a461:	00 00 00 
  800421a464:	ff d0                	callq  *%rax
  800421a466:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421a46d:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421a473:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421a477:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421a47a:	48 89 d6             	mov    %rdx,%rsi
  800421a47d:	89 c7                	mov    %eax,%edi
  800421a47f:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a486:	00 00 00 
  800421a489:	ff d0                	callq  *%rax
  800421a48b:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421a492:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421a498:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421a49c:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421a49f:	48 89 d6             	mov    %rdx,%rsi
  800421a4a2:	89 c7                	mov    %eax,%edi
  800421a4a4:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a4ab:	00 00 00 
  800421a4ae:	ff d0                	callq  *%rax
  800421a4b0:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421a4b7:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421a4bd:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421a4c1:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421a4c4:	48 89 d6             	mov    %rdx,%rsi
  800421a4c7:	89 c7                	mov    %eax,%edi
  800421a4c9:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a4d0:	00 00 00 
  800421a4d3:	ff d0                	callq  *%rax
  800421a4d5:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421a4dc:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421a4e2:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421a4e6:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421a4e9:	48 89 d6             	mov    %rdx,%rsi
  800421a4ec:	89 c7                	mov    %eax,%edi
  800421a4ee:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a4f5:	00 00 00 
  800421a4f8:	ff d0                	callq  *%rax
  800421a4fa:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421a501:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421a507:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421a50b:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421a50e:	48 89 d6             	mov    %rdx,%rsi
  800421a511:	89 c7                	mov    %eax,%edi
  800421a513:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a51a:	00 00 00 
  800421a51d:	ff d0                	callq  *%rax
  800421a51f:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421a526:	0c 00 00 
  800421a529:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421a530:	08 00 
  800421a532:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421a539:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421a53f:	48 89 d6             	mov    %rdx,%rsi
  800421a542:	89 c7                	mov    %eax,%edi
  800421a544:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a54b:	00 00 00 
  800421a54e:	ff d0                	callq  *%rax
  800421a550:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421a557:	00 00 00 
  800421a55a:	ff d0                	callq  *%rax
  800421a55c:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421a563:	00 00 00 
  800421a566:	48 98                	cltq   
  800421a568:	48 c1 e0 03          	shl    $0x3,%rax
  800421a56c:	48 89 c1             	mov    %rax,%rcx
  800421a56f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421a573:	48 01 c8             	add    %rcx,%rax
  800421a576:	48 01 d0             	add    %rdx,%rax
  800421a579:	0f b6 00             	movzbl (%rax),%eax
  800421a57c:	0f b6 c0             	movzbl %al,%eax
  800421a57f:	01 c0                	add    %eax,%eax
  800421a581:	83 c0 05             	add    $0x5,%eax
  800421a584:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421a587:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a58a:	c1 e0 03             	shl    $0x3,%eax
  800421a58d:	0f b7 c0             	movzwl %ax,%eax
  800421a590:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421a597:	0c 00 00 
  800421a59a:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421a5a1:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421a5a8:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421a5ae:	48 89 d6             	mov    %rdx,%rsi
  800421a5b1:	89 c7                	mov    %eax,%edi
  800421a5b3:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a5ba:	00 00 00 
  800421a5bd:	ff d0                	callq  *%rax
  800421a5bf:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421a5c6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421a5cd:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421a5d4:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421a5db:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421a5e2:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421a5e9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421a5f0:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421a5f3:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421a5fa:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421a601:	66 89 10             	mov    %dx,(%rax)
  800421a604:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a60b:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421a612:	6c 00 00 
  800421a615:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421a61c:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421a623:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421a629:	48 89 d6             	mov    %rdx,%rsi
  800421a62c:	89 c7                	mov    %eax,%edi
  800421a62e:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a635:	00 00 00 
  800421a638:	ff d0                	callq  *%rax
  800421a63a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421a641:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421a648:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421a64f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421a656:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421a65d:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421a664:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421a66b:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421a66e:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421a675:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421a67c:	66 89 10             	mov    %dx,(%rax)
  800421a67f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a686:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421a68d:	6c 00 00 
  800421a690:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421a697:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421a69e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421a6a4:	48 89 d6             	mov    %rdx,%rsi
  800421a6a7:	89 c7                	mov    %eax,%edi
  800421a6a9:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a6b0:	00 00 00 
  800421a6b3:	ff d0                	callq  *%rax
  800421a6b5:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421a6bc:	6c 00 00 
  800421a6bf:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421a6c6:	00 00 00 00 
  800421a6ca:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421a6d1:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421a6d7:	48 89 d6             	mov    %rdx,%rsi
  800421a6da:	89 c7                	mov    %eax,%edi
  800421a6dc:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a6e3:	00 00 00 
  800421a6e6:	ff d0                	callq  *%rax
  800421a6e8:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421a6ef:	6c 00 00 
  800421a6f2:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421a6f9:	00 00 00 00 
  800421a6fd:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421a704:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421a70a:	48 89 d6             	mov    %rdx,%rsi
  800421a70d:	89 c7                	mov    %eax,%edi
  800421a70f:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a716:	00 00 00 
  800421a719:	ff d0                	callq  *%rax
  800421a71b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421a722:	00 00 00 
  800421a725:	ff d0                	callq  *%rax
  800421a727:	48 98                	cltq   
  800421a729:	48 c1 e0 03          	shl    $0x3,%rax
  800421a72d:	48 89 c2             	mov    %rax,%rdx
  800421a730:	48 c1 e2 04          	shl    $0x4,%rdx
  800421a734:	48 01 d0             	add    %rdx,%rax
  800421a737:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421a73b:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800421a742:	00 00 00 
  800421a745:	48 01 d0             	add    %rdx,%rax
  800421a748:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421a74f:	6c 00 00 
  800421a752:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421a759:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421a760:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421a766:	48 89 d6             	mov    %rdx,%rsi
  800421a769:	89 c7                	mov    %eax,%edi
  800421a76b:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a772:	00 00 00 
  800421a775:	ff d0                	callq  *%rax
  800421a777:	48 b8 24 be 21 04 80 	movabs $0x800421be24,%rax
  800421a77e:	00 00 00 
  800421a781:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a789:	48 89 c6             	mov    %rax,%rsi
  800421a78c:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421a791:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a798:	00 00 00 
  800421a79b:	ff d0                	callq  *%rax
  800421a79d:	c9                   	leaveq 
  800421a79e:	c3                   	retq   

000000800421a79f <vmcs_guest_init>:
  800421a79f:	55                   	push   %rbp
  800421a7a0:	48 89 e5             	mov    %rsp,%rbp
  800421a7a3:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421a7aa:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421a7b1:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421a7b7:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421a7bb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a7be:	48 89 d6             	mov    %rdx,%rsi
  800421a7c1:	89 c7                	mov    %eax,%edi
  800421a7c3:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a7ca:	00 00 00 
  800421a7cd:	ff d0                	callq  *%rax
  800421a7cf:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421a7d6:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421a7dc:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421a7e0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421a7e3:	48 89 d6             	mov    %rdx,%rsi
  800421a7e6:	89 c7                	mov    %eax,%edi
  800421a7e8:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a7ef:	00 00 00 
  800421a7f2:	ff d0                	callq  *%rax
  800421a7f4:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421a7fb:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421a801:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421a805:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a808:	48 89 d6             	mov    %rdx,%rsi
  800421a80b:	89 c7                	mov    %eax,%edi
  800421a80d:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a814:	00 00 00 
  800421a817:	ff d0                	callq  *%rax
  800421a819:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421a820:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421a826:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421a82a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a82d:	48 89 d6             	mov    %rdx,%rsi
  800421a830:	89 c7                	mov    %eax,%edi
  800421a832:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a839:	00 00 00 
  800421a83c:	ff d0                	callq  *%rax
  800421a83e:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421a845:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421a84b:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421a84f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a852:	48 89 d6             	mov    %rdx,%rsi
  800421a855:	89 c7                	mov    %eax,%edi
  800421a857:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a85e:	00 00 00 
  800421a861:	ff d0                	callq  *%rax
  800421a863:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421a86a:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421a870:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421a874:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421a877:	48 89 d6             	mov    %rdx,%rsi
  800421a87a:	89 c7                	mov    %eax,%edi
  800421a87c:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a883:	00 00 00 
  800421a886:	ff d0                	callq  *%rax
  800421a888:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421a88f:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421a895:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421a899:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421a89c:	48 89 d6             	mov    %rdx,%rsi
  800421a89f:	89 c7                	mov    %eax,%edi
  800421a8a1:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a8a8:	00 00 00 
  800421a8ab:	ff d0                	callq  *%rax
  800421a8ad:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421a8b4:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421a8ba:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421a8be:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421a8c1:	48 89 d6             	mov    %rdx,%rsi
  800421a8c4:	89 c7                	mov    %eax,%edi
  800421a8c6:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a8cd:	00 00 00 
  800421a8d0:	ff d0                	callq  *%rax
  800421a8d2:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421a8d9:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421a8e0:	00 
  800421a8e1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421a8e5:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421a8e8:	48 89 d6             	mov    %rdx,%rsi
  800421a8eb:	89 c7                	mov    %eax,%edi
  800421a8ed:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a8f4:	00 00 00 
  800421a8f7:	ff d0                	callq  *%rax
  800421a8f9:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421a900:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421a907:	00 
  800421a908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421a90c:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421a90f:	48 89 d6             	mov    %rdx,%rsi
  800421a912:	89 c7                	mov    %eax,%edi
  800421a914:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a91b:	00 00 00 
  800421a91e:	ff d0                	callq  *%rax
  800421a920:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421a927:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421a92e:	00 
  800421a92f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421a933:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421a936:	48 89 d6             	mov    %rdx,%rsi
  800421a939:	89 c7                	mov    %eax,%edi
  800421a93b:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a942:	00 00 00 
  800421a945:	ff d0                	callq  *%rax
  800421a947:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421a94e:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421a955:	00 
  800421a956:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421a95a:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421a95d:	48 89 d6             	mov    %rdx,%rsi
  800421a960:	89 c7                	mov    %eax,%edi
  800421a962:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a969:	00 00 00 
  800421a96c:	ff d0                	callq  *%rax
  800421a96e:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421a975:	68 00 00 
  800421a978:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421a97f:	00 00 00 00 
  800421a983:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421a98a:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421a990:	48 89 d6             	mov    %rdx,%rsi
  800421a993:	89 c7                	mov    %eax,%edi
  800421a995:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a99c:	00 00 00 
  800421a99f:	ff d0                	callq  *%rax
  800421a9a1:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421a9a8:	68 00 00 
  800421a9ab:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421a9b2:	00 00 00 00 
  800421a9b6:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421a9bd:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421a9c3:	48 89 d6             	mov    %rdx,%rsi
  800421a9c6:	89 c7                	mov    %eax,%edi
  800421a9c8:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421a9cf:	00 00 00 
  800421a9d2:	ff d0                	callq  *%rax
  800421a9d4:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421a9db:	68 00 00 
  800421a9de:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421a9e5:	00 00 00 00 
  800421a9e9:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421a9f0:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421a9f6:	48 89 d6             	mov    %rdx,%rsi
  800421a9f9:	89 c7                	mov    %eax,%edi
  800421a9fb:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aa02:	00 00 00 
  800421aa05:	ff d0                	callq  *%rax
  800421aa07:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421aa0e:	68 00 00 
  800421aa11:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421aa18:	00 00 00 00 
  800421aa1c:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421aa23:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421aa29:	48 89 d6             	mov    %rdx,%rsi
  800421aa2c:	89 c7                	mov    %eax,%edi
  800421aa2e:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aa35:	00 00 00 
  800421aa38:	ff d0                	callq  *%rax
  800421aa3a:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421aa41:	68 00 00 
  800421aa44:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421aa4b:	00 00 00 00 
  800421aa4f:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421aa56:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421aa5c:	48 89 d6             	mov    %rdx,%rsi
  800421aa5f:	89 c7                	mov    %eax,%edi
  800421aa61:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aa68:	00 00 00 
  800421aa6b:	ff d0                	callq  *%rax
  800421aa6d:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421aa74:	68 00 00 
  800421aa77:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421aa7e:	00 00 00 00 
  800421aa82:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421aa89:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421aa8f:	48 89 d6             	mov    %rdx,%rsi
  800421aa92:	89 c7                	mov    %eax,%edi
  800421aa94:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aa9b:	00 00 00 
  800421aa9e:	ff d0                	callq  *%rax
  800421aaa0:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421aaa7:	48 00 00 
  800421aaaa:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421aab1:	ff 00 00 
  800421aab4:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421aaba:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421aac0:	48 89 d6             	mov    %rdx,%rsi
  800421aac3:	89 c7                	mov    %eax,%edi
  800421aac5:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aacc:	00 00 00 
  800421aacf:	ff d0                	callq  *%rax
  800421aad1:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421aad8:	48 00 00 
  800421aadb:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421aae2:	ff 00 00 
  800421aae5:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421aaeb:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421aaf1:	48 89 d6             	mov    %rdx,%rsi
  800421aaf4:	89 c7                	mov    %eax,%edi
  800421aaf6:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aafd:	00 00 00 
  800421ab00:	ff d0                	callq  *%rax
  800421ab02:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421ab09:	48 00 00 
  800421ab0c:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421ab13:	ff 00 00 
  800421ab16:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421ab1c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421ab22:	48 89 d6             	mov    %rdx,%rsi
  800421ab25:	89 c7                	mov    %eax,%edi
  800421ab27:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ab2e:	00 00 00 
  800421ab31:	ff d0                	callq  *%rax
  800421ab33:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421ab3a:	48 00 00 
  800421ab3d:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421ab44:	ff 00 00 
  800421ab47:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421ab4d:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421ab53:	48 89 d6             	mov    %rdx,%rsi
  800421ab56:	89 c7                	mov    %eax,%edi
  800421ab58:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ab5f:	00 00 00 
  800421ab62:	ff d0                	callq  *%rax
  800421ab64:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421ab6b:	48 00 00 
  800421ab6e:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421ab75:	ff 00 00 
  800421ab78:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421ab7e:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421ab84:	48 89 d6             	mov    %rdx,%rsi
  800421ab87:	89 c7                	mov    %eax,%edi
  800421ab89:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ab90:	00 00 00 
  800421ab93:	ff d0                	callq  *%rax
  800421ab95:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421ab9c:	48 00 00 
  800421ab9f:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421aba6:	ff 00 00 
  800421aba9:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421abaf:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421abb5:	48 89 d6             	mov    %rdx,%rsi
  800421abb8:	89 c7                	mov    %eax,%edi
  800421abba:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421abc1:	00 00 00 
  800421abc4:	ff d0                	callq  *%rax
  800421abc6:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421abcd:	48 00 00 
  800421abd0:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421abd7:	ff 00 00 
  800421abda:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421abe0:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421abe6:	48 89 d6             	mov    %rdx,%rsi
  800421abe9:	89 c7                	mov    %eax,%edi
  800421abeb:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421abf2:	00 00 00 
  800421abf5:	ff d0                	callq  *%rax
  800421abf7:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421abfe:	48 00 00 
  800421ac01:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421ac08:	ff 0f 00 
  800421ac0b:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421ac11:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421ac17:	48 89 d6             	mov    %rdx,%rsi
  800421ac1a:	89 c7                	mov    %eax,%edi
  800421ac1c:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ac23:	00 00 00 
  800421ac26:	ff d0                	callq  *%rax
  800421ac28:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421ac2f:	48 00 00 
  800421ac32:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421ac39:	00 00 00 
  800421ac3c:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421ac42:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421ac48:	48 89 d6             	mov    %rdx,%rsi
  800421ac4b:	89 c7                	mov    %eax,%edi
  800421ac4d:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ac54:	00 00 00 
  800421ac57:	ff d0                	callq  *%rax
  800421ac59:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421ac60:	48 00 00 
  800421ac63:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421ac6a:	03 00 00 
  800421ac6d:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421ac73:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421ac79:	48 89 d6             	mov    %rdx,%rsi
  800421ac7c:	89 c7                	mov    %eax,%edi
  800421ac7e:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ac85:	00 00 00 
  800421ac88:	ff d0                	callq  *%rax
  800421ac8a:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421ac91:	48 00 00 
  800421ac94:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421ac9b:	00 00 00 
  800421ac9e:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421aca4:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421acaa:	48 89 d6             	mov    %rdx,%rsi
  800421acad:	89 c7                	mov    %eax,%edi
  800421acaf:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421acb6:	00 00 00 
  800421acb9:	ff d0                	callq  *%rax
  800421acbb:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421acc2:	48 00 00 
  800421acc5:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421accc:	00 00 00 
  800421accf:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421acd5:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421acdb:	48 89 d6             	mov    %rdx,%rsi
  800421acde:	89 c7                	mov    %eax,%edi
  800421ace0:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ace7:	00 00 00 
  800421acea:	ff d0                	callq  *%rax
  800421acec:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421acf3:	48 00 00 
  800421acf6:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421acfd:	00 00 00 
  800421ad00:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421ad06:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421ad0c:	48 89 d6             	mov    %rdx,%rsi
  800421ad0f:	89 c7                	mov    %eax,%edi
  800421ad11:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ad18:	00 00 00 
  800421ad1b:	ff d0                	callq  *%rax
  800421ad1d:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421ad24:	48 00 00 
  800421ad27:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421ad2e:	00 00 00 
  800421ad31:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421ad37:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421ad3d:	48 89 d6             	mov    %rdx,%rsi
  800421ad40:	89 c7                	mov    %eax,%edi
  800421ad42:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ad49:	00 00 00 
  800421ad4c:	ff d0                	callq  *%rax
  800421ad4e:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421ad55:	48 00 00 
  800421ad58:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421ad5f:	00 00 00 
  800421ad62:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421ad68:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421ad6e:	48 89 d6             	mov    %rdx,%rsi
  800421ad71:	89 c7                	mov    %eax,%edi
  800421ad73:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ad7a:	00 00 00 
  800421ad7d:	ff d0                	callq  *%rax
  800421ad7f:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421ad86:	48 00 00 
  800421ad89:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421ad90:	00 00 00 
  800421ad93:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421ad99:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421ad9f:	48 89 d6             	mov    %rdx,%rsi
  800421ada2:	89 c7                	mov    %eax,%edi
  800421ada4:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421adab:	00 00 00 
  800421adae:	ff d0                	callq  *%rax
  800421adb0:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421adb7:	48 00 00 
  800421adba:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421adc1:	00 00 00 
  800421adc4:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421adca:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421add0:	48 89 d6             	mov    %rdx,%rsi
  800421add3:	89 c7                	mov    %eax,%edi
  800421add5:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421addc:	00 00 00 
  800421addf:	ff d0                	callq  *%rax
  800421ade1:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421ade8:	48 00 00 
  800421adeb:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421adf2:	00 00 00 
  800421adf5:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421adfb:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421ae01:	48 89 d6             	mov    %rdx,%rsi
  800421ae04:	89 c7                	mov    %eax,%edi
  800421ae06:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ae0d:	00 00 00 
  800421ae10:	ff d0                	callq  *%rax
  800421ae12:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421ae19:	48 00 00 
  800421ae1c:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421ae23:	00 00 00 
  800421ae26:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421ae2c:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421ae32:	48 89 d6             	mov    %rdx,%rsi
  800421ae35:	89 c7                	mov    %eax,%edi
  800421ae37:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ae3e:	00 00 00 
  800421ae41:	ff d0                	callq  *%rax
  800421ae43:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421ae4a:	48 00 00 
  800421ae4d:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421ae54:	00 00 00 
  800421ae57:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421ae5d:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421ae63:	48 89 d6             	mov    %rdx,%rsi
  800421ae66:	89 c7                	mov    %eax,%edi
  800421ae68:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421ae6f:	00 00 00 
  800421ae72:	ff d0                	callq  *%rax
  800421ae74:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421ae7b:	68 00 00 
  800421ae7e:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421ae85:	00 00 00 00 
  800421ae89:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421ae90:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421ae96:	48 89 d6             	mov    %rdx,%rsi
  800421ae99:	89 c7                	mov    %eax,%edi
  800421ae9b:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aea2:	00 00 00 
  800421aea5:	ff d0                	callq  *%rax
  800421aea7:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421aeae:	68 00 00 
  800421aeb1:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421aeb8:	20 00 00 00 
  800421aebc:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421aec3:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421aec9:	48 89 d6             	mov    %rdx,%rsi
  800421aecc:	89 c7                	mov    %eax,%edi
  800421aece:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421aed5:	00 00 00 
  800421aed8:	ff d0                	callq  *%rax
  800421aeda:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421aee1:	68 00 00 
  800421aee4:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421aeeb:	00 20 00 00 
  800421aeef:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421aef6:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421aefc:	48 89 d6             	mov    %rdx,%rsi
  800421aeff:	89 c7                	mov    %eax,%edi
  800421af01:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421af08:	00 00 00 
  800421af0b:	ff d0                	callq  *%rax
  800421af0d:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421af14:	28 00 00 
  800421af17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421af1c:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421af23:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421af2a:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421af30:	48 89 d6             	mov    %rdx,%rsi
  800421af33:	89 c7                	mov    %eax,%edi
  800421af35:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421af3c:	00 00 00 
  800421af3f:	ff d0                	callq  *%rax
  800421af41:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421af48:	28 00 00 
  800421af4b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421af50:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421af57:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421af5e:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421af64:	48 89 d6             	mov    %rdx,%rsi
  800421af67:	89 c7                	mov    %eax,%edi
  800421af69:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421af70:	00 00 00 
  800421af73:	ff d0                	callq  *%rax
  800421af75:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421af7c:	68 00 00 
  800421af7f:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421af86:	00 00 00 00 
  800421af8a:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421af91:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421af97:	48 89 d6             	mov    %rdx,%rsi
  800421af9a:	89 c7                	mov    %eax,%edi
  800421af9c:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421afa3:	00 00 00 
  800421afa6:	ff d0                	callq  *%rax
  800421afa8:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421afaf:	68 00 00 
  800421afb2:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421afb9:	02 00 00 00 
  800421afbd:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421afc4:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421afca:	48 89 d6             	mov    %rdx,%rsi
  800421afcd:	89 c7                	mov    %eax,%edi
  800421afcf:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421afd6:	00 00 00 
  800421afd9:	ff d0                	callq  *%rax
  800421afdb:	c9                   	leaveq 
  800421afdc:	c3                   	retq   

000000800421afdd <vmx_read_capability_msr>:
  800421afdd:	55                   	push   %rbp
  800421afde:	48 89 e5             	mov    %rsp,%rbp
  800421afe1:	48 83 ec 38          	sub    $0x38,%rsp
  800421afe5:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421afe8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421afec:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421aff0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421aff3:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421aff6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421aff9:	89 c1                	mov    %eax,%ecx
  800421affb:	0f 32                	rdmsr  
  800421affd:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421b000:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b003:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421b00a:	00 
	ret = edx;
  800421b00b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421b00e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421b012:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421b017:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b01a:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421b01e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b022:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b02a:	48 c1 e8 20          	shr    $0x20,%rax
  800421b02e:	89 c2                	mov    %eax,%edx
  800421b030:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b034:	89 10                	mov    %edx,(%rax)
  800421b036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b03a:	89 c2                	mov    %eax,%edx
  800421b03c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421b040:	89 10                	mov    %edx,(%rax)
  800421b042:	c9                   	leaveq 
  800421b043:	c3                   	retq   

000000800421b044 <vmcs_ctls_init>:
  800421b044:	55                   	push   %rbp
  800421b045:	48 89 e5             	mov    %rsp,%rbp
  800421b048:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421b04f:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421b056:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421b05d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421b064:	48 89 c6             	mov    %rax,%rsi
  800421b067:	bf 81 04 00 00       	mov    $0x481,%edi
  800421b06c:	48 b8 dd af 21 04 80 	movabs $0x800421afdd,%rax
  800421b073:	00 00 00 
  800421b076:	ff d0                	callq  *%rax
  800421b078:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421b07e:	83 c8 01             	or     $0x1,%eax
  800421b081:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421b087:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421b08d:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421b093:	21 d0                	and    %edx,%eax
  800421b095:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421b09c:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421b09f:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421b0a2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b0a5:	48 89 d6             	mov    %rdx,%rsi
  800421b0a8:	89 c7                	mov    %eax,%edi
  800421b0aa:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b0b1:	00 00 00 
  800421b0b4:	ff d0                	callq  *%rax
  800421b0b6:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421b0bd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421b0c4:	48 89 c6             	mov    %rax,%rsi
  800421b0c7:	bf 82 04 00 00       	mov    $0x482,%edi
  800421b0cc:	48 b8 dd af 21 04 80 	movabs $0x800421afdd,%rax
  800421b0d3:	00 00 00 
  800421b0d6:	ff d0                	callq  *%rax
  800421b0d8:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421b0de:	c1 e8 1f             	shr    $0x1f,%eax
  800421b0e1:	83 f8 01             	cmp    $0x1,%eax
  800421b0e4:	74 35                	je     800421b11b <vmcs_ctls_init+0xd7>
  800421b0e6:	48 b9 08 01 22 04 80 	movabs $0x8004220108,%rcx
  800421b0ed:	00 00 00 
  800421b0f0:	48 ba 9c 00 22 04 80 	movabs $0x800422009c,%rdx
  800421b0f7:	00 00 00 
  800421b0fa:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421b0ff:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421b106:	00 00 00 
  800421b109:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b10e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b115:	00 00 00 
  800421b118:	41 ff d0             	callq  *%r8
  800421b11b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b121:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421b126:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421b12c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b132:	0c 80                	or     $0x80,%al
  800421b134:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421b13a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b140:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421b145:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421b14b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b151:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421b156:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421b15c:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421b162:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421b168:	21 d0                	and    %edx,%eax
  800421b16a:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421b171:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421b174:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421b177:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b17a:	48 89 d6             	mov    %rdx,%rsi
  800421b17d:	89 c7                	mov    %eax,%edi
  800421b17f:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b186:	00 00 00 
  800421b189:	ff d0                	callq  *%rax
  800421b18b:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421b192:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421b199:	48 89 c6             	mov    %rax,%rsi
  800421b19c:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421b1a1:	48 b8 dd af 21 04 80 	movabs $0x800421afdd,%rax
  800421b1a8:	00 00 00 
  800421b1ab:	ff d0                	callq  *%rax
  800421b1ad:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b1b3:	83 c8 02             	or     $0x2,%eax
  800421b1b6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421b1bc:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b1c2:	0c 80                	or     $0x80,%al
  800421b1c4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421b1ca:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421b1d0:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b1d6:	21 d0                	and    %edx,%eax
  800421b1d8:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421b1df:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421b1e2:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421b1e5:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421b1e8:	48 89 d6             	mov    %rdx,%rsi
  800421b1eb:	89 c7                	mov    %eax,%edi
  800421b1ed:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b1f4:	00 00 00 
  800421b1f7:	ff d0                	callq  *%rax
  800421b1f9:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421b200:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421b207:	48 89 c6             	mov    %rax,%rsi
  800421b20a:	bf 83 04 00 00       	mov    $0x483,%edi
  800421b20f:	48 b8 dd af 21 04 80 	movabs $0x800421afdd,%rax
  800421b216:	00 00 00 
  800421b219:	ff d0                	callq  *%rax
  800421b21b:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b221:	80 cc 02             	or     $0x2,%ah
  800421b224:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421b22a:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b230:	80 cc 80             	or     $0x80,%ah
  800421b233:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421b239:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421b23f:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421b245:	21 d0                	and    %edx,%eax
  800421b247:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421b24e:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421b251:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421b254:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421b257:	48 89 d6             	mov    %rdx,%rsi
  800421b25a:	89 c7                	mov    %eax,%edi
  800421b25c:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b263:	00 00 00 
  800421b266:	ff d0                	callq  *%rax
  800421b268:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b26f:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421b276:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b27a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b281:	00 00 00 
  800421b284:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421b288:	77 32                	ja     800421b2bc <vmcs_ctls_init+0x278>
  800421b28a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b28e:	48 89 c1             	mov    %rax,%rcx
  800421b291:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421b298:	00 00 00 
  800421b29b:	be 82 01 00 00       	mov    $0x182,%esi
  800421b2a0:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421b2a7:	00 00 00 
  800421b2aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b2af:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b2b6:	00 00 00 
  800421b2b9:	41 ff d0             	callq  *%r8
  800421b2bc:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b2c3:	ff ff ff 
  800421b2c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b2ca:	48 01 d0             	add    %rdx,%rax
  800421b2cd:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421b2d4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421b2d8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421b2dc:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b2df:	48 89 d6             	mov    %rdx,%rsi
  800421b2e2:	89 c7                	mov    %eax,%edi
  800421b2e4:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b2eb:	00 00 00 
  800421b2ee:	ff d0                	callq  *%rax
  800421b2f0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b2f7:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421b2fd:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421b304:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421b307:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421b30a:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b30d:	48 89 d6             	mov    %rdx,%rsi
  800421b310:	89 c7                	mov    %eax,%edi
  800421b312:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b319:	00 00 00 
  800421b31c:	ff d0                	callq  *%rax
  800421b31e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b325:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421b32c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421b330:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b337:	00 00 00 
  800421b33a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421b33e:	77 32                	ja     800421b372 <vmcs_ctls_init+0x32e>
  800421b340:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b344:	48 89 c1             	mov    %rax,%rcx
  800421b347:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421b34e:	00 00 00 
  800421b351:	be 86 01 00 00       	mov    $0x186,%esi
  800421b356:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421b35d:	00 00 00 
  800421b360:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b365:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b36c:	00 00 00 
  800421b36f:	41 ff d0             	callq  *%r8
  800421b372:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b379:	ff ff ff 
  800421b37c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b380:	48 01 d0             	add    %rdx,%rax
  800421b383:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421b38a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421b38e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421b392:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b395:	48 89 d6             	mov    %rdx,%rsi
  800421b398:	89 c7                	mov    %eax,%edi
  800421b39a:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b3a1:	00 00 00 
  800421b3a4:	ff d0                	callq  *%rax
  800421b3a6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b3ad:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421b3b3:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421b3ba:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421b3bd:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421b3c0:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421b3c3:	48 89 d6             	mov    %rdx,%rsi
  800421b3c6:	89 c7                	mov    %eax,%edi
  800421b3c8:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b3cf:	00 00 00 
  800421b3d2:	ff d0                	callq  *%rax
  800421b3d4:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421b3db:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421b3e2:	48 89 c6             	mov    %rax,%rsi
  800421b3e5:	bf 84 04 00 00       	mov    $0x484,%edi
  800421b3ea:	48 b8 dd af 21 04 80 	movabs $0x800421afdd,%rax
  800421b3f1:	00 00 00 
  800421b3f4:	ff d0                	callq  *%rax
  800421b3f6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b3fd:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421b404:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b408:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b40f:	00 00 00 
  800421b412:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421b416:	77 32                	ja     800421b44a <vmcs_ctls_init+0x406>
  800421b418:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b41c:	48 89 c1             	mov    %rax,%rcx
  800421b41f:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421b426:	00 00 00 
  800421b429:	be 90 01 00 00       	mov    $0x190,%esi
  800421b42e:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421b435:	00 00 00 
  800421b438:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b43d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b444:	00 00 00 
  800421b447:	41 ff d0             	callq  *%r8
  800421b44a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b451:	ff ff ff 
  800421b454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b458:	48 01 d0             	add    %rdx,%rax
  800421b45b:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421b462:	20 00 00 
  800421b465:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421b46c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421b473:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b479:	48 89 d6             	mov    %rdx,%rsi
  800421b47c:	89 c7                	mov    %eax,%edi
  800421b47e:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b485:	00 00 00 
  800421b488:	ff d0                	callq  *%rax
  800421b48a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b491:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421b497:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421b49e:	40 00 00 
  800421b4a1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421b4a7:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421b4ad:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b4b3:	48 89 d6             	mov    %rdx,%rsi
  800421b4b6:	89 c7                	mov    %eax,%edi
  800421b4b8:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b4bf:	00 00 00 
  800421b4c2:	ff d0                	callq  *%rax
  800421b4c4:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421b4ca:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421b4d0:	21 d0                	and    %edx,%eax
  800421b4d2:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421b4d9:	40 00 00 
  800421b4dc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421b4e2:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421b4e8:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421b4ee:	48 89 d6             	mov    %rdx,%rsi
  800421b4f1:	89 c7                	mov    %eax,%edi
  800421b4f3:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b4fa:	00 00 00 
  800421b4fd:	ff d0                	callq  *%rax
  800421b4ff:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b506:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421b50d:	48 83 c8 18          	or     $0x18,%rax
  800421b511:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b515:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421b51c:	20 00 00 
  800421b51f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b523:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421b52a:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b531:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b537:	48 89 d6             	mov    %rdx,%rsi
  800421b53a:	89 c7                	mov    %eax,%edi
  800421b53c:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b543:	00 00 00 
  800421b546:	ff d0                	callq  *%rax
  800421b548:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b54f:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421b555:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421b55c:	40 00 00 
  800421b55f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421b565:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421b56b:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421b571:	48 89 d6             	mov    %rdx,%rsi
  800421b574:	89 c7                	mov    %eax,%edi
  800421b576:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b57d:	00 00 00 
  800421b580:	ff d0                	callq  *%rax
  800421b582:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b589:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421b590:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421b594:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b59b:	00 00 00 
  800421b59e:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421b5a2:	77 32                	ja     800421b5d6 <vmcs_ctls_init+0x592>
  800421b5a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b5a8:	48 89 c1             	mov    %rax,%rcx
  800421b5ab:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421b5b2:	00 00 00 
  800421b5b5:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421b5ba:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421b5c1:	00 00 00 
  800421b5c4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b5c9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b5d0:	00 00 00 
  800421b5d3:	41 ff d0             	callq  *%r8
  800421b5d6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b5dd:	ff ff ff 
  800421b5e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b5e4:	48 01 d0             	add    %rdx,%rax
  800421b5e7:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421b5ee:	20 00 00 
  800421b5f1:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421b5f8:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421b5ff:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421b605:	48 89 d6             	mov    %rdx,%rsi
  800421b608:	89 c7                	mov    %eax,%edi
  800421b60a:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b611:	00 00 00 
  800421b614:	ff d0                	callq  *%rax
  800421b616:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b61d:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421b624:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421b628:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b62f:	00 00 00 
  800421b632:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421b636:	77 32                	ja     800421b66a <vmcs_ctls_init+0x626>
  800421b638:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b63c:	48 89 c1             	mov    %rax,%rcx
  800421b63f:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421b646:	00 00 00 
  800421b649:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421b64e:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421b655:	00 00 00 
  800421b658:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b65d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b664:	00 00 00 
  800421b667:	41 ff d0             	callq  *%r8
  800421b66a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b671:	ff ff ff 
  800421b674:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b678:	48 01 d0             	add    %rdx,%rax
  800421b67b:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421b682:	20 00 00 
  800421b685:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421b68c:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421b693:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421b699:	48 89 d6             	mov    %rdx,%rsi
  800421b69c:	89 c7                	mov    %eax,%edi
  800421b69e:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421b6a5:	00 00 00 
  800421b6a8:	ff d0                	callq  *%rax
  800421b6aa:	c9                   	leaveq 
  800421b6ab:	c3                   	retq   

000000800421b6ac <vmcs_dump_cpu>:
  800421b6ac:	55                   	push   %rbp
  800421b6ad:	48 89 e5             	mov    %rsp,%rbp
  800421b6b0:	53                   	push   %rbx
  800421b6b1:	48 83 ec 28          	sub    $0x28,%rsp
  800421b6b5:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421b6ba:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b6c1:	00 00 00 
  800421b6c4:	ff d0                	callq  *%rax
  800421b6c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b6ca:	48 bf 54 01 22 04 80 	movabs $0x8004220154,%rdi
  800421b6d1:	00 00 00 
  800421b6d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b6d9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b6e0:	00 00 00 
  800421b6e3:	ff d2                	callq  *%rdx
  800421b6e5:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421b6ec:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b6ef:	89 c7                	mov    %eax,%edi
  800421b6f1:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b6f8:	00 00 00 
  800421b6fb:	ff d0                	callq  *%rax
  800421b6fd:	48 89 c3             	mov    %rax,%rbx
  800421b700:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421b707:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421b70a:	89 c7                	mov    %eax,%edi
  800421b70c:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b713:	00 00 00 
  800421b716:	ff d0                	callq  *%rax
  800421b718:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421b71c:	48 89 d1             	mov    %rdx,%rcx
  800421b71f:	48 89 da             	mov    %rbx,%rdx
  800421b722:	48 89 c6             	mov    %rax,%rsi
  800421b725:	48 bf 78 01 22 04 80 	movabs $0x8004220178,%rdi
  800421b72c:	00 00 00 
  800421b72f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b734:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421b73b:	00 00 00 
  800421b73e:	41 ff d0             	callq  *%r8
  800421b741:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421b748:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b74b:	89 c7                	mov    %eax,%edi
  800421b74d:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b754:	00 00 00 
  800421b757:	ff d0                	callq  *%rax
  800421b759:	48 89 c3             	mov    %rax,%rbx
  800421b75c:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421b763:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b766:	89 c7                	mov    %eax,%edi
  800421b768:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b76f:	00 00 00 
  800421b772:	ff d0                	callq  *%rax
  800421b774:	48 89 da             	mov    %rbx,%rdx
  800421b777:	48 89 c6             	mov    %rax,%rsi
  800421b77a:	48 bf b0 01 22 04 80 	movabs $0x80042201b0,%rdi
  800421b781:	00 00 00 
  800421b784:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b789:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421b790:	00 00 00 
  800421b793:	ff d1                	callq  *%rcx
  800421b795:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421b79c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b79f:	89 c7                	mov    %eax,%edi
  800421b7a1:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b7a8:	00 00 00 
  800421b7ab:	ff d0                	callq  *%rax
  800421b7ad:	48 89 c6             	mov    %rax,%rsi
  800421b7b0:	48 bf d2 01 22 04 80 	movabs $0x80042201d2,%rdi
  800421b7b7:	00 00 00 
  800421b7ba:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b7bf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b7c6:	00 00 00 
  800421b7c9:	ff d2                	callq  *%rdx
  800421b7cb:	48 bf e7 01 22 04 80 	movabs $0x80042201e7,%rdi
  800421b7d2:	00 00 00 
  800421b7d5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b7da:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b7e1:	00 00 00 
  800421b7e4:	ff d2                	callq  *%rdx
  800421b7e6:	48 83 c4 28          	add    $0x28,%rsp
  800421b7ea:	5b                   	pop    %rbx
  800421b7eb:	5d                   	pop    %rbp
  800421b7ec:	c3                   	retq   

000000800421b7ed <vmexit>:
  800421b7ed:	55                   	push   %rbp
  800421b7ee:	48 89 e5             	mov    %rsp,%rbp
  800421b7f1:	41 54                	push   %r12
  800421b7f3:	53                   	push   %rbx
  800421b7f4:	48 83 ec 10          	sub    $0x10,%rsp
  800421b7f8:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421b7ff:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421b803:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421b806:	0f b7 c0             	movzwl %ax,%eax
  800421b809:	83 f8 30             	cmp    $0x30,%eax
  800421b80c:	0f 87 03 05 00 00    	ja     800421bd15 <vmexit+0x528>
  800421b812:	89 c0                	mov    %eax,%eax
  800421b814:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421b81b:	00 
  800421b81c:	48 b8 50 02 22 04 80 	movabs $0x8004220250,%rax
  800421b823:	00 00 00 
  800421b826:	48 01 d0             	add    %rdx,%rax
  800421b829:	48 8b 00             	mov    (%rax),%rax
  800421b82c:	ff e0                	jmpq   *%rax
  800421b82e:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421b835:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b838:	89 c7                	mov    %eax,%edi
  800421b83a:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421b841:	00 00 00 
  800421b844:	ff d0                	callq  *%rax
  800421b846:	89 c2                	mov    %eax,%edx
  800421b848:	48 b8 c4 a5 6d 04 80 	movabs $0x80046da5c4,%rax
  800421b84f:	00 00 00 
  800421b852:	89 10                	mov    %edx,(%rax)
  800421b854:	48 b8 c4 a5 6d 04 80 	movabs $0x80046da5c4,%rax
  800421b85b:	00 00 00 
  800421b85e:	8b 18                	mov    (%rax),%ebx
  800421b860:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b867:	00 00 00 
  800421b86a:	ff d0                	callq  *%rax
  800421b86c:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b873:	00 00 00 
  800421b876:	48 98                	cltq   
  800421b878:	48 c1 e0 03          	shl    $0x3,%rax
  800421b87c:	48 89 c1             	mov    %rax,%rcx
  800421b87f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b883:	48 01 c8             	add    %rcx,%rax
  800421b886:	48 01 d0             	add    %rdx,%rax
  800421b889:	48 83 c0 08          	add    $0x8,%rax
  800421b88d:	48 8b 00             	mov    (%rax),%rax
  800421b890:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421b897:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b89e:	00 00 00 
  800421b8a1:	ff d0                	callq  *%rax
  800421b8a3:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b8aa:	00 00 00 
  800421b8ad:	48 98                	cltq   
  800421b8af:	48 c1 e0 03          	shl    $0x3,%rax
  800421b8b3:	48 89 c1             	mov    %rax,%rcx
  800421b8b6:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b8ba:	48 01 c8             	add    %rcx,%rax
  800421b8bd:	48 01 d0             	add    %rdx,%rax
  800421b8c0:	48 83 c0 08          	add    $0x8,%rax
  800421b8c4:	48 8b 00             	mov    (%rax),%rax
  800421b8c7:	89 da                	mov    %ebx,%edx
  800421b8c9:	4c 89 e6             	mov    %r12,%rsi
  800421b8cc:	48 89 c7             	mov    %rax,%rdi
  800421b8cf:	48 b8 73 c6 21 04 80 	movabs $0x800421c673,%rax
  800421b8d6:	00 00 00 
  800421b8d9:	ff d0                	callq  *%rax
  800421b8db:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b8de:	e9 32 04 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421b8e3:	48 b8 c4 a5 6d 04 80 	movabs $0x80046da5c4,%rax
  800421b8ea:	00 00 00 
  800421b8ed:	8b 18                	mov    (%rax),%ebx
  800421b8ef:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b8f6:	00 00 00 
  800421b8f9:	ff d0                	callq  *%rax
  800421b8fb:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b902:	00 00 00 
  800421b905:	48 98                	cltq   
  800421b907:	48 c1 e0 03          	shl    $0x3,%rax
  800421b90b:	48 89 c1             	mov    %rax,%rcx
  800421b90e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b912:	48 01 c8             	add    %rcx,%rax
  800421b915:	48 01 d0             	add    %rdx,%rax
  800421b918:	48 83 c0 08          	add    $0x8,%rax
  800421b91c:	48 8b 00             	mov    (%rax),%rax
  800421b91f:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421b926:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b92d:	00 00 00 
  800421b930:	ff d0                	callq  *%rax
  800421b932:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b939:	00 00 00 
  800421b93c:	48 98                	cltq   
  800421b93e:	48 c1 e0 03          	shl    $0x3,%rax
  800421b942:	48 89 c1             	mov    %rax,%rcx
  800421b945:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b949:	48 01 c8             	add    %rcx,%rax
  800421b94c:	48 01 d0             	add    %rdx,%rax
  800421b94f:	48 83 c0 08          	add    $0x8,%rax
  800421b953:	48 8b 00             	mov    (%rax),%rax
  800421b956:	89 da                	mov    %ebx,%edx
  800421b958:	4c 89 e6             	mov    %r12,%rsi
  800421b95b:	48 89 c7             	mov    %rax,%rdi
  800421b95e:	48 b8 f2 c5 21 04 80 	movabs $0x800421c5f2,%rax
  800421b965:	00 00 00 
  800421b968:	ff d0                	callq  *%rax
  800421b96a:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b96d:	e9 a3 03 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421b972:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b979:	00 00 00 
  800421b97c:	ff d0                	callq  *%rax
  800421b97e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b985:	00 00 00 
  800421b988:	48 98                	cltq   
  800421b98a:	48 c1 e0 03          	shl    $0x3,%rax
  800421b98e:	48 89 c1             	mov    %rax,%rcx
  800421b991:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b995:	48 01 c8             	add    %rcx,%rax
  800421b998:	48 01 d0             	add    %rdx,%rax
  800421b99b:	48 83 c0 08          	add    $0x8,%rax
  800421b99f:	48 8b 00             	mov    (%rax),%rax
  800421b9a2:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421b9a9:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b9b0:	00 00 00 
  800421b9b3:	ff d0                	callq  *%rax
  800421b9b5:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b9bc:	00 00 00 
  800421b9bf:	48 98                	cltq   
  800421b9c1:	48 c1 e0 03          	shl    $0x3,%rax
  800421b9c5:	48 89 c1             	mov    %rax,%rcx
  800421b9c8:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b9cc:	48 01 c8             	add    %rcx,%rax
  800421b9cf:	48 01 d0             	add    %rdx,%rax
  800421b9d2:	48 83 c0 08          	add    $0x8,%rax
  800421b9d6:	48 8b 00             	mov    (%rax),%rax
  800421b9d9:	48 89 de             	mov    %rbx,%rsi
  800421b9dc:	48 89 c7             	mov    %rax,%rdi
  800421b9df:	48 b8 20 c7 21 04 80 	movabs $0x800421c720,%rax
  800421b9e6:	00 00 00 
  800421b9e9:	ff d0                	callq  *%rax
  800421b9eb:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b9ee:	e9 22 03 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421b9f3:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421b9fa:	00 00 00 
  800421b9fd:	ff d0                	callq  *%rax
  800421b9ff:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ba06:	00 00 00 
  800421ba09:	48 98                	cltq   
  800421ba0b:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba0f:	48 89 c1             	mov    %rax,%rcx
  800421ba12:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba16:	48 01 c8             	add    %rcx,%rax
  800421ba19:	48 01 d0             	add    %rdx,%rax
  800421ba1c:	48 83 c0 08          	add    $0x8,%rax
  800421ba20:	48 8b 00             	mov    (%rax),%rax
  800421ba23:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421ba2a:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421ba31:	00 00 00 
  800421ba34:	ff d0                	callq  *%rax
  800421ba36:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ba3d:	00 00 00 
  800421ba40:	48 98                	cltq   
  800421ba42:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba46:	48 89 c1             	mov    %rax,%rcx
  800421ba49:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba4d:	48 01 c8             	add    %rcx,%rax
  800421ba50:	48 01 d0             	add    %rdx,%rax
  800421ba53:	48 83 c0 08          	add    $0x8,%rax
  800421ba57:	48 8b 00             	mov    (%rax),%rax
  800421ba5a:	48 89 de             	mov    %rbx,%rsi
  800421ba5d:	48 89 c7             	mov    %rax,%rdi
  800421ba60:	48 b8 28 c8 21 04 80 	movabs $0x800421c828,%rax
  800421ba67:	00 00 00 
  800421ba6a:	ff d0                	callq  *%rax
  800421ba6c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ba6f:	e9 a1 02 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421ba74:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421ba7b:	00 00 00 
  800421ba7e:	ff d0                	callq  *%rax
  800421ba80:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ba87:	00 00 00 
  800421ba8a:	48 98                	cltq   
  800421ba8c:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba90:	48 89 c1             	mov    %rax,%rcx
  800421ba93:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba97:	48 01 c8             	add    %rcx,%rax
  800421ba9a:	48 01 d0             	add    %rdx,%rax
  800421ba9d:	48 83 c0 08          	add    $0x8,%rax
  800421baa1:	48 8b 00             	mov    (%rax),%rax
  800421baa4:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421baab:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bab2:	00 00 00 
  800421bab5:	ff d0                	callq  *%rax
  800421bab7:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421babe:	00 00 00 
  800421bac1:	48 98                	cltq   
  800421bac3:	48 c1 e0 03          	shl    $0x3,%rax
  800421bac7:	48 89 c1             	mov    %rax,%rcx
  800421baca:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bace:	48 01 c8             	add    %rcx,%rax
  800421bad1:	48 01 d0             	add    %rdx,%rax
  800421bad4:	48 83 c0 08          	add    $0x8,%rax
  800421bad8:	48 8b 00             	mov    (%rax),%rax
  800421badb:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421bae2:	48 89 de             	mov    %rbx,%rsi
  800421bae5:	48 89 c7             	mov    %rax,%rdi
  800421bae8:	48 b8 94 c9 21 04 80 	movabs $0x800421c994,%rax
  800421baef:	00 00 00 
  800421baf2:	ff d0                	callq  *%rax
  800421baf4:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421baf7:	e9 19 02 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421bafc:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bb03:	00 00 00 
  800421bb06:	ff d0                	callq  *%rax
  800421bb08:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bb0f:	00 00 00 
  800421bb12:	48 98                	cltq   
  800421bb14:	48 c1 e0 03          	shl    $0x3,%rax
  800421bb18:	48 89 c1             	mov    %rax,%rcx
  800421bb1b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bb1f:	48 01 c8             	add    %rcx,%rax
  800421bb22:	48 01 d0             	add    %rdx,%rax
  800421bb25:	48 83 c0 08          	add    $0x8,%rax
  800421bb29:	48 8b 00             	mov    (%rax),%rax
  800421bb2c:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421bb33:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bb3a:	00 00 00 
  800421bb3d:	ff d0                	callq  *%rax
  800421bb3f:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bb46:	00 00 00 
  800421bb49:	48 98                	cltq   
  800421bb4b:	48 c1 e0 03          	shl    $0x3,%rax
  800421bb4f:	48 89 c1             	mov    %rax,%rcx
  800421bb52:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bb56:	48 01 c8             	add    %rcx,%rax
  800421bb59:	48 01 d0             	add    %rdx,%rax
  800421bb5c:	48 83 c0 08          	add    $0x8,%rax
  800421bb60:	48 8b 00             	mov    (%rax),%rax
  800421bb63:	48 89 de             	mov    %rbx,%rsi
  800421bb66:	48 89 c7             	mov    %rax,%rdi
  800421bb69:	48 b8 86 cb 21 04 80 	movabs $0x800421cb86,%rax
  800421bb70:	00 00 00 
  800421bb73:	ff d0                	callq  *%rax
  800421bb75:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421bb78:	e9 98 01 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421bb7d:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bb84:	00 00 00 
  800421bb87:	ff d0                	callq  *%rax
  800421bb89:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bb90:	00 00 00 
  800421bb93:	48 98                	cltq   
  800421bb95:	48 c1 e0 03          	shl    $0x3,%rax
  800421bb99:	48 89 c1             	mov    %rax,%rcx
  800421bb9c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bba0:	48 01 c8             	add    %rcx,%rax
  800421bba3:	48 01 d0             	add    %rdx,%rax
  800421bba6:	48 83 c0 08          	add    $0x8,%rax
  800421bbaa:	48 8b 00             	mov    (%rax),%rax
  800421bbad:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421bbb4:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bbbb:	00 00 00 
  800421bbbe:	ff d0                	callq  *%rax
  800421bbc0:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bbc7:	00 00 00 
  800421bbca:	48 98                	cltq   
  800421bbcc:	48 c1 e0 03          	shl    $0x3,%rax
  800421bbd0:	48 89 c1             	mov    %rax,%rcx
  800421bbd3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bbd7:	48 01 c8             	add    %rcx,%rax
  800421bbda:	48 01 d0             	add    %rdx,%rax
  800421bbdd:	48 83 c0 08          	add    $0x8,%rax
  800421bbe1:	48 8b 00             	mov    (%rax),%rax
  800421bbe4:	48 89 de             	mov    %rbx,%rsi
  800421bbe7:	48 89 c7             	mov    %rax,%rdi
  800421bbea:	48 b8 65 cd 21 04 80 	movabs $0x800421cd65,%rax
  800421bbf1:	00 00 00 
  800421bbf4:	ff d0                	callq  *%rax
  800421bbf6:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421bbf9:	e9 17 01 00 00       	jmpq   800421bd15 <vmexit+0x528>
  800421bbfe:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bc05:	00 00 00 
  800421bc08:	ff d0                	callq  *%rax
  800421bc0a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bc11:	00 00 00 
  800421bc14:	48 98                	cltq   
  800421bc16:	48 c1 e0 03          	shl    $0x3,%rax
  800421bc1a:	48 89 c1             	mov    %rax,%rcx
  800421bc1d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bc21:	48 01 c8             	add    %rcx,%rax
  800421bc24:	48 01 d0             	add    %rdx,%rax
  800421bc27:	48 83 c0 08          	add    $0x8,%rax
  800421bc2b:	48 8b 00             	mov    (%rax),%rax
  800421bc2e:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421bc35:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bc3c:	00 00 00 
  800421bc3f:	ff d0                	callq  *%rax
  800421bc41:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bc48:	00 00 00 
  800421bc4b:	48 98                	cltq   
  800421bc4d:	48 c1 e0 03          	shl    $0x3,%rax
  800421bc51:	48 89 c1             	mov    %rax,%rcx
  800421bc54:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bc58:	48 01 c8             	add    %rcx,%rax
  800421bc5b:	48 01 d0             	add    %rdx,%rax
  800421bc5e:	48 83 c0 08          	add    $0x8,%rax
  800421bc62:	48 8b 00             	mov    (%rax),%rax
  800421bc65:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421bc6c:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bc73:	00 00 00 
  800421bc76:	ff d0                	callq  *%rax
  800421bc78:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bc7f:	00 00 00 
  800421bc82:	48 98                	cltq   
  800421bc84:	48 c1 e0 03          	shl    $0x3,%rax
  800421bc88:	48 89 c1             	mov    %rax,%rcx
  800421bc8b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bc8f:	48 01 c8             	add    %rcx,%rax
  800421bc92:	48 01 d0             	add    %rdx,%rax
  800421bc95:	48 83 c0 08          	add    $0x8,%rax
  800421bc99:	48 8b 00             	mov    (%rax),%rax
  800421bc9c:	48 89 da             	mov    %rbx,%rdx
  800421bc9f:	4c 89 e6             	mov    %r12,%rsi
  800421bca2:	48 89 c7             	mov    %rax,%rdi
  800421bca5:	48 b8 9f cd 21 04 80 	movabs $0x800421cd9f,%rax
  800421bcac:	00 00 00 
  800421bcaf:	ff d0                	callq  *%rax
  800421bcb1:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421bcb4:	eb 5f                	jmp    800421bd15 <vmexit+0x528>
  800421bcb6:	48 bf 08 02 22 04 80 	movabs $0x8004220208,%rdi
  800421bcbd:	00 00 00 
  800421bcc0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bcc5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421bccc:	00 00 00 
  800421bccf:	ff d2                	callq  *%rdx
  800421bcd1:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bcd8:	00 00 00 
  800421bcdb:	ff d0                	callq  *%rax
  800421bcdd:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bce4:	00 00 00 
  800421bce7:	48 98                	cltq   
  800421bce9:	48 c1 e0 03          	shl    $0x3,%rax
  800421bced:	48 89 c1             	mov    %rax,%rcx
  800421bcf0:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bcf4:	48 01 c8             	add    %rcx,%rax
  800421bcf7:	48 01 d0             	add    %rdx,%rax
  800421bcfa:	48 83 c0 08          	add    $0x8,%rax
  800421bcfe:	48 8b 00             	mov    (%rax),%rax
  800421bd01:	48 89 c7             	mov    %rax,%rdi
  800421bd04:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421bd0b:	00 00 00 
  800421bd0e:	ff d0                	callq  *%rax
  800421bd10:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421bd14:	90                   	nop
  800421bd15:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421bd19:	83 f0 01             	xor    $0x1,%eax
  800421bd1c:	84 c0                	test   %al,%al
  800421bd1e:	74 6b                	je     800421bd8b <vmexit+0x59e>
  800421bd20:	48 bf 28 02 22 04 80 	movabs $0x8004220228,%rdi
  800421bd27:	00 00 00 
  800421bd2a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bd2f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421bd36:	00 00 00 
  800421bd39:	ff d2                	callq  *%rdx
  800421bd3b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bd40:	48 ba ac b6 21 04 80 	movabs $0x800421b6ac,%rdx
  800421bd47:	00 00 00 
  800421bd4a:	ff d2                	callq  *%rdx
  800421bd4c:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bd53:	00 00 00 
  800421bd56:	ff d0                	callq  *%rax
  800421bd58:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bd5f:	00 00 00 
  800421bd62:	48 98                	cltq   
  800421bd64:	48 c1 e0 03          	shl    $0x3,%rax
  800421bd68:	48 89 c1             	mov    %rax,%rcx
  800421bd6b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bd6f:	48 01 c8             	add    %rcx,%rax
  800421bd72:	48 01 d0             	add    %rdx,%rax
  800421bd75:	48 83 c0 08          	add    $0x8,%rax
  800421bd79:	48 8b 00             	mov    (%rax),%rax
  800421bd7c:	48 89 c7             	mov    %rax,%rdi
  800421bd7f:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421bd86:	00 00 00 
  800421bd89:	ff d0                	callq  *%rax
  800421bd8b:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800421bd92:	00 00 00 
  800421bd95:	ff d0                	callq  *%rax

000000800421bd97 <asm_vmrun>:
  800421bd97:	55                   	push   %rbp
  800421bd98:	48 89 e5             	mov    %rsp,%rbp
  800421bd9b:	41 57                	push   %r15
  800421bd9d:	41 56                	push   %r14
  800421bd9f:	41 55                	push   %r13
  800421bda1:	41 54                	push   %r12
  800421bda3:	53                   	push   %rbx
  800421bda4:	48 83 ec 28          	sub    $0x28,%rsp
  800421bda8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421bdac:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bdb3:	00 00 00 
  800421bdb6:	ff d0                	callq  *%rax
  800421bdb8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bdbf:	00 00 00 
  800421bdc2:	48 98                	cltq   
  800421bdc4:	48 c1 e0 03          	shl    $0x3,%rax
  800421bdc8:	48 89 c1             	mov    %rax,%rcx
  800421bdcb:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bdcf:	48 01 c8             	add    %rcx,%rax
  800421bdd2:	48 01 d0             	add    %rdx,%rax
  800421bdd5:	48 83 c0 08          	add    $0x8,%rax
  800421bdd9:	48 8b 00             	mov    (%rax),%rax
  800421bddc:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421bde2:	89 c2                	mov    %eax,%edx
  800421bde4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bde8:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421bdef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bdf3:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421bdf9:	48 b8 f1 99 21 04 80 	movabs $0x80042199f1,%rax
  800421be00:	00 00 00 
  800421be03:	ff d0                	callq  *%rax
  800421be05:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421be09:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421be0e:	52                   	push   %rdx
  800421be0f:	55                   	push   %rbp
  800421be10:	51                   	push   %rcx
  800421be11:	51                   	push   %rcx
  800421be12:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421be19:	0f 20 d2             	mov    %cr2,%rdx
  800421be1c:	48 39 c2             	cmp    %rax,%rdx
  800421be1f:	74 03                	je     800421be24 <asm_vmrun+0x8d>
  800421be21:	0f 22 d0             	mov    %rax,%cr2
  800421be24:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421be29:	59                   	pop    %rcx
  800421be2a:	5d                   	pop    %rbp
  800421be2b:	5a                   	pop    %rdx
  800421be2c:	0f 96 41 78          	setbe  0x78(%rcx)
  800421be30:	48 b8 d5 99 21 04 80 	movabs $0x80042199d5,%rax
  800421be37:	00 00 00 
  800421be3a:	ff d0                	callq  *%rax
  800421be3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421be40:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421be44:	66 85 c0             	test   %ax,%ax
  800421be47:	74 20                	je     800421be69 <asm_vmrun+0xd2>
  800421be49:	48 bf d8 03 22 04 80 	movabs $0x80042203d8,%rdi
  800421be50:	00 00 00 
  800421be53:	b8 00 00 00 00       	mov    $0x0,%eax
  800421be58:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421be5f:	00 00 00 
  800421be62:	ff d2                	callq  *%rdx
  800421be64:	e9 af 00 00 00       	jmpq   800421bf18 <asm_vmrun+0x181>
  800421be69:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421be70:	00 00 00 
  800421be73:	ff d0                	callq  *%rax
  800421be75:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421be7c:	00 00 00 
  800421be7f:	48 98                	cltq   
  800421be81:	48 c1 e0 03          	shl    $0x3,%rax
  800421be85:	48 89 c1             	mov    %rax,%rcx
  800421be88:	48 c1 e1 04          	shl    $0x4,%rcx
  800421be8c:	48 01 c8             	add    %rcx,%rax
  800421be8f:	48 01 d0             	add    %rdx,%rax
  800421be92:	48 83 c0 08          	add    $0x8,%rax
  800421be96:	48 8b 18             	mov    (%rax),%rbx
  800421be99:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421bea0:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bea3:	89 c7                	mov    %eax,%edi
  800421bea5:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421beac:	00 00 00 
  800421beaf:	ff d0                	callq  *%rax
  800421beb1:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421beb8:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421bebf:	00 00 00 
  800421bec2:	ff d0                	callq  *%rax
  800421bec4:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421becb:	00 00 00 
  800421bece:	48 98                	cltq   
  800421bed0:	48 c1 e0 03          	shl    $0x3,%rax
  800421bed4:	48 89 c1             	mov    %rax,%rcx
  800421bed7:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bedb:	48 01 c8             	add    %rcx,%rax
  800421bede:	48 01 d0             	add    %rdx,%rax
  800421bee1:	48 83 c0 08          	add    $0x8,%rax
  800421bee5:	48 8b 18             	mov    (%rax),%rbx
  800421bee8:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421beef:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421bef2:	89 c7                	mov    %eax,%edi
  800421bef4:	48 b8 6c 98 21 04 80 	movabs $0x800421986c,%rax
  800421befb:	00 00 00 
  800421befe:	ff d0                	callq  *%rax
  800421bf00:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421bf07:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bf0c:	48 ba ed b7 21 04 80 	movabs $0x800421b7ed,%rdx
  800421bf13:	00 00 00 
  800421bf16:	ff d2                	callq  *%rdx
  800421bf18:	48 83 c4 28          	add    $0x28,%rsp
  800421bf1c:	5b                   	pop    %rbx
  800421bf1d:	41 5c                	pop    %r12
  800421bf1f:	41 5d                	pop    %r13
  800421bf21:	41 5e                	pop    %r14
  800421bf23:	41 5f                	pop    %r15
  800421bf25:	5d                   	pop    %rbp
  800421bf26:	c3                   	retq   

000000800421bf27 <msr_setup>:
  800421bf27:	55                   	push   %rbp
  800421bf28:	48 89 e5             	mov    %rsp,%rbp
  800421bf2b:	48 83 ec 40          	sub    $0x40,%rsp
  800421bf2f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421bf33:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421bf3a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421bf41:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421bf48:	7e 35                	jle    800421bf7f <msr_setup+0x58>
  800421bf4a:	48 b9 f8 03 22 04 80 	movabs $0x80042203f8,%rcx
  800421bf51:	00 00 00 
  800421bf54:	48 ba 9c 00 22 04 80 	movabs $0x800422009c,%rdx
  800421bf5b:	00 00 00 
  800421bf5e:	be 50 02 00 00       	mov    $0x250,%esi
  800421bf63:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421bf6a:	00 00 00 
  800421bf6d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bf72:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421bf79:	00 00 00 
  800421bf7c:	41 ff d0             	callq  *%r8
  800421bf7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421bf83:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421bf86:	89 50 28             	mov    %edx,0x28(%rax)
  800421bf89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421bf90:	e9 97 00 00 00       	jmpq   800421c02c <msr_setup+0x105>
  800421bf95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421bf99:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421bf9d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421bfa0:	48 63 d2             	movslq %edx,%rdx
  800421bfa3:	48 c1 e2 04          	shl    $0x4,%rdx
  800421bfa7:	48 01 d0             	add    %rdx,%rax
  800421bfaa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421bfae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bfb1:	48 98                	cltq   
  800421bfb3:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421bfb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421bfbb:	89 10                	mov    %edx,(%rax)
  800421bfbd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bfc0:	48 98                	cltq   
  800421bfc2:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421bfc6:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421bfc9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421bfcc:	89 c1                	mov    %eax,%ecx
  800421bfce:	0f 32                	rdmsr  
  800421bfd0:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421bfd3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421bfd6:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421bfdd:	00 
	ret = edx;
  800421bfde:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421bfe1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421bfe5:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421bfea:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421bfed:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421bff1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421bff5:	48 89 c2             	mov    %rax,%rdx
  800421bff8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421bffc:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421c000:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421c004:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421c008:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421c00b:	48 63 d2             	movslq %edx,%rdx
  800421c00e:	48 c1 e2 04          	shl    $0x4,%rdx
  800421c012:	48 01 d0             	add    %rdx,%rax
  800421c015:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c019:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c01c:	48 98                	cltq   
  800421c01e:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421c022:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c026:	89 10                	mov    %edx,(%rax)
  800421c028:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421c02c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c02f:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421c032:	0f 8c 5d ff ff ff    	jl     800421bf95 <msr_setup+0x6e>
  800421c038:	c9                   	leaveq 
  800421c039:	c3                   	retq   

000000800421c03a <bitmap_setup>:
  800421c03a:	55                   	push   %rbp
  800421c03b:	48 89 e5             	mov    %rsp,%rbp
  800421c03e:	48 83 ec 30          	sub    $0x30,%rsp
  800421c042:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421c046:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421c04d:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421c054:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421c05b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421c062:	e9 07 01 00 00       	jmpq   800421c16e <bitmap_setup+0x134>
  800421c067:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c06a:	48 98                	cltq   
  800421c06c:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421c070:	c1 e8 06             	shr    $0x6,%eax
  800421c073:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421c076:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c079:	48 98                	cltq   
  800421c07b:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421c07f:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421c084:	77 51                	ja     800421c0d7 <bitmap_setup+0x9d>
  800421c086:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c08a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421c08e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421c091:	48 63 d2             	movslq %edx,%rdx
  800421c094:	48 c1 e2 03          	shl    $0x3,%rdx
  800421c098:	48 01 c2             	add    %rax,%rdx
  800421c09b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c09f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421c0a3:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421c0a6:	48 63 c9             	movslq %ecx,%rcx
  800421c0a9:	48 c1 e1 03          	shl    $0x3,%rcx
  800421c0ad:	48 01 c8             	add    %rcx,%rax
  800421c0b0:	48 8b 30             	mov    (%rax),%rsi
  800421c0b3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c0b6:	48 98                	cltq   
  800421c0b8:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421c0bc:	83 e0 3f             	and    $0x3f,%eax
  800421c0bf:	bf 01 00 00 00       	mov    $0x1,%edi
  800421c0c4:	89 c1                	mov    %eax,%ecx
  800421c0c6:	48 d3 e7             	shl    %cl,%rdi
  800421c0c9:	48 89 f8             	mov    %rdi,%rax
  800421c0cc:	48 09 f0             	or     %rsi,%rax
  800421c0cf:	48 89 02             	mov    %rax,(%rdx)
  800421c0d2:	e9 93 00 00 00       	jmpq   800421c16a <bitmap_setup+0x130>
  800421c0d7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c0da:	48 98                	cltq   
  800421c0dc:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421c0e0:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421c0e5:	77 4e                	ja     800421c135 <bitmap_setup+0xfb>
  800421c0e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c0eb:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421c0ef:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421c0f2:	48 63 d2             	movslq %edx,%rdx
  800421c0f5:	48 c1 e2 03          	shl    $0x3,%rdx
  800421c0f9:	48 01 c2             	add    %rax,%rdx
  800421c0fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c100:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421c104:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421c107:	48 63 c9             	movslq %ecx,%rcx
  800421c10a:	48 c1 e1 03          	shl    $0x3,%rcx
  800421c10e:	48 01 c8             	add    %rcx,%rax
  800421c111:	48 8b 30             	mov    (%rax),%rsi
  800421c114:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c117:	48 98                	cltq   
  800421c119:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421c11d:	83 e0 3f             	and    $0x3f,%eax
  800421c120:	bf 01 00 00 00       	mov    $0x1,%edi
  800421c125:	89 c1                	mov    %eax,%ecx
  800421c127:	48 d3 e7             	shl    %cl,%rdi
  800421c12a:	48 89 f8             	mov    %rdi,%rax
  800421c12d:	48 09 f0             	or     %rsi,%rax
  800421c130:	48 89 02             	mov    %rax,(%rdx)
  800421c133:	eb 35                	jmp    800421c16a <bitmap_setup+0x130>
  800421c135:	48 b9 96 00 22 04 80 	movabs $0x8004220096,%rcx
  800421c13c:	00 00 00 
  800421c13f:	48 ba 9c 00 22 04 80 	movabs $0x800422009c,%rdx
  800421c146:	00 00 00 
  800421c149:	be 69 02 00 00       	mov    $0x269,%esi
  800421c14e:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421c155:	00 00 00 
  800421c158:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c15d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c164:	00 00 00 
  800421c167:	41 ff d0             	callq  *%r8
  800421c16a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421c16e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c171:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421c174:	0f 8c ed fe ff ff    	jl     800421c067 <bitmap_setup+0x2d>
  800421c17a:	c9                   	leaveq 
  800421c17b:	c3                   	retq   

000000800421c17c <vmx_vmrun>:
  800421c17c:	55                   	push   %rbp
  800421c17d:	48 89 e5             	mov    %rsp,%rbp
  800421c180:	48 83 ec 70          	sub    $0x70,%rsp
  800421c184:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421c188:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c18c:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421c192:	83 f8 03             	cmp    $0x3,%eax
  800421c195:	74 0a                	je     800421c1a1 <vmx_vmrun+0x25>
  800421c197:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421c19c:	e9 ac 02 00 00       	jmpq   800421c44d <vmx_vmrun+0x2d1>
  800421c1a1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c1a5:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421c1ab:	83 f8 01             	cmp    $0x1,%eax
  800421c1ae:	0f 85 2f 01 00 00    	jne    800421c2e3 <vmx_vmrun+0x167>
  800421c1b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c1b8:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421c1bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c1c3:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c1ca:	00 00 00 
  800421c1cd:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c1d1:	77 32                	ja     800421c205 <vmx_vmrun+0x89>
  800421c1d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c1d7:	48 89 c1             	mov    %rax,%rcx
  800421c1da:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421c1e1:	00 00 00 
  800421c1e4:	be 7c 02 00 00       	mov    $0x27c,%esi
  800421c1e9:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421c1f0:	00 00 00 
  800421c1f3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c1f8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c1ff:	00 00 00 
  800421c202:	41 ff d0             	callq  *%r8
  800421c205:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c20c:	ff ff ff 
  800421c20f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c213:	48 01 d0             	add    %rdx,%rax
  800421c216:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c21a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c21e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421c222:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421c226:	f8                   	clc    
  800421c227:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421c22c:	0f 96 c0             	setbe  %al
  800421c22f:	88 45 df             	mov    %al,-0x21(%rbp)
  800421c232:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421c236:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c239:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421c23d:	74 0a                	je     800421c249 <vmx_vmrun+0xcd>
  800421c23f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421c244:	e9 04 02 00 00       	jmpq   800421c44d <vmx_vmrun+0x2d1>
  800421c249:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c24d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421c251:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421c255:	f8                   	clc    
  800421c256:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421c25a:	0f 96 c0             	setbe  %al
  800421c25d:	88 45 de             	mov    %al,-0x22(%rbp)
  800421c260:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421c264:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c267:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421c26b:	74 0a                	je     800421c277 <vmx_vmrun+0xfb>
  800421c26d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421c272:	e9 d6 01 00 00       	jmpq   800421c44d <vmx_vmrun+0x2d1>
  800421c277:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c27c:	48 ba d1 a3 21 04 80 	movabs $0x800421a3d1,%rdx
  800421c283:	00 00 00 
  800421c286:	ff d2                	callq  *%rdx
  800421c288:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c28d:	48 ba 9f a7 21 04 80 	movabs $0x800421a79f,%rdx
  800421c294:	00 00 00 
  800421c297:	ff d2                	callq  *%rdx
  800421c299:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c29d:	48 05 20 01 00 00    	add    $0x120,%rax
  800421c2a3:	48 89 c7             	mov    %rax,%rdi
  800421c2a6:	48 b8 3a c0 21 04 80 	movabs $0x800421c03a,%rax
  800421c2ad:	00 00 00 
  800421c2b0:	ff d0                	callq  *%rax
  800421c2b2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c2b6:	48 05 20 01 00 00    	add    $0x120,%rax
  800421c2bc:	48 89 c7             	mov    %rax,%rdi
  800421c2bf:	48 b8 27 bf 21 04 80 	movabs $0x800421bf27,%rax
  800421c2c6:	00 00 00 
  800421c2c9:	ff d0                	callq  *%rax
  800421c2cb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c2cf:	48 89 c7             	mov    %rax,%rdi
  800421c2d2:	48 b8 44 b0 21 04 80 	movabs $0x800421b044,%rax
  800421c2d9:	00 00 00 
  800421c2dc:	ff d0                	callq  *%rax
  800421c2de:	e9 8c 00 00 00       	jmpq   800421c36f <vmx_vmrun+0x1f3>
  800421c2e3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c2e7:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421c2ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421c2f2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c2f9:	00 00 00 
  800421c2fc:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421c300:	77 32                	ja     800421c334 <vmx_vmrun+0x1b8>
  800421c302:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c306:	48 89 c1             	mov    %rax,%rcx
  800421c309:	48 ba 30 01 22 04 80 	movabs $0x8004220130,%rdx
  800421c310:	00 00 00 
  800421c313:	be 95 02 00 00       	mov    $0x295,%esi
  800421c318:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421c31f:	00 00 00 
  800421c322:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c327:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c32e:	00 00 00 
  800421c331:	41 ff d0             	callq  *%r8
  800421c334:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c33b:	ff ff ff 
  800421c33e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c342:	48 01 d0             	add    %rdx,%rax
  800421c345:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421c349:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421c34d:	f8                   	clc    
  800421c34e:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421c352:	0f 96 c0             	setbe  %al
  800421c355:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421c358:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421c35c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c35f:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421c363:	74 0a                	je     800421c36f <vmx_vmrun+0x1f3>
  800421c365:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421c36a:	e9 de 00 00 00       	jmpq   800421c44d <vmx_vmrun+0x2d1>
  800421c36f:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421c376:	00 00 00 
  800421c379:	ff d0                	callq  *%rax
  800421c37b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421c382:	00 00 00 
  800421c385:	48 98                	cltq   
  800421c387:	48 c1 e0 03          	shl    $0x3,%rax
  800421c38b:	48 89 c1             	mov    %rax,%rcx
  800421c38e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c392:	48 01 c8             	add    %rcx,%rax
  800421c395:	48 01 d0             	add    %rdx,%rax
  800421c398:	48 83 c0 08          	add    $0x8,%rax
  800421c39c:	48 8b 00             	mov    (%rax),%rax
  800421c39f:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421c3a6:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421c3ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421c3b1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421c3b5:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421c3b8:	48 89 d6             	mov    %rdx,%rsi
  800421c3bb:	89 c7                	mov    %eax,%edi
  800421c3bd:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421c3c4:	00 00 00 
  800421c3c7:	ff d0                	callq  *%rax
  800421c3c9:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421c3d0:	00 00 00 
  800421c3d3:	ff d0                	callq  *%rax
  800421c3d5:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421c3dc:	00 00 00 
  800421c3df:	48 98                	cltq   
  800421c3e1:	48 c1 e0 03          	shl    $0x3,%rax
  800421c3e5:	48 89 c1             	mov    %rax,%rcx
  800421c3e8:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c3ec:	48 01 c8             	add    %rcx,%rax
  800421c3ef:	48 01 d0             	add    %rdx,%rax
  800421c3f2:	48 83 c0 08          	add    $0x8,%rax
  800421c3f6:	48 8b 00             	mov    (%rax),%rax
  800421c3f9:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421c400:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421c407:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421c40b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421c40f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c412:	48 89 d6             	mov    %rdx,%rsi
  800421c415:	89 c7                	mov    %eax,%edi
  800421c417:	48 b8 46 98 21 04 80 	movabs $0x8004219846,%rax
  800421c41e:	00 00 00 
  800421c421:	ff d0                	callq  *%rax
  800421c423:	48 ba 0f 04 22 04 80 	movabs $0x800422040f,%rdx
  800421c42a:	00 00 00 
  800421c42d:	be 9d 02 00 00       	mov    $0x29d,%esi
  800421c432:	48 bf b1 00 22 04 80 	movabs $0x80042200b1,%rdi
  800421c439:	00 00 00 
  800421c43c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c441:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421c448:	00 00 00 
  800421c44b:	ff d1                	callq  *%rcx
  800421c44d:	c9                   	leaveq 
  800421c44e:	c3                   	retq   

000000800421c44f <vmcs_writel>:
  800421c44f:	55                   	push   %rbp
  800421c450:	48 89 e5             	mov    %rsp,%rbp
  800421c453:	48 83 ec 20          	sub    $0x20,%rsp
  800421c457:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421c45a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421c45e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c462:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421c465:	f8                   	clc    
  800421c466:	0f 79 d0             	vmwrite %rax,%rdx
  800421c469:	0f 96 c0             	setbe  %al
  800421c46c:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421c46f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421c473:	c9                   	leaveq 
  800421c474:	c3                   	retq   

000000800421c475 <vmcs_readl>:
  800421c475:	55                   	push   %rbp
  800421c476:	48 89 e5             	mov    %rsp,%rbp
  800421c479:	48 83 ec 14          	sub    $0x14,%rsp
  800421c47d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421c480:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c483:	89 c2                	mov    %eax,%edx
  800421c485:	0f 78 d0             	vmread %rdx,%rax
  800421c488:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c48c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c490:	c9                   	leaveq 
  800421c491:	c3                   	retq   

000000800421c492 <page2ppn>:
  800421c492:	55                   	push   %rbp
  800421c493:	48 89 e5             	mov    %rsp,%rbp
  800421c496:	48 83 ec 08          	sub    $0x8,%rsp
  800421c49a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421c49e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421c4a2:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  800421c4a9:	00 00 00 
  800421c4ac:	48 8b 00             	mov    (%rax),%rax
  800421c4af:	48 29 c2             	sub    %rax,%rdx
  800421c4b2:	48 89 d0             	mov    %rdx,%rax
  800421c4b5:	48 c1 f8 04          	sar    $0x4,%rax
  800421c4b9:	c9                   	leaveq 
  800421c4ba:	c3                   	retq   

000000800421c4bb <page2pa>:
  800421c4bb:	55                   	push   %rbp
  800421c4bc:	48 89 e5             	mov    %rsp,%rbp
  800421c4bf:	48 83 ec 08          	sub    $0x8,%rsp
  800421c4c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421c4c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c4cb:	48 89 c7             	mov    %rax,%rdi
  800421c4ce:	48 b8 92 c4 21 04 80 	movabs $0x800421c492,%rax
  800421c4d5:	00 00 00 
  800421c4d8:	ff d0                	callq  *%rax
  800421c4da:	48 c1 e0 0c          	shl    $0xc,%rax
  800421c4de:	c9                   	leaveq 
  800421c4df:	c3                   	retq   

000000800421c4e0 <page2kva>:
  800421c4e0:	55                   	push   %rbp
  800421c4e1:	48 89 e5             	mov    %rsp,%rbp
  800421c4e4:	48 83 ec 20          	sub    $0x20,%rsp
  800421c4e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421c4ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c4f0:	48 89 c7             	mov    %rax,%rdi
  800421c4f3:	48 b8 bb c4 21 04 80 	movabs $0x800421c4bb,%rax
  800421c4fa:	00 00 00 
  800421c4fd:	ff d0                	callq  *%rax
  800421c4ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c507:	48 c1 e8 0c          	shr    $0xc,%rax
  800421c50b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421c50e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421c511:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800421c518:	00 00 00 
  800421c51b:	48 8b 00             	mov    (%rax),%rax
  800421c51e:	48 39 c2             	cmp    %rax,%rdx
  800421c521:	72 32                	jb     800421c555 <page2kva+0x75>
  800421c523:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c527:	48 89 c1             	mov    %rax,%rcx
  800421c52a:	48 ba 28 04 22 04 80 	movabs $0x8004220428,%rdx
  800421c531:	00 00 00 
  800421c534:	be 62 00 00 00       	mov    $0x62,%esi
  800421c539:	48 bf 4b 04 22 04 80 	movabs $0x800422044b,%rdi
  800421c540:	00 00 00 
  800421c543:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c548:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c54f:	00 00 00 
  800421c552:	41 ff d0             	callq  *%r8
  800421c555:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421c55c:	00 00 00 
  800421c55f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c563:	48 01 d0             	add    %rdx,%rax
  800421c566:	c9                   	leaveq 
  800421c567:	c3                   	retq   

000000800421c568 <vmx_get_vmdisk_number>:
#include <kern/env.h>
#include <kern/cpu.h>

static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421c568:	55                   	push   %rbp
  800421c569:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421c56c:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421c573:	00 00 00 
  800421c576:	8b 00                	mov    (%rax),%eax
}
  800421c578:	5d                   	pop    %rbp
  800421c579:	c3                   	retq   

000000800421c57a <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421c57a:	55                   	push   %rbp
  800421c57b:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421c57e:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421c585:	00 00 00 
  800421c588:	8b 00                	mov    (%rax),%eax
  800421c58a:	8d 50 01             	lea    0x1(%rax),%edx
  800421c58d:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421c594:	00 00 00 
  800421c597:	89 10                	mov    %edx,(%rax)
}
  800421c599:	5d                   	pop    %rbp
  800421c59a:	c3                   	retq   

000000800421c59b <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421c59b:	55                   	push   %rbp
  800421c59c:	48 89 e5             	mov    %rsp,%rbp
  800421c59f:	48 83 ec 28          	sub    $0x28,%rsp
  800421c5a3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421c5a6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421c5aa:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421c5ad:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421c5b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c5b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421c5b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421c5c0:	eb 21                	jmp    800421c5e3 <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421c5c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c5c6:	8b 00                	mov    (%rax),%eax
  800421c5c8:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421c5cb:	75 12                	jne    800421c5df <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421c5cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c5d1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421c5d5:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421c5d8:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c5dd:	eb 11                	jmp    800421c5f0 <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421c5df:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421c5e3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c5e6:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421c5e9:	7c d7                	jl     800421c5c2 <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421c5eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c5f0:	c9                   	leaveq 
  800421c5f1:	c3                   	retq   

000000800421c5f2 <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421c5f2:	55                   	push   %rbp
  800421c5f3:	48 89 e5             	mov    %rsp,%rbp
  800421c5f6:	48 83 ec 38          	sub    $0x38,%rsp
  800421c5fa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421c5fe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421c602:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421c605:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421c60c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421c60f:	89 c7                	mov    %eax,%edi
  800421c611:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c618:	00 00 00 
  800421c61b:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421c61d:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421c620:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421c624:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421c62b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c62e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421c631:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421c634:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c637:	48 89 d6             	mov    %rdx,%rsi
  800421c63a:	89 c7                	mov    %eax,%edi
  800421c63c:	48 b8 4f c4 21 04 80 	movabs $0x800421c44f,%rax
  800421c643:	00 00 00 
  800421c646:	ff d0                	callq  *%rax
  800421c648:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421c64f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c652:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421c655:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421c658:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c65b:	48 89 d6             	mov    %rdx,%rsi
  800421c65e:	89 c7                	mov    %eax,%edi
  800421c660:	48 b8 4f c4 21 04 80 	movabs $0x800421c44f,%rax
  800421c667:	00 00 00 
  800421c66a:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421c66c:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421c671:	c9                   	leaveq 
  800421c672:	c3                   	retq   

000000800421c673 <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421c673:	55                   	push   %rbp
  800421c674:	48 89 e5             	mov    %rsp,%rbp
  800421c677:	48 83 ec 48          	sub    $0x48,%rsp
  800421c67b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421c67f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421c683:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421c686:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421c68d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421c690:	89 c7                	mov    %eax,%edi
  800421c692:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c699:	00 00 00 
  800421c69c:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421c69e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421c6a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c6a6:	25 00 02 00 00       	and    $0x200,%eax
  800421c6ab:	48 85 c0             	test   %rax,%rax
  800421c6ae:	75 45                	jne    800421c6f5 <handle_interrupts+0x82>
  800421c6b0:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421c6b7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c6ba:	89 c7                	mov    %eax,%edi
  800421c6bc:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c6c3:	00 00 00 
  800421c6c6:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421c6c8:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421c6cb:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421c6cf:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421c6d6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c6d9:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421c6dc:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421c6df:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421c6e2:	48 89 d6             	mov    %rdx,%rsi
  800421c6e5:	89 c7                	mov    %eax,%edi
  800421c6e7:	48 b8 4f c4 21 04 80 	movabs $0x800421c44f,%rax
  800421c6ee:	00 00 00 
  800421c6f1:	ff d0                	callq  *%rax
  800421c6f3:	eb 24                	jmp    800421c719 <handle_interrupts+0xa6>
  800421c6f5:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421c6fc:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c6ff:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421c702:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421c705:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421c708:	48 89 d6             	mov    %rdx,%rsi
  800421c70b:	89 c7                	mov    %eax,%edi
  800421c70d:	48 b8 4f c4 21 04 80 	movabs $0x800421c44f,%rax
  800421c714:	00 00 00 
  800421c717:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421c719:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421c71e:	c9                   	leaveq 
  800421c71f:	c3                   	retq   

000000800421c720 <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421c720:	55                   	push   %rbp
  800421c721:	48 89 e5             	mov    %rsp,%rbp
  800421c724:	53                   	push   %rbx
  800421c725:	48 83 ec 48          	sub    $0x48,%rsp
  800421c729:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421c72d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421c731:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c735:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421c739:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421c73d:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421c742:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c746:	0f 85 d0 00 00 00    	jne    800421c81c <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421c74c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c750:	8b 50 28             	mov    0x28(%rax),%edx
  800421c753:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c757:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421c75b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c75f:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421c763:	89 c7                	mov    %eax,%edi
  800421c765:	48 b8 9b c5 21 04 80 	movabs $0x800421c59b,%rax
  800421c76c:	00 00 00 
  800421c76f:	ff d0                	callq  *%rax
  800421c771:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421c774:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421c778:	83 f0 01             	xor    $0x1,%eax
  800421c77b:	84 c0                	test   %al,%al
  800421c77d:	74 35                	je     800421c7b4 <handle_rdmsr+0x94>
  800421c77f:	48 b9 5a 04 22 04 80 	movabs $0x800422045a,%rcx
  800421c786:	00 00 00 
  800421c789:	48 ba 5c 04 22 04 80 	movabs $0x800422045c,%rdx
  800421c790:	00 00 00 
  800421c793:	be 59 00 00 00       	mov    $0x59,%esi
  800421c798:	48 bf 71 04 22 04 80 	movabs $0x8004220471,%rdi
  800421c79f:	00 00 00 
  800421c7a2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c7a7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c7ae:	00 00 00 
  800421c7b1:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421c7b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421c7b8:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421c7bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421c7c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c7c4:	48 c1 e0 20          	shl    $0x20,%rax
  800421c7c8:	48 89 c2             	mov    %rax,%rdx
  800421c7cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c7cf:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421c7d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c7d7:	89 c2                	mov    %eax,%edx
  800421c7d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c7dd:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421c7e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c7e5:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421c7ec:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421c7f3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421c7f6:	89 c7                	mov    %eax,%edi
  800421c7f8:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c7ff:	00 00 00 
  800421c802:	ff d0                	callq  *%rax
  800421c804:	89 c0                	mov    %eax,%eax
  800421c806:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421c80a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c80e:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421c815:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c81a:	eb 05                	jmp    800421c821 <handle_rdmsr+0x101>
	}

	return false;
  800421c81c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c821:	48 83 c4 48          	add    $0x48,%rsp
  800421c825:	5b                   	pop    %rbx
  800421c826:	5d                   	pop    %rbp
  800421c827:	c3                   	retq   

000000800421c828 <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421c828:	55                   	push   %rbp
  800421c829:	48 89 e5             	mov    %rsp,%rbp
  800421c82c:	53                   	push   %rbx
  800421c82d:	48 83 ec 58          	sub    $0x58,%rsp
  800421c831:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421c835:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421c839:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c83d:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421c841:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421c845:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421c84a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c84e:	0f 85 34 01 00 00    	jne    800421c988 <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421c854:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421c858:	8b 50 28             	mov    0x28(%rax),%edx
  800421c85b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421c85f:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421c863:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421c867:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421c86b:	89 c7                	mov    %eax,%edi
  800421c86d:	48 b8 9b c5 21 04 80 	movabs $0x800421c59b,%rax
  800421c874:	00 00 00 
  800421c877:	ff d0                	callq  *%rax
  800421c879:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421c87c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421c880:	83 f0 01             	xor    $0x1,%eax
  800421c883:	84 c0                	test   %al,%al
  800421c885:	74 35                	je     800421c8bc <handle_wrmsr+0x94>
  800421c887:	48 b9 5a 04 22 04 80 	movabs $0x800422045a,%rcx
  800421c88e:	00 00 00 
  800421c891:	48 ba 5c 04 22 04 80 	movabs $0x800422045c,%rdx
  800421c898:	00 00 00 
  800421c89b:	be 6f 00 00 00       	mov    $0x6f,%esi
  800421c8a0:	48 bf 71 04 22 04 80 	movabs $0x8004220471,%rdi
  800421c8a7:	00 00 00 
  800421c8aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c8af:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c8b6:	00 00 00 
  800421c8b9:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421c8bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c8c0:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421c8c4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421c8c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c8cc:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421c8d0:	48 c1 e0 20          	shl    $0x20,%rax
  800421c8d4:	48 89 c2             	mov    %rax,%rdx
  800421c8d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c8db:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421c8df:	48 09 d0             	or     %rdx,%rax
  800421c8e2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421c8e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c8ea:	25 00 01 00 00       	and    $0x100,%eax
  800421c8ef:	48 85 c0             	test   %rax,%rax
  800421c8f2:	75 4d                	jne    800421c941 <handle_wrmsr+0x119>
  800421c8f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c8f8:	25 00 01 00 00       	and    $0x100,%eax
  800421c8fd:	48 85 c0             	test   %rax,%rax
  800421c900:	74 3f                	je     800421c941 <handle_wrmsr+0x119>
  800421c902:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421c909:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421c90c:	89 c7                	mov    %eax,%edi
  800421c90e:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c915:	00 00 00 
  800421c918:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421c91a:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421c91d:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421c924:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c927:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421c92a:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421c92d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c930:	48 89 d6             	mov    %rdx,%rsi
  800421c933:	89 c7                	mov    %eax,%edi
  800421c935:	48 b8 4f c4 21 04 80 	movabs $0x800421c44f,%rax
  800421c93c:	00 00 00 
  800421c93f:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421c941:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c945:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421c949:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421c94d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c951:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421c958:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421c95f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c962:	89 c7                	mov    %eax,%edi
  800421c964:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c96b:	00 00 00 
  800421c96e:	ff d0                	callq  *%rax
  800421c970:	89 c0                	mov    %eax,%eax
  800421c972:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421c976:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c97a:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421c981:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c986:	eb 05                	jmp    800421c98d <handle_wrmsr+0x165>
	}

	return false;
  800421c988:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c98d:	48 83 c4 58          	add    $0x58,%rsp
  800421c991:	5b                   	pop    %rbx
  800421c992:	5d                   	pop    %rbp
  800421c993:	c3                   	retq   

000000800421c994 <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421c994:	55                   	push   %rbp
  800421c995:	48 89 e5             	mov    %rsp,%rbp
  800421c998:	53                   	push   %rbx
  800421c999:	48 83 ec 48          	sub    $0x48,%rsp
  800421c99d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421c9a1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421c9a5:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421c9ac:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c9af:	89 c7                	mov    %eax,%edi
  800421c9b1:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421c9b8:	00 00 00 
  800421c9bb:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421c9bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421c9c1:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421c9c8:	00 
  800421c9c9:	76 1f                	jbe    800421c9ea <handle_eptviolation+0x56>
  800421c9cb:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421c9d2:	00 
  800421c9d3:	0f 86 f9 00 00 00    	jbe    800421cad2 <handle_eptviolation+0x13e>
  800421c9d9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c9dd:	48 8b 00             	mov    (%rax),%rax
  800421c9e0:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421c9e4:	0f 86 e8 00 00 00    	jbe    800421cad2 <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421c9ea:	bf 00 00 00 00       	mov    $0x0,%edi
  800421c9ef:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421c9f6:	00 00 00 
  800421c9f9:	ff d0                	callq  *%rax
  800421c9fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421c9ff:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421ca04:	75 25                	jne    800421ca2b <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421ca06:	48 bf 80 04 22 04 80 	movabs $0x8004220480,%rdi
  800421ca0d:	00 00 00 
  800421ca10:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ca15:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ca1c:	00 00 00 
  800421ca1f:	ff d2                	callq  *%rdx
			return false;
  800421ca21:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ca26:	e9 54 01 00 00       	jmpq   800421cb7f <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421ca2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ca2f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ca33:	8d 50 01             	lea    0x1(%rax),%edx
  800421ca36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ca3a:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421ca3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ca42:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421ca46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ca4a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421ca50:	48 89 c3             	mov    %rax,%rbx
  800421ca53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ca57:	48 89 c7             	mov    %rax,%rdi
  800421ca5a:	48 b8 e0 c4 21 04 80 	movabs $0x800421c4e0,%rax
  800421ca61:	00 00 00 
  800421ca64:	ff d0                	callq  *%rax
  800421ca66:	48 89 c6             	mov    %rax,%rsi
  800421ca69:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ca6d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421ca73:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421ca78:	48 89 da             	mov    %rbx,%rdx
  800421ca7b:	48 89 c7             	mov    %rax,%rdi
  800421ca7e:	48 b8 00 97 21 04 80 	movabs $0x8004219700,%rax
  800421ca85:	00 00 00 
  800421ca88:	ff d0                	callq  *%rax
  800421ca8a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421ca8d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421ca91:	79 35                	jns    800421cac8 <handle_eptviolation+0x134>
  800421ca93:	48 b9 d0 04 22 04 80 	movabs $0x80042204d0,%rcx
  800421ca9a:	00 00 00 
  800421ca9d:	48 ba 5c 04 22 04 80 	movabs $0x800422045c,%rdx
  800421caa4:	00 00 00 
  800421caa7:	be 93 00 00 00       	mov    $0x93,%esi
  800421caac:	48 bf 71 04 22 04 80 	movabs $0x8004220471,%rdi
  800421cab3:	00 00 00 
  800421cab6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cabb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cac2:	00 00 00 
  800421cac5:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421cac8:	b8 01 00 00 00       	mov    $0x1,%eax
  800421cacd:	e9 ad 00 00 00       	jmpq   800421cb7f <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421cad2:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421cad9:	00 
  800421cada:	76 7c                	jbe    800421cb58 <handle_eptviolation+0x1c4>
  800421cadc:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421cae3:	00 
  800421cae4:	77 72                	ja     800421cb58 <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421cae6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421caea:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421caf0:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421caf5:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421cafa:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421cb01:	00 00 00 
  800421cb04:	48 89 c7             	mov    %rax,%rdi
  800421cb07:	48 b8 00 97 21 04 80 	movabs $0x8004219700,%rax
  800421cb0e:	00 00 00 
  800421cb11:	ff d0                	callq  *%rax
  800421cb13:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421cb16:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421cb1a:	79 35                	jns    800421cb51 <handle_eptviolation+0x1bd>
  800421cb1c:	48 b9 d0 04 22 04 80 	movabs $0x80042204d0,%rcx
  800421cb23:	00 00 00 
  800421cb26:	48 ba 5c 04 22 04 80 	movabs $0x800422045c,%rdx
  800421cb2d:	00 00 00 
  800421cb30:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421cb35:	48 bf 71 04 22 04 80 	movabs $0x8004220471,%rdi
  800421cb3c:	00 00 00 
  800421cb3f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb44:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cb4b:	00 00 00 
  800421cb4e:	41 ff d0             	callq  *%r8
		return true;
  800421cb51:	b8 01 00 00 00       	mov    $0x1,%eax
  800421cb56:	eb 27                	jmp    800421cb7f <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421cb58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421cb5c:	48 89 c6             	mov    %rax,%rsi
  800421cb5f:	48 bf d8 04 22 04 80 	movabs $0x80042204d8,%rdi
  800421cb66:	00 00 00 
  800421cb69:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb6e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cb75:	00 00 00 
  800421cb78:	ff d2                	callq  *%rdx
	return false;
  800421cb7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421cb7f:	48 83 c4 48          	add    $0x48,%rsp
  800421cb83:	5b                   	pop    %rbx
  800421cb84:	5d                   	pop    %rbp
  800421cb85:	c3                   	retq   

000000800421cb86 <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421cb86:	55                   	push   %rbp
  800421cb87:	48 89 e5             	mov    %rsp,%rbp
  800421cb8a:	53                   	push   %rbx
  800421cb8b:	48 83 ec 38          	sub    $0x38,%rsp
  800421cb8f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421cb93:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421cb97:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421cb9e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421cba1:	89 c7                	mov    %eax,%edi
  800421cba3:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421cbaa:	00 00 00 
  800421cbad:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421cbaf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421cbb3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421cbb7:	48 c1 e8 10          	shr    $0x10,%rax
  800421cbbb:	25 ff ff 00 00       	and    $0xffff,%eax
  800421cbc0:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421cbc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421cbc7:	48 c1 e8 03          	shr    $0x3,%rax
  800421cbcb:	83 e0 01             	and    $0x1,%eax
  800421cbce:	48 85 c0             	test   %rax,%rax
  800421cbd1:	0f 95 c0             	setne  %al
  800421cbd4:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421cbd7:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421cbdb:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421cbdf:	75 2e                	jne    800421cc0f <handle_ioinstr+0x89>
		if(!is_in) {
  800421cbe1:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421cbe5:	83 f0 01             	xor    $0x1,%eax
  800421cbe8:	84 c0                	test   %al,%al
  800421cbea:	0f 84 fa 00 00 00    	je     800421ccea <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421cbf0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cbf4:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421cbf8:	89 c2                	mov    %eax,%edx
  800421cbfa:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cc01:	00 00 00 
  800421cc04:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421cc06:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cc0a:	e9 db 00 00 00       	jmpq   800421ccea <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421cc0f:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421cc13:	0f 85 d1 00 00 00    	jne    800421ccea <handle_ioinstr+0x164>
		if(is_in) {
  800421cc19:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421cc1d:	0f 84 c7 00 00 00    	je     800421ccea <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421cc23:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cc2a:	00 00 00 
  800421cc2d:	8b 00                	mov    (%rax),%eax
  800421cc2f:	83 f8 15             	cmp    $0x15,%eax
  800421cc32:	75 15                	jne    800421cc49 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421cc34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cc38:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421cc3f:	00 
				handled = true;
  800421cc40:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cc44:	e9 a1 00 00 00       	jmpq   800421ccea <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421cc49:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cc50:	00 00 00 
  800421cc53:	8b 00                	mov    (%rax),%eax
  800421cc55:	83 f8 16             	cmp    $0x16,%eax
  800421cc58:	75 12                	jne    800421cc6c <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421cc5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cc5e:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421cc65:	00 
				handled = true;
  800421cc66:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cc6a:	eb 7e                	jmp    800421ccea <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421cc6c:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cc73:	00 00 00 
  800421cc76:	8b 00                	mov    (%rax),%eax
  800421cc78:	83 f8 17             	cmp    $0x17,%eax
  800421cc7b:	75 2a                	jne    800421cca7 <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421cc7d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421cc81:	48 8b 00             	mov    (%rax),%rax
  800421cc84:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421cc8b:	48 85 c0             	test   %rax,%rax
  800421cc8e:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421cc92:	48 c1 f8 0a          	sar    $0xa,%rax
  800421cc96:	0f b6 d0             	movzbl %al,%edx
  800421cc99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cc9d:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421cca1:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cca5:	eb 43                	jmp    800421ccea <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421cca7:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421ccae:	00 00 00 
  800421ccb1:	8b 00                	mov    (%rax),%eax
  800421ccb3:	83 f8 18             	cmp    $0x18,%eax
  800421ccb6:	75 32                	jne    800421ccea <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421ccb8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ccbc:	48 8b 00             	mov    (%rax),%rax
  800421ccbf:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421ccc6:	48 85 c0             	test   %rax,%rax
  800421ccc9:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421cccd:	48 c1 f8 0a          	sar    $0xa,%rax
  800421ccd1:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421ccd7:	48 c1 f8 08          	sar    $0x8,%rax
  800421ccdb:	0f b6 d0             	movzbl %al,%edx
  800421ccde:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cce2:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421cce6:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421ccea:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421ccee:	74 3b                	je     800421cd2b <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421ccf0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ccf4:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421ccfb:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421cd02:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421cd05:	89 c7                	mov    %eax,%edi
  800421cd07:	48 b8 75 c4 21 04 80 	movabs $0x800421c475,%rax
  800421cd0e:	00 00 00 
  800421cd11:	ff d0                	callq  *%rax
  800421cd13:	89 c0                	mov    %eax,%eax
  800421cd15:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421cd19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cd1d:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421cd24:	b8 01 00 00 00       	mov    $0x1,%eax
  800421cd29:	eb 33                	jmp    800421cd5e <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421cd2b:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cd32:	00 00 00 
  800421cd35:	8b 10                	mov    (%rax),%edx
  800421cd37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421cd3b:	48 89 c6             	mov    %rax,%rsi
  800421cd3e:	48 bf 02 05 22 04 80 	movabs $0x8004220502,%rdi
  800421cd45:	00 00 00 
  800421cd48:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cd4d:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421cd54:	00 00 00 
  800421cd57:	ff d1                	callq  *%rcx
		return false;
  800421cd59:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421cd5e:	48 83 c4 38          	add    $0x38,%rsp
  800421cd62:	5b                   	pop    %rbx
  800421cd63:	5d                   	pop    %rbp
  800421cd64:	c3                   	retq   

000000800421cd65 <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421cd65:	55                   	push   %rbp
  800421cd66:	48 89 e5             	mov    %rsp,%rbp
  800421cd69:	48 83 ec 10          	sub    $0x10,%rsp
  800421cd6d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421cd71:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	/* Your code here  */
    panic("handle_cpuid is not impemented\n");
  800421cd75:	48 ba 10 05 22 04 80 	movabs $0x8004220510,%rdx
  800421cd7c:	00 00 00 
  800421cd7f:	be d9 00 00 00       	mov    $0xd9,%esi
  800421cd84:	48 bf 71 04 22 04 80 	movabs $0x8004220471,%rdi
  800421cd8b:	00 00 00 
  800421cd8e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cd93:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421cd9a:	00 00 00 
  800421cd9d:	ff d1                	callq  *%rcx

000000800421cd9f <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421cd9f:	55                   	push   %rbp
  800421cda0:	48 89 e5             	mov    %rsp,%rbp
  800421cda3:	48 83 ec 70          	sub    $0x70,%rsp
  800421cda7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421cdab:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421cdaf:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	bool handled = false;
  800421cdb3:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
	int perm, r;
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000;
  800421cdb7:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421cdbe:	00 
	switch(tf->tf_regs.reg_rax) {
  800421cdbf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421cdc3:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421cdc7:	48 83 f8 06          	cmp    $0x6,%rax
  800421cdcb:	0f 87 c1 00 00 00    	ja     800421ce92 <handle_vmcall+0xf3>
  800421cdd1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421cdd8:	00 
  800421cdd9:	48 b8 88 05 22 04 80 	movabs $0x8004220588,%rax
  800421cde0:	00 00 00 
  800421cde3:	48 01 d0             	add    %rdx,%rax
  800421cde6:	48 8b 00             	mov    (%rax),%rax
  800421cde9:	ff e0                	jmpq   *%rax
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		break;
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421cdeb:	48 b8 c7 79 21 04 80 	movabs $0x80042179c7,%rax
  800421cdf2:	00 00 00 
  800421cdf5:	ff d0                	callq  *%rax
		handled = true;
  800421cdf7:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421cdfb:	e9 92 00 00 00       	jmpq   800421ce92 <handle_vmcall+0xf3>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421ce00:	48 bf 30 05 22 04 80 	movabs $0x8004220530,%rdi
  800421ce07:	00 00 00 
  800421ce0a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ce0f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ce16:	00 00 00 
  800421ce19:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421ce1b:	48 b8 92 79 21 04 80 	movabs $0x8004217992,%rax
  800421ce22:	00 00 00 
  800421ce25:	ff d0                	callq  *%rax
  800421ce27:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ce2e:	00 00 00 
  800421ce31:	48 98                	cltq   
  800421ce33:	48 c1 e0 03          	shl    $0x3,%rax
  800421ce37:	48 89 c1             	mov    %rax,%rcx
  800421ce3a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ce3e:	48 01 c8             	add    %rcx,%rax
  800421ce41:	48 01 d0             	add    %rdx,%rax
  800421ce44:	48 83 c0 08          	add    $0x8,%rax
  800421ce48:	48 8b 00             	mov    (%rax),%rax
  800421ce4b:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421ce52:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421ce55:	be 00 00 00 00       	mov    $0x0,%esi
  800421ce5a:	48 bf 10 c1 4b 04 80 	movabs $0x80044bc110,%rdi
  800421ce61:	00 00 00 
  800421ce64:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  800421ce6b:	00 00 00 
  800421ce6e:	ff d0                	callq  *%rax
		handled = true;
  800421ce70:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;	
  800421ce74:	eb 1c                	jmp    800421ce92 <handle_vmcall+0xf3>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421ce76:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421ce7d:	00 00 00 
  800421ce80:	8b 00                	mov    (%rax),%eax
  800421ce82:	48 63 d0             	movslq %eax,%rdx
  800421ce85:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421ce89:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421ce8d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421ce91:	90                   	nop
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
	}
	return handled;
  800421ce92:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
  800421ce96:	c9                   	leaveq 
  800421ce97:	c3                   	retq   
